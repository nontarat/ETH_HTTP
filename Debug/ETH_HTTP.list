
ETH_HTTP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ec0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c44  08015160  08015160  00025160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08018da4  08018da4  00028da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08018da8  08018da8  00028da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  24000000  08018dac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000036b0  24000094  08018e40  00030094  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24003744  08018e40  00033744  2**0
                  ALLOC
  8 .lwip_sec     00044b83  30000000  30000000  00040000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 10 .debug_info   000237fa  00000000  00000000  000300c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000576d  00000000  00000000  000538bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017d8  00000000  00000000  00059030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000016e8  00000000  00000000  0005a808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000457c0  00000000  00000000  0005bef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002992d  00000000  00000000  000a16b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017f52b  00000000  00000000  000cafdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0024a508  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000069f8  00000000  00000000  0024a558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000094 	.word	0x24000094
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015148 	.word	0x08015148

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000098 	.word	0x24000098
 80002dc:	08015148 	.word	0x08015148

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003b6:	f000 fcdd 	bl	8000d74 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ba:	4b3b      	ldr	r3, [pc, #236]	; (80004a8 <main+0xf8>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d11b      	bne.n	80003fe <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003c6:	f3bf 8f4f 	dsb	sy
}
 80003ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003cc:	f3bf 8f6f 	isb	sy
}
 80003d0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003d2:	4b35      	ldr	r3, [pc, #212]	; (80004a8 <main+0xf8>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003da:	f3bf 8f4f 	dsb	sy
}
 80003de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003e0:	f3bf 8f6f 	isb	sy
}
 80003e4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003e6:	4b30      	ldr	r3, [pc, #192]	; (80004a8 <main+0xf8>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a2f      	ldr	r2, [pc, #188]	; (80004a8 <main+0xf8>)
 80003ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003f2:	f3bf 8f4f 	dsb	sy
}
 80003f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003f8:	f3bf 8f6f 	isb	sy
}
 80003fc:	e000      	b.n	8000400 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003fe:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000400:	4b29      	ldr	r3, [pc, #164]	; (80004a8 <main+0xf8>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000408:	2b00      	cmp	r3, #0
 800040a:	d138      	bne.n	800047e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800040c:	4b26      	ldr	r3, [pc, #152]	; (80004a8 <main+0xf8>)
 800040e:	2200      	movs	r2, #0
 8000410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000414:	f3bf 8f4f 	dsb	sy
}
 8000418:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800041a:	4b23      	ldr	r3, [pc, #140]	; (80004a8 <main+0xf8>)
 800041c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000420:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	0b5b      	lsrs	r3, r3, #13
 8000426:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800042a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	08db      	lsrs	r3, r3, #3
 8000430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000434:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	015a      	lsls	r2, r3, #5
 800043a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800043e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000444:	4918      	ldr	r1, [pc, #96]	; (80004a8 <main+0xf8>)
 8000446:	4313      	orrs	r3, r2
 8000448:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	1e5a      	subs	r2, r3, #1
 8000450:	607a      	str	r2, [r7, #4]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d1ef      	bne.n	8000436 <main+0x86>
    } while(sets-- != 0U);
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	1e5a      	subs	r2, r3, #1
 800045a:	60ba      	str	r2, [r7, #8]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d1e5      	bne.n	800042c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000460:	f3bf 8f4f 	dsb	sy
}
 8000464:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <main+0xf8>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a0f      	ldr	r2, [pc, #60]	; (80004a8 <main+0xf8>)
 800046c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000470:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000472:	f3bf 8f4f 	dsb	sy
}
 8000476:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000478:	f3bf 8f6f 	isb	sy
}
 800047c:	e000      	b.n	8000480 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800047e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000480:	f001 f890 	bl	80015a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000484:	f000 f814 	bl	80004b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000488:	f000 f8fa 	bl	8000680 <MX_GPIO_Init>
  MX_ADC3_Init();
 800048c:	f000 f894 	bl	80005b8 <MX_ADC3_Init>
  MX_LWIP_Init();
 8000490:	f007 fccc 	bl	8007e2c <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  httpd_init();
 8000494:	f009 f86c 	bl	8009570 <httpd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  MX_LWIP_Process();
 8000498:	f007 fe14 	bl	80080c4 <MX_LWIP_Process>
	  ethernetif_input(&gnetif);
 800049c:	4803      	ldr	r0, [pc, #12]	; (80004ac <main+0xfc>)
 800049e:	f007 ff5b 	bl	8008358 <ethernetif_input>
		  sys_check_timeouts();
 80004a2:	f011 f8ad 	bl	8011600 <sys_check_timeouts>
	  MX_LWIP_Process();
 80004a6:	e7f7      	b.n	8000498 <main+0xe8>
 80004a8:	e000ed00 	.word	0xe000ed00
 80004ac:	24000120 	.word	0x24000120

080004b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b09c      	sub	sp, #112	; 0x70
 80004b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ba:	224c      	movs	r2, #76	; 0x4c
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f013 fdc8 	bl	8014054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	2220      	movs	r2, #32
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f013 fdc2 	bl	8014054 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004d0:	2002      	movs	r0, #2
 80004d2:	f003 ffa3 	bl	800441c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004d6:	2300      	movs	r3, #0
 80004d8:	603b      	str	r3, [r7, #0]
 80004da:	4b34      	ldr	r3, [pc, #208]	; (80005ac <SystemClock_Config+0xfc>)
 80004dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004de:	4a33      	ldr	r2, [pc, #204]	; (80005ac <SystemClock_Config+0xfc>)
 80004e0:	f023 0301 	bic.w	r3, r3, #1
 80004e4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004e6:	4b31      	ldr	r3, [pc, #196]	; (80005ac <SystemClock_Config+0xfc>)
 80004e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	4b2f      	ldr	r3, [pc, #188]	; (80005b0 <SystemClock_Config+0x100>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a2e      	ldr	r2, [pc, #184]	; (80005b0 <SystemClock_Config+0x100>)
 80004f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b2c      	ldr	r3, [pc, #176]	; (80005b0 <SystemClock_Config+0x100>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000504:	603b      	str	r3, [r7, #0]
 8000506:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000508:	bf00      	nop
 800050a:	4b29      	ldr	r3, [pc, #164]	; (80005b0 <SystemClock_Config+0x100>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000516:	d1f8      	bne.n	800050a <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000518:	4b26      	ldr	r3, [pc, #152]	; (80005b4 <SystemClock_Config+0x104>)
 800051a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800051c:	f023 0303 	bic.w	r3, r3, #3
 8000520:	4a24      	ldr	r2, [pc, #144]	; (80005b4 <SystemClock_Config+0x104>)
 8000522:	f043 0302 	orr.w	r3, r3, #2
 8000526:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000528:	2301      	movs	r3, #1
 800052a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800052c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000530:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000532:	2302      	movs	r3, #2
 8000534:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000536:	2302      	movs	r3, #2
 8000538:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800053a:	2306      	movs	r3, #6
 800053c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 800053e:	23c0      	movs	r3, #192	; 0xc0
 8000540:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000542:	2302      	movs	r3, #2
 8000544:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000546:	2304      	movs	r3, #4
 8000548:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800054a:	2302      	movs	r3, #2
 800054c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800054e:	2308      	movs	r3, #8
 8000550:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000552:	2300      	movs	r3, #0
 8000554:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055e:	4618      	mov	r0, r3
 8000560:	f003 ff96 	bl	8004490 <HAL_RCC_OscConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800056a:	f000 fc55 	bl	8000e18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056e:	233f      	movs	r3, #63	; 0x3f
 8000570:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000572:	2303      	movs	r3, #3
 8000574:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800057a:	2308      	movs	r3, #8
 800057c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800057e:	2340      	movs	r3, #64	; 0x40
 8000580:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000582:	2340      	movs	r3, #64	; 0x40
 8000584:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800058a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800058c:	2340      	movs	r3, #64	; 0x40
 800058e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2102      	movs	r1, #2
 8000594:	4618      	mov	r0, r3
 8000596:	f004 fbd5 	bl	8004d44 <HAL_RCC_ClockConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80005a0:	f000 fc3a 	bl	8000e18 <Error_Handler>
  }
}
 80005a4:	bf00      	nop
 80005a6:	3770      	adds	r7, #112	; 0x70
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	58000400 	.word	0x58000400
 80005b0:	58024800 	.word	0x58024800
 80005b4:	58024400 	.word	0x58024400

080005b8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b088      	sub	sp, #32
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
 80005cc:	615a      	str	r2, [r3, #20]
 80005ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80005d0:	4b27      	ldr	r3, [pc, #156]	; (8000670 <MX_ADC3_Init+0xb8>)
 80005d2:	4a28      	ldr	r2, [pc, #160]	; (8000674 <MX_ADC3_Init+0xbc>)
 80005d4:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80005d6:	4b26      	ldr	r3, [pc, #152]	; (8000670 <MX_ADC3_Init+0xb8>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005dc:	4b24      	ldr	r3, [pc, #144]	; (8000670 <MX_ADC3_Init+0xb8>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e2:	4b23      	ldr	r3, [pc, #140]	; (8000670 <MX_ADC3_Init+0xb8>)
 80005e4:	2204      	movs	r2, #4
 80005e6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80005e8:	4b21      	ldr	r3, [pc, #132]	; (8000670 <MX_ADC3_Init+0xb8>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80005ee:	4b20      	ldr	r3, [pc, #128]	; (8000670 <MX_ADC3_Init+0xb8>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <MX_ADC3_Init+0xb8>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80005fa:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <MX_ADC3_Init+0xb8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <MX_ADC3_Init+0xb8>)
 8000602:	2200      	movs	r2, #0
 8000604:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000606:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <MX_ADC3_Init+0xb8>)
 8000608:	2200      	movs	r2, #0
 800060a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <MX_ADC3_Init+0xb8>)
 800060e:	2200      	movs	r2, #0
 8000610:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <MX_ADC3_Init+0xb8>)
 8000614:	2200      	movs	r2, #0
 8000616:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <MX_ADC3_Init+0xb8>)
 800061a:	2200      	movs	r2, #0
 800061c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_ADC3_Init+0xb8>)
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000626:	4812      	ldr	r0, [pc, #72]	; (8000670 <MX_ADC3_Init+0xb8>)
 8000628:	f001 fa10 	bl	8001a4c <HAL_ADC_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000632:	f000 fbf1 	bl	8000e18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <MX_ADC3_Init+0xc0>)
 8000638:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800063a:	2306      	movs	r3, #6
 800063c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_ADC3_Init+0xc4>)
 8000644:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000646:	2304      	movs	r3, #4
 8000648:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800064e:	2300      	movs	r3, #0
 8000650:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4619      	mov	r1, r3
 8000656:	4806      	ldr	r0, [pc, #24]	; (8000670 <MX_ADC3_Init+0xb8>)
 8000658:	f001 fb9a 	bl	8001d90 <HAL_ADC_ConfigChannel>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8000662:	f000 fbd9 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	3720      	adds	r7, #32
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	240000b0 	.word	0x240000b0
 8000674:	58026000 	.word	0x58026000
 8000678:	04300002 	.word	0x04300002
 800067c:	47ff0000 	.word	0x47ff0000

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b090      	sub	sp, #64	; 0x40
 8000684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000696:	4bbd      	ldr	r3, [pc, #756]	; (800098c <MX_GPIO_Init+0x30c>)
 8000698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800069c:	4abb      	ldr	r2, [pc, #748]	; (800098c <MX_GPIO_Init+0x30c>)
 800069e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006a6:	4bb9      	ldr	r3, [pc, #740]	; (800098c <MX_GPIO_Init+0x30c>)
 80006a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80006b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b4:	4bb5      	ldr	r3, [pc, #724]	; (800098c <MX_GPIO_Init+0x30c>)
 80006b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ba:	4ab4      	ldr	r2, [pc, #720]	; (800098c <MX_GPIO_Init+0x30c>)
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006c4:	4bb1      	ldr	r3, [pc, #708]	; (800098c <MX_GPIO_Init+0x30c>)
 80006c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
 80006d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80006d2:	4bae      	ldr	r3, [pc, #696]	; (800098c <MX_GPIO_Init+0x30c>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d8:	4aac      	ldr	r2, [pc, #688]	; (800098c <MX_GPIO_Init+0x30c>)
 80006da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006e2:	4baa      	ldr	r3, [pc, #680]	; (800098c <MX_GPIO_Init+0x30c>)
 80006e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006ec:	623b      	str	r3, [r7, #32]
 80006ee:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006f0:	4ba6      	ldr	r3, [pc, #664]	; (800098c <MX_GPIO_Init+0x30c>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f6:	4aa5      	ldr	r2, [pc, #660]	; (800098c <MX_GPIO_Init+0x30c>)
 80006f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000700:	4ba2      	ldr	r3, [pc, #648]	; (800098c <MX_GPIO_Init+0x30c>)
 8000702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800070a:	61fb      	str	r3, [r7, #28]
 800070c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	4b9f      	ldr	r3, [pc, #636]	; (800098c <MX_GPIO_Init+0x30c>)
 8000710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000714:	4a9d      	ldr	r2, [pc, #628]	; (800098c <MX_GPIO_Init+0x30c>)
 8000716:	f043 0304 	orr.w	r3, r3, #4
 800071a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800071e:	4b9b      	ldr	r3, [pc, #620]	; (800098c <MX_GPIO_Init+0x30c>)
 8000720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000724:	f003 0304 	and.w	r3, r3, #4
 8000728:	61bb      	str	r3, [r7, #24]
 800072a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072c:	4b97      	ldr	r3, [pc, #604]	; (800098c <MX_GPIO_Init+0x30c>)
 800072e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000732:	4a96      	ldr	r2, [pc, #600]	; (800098c <MX_GPIO_Init+0x30c>)
 8000734:	f043 0310 	orr.w	r3, r3, #16
 8000738:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800073c:	4b93      	ldr	r3, [pc, #588]	; (800098c <MX_GPIO_Init+0x30c>)
 800073e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800074a:	4b90      	ldr	r3, [pc, #576]	; (800098c <MX_GPIO_Init+0x30c>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000750:	4a8e      	ldr	r2, [pc, #568]	; (800098c <MX_GPIO_Init+0x30c>)
 8000752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000756:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800075a:	4b8c      	ldr	r3, [pc, #560]	; (800098c <MX_GPIO_Init+0x30c>)
 800075c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000768:	4b88      	ldr	r3, [pc, #544]	; (800098c <MX_GPIO_Init+0x30c>)
 800076a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076e:	4a87      	ldr	r2, [pc, #540]	; (800098c <MX_GPIO_Init+0x30c>)
 8000770:	f043 0308 	orr.w	r3, r3, #8
 8000774:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000778:	4b84      	ldr	r3, [pc, #528]	; (800098c <MX_GPIO_Init+0x30c>)
 800077a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077e:	f003 0308 	and.w	r3, r3, #8
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	4b81      	ldr	r3, [pc, #516]	; (800098c <MX_GPIO_Init+0x30c>)
 8000788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078c:	4a7f      	ldr	r2, [pc, #508]	; (800098c <MX_GPIO_Init+0x30c>)
 800078e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000792:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000796:	4b7d      	ldr	r3, [pc, #500]	; (800098c <MX_GPIO_Init+0x30c>)
 8000798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	4b79      	ldr	r3, [pc, #484]	; (800098c <MX_GPIO_Init+0x30c>)
 80007a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007aa:	4a78      	ldr	r2, [pc, #480]	; (800098c <MX_GPIO_Init+0x30c>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b4:	4b75      	ldr	r3, [pc, #468]	; (800098c <MX_GPIO_Init+0x30c>)
 80007b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007c2:	4b72      	ldr	r3, [pc, #456]	; (800098c <MX_GPIO_Init+0x30c>)
 80007c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c8:	4a70      	ldr	r2, [pc, #448]	; (800098c <MX_GPIO_Init+0x30c>)
 80007ca:	f043 0320 	orr.w	r3, r3, #32
 80007ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007d2:	4b6e      	ldr	r3, [pc, #440]	; (800098c <MX_GPIO_Init+0x30c>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d8:	f003 0320 	and.w	r3, r3, #32
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e6:	486a      	ldr	r0, [pc, #424]	; (8000990 <MX_GPIO_Init+0x310>)
 80007e8:	f003 fdfe 	bl	80043e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2104      	movs	r1, #4
 80007f0:	4868      	ldr	r0, [pc, #416]	; (8000994 <MX_GPIO_Init+0x314>)
 80007f2:	f003 fdf9 	bl	80043e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007fc:	4866      	ldr	r0, [pc, #408]	; (8000998 <MX_GPIO_Init+0x318>)
 80007fe:	f003 fdf3 	bl	80043e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI6 PI5 PI4 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8000802:	23f0      	movs	r3, #240	; 0xf0
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000812:	230a      	movs	r3, #10
 8000814:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800081a:	4619      	mov	r1, r3
 800081c:	485c      	ldr	r0, [pc, #368]	; (8000990 <MX_GPIO_Init+0x310>)
 800081e:	f003 fc33 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN2_RX_Pin FDCAN2_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8000822:	f242 0320 	movw	r3, #8224	; 0x2020
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000834:	2309      	movs	r3, #9
 8000836:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000838:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800083c:	4619      	mov	r1, r3
 800083e:	4856      	ldr	r0, [pc, #344]	; (8000998 <MX_GPIO_Init+0x318>)
 8000840:	f003 fc22 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK5 PK4 PK6 PK3
                           PK7 PK2 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8000844:	23fc      	movs	r3, #252	; 0xfc
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000854:	230e      	movs	r3, #14
 8000856:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800085c:	4619      	mov	r1, r3
 800085e:	484f      	ldr	r0, [pc, #316]	; (800099c <MX_GPIO_Init+0x31c>)
 8000860:	f003 fc12 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000876:	230a      	movs	r3, #10
 8000878:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800087a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800087e:	4619      	mov	r1, r3
 8000880:	4847      	ldr	r0, [pc, #284]	; (80009a0 <MX_GPIO_Init+0x320>)
 8000882:	f003 fc01 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_D3_Pin SDIO1_CK_Pin SDIO1_D0_Pin
                           SDIO1_D1_Pin SDIO1_D7_Pin SDIO1_D6_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8000886:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDIO1_D1_Pin|SDIO1_D7_Pin|SDIO1_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000898:	230c      	movs	r3, #12
 800089a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008a0:	4619      	mov	r1, r3
 80008a2:	4840      	ldr	r0, [pc, #256]	; (80009a4 <MX_GPIO_Init+0x324>)
 80008a4:	f003 fbf0 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI0 PI9 PI12
                           PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 80008a8:	f24d 2303 	movw	r3, #53763	; 0xd203
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008ba:	230e      	movs	r3, #14
 80008bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008c2:	4619      	mov	r1, r3
 80008c4:	4832      	ldr	r0, [pc, #200]	; (8000990 <MX_GPIO_Init+0x310>)
 80008c6:	f003 fbdf 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE1 PE0 PE10 PE9
                           PE11 PE12 PE15 PE8
                           PE13 PE7 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80008ca:	f64f 7383 	movw	r3, #65411	; 0xff83
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d8:	2303      	movs	r3, #3
 80008da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008dc:	230c      	movs	r3, #12
 80008de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e4:	4619      	mov	r1, r3
 80008e6:	4830      	ldr	r0, [pc, #192]	; (80009a8 <MX_GPIO_Init+0x328>)
 80008e8:	f003 fbce 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008ec:	2340      	movs	r3, #64	; 0x40
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80008fc:	230a      	movs	r3, #10
 80008fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000900:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000904:	4619      	mov	r1, r3
 8000906:	4824      	ldr	r0, [pc, #144]	; (8000998 <MX_GPIO_Init+0x318>)
 8000908:	f003 fbbe 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800090c:	2310      	movs	r3, #16
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800091c:	2307      	movs	r3, #7
 800091e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000920:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000924:	4619      	mov	r1, r3
 8000926:	481c      	ldr	r0, [pc, #112]	; (8000998 <MX_GPIO_Init+0x318>)
 8000928:	f003 fbae 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DISP_Pin PJ14 PJ12 PJ13
                           PJ11 PJ10 PJ9 PJ0
                           PJ8 PJ7 PJ6 PJ1
                           PJ5 PJ3 PJ4 */
  GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 800092c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000930:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800093e:	230e      	movs	r3, #14
 8000940:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000942:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000946:	4619      	mov	r1, r3
 8000948:	4812      	ldr	r0, [pc, #72]	; (8000994 <MX_GPIO_Init+0x314>)
 800094a:	f003 fb9d 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800094e:	2308      	movs	r3, #8
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800095e:	2305      	movs	r3, #5
 8000960:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000966:	4619      	mov	r1, r3
 8000968:	4810      	ldr	r0, [pc, #64]	; (80009ac <MX_GPIO_Init+0x32c>)
 800096a:	f003 fb8d 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800096e:	2304      	movs	r3, #4
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800097e:	2305      	movs	r3, #5
 8000980:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000986:	4619      	mov	r1, r3
 8000988:	e012      	b.n	80009b0 <MX_GPIO_Init+0x330>
 800098a:	bf00      	nop
 800098c:	58024400 	.word	0x58024400
 8000990:	58022000 	.word	0x58022000
 8000994:	58022400 	.word	0x58022400
 8000998:	58020400 	.word	0x58020400
 800099c:	58022800 	.word	0x58022800
 80009a0:	58021800 	.word	0x58021800
 80009a4:	58020800 	.word	0x58020800
 80009a8:	58021000 	.word	0x58021000
 80009ac:	58020c00 	.word	0x58020c00
 80009b0:	48bc      	ldr	r0, [pc, #752]	; (8000ca4 <MX_GPIO_Init+0x624>)
 80009b2:	f003 fb69 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80009c8:	2303      	movs	r3, #3
 80009ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80009cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d0:	4619      	mov	r1, r3
 80009d2:	48b5      	ldr	r0, [pc, #724]	; (8000ca8 <MX_GPIO_Init+0x628>)
 80009d4:	f003 fb58 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN1_RX_Pin FDCAN1_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 80009d8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80009dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80009ea:	2309      	movs	r3, #9
 80009ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80009ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009f2:	4619      	mov	r1, r3
 80009f4:	48ac      	ldr	r0, [pc, #688]	; (8000ca8 <MX_GPIO_Init+0x628>)
 80009f6:	f003 fb47 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 80009fa:	2380      	movs	r3, #128	; 0x80
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fe:	2300      	movs	r3, #0
 8000a00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	48a7      	ldr	r0, [pc, #668]	; (8000cac <MX_GPIO_Init+0x62c>)
 8000a0e:	f003 fb3b 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8000a12:	2330      	movs	r3, #48	; 0x30
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8000a22:	230a      	movs	r3, #10
 8000a24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	48a0      	ldr	r0, [pc, #640]	; (8000cb0 <MX_GPIO_Init+0x630>)
 8000a2e:	f003 fb2b 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D5_Pin SDIO1_D4_Pin */
  GPIO_InitStruct.Pin = SDIO1_D5_Pin|SDIO1_D4_Pin;
 8000a32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000a44:	230c      	movs	r3, #12
 8000a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4899      	ldr	r0, [pc, #612]	; (8000cb4 <MX_GPIO_Init+0x634>)
 8000a50:	f003 fb1a 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG15 PG8 PG5 PG4
                           PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8000a54:	f248 1333 	movw	r3, #33075	; 0x8133
 8000a58:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a66:	230c      	movs	r3, #12
 8000a68:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4891      	ldr	r0, [pc, #580]	; (8000cb8 <MX_GPIO_Init+0x638>)
 8000a72:	f003 fb09 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000a76:	2304      	movs	r3, #4
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000a86:	230c      	movs	r3, #12
 8000a88:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4886      	ldr	r0, [pc, #536]	; (8000cac <MX_GPIO_Init+0x62c>)
 8000a92:	f003 faf9 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD15 PD14
                           PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8000a96:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aa8:	230c      	movs	r3, #12
 8000aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	487e      	ldr	r0, [pc, #504]	; (8000cac <MX_GPIO_Init+0x62c>)
 8000ab4:	f003 fae8 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS2_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin;
 8000ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTG_FS2_ID_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aca:	4619      	mov	r1, r3
 8000acc:	487b      	ldr	r0, [pc, #492]	; (8000cbc <MX_GPIO_Init+0x63c>)
 8000ace:	f003 fadb 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ad2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4876      	ldr	r0, [pc, #472]	; (8000cc0 <MX_GPIO_Init+0x640>)
 8000ae8:	f003 face 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000aec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000afe:	2301      	movs	r3, #1
 8000b00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b06:	4619      	mov	r1, r3
 8000b08:	486c      	ldr	r0, [pc, #432]	; (8000cbc <MX_GPIO_Init+0x63c>)
 8000b0a:	f003 fabd 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_P_Pin USB_OTG_FS2_N_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 8000b0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000b20:	230a      	movs	r3, #10
 8000b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4864      	ldr	r0, [pc, #400]	; (8000cbc <MX_GPIO_Init+0x63c>)
 8000b2c:	f003 faac 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF1 PF0 PF3
                           PF5 PF4 PF13 PF14
                           PF12 PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8000b30:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b42:	230c      	movs	r3, #12
 8000b44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	485d      	ldr	r0, [pc, #372]	; (8000cc4 <MX_GPIO_Init+0x644>)
 8000b4e:	f003 fa9b 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b68:	4619      	mov	r1, r3
 8000b6a:	484e      	ldr	r0, [pc, #312]	; (8000ca4 <MX_GPIO_Init+0x624>)
 8000b6c:	f003 fa8c 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000b70:	2304      	movs	r3, #4
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b74:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b82:	4619      	mov	r1, r3
 8000b84:	484c      	ldr	r0, [pc, #304]	; (8000cb8 <MX_GPIO_Init+0x638>)
 8000b86:	f003 fa7f 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	484a      	ldr	r0, [pc, #296]	; (8000cc8 <MX_GPIO_Init+0x648>)
 8000b9e:	f003 fa73 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000ba2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000bb4:	2309      	movs	r3, #9
 8000bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4841      	ldr	r0, [pc, #260]	; (8000cc4 <MX_GPIO_Init+0x644>)
 8000bc0:	f003 fa62 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	483a      	ldr	r0, [pc, #232]	; (8000cc0 <MX_GPIO_Init+0x640>)
 8000bd8:	f003 fa56 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000bee:	230a      	movs	r3, #10
 8000bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4832      	ldr	r0, [pc, #200]	; (8000cc4 <MX_GPIO_Init+0x644>)
 8000bfa:	f003 fa45 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH5 PH6 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bfe:	23e0      	movs	r3, #224	; 0xe0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c0e:	230c      	movs	r3, #12
 8000c10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c16:	4619      	mov	r1, r3
 8000c18:	4823      	ldr	r0, [pc, #140]	; (8000ca8 <MX_GPIO_Init+0x628>)
 8000c1a:	f003 fa35 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000c1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c30:	2307      	movs	r3, #7
 8000c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c38:	4619      	mov	r1, r3
 8000c3a:	481e      	ldr	r0, [pc, #120]	; (8000cb4 <MX_GPIO_Init+0x634>)
 8000c3c:	f003 fa24 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 8000c40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c54:	4619      	mov	r1, r3
 8000c56:	4814      	ldr	r0, [pc, #80]	; (8000ca8 <MX_GPIO_Init+0x628>)
 8000c58:	f003 fa16 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c5c:	2340      	movs	r3, #64	; 0x40
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8000c6c:	2309      	movs	r3, #9
 8000c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c74:	4619      	mov	r1, r3
 8000c76:	4811      	ldr	r0, [pc, #68]	; (8000cbc <MX_GPIO_Init+0x63c>)
 8000c78:	f003 fa06 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c8e:	230e      	movs	r3, #14
 8000c90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c96:	4619      	mov	r1, r3
 8000c98:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <MX_GPIO_Init+0x628>)
 8000c9a:	f003 f9f5 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ca2:	e013      	b.n	8000ccc <MX_GPIO_Init+0x64c>
 8000ca4:	58022000 	.word	0x58022000
 8000ca8:	58021c00 	.word	0x58021c00
 8000cac:	58020c00 	.word	0x58020c00
 8000cb0:	58021000 	.word	0x58021000
 8000cb4:	58020400 	.word	0x58020400
 8000cb8:	58021800 	.word	0x58021800
 8000cbc:	58020000 	.word	0x58020000
 8000cc0:	58020800 	.word	0x58020800
 8000cc4:	58021400 	.word	0x58021400
 8000cc8:	58022800 	.word	0x58022800
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000cda:	2309      	movs	r3, #9
 8000cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4820      	ldr	r0, [pc, #128]	; (8000d68 <MX_GPIO_Init+0x6e8>)
 8000ce6:	f003 f9cf 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000cea:	2304      	movs	r3, #4
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfe:	4619      	mov	r1, r3
 8000d00:	481a      	ldr	r0, [pc, #104]	; (8000d6c <MX_GPIO_Init+0x6ec>)
 8000d02:	f003 f9c1 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8000d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4814      	ldr	r0, [pc, #80]	; (8000d70 <MX_GPIO_Init+0x6f0>)
 8000d20:	f003 f9b2 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d36:	2305      	movs	r3, #5
 8000d38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480b      	ldr	r0, [pc, #44]	; (8000d70 <MX_GPIO_Init+0x6f0>)
 8000d42:	f003 f9a1 	bl	8004088 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8000d46:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000d4a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000d4e:	f000 fcdb 	bl	8001708 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8000d52:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000d56:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000d5a:	f000 fcd5 	bl	8001708 <HAL_SYSCFG_AnalogSwitchConfig>

}
 8000d5e:	bf00      	nop
 8000d60:	3740      	adds	r7, #64	; 0x40
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	58020c00 	.word	0x58020c00
 8000d6c:	58022400 	.word	0x58022400
 8000d70:	58020400 	.word	0x58020400

08000d74 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d86:	f001 fd43 	bl	8002810 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d96:	231f      	movs	r3, #31
 8000d98:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d9a:	2387      	movs	r3, #135	; 0x87
 8000d9c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000da2:	2300      	movs	r3, #0
 8000da4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000da6:	2301      	movs	r3, #1
 8000da8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000daa:	2301      	movs	r3, #1
 8000dac:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000db6:	463b      	mov	r3, r7
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 fd61 	bl	8002880 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <MPU_Config+0x9c>)
 8000dc4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000dc6:	2310      	movs	r3, #16
 8000dc8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000dda:	463b      	mov	r3, r7
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f001 fd4f 	bl	8002880 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000de2:	2302      	movs	r3, #2
 8000de4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <MPU_Config+0xa0>)
 8000de8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000dea:	2308      	movs	r3, #8
 8000dec:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000df2:	2301      	movs	r3, #1
 8000df4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000df6:	2301      	movs	r3, #1
 8000df8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f001 fd3f 	bl	8002880 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e02:	2004      	movs	r0, #4
 8000e04:	f001 fd1c 	bl	8002840 <HAL_MPU_Enable>

}
 8000e08:	bf00      	nop
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	30020000 	.word	0x30020000
 8000e14:	30040000 	.word	0x30040000

08000e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1c:	b672      	cpsid	i
}
 8000e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <Error_Handler+0x8>
	...

08000e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_MspInit+0x30>)
 8000e2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e30:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <HAL_MspInit+0x30>)
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_MspInit+0x30>)
 8000e3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	58024400 	.word	0x58024400

08000e58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b0bc      	sub	sp, #240	; 0xf0
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e70:	f107 0318 	add.w	r3, r7, #24
 8000e74:	22c0      	movs	r2, #192	; 0xc0
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f013 f8eb 	bl	8014054 <memset>
  if(hadc->Instance==ADC3)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a41      	ldr	r2, [pc, #260]	; (8000f88 <HAL_ADC_MspInit+0x130>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d17a      	bne.n	8000f7e <HAL_ADC_MspInit+0x126>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e88:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e8c:	f04f 0300 	mov.w	r3, #0
 8000e90:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000e94:	2302      	movs	r3, #2
 8000e96:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000e98:	230c      	movs	r3, #12
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000ea8:	23c0      	movs	r3, #192	; 0xc0
 8000eaa:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000eac:	2320      	movs	r3, #32
 8000eae:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eba:	f107 0318 	add.w	r3, r7, #24
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f004 fab6 	bl	8005430 <HAL_RCCEx_PeriphCLKConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000eca:	f7ff ffa5 	bl	8000e18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000ece:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <HAL_ADC_MspInit+0x134>)
 8000ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed4:	4a2d      	ldr	r2, [pc, #180]	; (8000f8c <HAL_ADC_MspInit+0x134>)
 8000ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000eda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ede:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <HAL_ADC_MspInit+0x134>)
 8000ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eec:	4b27      	ldr	r3, [pc, #156]	; (8000f8c <HAL_ADC_MspInit+0x134>)
 8000eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef2:	4a26      	ldr	r2, [pc, #152]	; (8000f8c <HAL_ADC_MspInit+0x134>)
 8000ef4:	f043 0320 	orr.w	r3, r3, #32
 8000ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000efc:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <HAL_ADC_MspInit+0x134>)
 8000efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f02:	f003 0320 	and.w	r3, r3, #32
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <HAL_ADC_MspInit+0x134>)
 8000f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f10:	4a1e      	ldr	r2, [pc, #120]	; (8000f8c <HAL_ADC_MspInit+0x134>)
 8000f12:	f043 0304 	orr.w	r3, r3, #4
 8000f16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <HAL_ADC_MspInit+0x134>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC3_INP10
    PC2_C     ------> ADC3_INP0
    PC2_C     ------> ADC3_INN1
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f30:	2303      	movs	r3, #3
 8000f32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f3c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f40:	4619      	mov	r1, r3
 8000f42:	4813      	ldr	r0, [pc, #76]	; (8000f90 <HAL_ADC_MspInit+0x138>)
 8000f44:	f003 f8a0 	bl	8004088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <HAL_ADC_MspInit+0x13c>)
 8000f62:	f003 f891 	bl	8004088 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000f66:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000f6a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000f6e:	f000 fbcb 	bl	8001708 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000f72:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000f76:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000f7a:	f000 fbc5 	bl	8001708 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000f7e:	bf00      	nop
 8000f80:	37f0      	adds	r7, #240	; 0xf0
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	58026000 	.word	0x58026000
 8000f8c:	58024400 	.word	0x58024400
 8000f90:	58021400 	.word	0x58021400
 8000f94:	58020800 	.word	0x58020800

08000f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <NMI_Handler+0x4>

08000f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <HardFault_Handler+0x4>

08000fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <MemManage_Handler+0x4>

08000faa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <BusFault_Handler+0x4>

08000fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <UsageFault_Handler+0x4>

08000fb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe4:	f000 fb50 	bl	8001688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}

08000fec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return 1;
 8000ff0:	2301      	movs	r3, #1
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <_kill>:

int _kill(int pid, int sig)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001006:	4b05      	ldr	r3, [pc, #20]	; (800101c <_kill+0x20>)
 8001008:	2216      	movs	r2, #22
 800100a:	601a      	str	r2, [r3, #0]
  return -1;
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	24003734 	.word	0x24003734

08001020 <_exit>:

void _exit (int status)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001028:	f04f 31ff 	mov.w	r1, #4294967295
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ffe5 	bl	8000ffc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001032:	e7fe      	b.n	8001032 <_exit+0x12>

08001034 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	e00a      	b.n	800105c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001046:	f3af 8000 	nop.w
 800104a:	4601      	mov	r1, r0
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	1c5a      	adds	r2, r3, #1
 8001050:	60ba      	str	r2, [r7, #8]
 8001052:	b2ca      	uxtb	r2, r1
 8001054:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	429a      	cmp	r2, r3
 8001062:	dbf0      	blt.n	8001046 <_read+0x12>
  }

  return len;
 8001064:	687b      	ldr	r3, [r7, #4]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	e009      	b.n	8001094 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	1c5a      	adds	r2, r3, #1
 8001084:	60ba      	str	r2, [r7, #8]
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3301      	adds	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	429a      	cmp	r2, r3
 800109a:	dbf1      	blt.n	8001080 <_write+0x12>
  }
  return len;
 800109c:	687b      	ldr	r3, [r7, #4]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <_close>:

int _close(int file)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ce:	605a      	str	r2, [r3, #4]
  return 0;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <_isatty>:

int _isatty(int file)
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001118:	4a14      	ldr	r2, [pc, #80]	; (800116c <_sbrk+0x5c>)
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <_sbrk+0x60>)
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d102      	bne.n	8001132 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <_sbrk+0x64>)
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <_sbrk+0x68>)
 8001130:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	429a      	cmp	r2, r3
 800113e:	d205      	bcs.n	800114c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <_sbrk+0x6c>)
 8001142:	220c      	movs	r2, #12
 8001144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
 800114a:	e009      	b.n	8001160 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <_sbrk+0x64>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	4a06      	ldr	r2, [pc, #24]	; (8001174 <_sbrk+0x64>)
 800115c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800115e:	68fb      	ldr	r3, [r7, #12]
}
 8001160:	4618      	mov	r0, r3
 8001162:	371c      	adds	r7, #28
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	24080000 	.word	0x24080000
 8001170:	00000400 	.word	0x00000400
 8001174:	24000114 	.word	0x24000114
 8001178:	24003748 	.word	0x24003748
 800117c:	24003734 	.word	0x24003734

08001180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001184:	4b37      	ldr	r3, [pc, #220]	; (8001264 <SystemInit+0xe4>)
 8001186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800118a:	4a36      	ldr	r2, [pc, #216]	; (8001264 <SystemInit+0xe4>)
 800118c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001194:	4b34      	ldr	r3, [pc, #208]	; (8001268 <SystemInit+0xe8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 030f 	and.w	r3, r3, #15
 800119c:	2b06      	cmp	r3, #6
 800119e:	d807      	bhi.n	80011b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011a0:	4b31      	ldr	r3, [pc, #196]	; (8001268 <SystemInit+0xe8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f023 030f 	bic.w	r3, r3, #15
 80011a8:	4a2f      	ldr	r2, [pc, #188]	; (8001268 <SystemInit+0xe8>)
 80011aa:	f043 0307 	orr.w	r3, r3, #7
 80011ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011b0:	4b2e      	ldr	r3, [pc, #184]	; (800126c <SystemInit+0xec>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a2d      	ldr	r2, [pc, #180]	; (800126c <SystemInit+0xec>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011bc:	4b2b      	ldr	r3, [pc, #172]	; (800126c <SystemInit+0xec>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011c2:	4b2a      	ldr	r3, [pc, #168]	; (800126c <SystemInit+0xec>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	4929      	ldr	r1, [pc, #164]	; (800126c <SystemInit+0xec>)
 80011c8:	4b29      	ldr	r3, [pc, #164]	; (8001270 <SystemInit+0xf0>)
 80011ca:	4013      	ands	r3, r2
 80011cc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <SystemInit+0xe8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d007      	beq.n	80011ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011da:	4b23      	ldr	r3, [pc, #140]	; (8001268 <SystemInit+0xe8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f023 030f 	bic.w	r3, r3, #15
 80011e2:	4a21      	ldr	r2, [pc, #132]	; (8001268 <SystemInit+0xe8>)
 80011e4:	f043 0307 	orr.w	r3, r3, #7
 80011e8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011ea:	4b20      	ldr	r3, [pc, #128]	; (800126c <SystemInit+0xec>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <SystemInit+0xec>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011f6:	4b1d      	ldr	r3, [pc, #116]	; (800126c <SystemInit+0xec>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <SystemInit+0xec>)
 80011fe:	4a1d      	ldr	r2, [pc, #116]	; (8001274 <SystemInit+0xf4>)
 8001200:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <SystemInit+0xec>)
 8001204:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <SystemInit+0xf8>)
 8001206:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <SystemInit+0xec>)
 800120a:	4a1c      	ldr	r2, [pc, #112]	; (800127c <SystemInit+0xfc>)
 800120c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <SystemInit+0xec>)
 8001210:	2200      	movs	r2, #0
 8001212:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <SystemInit+0xec>)
 8001216:	4a19      	ldr	r2, [pc, #100]	; (800127c <SystemInit+0xfc>)
 8001218:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <SystemInit+0xec>)
 800121c:	2200      	movs	r2, #0
 800121e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <SystemInit+0xec>)
 8001222:	4a16      	ldr	r2, [pc, #88]	; (800127c <SystemInit+0xfc>)
 8001224:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <SystemInit+0xec>)
 8001228:	2200      	movs	r2, #0
 800122a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <SystemInit+0xec>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0e      	ldr	r2, [pc, #56]	; (800126c <SystemInit+0xec>)
 8001232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001236:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <SystemInit+0xec>)
 800123a:	2200      	movs	r2, #0
 800123c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <SystemInit+0x100>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <SystemInit+0x104>)
 8001244:	4013      	ands	r3, r2
 8001246:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800124a:	d202      	bcs.n	8001252 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <SystemInit+0x108>)
 800124e:	2201      	movs	r2, #1
 8001250:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <SystemInit+0x10c>)
 8001254:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001258:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00
 8001268:	52002000 	.word	0x52002000
 800126c:	58024400 	.word	0x58024400
 8001270:	eaf6ed7f 	.word	0xeaf6ed7f
 8001274:	02020200 	.word	0x02020200
 8001278:	01ff0000 	.word	0x01ff0000
 800127c:	01010280 	.word	0x01010280
 8001280:	5c001000 	.word	0x5c001000
 8001284:	ffff0000 	.word	0xffff0000
 8001288:	51008108 	.word	0x51008108
 800128c:	52004000 	.word	0x52004000

08001290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001290:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001294:	f7ff ff74 	bl	8001180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001298:	480c      	ldr	r0, [pc, #48]	; (80012cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800129a:	490d      	ldr	r1, [pc, #52]	; (80012d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800129c:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012b0:	4c0a      	ldr	r4, [pc, #40]	; (80012dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012be:	f012 fe87 	bl	8013fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012c2:	f7ff f875 	bl	80003b0 <main>
  bx  lr
 80012c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012d0:	24000094 	.word	0x24000094
  ldr r2, =_sidata
 80012d4:	08018dac 	.word	0x08018dac
  ldr r2, =_sbss
 80012d8:	24000094 	.word	0x24000094
  ldr r4, =_ebss
 80012dc:	24003744 	.word	0x24003744

080012e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e0:	e7fe      	b.n	80012e0 <ADC3_IRQHandler>

080012e2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00b      	beq.n	800130a <LAN8742_RegisterBusIO+0x28>
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d007      	beq.n	800130a <LAN8742_RegisterBusIO+0x28>
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <LAN8742_RegisterBusIO+0x28>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	e014      	b.n	800133a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	691a      	ldr	r2, [r3, #16]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d17c      	bne.n	8001460 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d002      	beq.n	8001374 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2220      	movs	r2, #32
 8001378:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	e01c      	b.n	80013ba <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	f107 0208 	add.w	r2, r7, #8
 8001388:	2112      	movs	r1, #18
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	4798      	blx	r3
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	da03      	bge.n	800139c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001394:	f06f 0304 	mvn.w	r3, #4
 8001398:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800139a:	e00b      	b.n	80013b4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	f003 031f 	and.w	r3, r3, #31
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d105      	bne.n	80013b4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
         break;
 80013b2:	e005      	b.n	80013c0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	3301      	adds	r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	2b1f      	cmp	r3, #31
 80013be:	d9df      	bls.n	8001380 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b1f      	cmp	r3, #31
 80013c6:	d902      	bls.n	80013ce <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80013c8:	f06f 0302 	mvn.w	r3, #2
 80013cc:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d145      	bne.n	8001460 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	6810      	ldr	r0, [r2, #0]
 80013dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e0:	2100      	movs	r1, #0
 80013e2:	4798      	blx	r3
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	db37      	blt.n	800145a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6810      	ldr	r0, [r2, #0]
 80013f2:	f107 0208 	add.w	r2, r7, #8
 80013f6:	2100      	movs	r1, #0
 80013f8:	4798      	blx	r3
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	db28      	blt.n	8001452 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4798      	blx	r3
 8001406:	4603      	mov	r3, r0
 8001408:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800140a:	e01c      	b.n	8001446 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4798      	blx	r3
 8001412:	4603      	mov	r3, r0
 8001414:	461a      	mov	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800141e:	d80e      	bhi.n	800143e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	6810      	ldr	r0, [r2, #0]
 8001428:	f107 0208 	add.w	r2, r7, #8
 800142c:	2100      	movs	r1, #0
 800142e:	4798      	blx	r3
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	da07      	bge.n	8001446 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001436:	f06f 0304 	mvn.w	r3, #4
 800143a:	613b      	str	r3, [r7, #16]
                 break;
 800143c:	e010      	b.n	8001460 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800143e:	f06f 0301 	mvn.w	r3, #1
 8001442:	613b      	str	r3, [r7, #16]
               break;
 8001444:	e00c      	b.n	8001460 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1dd      	bne.n	800140c <LAN8742_Init+0xc6>
 8001450:	e006      	b.n	8001460 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001452:	f06f 0304 	mvn.w	r3, #4
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	e002      	b.n	8001460 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800145a:	f06f 0303 	mvn.w	r3, #3
 800145e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d112      	bne.n	800148c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	4798      	blx	r3
 800146c:	4603      	mov	r3, r0
 800146e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001470:	bf00      	nop
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	4798      	blx	r3
 8001478:	4603      	mov	r3, r0
 800147a:	461a      	mov	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001484:	d9f5      	bls.n	8001472 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800148c:	693b      	ldr	r3, [r7, #16]
 }
 800148e:	4618      	mov	r0, r3
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b084      	sub	sp, #16
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6810      	ldr	r0, [r2, #0]
 80014aa:	f107 020c 	add.w	r2, r7, #12
 80014ae:	2101      	movs	r1, #1
 80014b0:	4798      	blx	r3
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	da02      	bge.n	80014be <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014b8:	f06f 0304 	mvn.w	r3, #4
 80014bc:	e06e      	b.n	800159c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	6810      	ldr	r0, [r2, #0]
 80014c6:	f107 020c 	add.w	r2, r7, #12
 80014ca:	2101      	movs	r1, #1
 80014cc:	4798      	blx	r3
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	da02      	bge.n	80014da <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014d4:	f06f 0304 	mvn.w	r3, #4
 80014d8:	e060      	b.n	800159c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80014e4:	2301      	movs	r3, #1
 80014e6:	e059      	b.n	800159c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6810      	ldr	r0, [r2, #0]
 80014f0:	f107 020c 	add.w	r2, r7, #12
 80014f4:	2100      	movs	r1, #0
 80014f6:	4798      	blx	r3
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	da02      	bge.n	8001504 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014fe:	f06f 0304 	mvn.w	r3, #4
 8001502:	e04b      	b.n	800159c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d11b      	bne.n	8001546 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d006      	beq.n	8001526 <LAN8742_GetLinkState+0x90>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001522:	2302      	movs	r3, #2
 8001524:	e03a      	b.n	800159c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001530:	2303      	movs	r3, #3
 8001532:	e033      	b.n	800159c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800153e:	2304      	movs	r3, #4
 8001540:	e02c      	b.n	800159c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001542:	2305      	movs	r3, #5
 8001544:	e02a      	b.n	800159c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6810      	ldr	r0, [r2, #0]
 800154e:	f107 020c 	add.w	r2, r7, #12
 8001552:	211f      	movs	r1, #31
 8001554:	4798      	blx	r3
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	da02      	bge.n	8001562 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800155c:	f06f 0304 	mvn.w	r3, #4
 8001560:	e01c      	b.n	800159c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800156c:	2306      	movs	r3, #6
 800156e:	e015      	b.n	800159c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 031c 	and.w	r3, r3, #28
 8001576:	2b18      	cmp	r3, #24
 8001578:	d101      	bne.n	800157e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800157a:	2302      	movs	r3, #2
 800157c:	e00e      	b.n	800159c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f003 031c 	and.w	r3, r3, #28
 8001584:	2b08      	cmp	r3, #8
 8001586:	d101      	bne.n	800158c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001588:	2303      	movs	r3, #3
 800158a:	e007      	b.n	800159c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 031c 	and.w	r3, r3, #28
 8001592:	2b14      	cmp	r3, #20
 8001594:	d101      	bne.n	800159a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001596:	2304      	movs	r3, #4
 8001598:	e000      	b.n	800159c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800159a:	2305      	movs	r3, #5
    }				
  }
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015aa:	2003      	movs	r0, #3
 80015ac:	f001 f8fe 	bl	80027ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015b0:	f003 fd7e 	bl	80050b0 <HAL_RCC_GetSysClockFreq>
 80015b4:	4602      	mov	r2, r0
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_Init+0x68>)
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	0a1b      	lsrs	r3, r3, #8
 80015bc:	f003 030f 	and.w	r3, r3, #15
 80015c0:	4913      	ldr	r1, [pc, #76]	; (8001610 <HAL_Init+0x6c>)
 80015c2:	5ccb      	ldrb	r3, [r1, r3]
 80015c4:	f003 031f 	and.w	r3, r3, #31
 80015c8:	fa22 f303 	lsr.w	r3, r2, r3
 80015cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <HAL_Init+0x68>)
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <HAL_Init+0x6c>)
 80015d8:	5cd3      	ldrb	r3, [r2, r3]
 80015da:	f003 031f 	and.w	r3, r3, #31
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	fa22 f303 	lsr.w	r3, r2, r3
 80015e4:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <HAL_Init+0x70>)
 80015e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015e8:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <HAL_Init+0x74>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ee:	2000      	movs	r0, #0
 80015f0:	f000 f814 	bl	800161c <HAL_InitTick>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e002      	b.n	8001604 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015fe:	f7ff fc11 	bl	8000e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	58024400 	.word	0x58024400
 8001610:	08017d60 	.word	0x08017d60
 8001614:	24000004 	.word	0x24000004
 8001618:	24000000 	.word	0x24000000

0800161c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_InitTick+0x60>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e021      	b.n	8001674 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <HAL_InitTick+0x64>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <HAL_InitTick+0x60>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f001 f8d5 	bl	80027f6 <HAL_SYSTICK_Config>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e00e      	b.n	8001674 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b0f      	cmp	r3, #15
 800165a:	d80a      	bhi.n	8001672 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800165c:	2200      	movs	r2, #0
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f001 f8ad 	bl	80027c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001668:	4a06      	ldr	r2, [pc, #24]	; (8001684 <HAL_InitTick+0x68>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	e000      	b.n	8001674 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	2400000c 	.word	0x2400000c
 8001680:	24000000 	.word	0x24000000
 8001684:	24000008 	.word	0x24000008

08001688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_IncTick+0x20>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_IncTick+0x24>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4413      	add	r3, r2
 8001698:	4a04      	ldr	r2, [pc, #16]	; (80016ac <HAL_IncTick+0x24>)
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	2400000c 	.word	0x2400000c
 80016ac:	24000118 	.word	0x24000118

080016b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return uwTick;
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <HAL_GetTick+0x14>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	24000118 	.word	0x24000118

080016c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <HAL_GetREVID+0x14>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	0c1b      	lsrs	r3, r3, #16
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	5c001000 	.word	0x5c001000

080016e0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80016f0:	4904      	ldr	r1, [pc, #16]	; (8001704 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	604b      	str	r3, [r1, #4]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	58000400 	.word	0x58000400

08001708 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001712:	4b07      	ldr	r3, [pc, #28]	; (8001730 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	43db      	mvns	r3, r3
 800171a:	401a      	ands	r2, r3
 800171c:	4904      	ldr	r1, [pc, #16]	; (8001730 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	58000400 	.word	0x58000400

08001734 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	431a      	orrs	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	609a      	str	r2, [r3, #8]
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	609a      	str	r2, [r3, #8]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800179c:	b480      	push	{r7}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
 80017a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	3360      	adds	r3, #96	; 0x60
 80017ae:	461a      	mov	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	430b      	orrs	r3, r1
 80017ca:	431a      	orrs	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80017d0:	bf00      	nop
 80017d2:	371c      	adds	r7, #28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	f003 031f 	and.w	r3, r3, #31
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	fa01 f303 	lsl.w	r3, r1, r3
 80017fc:	431a      	orrs	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	611a      	str	r2, [r3, #16]
}
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800180e:	b480      	push	{r7}
 8001810:	b087      	sub	sp, #28
 8001812:	af00      	add	r7, sp, #0
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	3360      	adds	r3, #96	; 0x60
 800181e:	461a      	mov	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	431a      	orrs	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	601a      	str	r2, [r3, #0]
  }
}
 8001838:	bf00      	nop
 800183a:	371c      	adds	r7, #28
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	3330      	adds	r3, #48	; 0x30
 8001854:	461a      	mov	r2, r3
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	f003 030c 	and.w	r3, r3, #12
 8001860:	4413      	add	r3, r2
 8001862:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	f003 031f 	and.w	r3, r3, #31
 800186e:	211f      	movs	r1, #31
 8001870:	fa01 f303 	lsl.w	r3, r1, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	401a      	ands	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	0e9b      	lsrs	r3, r3, #26
 800187c:	f003 011f 	and.w	r1, r3, #31
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	f003 031f 	and.w	r3, r3, #31
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	431a      	orrs	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001890:	bf00      	nop
 8001892:	371c      	adds	r7, #28
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	3314      	adds	r3, #20
 80018ac:	461a      	mov	r2, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	0e5b      	lsrs	r3, r3, #25
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	4413      	add	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	0d1b      	lsrs	r3, r3, #20
 80018c4:	f003 031f 	and.w	r3, r3, #31
 80018c8:	2107      	movs	r1, #7
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	401a      	ands	r2, r3
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	0d1b      	lsrs	r3, r3, #20
 80018d6:	f003 031f 	and.w	r3, r3, #31
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	fa01 f303 	lsl.w	r3, r1, r3
 80018e0:	431a      	orrs	r2, r3
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018e6:	bf00      	nop
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800190c:	43db      	mvns	r3, r3
 800190e:	401a      	ands	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f003 0318 	and.w	r3, r3, #24
 8001916:	4908      	ldr	r1, [pc, #32]	; (8001938 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001918:	40d9      	lsrs	r1, r3
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	400b      	ands	r3, r1
 800191e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001922:	431a      	orrs	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800192a:	bf00      	nop
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	000fffff 	.word	0x000fffff

0800193c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <LL_ADC_DisableDeepPowerDown+0x20>)
 800194a:	4013      	ands	r3, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6093      	str	r3, [r2, #8]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	5fffffc0 	.word	0x5fffffc0

08001960 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001974:	d101      	bne.n	800197a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <LL_ADC_EnableInternalRegulator+0x24>)
 8001996:	4013      	ands	r3, r2
 8001998:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	6fffffc0 	.word	0x6fffffc0

080019b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019c4:	d101      	bne.n	80019ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <LL_ADC_IsEnabled+0x18>
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <LL_ADC_IsEnabled+0x1a>
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d101      	bne.n	8001a16 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d101      	bne.n	8001a3c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
	...

08001a4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b089      	sub	sp, #36	; 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e18f      	b.n	8001d86 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d109      	bne.n	8001a88 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff f9ef 	bl	8000e58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff67 	bl	8001960 <LL_ADC_IsDeepPowerDownEnabled>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d004      	beq.n	8001aa2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff4d 	bl	800193c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff ff82 	bl	80019b0 <LL_ADC_IsInternalRegulatorEnabled>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d114      	bne.n	8001adc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff ff66 	bl	8001988 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001abc:	4b87      	ldr	r3, [pc, #540]	; (8001cdc <HAL_ADC_Init+0x290>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	099b      	lsrs	r3, r3, #6
 8001ac2:	4a87      	ldr	r2, [pc, #540]	; (8001ce0 <HAL_ADC_Init+0x294>)
 8001ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac8:	099b      	lsrs	r3, r3, #6
 8001aca:	3301      	adds	r3, #1
 8001acc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ace:	e002      	b.n	8001ad6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f9      	bne.n	8001ad0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff65 	bl	80019b0 <LL_ADC_IsInternalRegulatorEnabled>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10d      	bne.n	8001b08 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af0:	f043 0210 	orr.w	r2, r3, #16
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afc:	f043 0201 	orr.w	r2, r3, #1
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff76 	bl	80019fe <LL_ADC_REG_IsConversionOngoing>
 8001b12:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f040 8129 	bne.w	8001d74 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f040 8125 	bne.w	8001d74 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b32:	f043 0202 	orr.w	r2, r3, #2
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ff4a 	bl	80019d8 <LL_ADC_IsEnabled>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d136      	bne.n	8001bb8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a65      	ldr	r2, [pc, #404]	; (8001ce4 <HAL_ADC_Init+0x298>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d004      	beq.n	8001b5e <HAL_ADC_Init+0x112>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a63      	ldr	r2, [pc, #396]	; (8001ce8 <HAL_ADC_Init+0x29c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d10e      	bne.n	8001b7c <HAL_ADC_Init+0x130>
 8001b5e:	4861      	ldr	r0, [pc, #388]	; (8001ce4 <HAL_ADC_Init+0x298>)
 8001b60:	f7ff ff3a 	bl	80019d8 <LL_ADC_IsEnabled>
 8001b64:	4604      	mov	r4, r0
 8001b66:	4860      	ldr	r0, [pc, #384]	; (8001ce8 <HAL_ADC_Init+0x29c>)
 8001b68:	f7ff ff36 	bl	80019d8 <LL_ADC_IsEnabled>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	4323      	orrs	r3, r4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	bf0c      	ite	eq
 8001b74:	2301      	moveq	r3, #1
 8001b76:	2300      	movne	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	e008      	b.n	8001b8e <HAL_ADC_Init+0x142>
 8001b7c:	485b      	ldr	r0, [pc, #364]	; (8001cec <HAL_ADC_Init+0x2a0>)
 8001b7e:	f7ff ff2b 	bl	80019d8 <LL_ADC_IsEnabled>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bf0c      	ite	eq
 8001b88:	2301      	moveq	r3, #1
 8001b8a:	2300      	movne	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d012      	beq.n	8001bb8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a53      	ldr	r2, [pc, #332]	; (8001ce4 <HAL_ADC_Init+0x298>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d004      	beq.n	8001ba6 <HAL_ADC_Init+0x15a>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a51      	ldr	r2, [pc, #324]	; (8001ce8 <HAL_ADC_Init+0x29c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d101      	bne.n	8001baa <HAL_ADC_Init+0x15e>
 8001ba6:	4a52      	ldr	r2, [pc, #328]	; (8001cf0 <HAL_ADC_Init+0x2a4>)
 8001ba8:	e000      	b.n	8001bac <HAL_ADC_Init+0x160>
 8001baa:	4a52      	ldr	r2, [pc, #328]	; (8001cf4 <HAL_ADC_Init+0x2a8>)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	f7ff fdbe 	bl	8001734 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001bb8:	f7ff fd86 	bl	80016c8 <HAL_GetREVID>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d914      	bls.n	8001bf0 <HAL_ADC_Init+0x1a4>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b10      	cmp	r3, #16
 8001bcc:	d110      	bne.n	8001bf0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	7d5b      	ldrb	r3, [r3, #21]
 8001bd2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bd8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001bde:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7f1b      	ldrb	r3, [r3, #28]
 8001be4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001be6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001be8:	f043 030c 	orr.w	r3, r3, #12
 8001bec:	61bb      	str	r3, [r7, #24]
 8001bee:	e00d      	b.n	8001c0c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	7d5b      	ldrb	r3, [r3, #21]
 8001bf4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bfa:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c00:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	7f1b      	ldrb	r3, [r3, #28]
 8001c06:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7f1b      	ldrb	r3, [r3, #28]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d106      	bne.n	8001c22 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	045b      	lsls	r3, r3, #17
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d009      	beq.n	8001c3e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c36:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68da      	ldr	r2, [r3, #12]
 8001c44:	4b2c      	ldr	r3, [pc, #176]	; (8001cf8 <HAL_ADC_Init+0x2ac>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	69b9      	ldr	r1, [r7, #24]
 8001c4e:	430b      	orrs	r3, r1
 8001c50:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fed1 	bl	80019fe <LL_ADC_REG_IsConversionOngoing>
 8001c5c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fede 	bl	8001a24 <LL_ADC_INJ_IsConversionOngoing>
 8001c68:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d15f      	bne.n	8001d30 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d15c      	bne.n	8001d30 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	7d1b      	ldrb	r3, [r3, #20]
 8001c7a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <HAL_ADC_Init+0x2b0>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	69b9      	ldr	r1, [r7, #24]
 8001c94:	430b      	orrs	r3, r1
 8001c96:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d130      	bne.n	8001d04 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691a      	ldr	r2, [r3, #16]
 8001cae:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <HAL_ADC_Init+0x2b4>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cb6:	3a01      	subs	r2, #1
 8001cb8:	0411      	lsls	r1, r2, #16
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cbe:	4311      	orrs	r1, r2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001cc4:	4311      	orrs	r1, r2
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	611a      	str	r2, [r3, #16]
 8001cd8:	e01c      	b.n	8001d14 <HAL_ADC_Init+0x2c8>
 8001cda:	bf00      	nop
 8001cdc:	24000000 	.word	0x24000000
 8001ce0:	053e2d63 	.word	0x053e2d63
 8001ce4:	40022000 	.word	0x40022000
 8001ce8:	40022100 	.word	0x40022100
 8001cec:	58026000 	.word	0x58026000
 8001cf0:	40022300 	.word	0x40022300
 8001cf4:	58026300 	.word	0x58026300
 8001cf8:	fff0c003 	.word	0xfff0c003
 8001cfc:	ffffbffc 	.word	0xffffbffc
 8001d00:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691a      	ldr	r2, [r3, #16]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0201 	bic.w	r2, r2, #1
 8001d12:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 fb80 	bl	8002430 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d10c      	bne.n	8001d52 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f023 010f 	bic.w	r1, r3, #15
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	1e5a      	subs	r2, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d50:	e007      	b.n	8001d62 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 020f 	bic.w	r2, r2, #15
 8001d60:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d66:	f023 0303 	bic.w	r3, r3, #3
 8001d6a:	f043 0201 	orr.w	r2, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	655a      	str	r2, [r3, #84]	; 0x54
 8001d72:	e007      	b.n	8001d84 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d78:	f043 0210 	orr.w	r2, r3, #16
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d84:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3724      	adds	r7, #36	; 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd90      	pop	{r4, r7, pc}
 8001d8e:	bf00      	nop

08001d90 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d90:	b590      	push	{r4, r7, lr}
 8001d92:	b0a1      	sub	sp, #132	; 0x84
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4a9d      	ldr	r2, [pc, #628]	; (8002020 <HAL_ADC_ConfigChannel+0x290>)
 8001daa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x2a>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e321      	b.n	80023fe <HAL_ADC_ConfigChannel+0x66e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff fe19 	bl	80019fe <LL_ADC_REG_IsConversionOngoing>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f040 8306 	bne.w	80023e0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d108      	bne.n	8001df2 <HAL_ADC_ConfigChannel+0x62>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	0e9b      	lsrs	r3, r3, #26
 8001de6:	f003 031f 	and.w	r3, r3, #31
 8001dea:	2201      	movs	r2, #1
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	e016      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x90>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e02:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001e0a:	2320      	movs	r3, #32
 8001e0c:	e003      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001e0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e10:	fab3 f383 	clz	r3, r3
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	f003 031f 	and.w	r3, r3, #31
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	69d1      	ldr	r1, [r2, #28]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	430b      	orrs	r3, r1
 8001e2c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	6859      	ldr	r1, [r3, #4]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	f7ff fd02 	bl	8001844 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fdda 	bl	80019fe <LL_ADC_REG_IsConversionOngoing>
 8001e4a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fde7 	bl	8001a24 <LL_ADC_INJ_IsConversionOngoing>
 8001e56:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f040 80b3 	bne.w	8001fc6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f040 80af 	bne.w	8001fc6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	6819      	ldr	r1, [r3, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	461a      	mov	r2, r3
 8001e76:	f7ff fd11 	bl	800189c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e7a:	4b6a      	ldr	r3, [pc, #424]	; (8002024 <HAL_ADC_ConfigChannel+0x294>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001e82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e86:	d10b      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x110>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	695a      	ldr	r2, [r3, #20]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	e01d      	b.n	8001edc <HAL_ADC_ConfigChannel+0x14c>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10b      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x136>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	e00a      	b.n	8001edc <HAL_ADC_ConfigChannel+0x14c>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	089b      	lsrs	r3, r3, #2
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d027      	beq.n	8001f36 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	6919      	ldr	r1, [r3, #16]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ef4:	f7ff fc52 	bl	800179c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	6919      	ldr	r1, [r3, #16]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	7e5b      	ldrb	r3, [r3, #25]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d102      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x17e>
 8001f08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001f0c:	e000      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x180>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	461a      	mov	r2, r3
 8001f12:	f7ff fc7c 	bl	800180e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	6919      	ldr	r1, [r3, #16]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	7e1b      	ldrb	r3, [r3, #24]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d102      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x19c>
 8001f26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f2a:	e000      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x19e>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	461a      	mov	r2, r3
 8001f30:	f7ff fc54 	bl	80017dc <LL_ADC_SetDataRightShift>
 8001f34:	e047      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	069b      	lsls	r3, r3, #26
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d107      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f58:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	069b      	lsls	r3, r3, #26
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d107      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f7c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	069b      	lsls	r3, r3, #26
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d107      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fa0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fa8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	069b      	lsls	r3, r3, #26
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d107      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fc4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fd04 	bl	80019d8 <LL_ADC_IsEnabled>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f040 820d 	bne.w	80023f2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	6819      	ldr	r1, [r3, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f7ff fc85 	bl	80018f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	4a0c      	ldr	r2, [pc, #48]	; (8002020 <HAL_ADC_ConfigChannel+0x290>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	f040 8133 	bne.w	800225c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002002:	2b00      	cmp	r3, #0
 8002004:	d110      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x298>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	0e9b      	lsrs	r3, r3, #26
 800200c:	3301      	adds	r3, #1
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	2b09      	cmp	r3, #9
 8002014:	bf94      	ite	ls
 8002016:	2301      	movls	r3, #1
 8002018:	2300      	movhi	r3, #0
 800201a:	b2db      	uxtb	r3, r3
 800201c:	e01e      	b.n	800205c <HAL_ADC_ConfigChannel+0x2cc>
 800201e:	bf00      	nop
 8002020:	47ff0000 	.word	0x47ff0000
 8002024:	5c001000 	.word	0x5c001000
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002030:	fa93 f3a3 	rbit	r3, r3
 8002034:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002038:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800203a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002040:	2320      	movs	r3, #32
 8002042:	e003      	b.n	800204c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	3301      	adds	r3, #1
 800204e:	f003 031f 	and.w	r3, r3, #31
 8002052:	2b09      	cmp	r3, #9
 8002054:	bf94      	ite	ls
 8002056:	2301      	movls	r3, #1
 8002058:	2300      	movhi	r3, #0
 800205a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800205c:	2b00      	cmp	r3, #0
 800205e:	d079      	beq.n	8002154 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002068:	2b00      	cmp	r3, #0
 800206a:	d107      	bne.n	800207c <HAL_ADC_ConfigChannel+0x2ec>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	0e9b      	lsrs	r3, r3, #26
 8002072:	3301      	adds	r3, #1
 8002074:	069b      	lsls	r3, r3, #26
 8002076:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800207a:	e015      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x318>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002084:	fa93 f3a3 	rbit	r3, r3
 8002088:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800208a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800208c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800208e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002094:	2320      	movs	r3, #32
 8002096:	e003      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	3301      	adds	r3, #1
 80020a2:	069b      	lsls	r3, r3, #26
 80020a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d109      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x338>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	0e9b      	lsrs	r3, r3, #26
 80020ba:	3301      	adds	r3, #1
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	2101      	movs	r1, #1
 80020c2:	fa01 f303 	lsl.w	r3, r1, r3
 80020c6:	e017      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x368>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020d0:	fa93 f3a3 	rbit	r3, r3
 80020d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80020d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80020da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80020e0:	2320      	movs	r3, #32
 80020e2:	e003      	b.n	80020ec <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80020e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	3301      	adds	r3, #1
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	2101      	movs	r1, #1
 80020f4:	fa01 f303 	lsl.w	r3, r1, r3
 80020f8:	ea42 0103 	orr.w	r1, r2, r3
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10a      	bne.n	800211e <HAL_ADC_ConfigChannel+0x38e>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	0e9b      	lsrs	r3, r3, #26
 800210e:	3301      	adds	r3, #1
 8002110:	f003 021f 	and.w	r2, r3, #31
 8002114:	4613      	mov	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4413      	add	r3, r2
 800211a:	051b      	lsls	r3, r3, #20
 800211c:	e018      	b.n	8002150 <HAL_ADC_ConfigChannel+0x3c0>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800212c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002136:	2320      	movs	r3, #32
 8002138:	e003      	b.n	8002142 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800213a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213c:	fab3 f383 	clz	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	3301      	adds	r3, #1
 8002144:	f003 021f 	and.w	r2, r3, #31
 8002148:	4613      	mov	r3, r2
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	4413      	add	r3, r2
 800214e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002150:	430b      	orrs	r3, r1
 8002152:	e07e      	b.n	8002252 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800215c:	2b00      	cmp	r3, #0
 800215e:	d107      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x3e0>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	0e9b      	lsrs	r3, r3, #26
 8002166:	3301      	adds	r3, #1
 8002168:	069b      	lsls	r3, r3, #26
 800216a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800216e:	e015      	b.n	800219c <HAL_ADC_ConfigChannel+0x40c>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002178:	fa93 f3a3 	rbit	r3, r3
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002188:	2320      	movs	r3, #32
 800218a:	e003      	b.n	8002194 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800218c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218e:	fab3 f383 	clz	r3, r3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	3301      	adds	r3, #1
 8002196:	069b      	lsls	r3, r3, #26
 8002198:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d109      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x42c>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	0e9b      	lsrs	r3, r3, #26
 80021ae:	3301      	adds	r3, #1
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	2101      	movs	r1, #1
 80021b6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ba:	e017      	b.n	80021ec <HAL_ADC_ConfigChannel+0x45c>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	fa93 f3a3 	rbit	r3, r3
 80021c8:	61bb      	str	r3, [r7, #24]
  return result;
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80021d4:	2320      	movs	r3, #32
 80021d6:	e003      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	fab3 f383 	clz	r3, r3
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	3301      	adds	r3, #1
 80021e2:	f003 031f 	and.w	r3, r3, #31
 80021e6:	2101      	movs	r1, #1
 80021e8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ec:	ea42 0103 	orr.w	r1, r2, r3
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10d      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x488>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	0e9b      	lsrs	r3, r3, #26
 8002202:	3301      	adds	r3, #1
 8002204:	f003 021f 	and.w	r2, r3, #31
 8002208:	4613      	mov	r3, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4413      	add	r3, r2
 800220e:	3b1e      	subs	r3, #30
 8002210:	051b      	lsls	r3, r3, #20
 8002212:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002216:	e01b      	b.n	8002250 <HAL_ADC_ConfigChannel+0x4c0>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	fa93 f3a3 	rbit	r3, r3
 8002224:	60fb      	str	r3, [r7, #12]
  return result;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002230:	2320      	movs	r3, #32
 8002232:	e003      	b.n	800223c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fab3 f383 	clz	r3, r3
 800223a:	b2db      	uxtb	r3, r3
 800223c:	3301      	adds	r3, #1
 800223e:	f003 021f 	and.w	r2, r3, #31
 8002242:	4613      	mov	r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4413      	add	r3, r2
 8002248:	3b1e      	subs	r3, #30
 800224a:	051b      	lsls	r3, r3, #20
 800224c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002250:	430b      	orrs	r3, r1
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	6892      	ldr	r2, [r2, #8]
 8002256:	4619      	mov	r1, r3
 8002258:	f7ff fb20 	bl	800189c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	f280 80c6 	bge.w	80023f2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a67      	ldr	r2, [pc, #412]	; (8002408 <HAL_ADC_ConfigChannel+0x678>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d004      	beq.n	800227a <HAL_ADC_ConfigChannel+0x4ea>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a65      	ldr	r2, [pc, #404]	; (800240c <HAL_ADC_ConfigChannel+0x67c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d101      	bne.n	800227e <HAL_ADC_ConfigChannel+0x4ee>
 800227a:	4b65      	ldr	r3, [pc, #404]	; (8002410 <HAL_ADC_ConfigChannel+0x680>)
 800227c:	e000      	b.n	8002280 <HAL_ADC_ConfigChannel+0x4f0>
 800227e:	4b65      	ldr	r3, [pc, #404]	; (8002414 <HAL_ADC_ConfigChannel+0x684>)
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fa7d 	bl	8001780 <LL_ADC_GetCommonPathInternalCh>
 8002286:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a5e      	ldr	r2, [pc, #376]	; (8002408 <HAL_ADC_ConfigChannel+0x678>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d004      	beq.n	800229c <HAL_ADC_ConfigChannel+0x50c>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a5d      	ldr	r2, [pc, #372]	; (800240c <HAL_ADC_ConfigChannel+0x67c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d10e      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x52a>
 800229c:	485a      	ldr	r0, [pc, #360]	; (8002408 <HAL_ADC_ConfigChannel+0x678>)
 800229e:	f7ff fb9b 	bl	80019d8 <LL_ADC_IsEnabled>
 80022a2:	4604      	mov	r4, r0
 80022a4:	4859      	ldr	r0, [pc, #356]	; (800240c <HAL_ADC_ConfigChannel+0x67c>)
 80022a6:	f7ff fb97 	bl	80019d8 <LL_ADC_IsEnabled>
 80022aa:	4603      	mov	r3, r0
 80022ac:	4323      	orrs	r3, r4
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	bf0c      	ite	eq
 80022b2:	2301      	moveq	r3, #1
 80022b4:	2300      	movne	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	e008      	b.n	80022cc <HAL_ADC_ConfigChannel+0x53c>
 80022ba:	4857      	ldr	r0, [pc, #348]	; (8002418 <HAL_ADC_ConfigChannel+0x688>)
 80022bc:	f7ff fb8c 	bl	80019d8 <LL_ADC_IsEnabled>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	bf0c      	ite	eq
 80022c6:	2301      	moveq	r3, #1
 80022c8:	2300      	movne	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d07d      	beq.n	80023cc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a51      	ldr	r2, [pc, #324]	; (800241c <HAL_ADC_ConfigChannel+0x68c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d130      	bne.n	800233c <HAL_ADC_ConfigChannel+0x5ac>
 80022da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d12b      	bne.n	800233c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a4b      	ldr	r2, [pc, #300]	; (8002418 <HAL_ADC_ConfigChannel+0x688>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	f040 8081 	bne.w	80023f2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a44      	ldr	r2, [pc, #272]	; (8002408 <HAL_ADC_ConfigChannel+0x678>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d004      	beq.n	8002304 <HAL_ADC_ConfigChannel+0x574>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a43      	ldr	r2, [pc, #268]	; (800240c <HAL_ADC_ConfigChannel+0x67c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d101      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x578>
 8002304:	4a42      	ldr	r2, [pc, #264]	; (8002410 <HAL_ADC_ConfigChannel+0x680>)
 8002306:	e000      	b.n	800230a <HAL_ADC_ConfigChannel+0x57a>
 8002308:	4a42      	ldr	r2, [pc, #264]	; (8002414 <HAL_ADC_ConfigChannel+0x684>)
 800230a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800230c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002310:	4619      	mov	r1, r3
 8002312:	4610      	mov	r0, r2
 8002314:	f7ff fa21 	bl	800175a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002318:	4b41      	ldr	r3, [pc, #260]	; (8002420 <HAL_ADC_ConfigChannel+0x690>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	099b      	lsrs	r3, r3, #6
 800231e:	4a41      	ldr	r2, [pc, #260]	; (8002424 <HAL_ADC_ConfigChannel+0x694>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	099b      	lsrs	r3, r3, #6
 8002326:	3301      	adds	r3, #1
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800232c:	e002      	b.n	8002334 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	3b01      	subs	r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f9      	bne.n	800232e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800233a:	e05a      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a39      	ldr	r2, [pc, #228]	; (8002428 <HAL_ADC_ConfigChannel+0x698>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d11e      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x5f4>
 8002346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002348:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d119      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a30      	ldr	r2, [pc, #192]	; (8002418 <HAL_ADC_ConfigChannel+0x688>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d14b      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a2a      	ldr	r2, [pc, #168]	; (8002408 <HAL_ADC_ConfigChannel+0x678>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d004      	beq.n	800236e <HAL_ADC_ConfigChannel+0x5de>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a28      	ldr	r2, [pc, #160]	; (800240c <HAL_ADC_ConfigChannel+0x67c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d101      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x5e2>
 800236e:	4a28      	ldr	r2, [pc, #160]	; (8002410 <HAL_ADC_ConfigChannel+0x680>)
 8002370:	e000      	b.n	8002374 <HAL_ADC_ConfigChannel+0x5e4>
 8002372:	4a28      	ldr	r2, [pc, #160]	; (8002414 <HAL_ADC_ConfigChannel+0x684>)
 8002374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800237a:	4619      	mov	r1, r3
 800237c:	4610      	mov	r0, r2
 800237e:	f7ff f9ec 	bl	800175a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002382:	e036      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a28      	ldr	r2, [pc, #160]	; (800242c <HAL_ADC_ConfigChannel+0x69c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d131      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x662>
 800238e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002390:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d12c      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a1e      	ldr	r2, [pc, #120]	; (8002418 <HAL_ADC_ConfigChannel+0x688>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d127      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a18      	ldr	r2, [pc, #96]	; (8002408 <HAL_ADC_ConfigChannel+0x678>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d004      	beq.n	80023b6 <HAL_ADC_ConfigChannel+0x626>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a16      	ldr	r2, [pc, #88]	; (800240c <HAL_ADC_ConfigChannel+0x67c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d101      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x62a>
 80023b6:	4a16      	ldr	r2, [pc, #88]	; (8002410 <HAL_ADC_ConfigChannel+0x680>)
 80023b8:	e000      	b.n	80023bc <HAL_ADC_ConfigChannel+0x62c>
 80023ba:	4a16      	ldr	r2, [pc, #88]	; (8002414 <HAL_ADC_ConfigChannel+0x684>)
 80023bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023c2:	4619      	mov	r1, r3
 80023c4:	4610      	mov	r0, r2
 80023c6:	f7ff f9c8 	bl	800175a <LL_ADC_SetCommonPathInternalCh>
 80023ca:	e012      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d0:	f043 0220 	orr.w	r2, r3, #32
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80023de:	e008      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e4:	f043 0220 	orr.w	r2, r3, #32
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3784      	adds	r7, #132	; 0x84
 8002402:	46bd      	mov	sp, r7
 8002404:	bd90      	pop	{r4, r7, pc}
 8002406:	bf00      	nop
 8002408:	40022000 	.word	0x40022000
 800240c:	40022100 	.word	0x40022100
 8002410:	40022300 	.word	0x40022300
 8002414:	58026300 	.word	0x58026300
 8002418:	58026000 	.word	0x58026000
 800241c:	cb840000 	.word	0xcb840000
 8002420:	24000000 	.word	0x24000000
 8002424:	053e2d63 	.word	0x053e2d63
 8002428:	c7520000 	.word	0xc7520000
 800242c:	cfb80000 	.word	0xcfb80000

08002430 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a7a      	ldr	r2, [pc, #488]	; (8002628 <ADC_ConfigureBoostMode+0x1f8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d004      	beq.n	800244c <ADC_ConfigureBoostMode+0x1c>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a79      	ldr	r2, [pc, #484]	; (800262c <ADC_ConfigureBoostMode+0x1fc>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d109      	bne.n	8002460 <ADC_ConfigureBoostMode+0x30>
 800244c:	4b78      	ldr	r3, [pc, #480]	; (8002630 <ADC_ConfigureBoostMode+0x200>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002454:	2b00      	cmp	r3, #0
 8002456:	bf14      	ite	ne
 8002458:	2301      	movne	r3, #1
 800245a:	2300      	moveq	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	e008      	b.n	8002472 <ADC_ConfigureBoostMode+0x42>
 8002460:	4b74      	ldr	r3, [pc, #464]	; (8002634 <ADC_ConfigureBoostMode+0x204>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002468:	2b00      	cmp	r3, #0
 800246a:	bf14      	ite	ne
 800246c:	2301      	movne	r3, #1
 800246e:	2300      	moveq	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d01c      	beq.n	80024b0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002476:	f002 ff95 	bl	80053a4 <HAL_RCC_GetHCLKFreq>
 800247a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002484:	d010      	beq.n	80024a8 <ADC_ConfigureBoostMode+0x78>
 8002486:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800248a:	d873      	bhi.n	8002574 <ADC_ConfigureBoostMode+0x144>
 800248c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002490:	d002      	beq.n	8002498 <ADC_ConfigureBoostMode+0x68>
 8002492:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002496:	d16d      	bne.n	8002574 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	0c1b      	lsrs	r3, r3, #16
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a4:	60fb      	str	r3, [r7, #12]
        break;
 80024a6:	e068      	b.n	800257a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	089b      	lsrs	r3, r3, #2
 80024ac:	60fb      	str	r3, [r7, #12]
        break;
 80024ae:	e064      	b.n	800257a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80024b0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80024b4:	f04f 0100 	mov.w	r1, #0
 80024b8:	f004 f9c4 	bl	8006844 <HAL_RCCEx_GetPeriphCLKFreq>
 80024bc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80024c6:	d051      	beq.n	800256c <ADC_ConfigureBoostMode+0x13c>
 80024c8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80024cc:	d854      	bhi.n	8002578 <ADC_ConfigureBoostMode+0x148>
 80024ce:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80024d2:	d047      	beq.n	8002564 <ADC_ConfigureBoostMode+0x134>
 80024d4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80024d8:	d84e      	bhi.n	8002578 <ADC_ConfigureBoostMode+0x148>
 80024da:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80024de:	d03d      	beq.n	800255c <ADC_ConfigureBoostMode+0x12c>
 80024e0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80024e4:	d848      	bhi.n	8002578 <ADC_ConfigureBoostMode+0x148>
 80024e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024ea:	d033      	beq.n	8002554 <ADC_ConfigureBoostMode+0x124>
 80024ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024f0:	d842      	bhi.n	8002578 <ADC_ConfigureBoostMode+0x148>
 80024f2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80024f6:	d029      	beq.n	800254c <ADC_ConfigureBoostMode+0x11c>
 80024f8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80024fc:	d83c      	bhi.n	8002578 <ADC_ConfigureBoostMode+0x148>
 80024fe:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002502:	d01a      	beq.n	800253a <ADC_ConfigureBoostMode+0x10a>
 8002504:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002508:	d836      	bhi.n	8002578 <ADC_ConfigureBoostMode+0x148>
 800250a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800250e:	d014      	beq.n	800253a <ADC_ConfigureBoostMode+0x10a>
 8002510:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002514:	d830      	bhi.n	8002578 <ADC_ConfigureBoostMode+0x148>
 8002516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800251a:	d00e      	beq.n	800253a <ADC_ConfigureBoostMode+0x10a>
 800251c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002520:	d82a      	bhi.n	8002578 <ADC_ConfigureBoostMode+0x148>
 8002522:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002526:	d008      	beq.n	800253a <ADC_ConfigureBoostMode+0x10a>
 8002528:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800252c:	d824      	bhi.n	8002578 <ADC_ConfigureBoostMode+0x148>
 800252e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002532:	d002      	beq.n	800253a <ADC_ConfigureBoostMode+0x10a>
 8002534:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002538:	d11e      	bne.n	8002578 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	0c9b      	lsrs	r3, r3, #18
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	fbb2 f3f3 	udiv	r3, r2, r3
 8002548:	60fb      	str	r3, [r7, #12]
        break;
 800254a:	e016      	b.n	800257a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	091b      	lsrs	r3, r3, #4
 8002550:	60fb      	str	r3, [r7, #12]
        break;
 8002552:	e012      	b.n	800257a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	60fb      	str	r3, [r7, #12]
        break;
 800255a:	e00e      	b.n	800257a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	099b      	lsrs	r3, r3, #6
 8002560:	60fb      	str	r3, [r7, #12]
        break;
 8002562:	e00a      	b.n	800257a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	09db      	lsrs	r3, r3, #7
 8002568:	60fb      	str	r3, [r7, #12]
        break;
 800256a:	e006      	b.n	800257a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	0a1b      	lsrs	r3, r3, #8
 8002570:	60fb      	str	r3, [r7, #12]
        break;
 8002572:	e002      	b.n	800257a <ADC_ConfigureBoostMode+0x14a>
        break;
 8002574:	bf00      	nop
 8002576:	e000      	b.n	800257a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002578:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800257a:	f7ff f8a5 	bl	80016c8 <HAL_GetREVID>
 800257e:	4603      	mov	r3, r0
 8002580:	f241 0203 	movw	r2, #4099	; 0x1003
 8002584:	4293      	cmp	r3, r2
 8002586:	d815      	bhi.n	80025b4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4a2b      	ldr	r2, [pc, #172]	; (8002638 <ADC_ConfigureBoostMode+0x208>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d908      	bls.n	80025a2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800259e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80025a0:	e03e      	b.n	8002620 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025b0:	609a      	str	r2, [r3, #8]
}
 80025b2:	e035      	b.n	8002620 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	085b      	lsrs	r3, r3, #1
 80025b8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4a1f      	ldr	r2, [pc, #124]	; (800263c <ADC_ConfigureBoostMode+0x20c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d808      	bhi.n	80025d4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80025d0:	609a      	str	r2, [r3, #8]
}
 80025d2:	e025      	b.n	8002620 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4a1a      	ldr	r2, [pc, #104]	; (8002640 <ADC_ConfigureBoostMode+0x210>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d80a      	bhi.n	80025f2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ee:	609a      	str	r2, [r3, #8]
}
 80025f0:	e016      	b.n	8002620 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4a13      	ldr	r2, [pc, #76]	; (8002644 <ADC_ConfigureBoostMode+0x214>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d80a      	bhi.n	8002610 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800260c:	609a      	str	r2, [r3, #8]
}
 800260e:	e007      	b.n	8002620 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800261e:	609a      	str	r2, [r3, #8]
}
 8002620:	bf00      	nop
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40022000 	.word	0x40022000
 800262c:	40022100 	.word	0x40022100
 8002630:	40022300 	.word	0x40022300
 8002634:	58026300 	.word	0x58026300
 8002638:	01312d00 	.word	0x01312d00
 800263c:	005f5e10 	.word	0x005f5e10
 8002640:	00bebc20 	.word	0x00bebc20
 8002644:	017d7840 	.word	0x017d7840

08002648 <__NVIC_SetPriorityGrouping>:
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <__NVIC_SetPriorityGrouping+0x40>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002664:	4013      	ands	r3, r2
 8002666:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <__NVIC_SetPriorityGrouping+0x44>)
 8002672:	4313      	orrs	r3, r2
 8002674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002676:	4a04      	ldr	r2, [pc, #16]	; (8002688 <__NVIC_SetPriorityGrouping+0x40>)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	60d3      	str	r3, [r2, #12]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000ed00 	.word	0xe000ed00
 800268c:	05fa0000 	.word	0x05fa0000

08002690 <__NVIC_GetPriorityGrouping>:
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002694:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	f003 0307 	and.w	r3, r3, #7
}
 800269e:	4618      	mov	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_SetPriority>:
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	6039      	str	r1, [r7, #0]
 80026b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	db0a      	blt.n	80026d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	490c      	ldr	r1, [pc, #48]	; (80026f8 <__NVIC_SetPriority+0x4c>)
 80026c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ca:	0112      	lsls	r2, r2, #4
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	440b      	add	r3, r1
 80026d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80026d4:	e00a      	b.n	80026ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	4908      	ldr	r1, [pc, #32]	; (80026fc <__NVIC_SetPriority+0x50>)
 80026dc:	88fb      	ldrh	r3, [r7, #6]
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	3b04      	subs	r3, #4
 80026e4:	0112      	lsls	r2, r2, #4
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	440b      	add	r3, r1
 80026ea:	761a      	strb	r2, [r3, #24]
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000e100 	.word	0xe000e100
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <NVIC_EncodePriority>:
{
 8002700:	b480      	push	{r7}
 8002702:	b089      	sub	sp, #36	; 0x24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f1c3 0307 	rsb	r3, r3, #7
 800271a:	2b04      	cmp	r3, #4
 800271c:	bf28      	it	cs
 800271e:	2304      	movcs	r3, #4
 8002720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3304      	adds	r3, #4
 8002726:	2b06      	cmp	r3, #6
 8002728:	d902      	bls.n	8002730 <NVIC_EncodePriority+0x30>
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3b03      	subs	r3, #3
 800272e:	e000      	b.n	8002732 <NVIC_EncodePriority+0x32>
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002734:	f04f 32ff 	mov.w	r2, #4294967295
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43da      	mvns	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	401a      	ands	r2, r3
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002748:	f04f 31ff 	mov.w	r1, #4294967295
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	fa01 f303 	lsl.w	r3, r1, r3
 8002752:	43d9      	mvns	r1, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002758:	4313      	orrs	r3, r2
}
 800275a:	4618      	mov	r0, r3
 800275c:	3724      	adds	r7, #36	; 0x24
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3b01      	subs	r3, #1
 8002774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002778:	d301      	bcc.n	800277e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800277a:	2301      	movs	r3, #1
 800277c:	e00f      	b.n	800279e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800277e:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <SysTick_Config+0x40>)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3b01      	subs	r3, #1
 8002784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002786:	210f      	movs	r1, #15
 8002788:	f04f 30ff 	mov.w	r0, #4294967295
 800278c:	f7ff ff8e 	bl	80026ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <SysTick_Config+0x40>)
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002796:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <SysTick_Config+0x40>)
 8002798:	2207      	movs	r2, #7
 800279a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	e000e010 	.word	0xe000e010

080027ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff ff47 	bl	8002648 <__NVIC_SetPriorityGrouping>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b086      	sub	sp, #24
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027d0:	f7ff ff5e 	bl	8002690 <__NVIC_GetPriorityGrouping>
 80027d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	6978      	ldr	r0, [r7, #20]
 80027dc:	f7ff ff90 	bl	8002700 <NVIC_EncodePriority>
 80027e0:	4602      	mov	r2, r0
 80027e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff5f 	bl	80026ac <__NVIC_SetPriority>
}
 80027ee:	bf00      	nop
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ffb2 	bl	8002768 <SysTick_Config>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002814:	f3bf 8f5f 	dmb	sy
}
 8002818:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800281a:	4b07      	ldr	r3, [pc, #28]	; (8002838 <HAL_MPU_Disable+0x28>)
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	4a06      	ldr	r2, [pc, #24]	; (8002838 <HAL_MPU_Disable+0x28>)
 8002820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002824:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_MPU_Disable+0x2c>)
 8002828:	2200      	movs	r2, #0
 800282a:	605a      	str	r2, [r3, #4]
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	e000ed00 	.word	0xe000ed00
 800283c:	e000ed90 	.word	0xe000ed90

08002840 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002848:	4a0b      	ldr	r2, [pc, #44]	; (8002878 <HAL_MPU_Enable+0x38>)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <HAL_MPU_Enable+0x3c>)
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	4a09      	ldr	r2, [pc, #36]	; (800287c <HAL_MPU_Enable+0x3c>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800285e:	f3bf 8f4f 	dsb	sy
}
 8002862:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002864:	f3bf 8f6f 	isb	sy
}
 8002868:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	e000ed90 	.word	0xe000ed90
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	785a      	ldrb	r2, [r3, #1]
 800288c:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <HAL_MPU_ConfigRegion+0x84>)
 800288e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d029      	beq.n	80028ec <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002898:	4a1a      	ldr	r2, [pc, #104]	; (8002904 <HAL_MPU_ConfigRegion+0x84>)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	7b1b      	ldrb	r3, [r3, #12]
 80028a4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	7adb      	ldrb	r3, [r3, #11]
 80028aa:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	7a9b      	ldrb	r3, [r3, #10]
 80028b2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80028b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	7b5b      	ldrb	r3, [r3, #13]
 80028ba:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80028bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	7b9b      	ldrb	r3, [r3, #14]
 80028c2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80028c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	7bdb      	ldrb	r3, [r3, #15]
 80028ca:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80028cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	7a5b      	ldrb	r3, [r3, #9]
 80028d2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80028d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7a1b      	ldrb	r3, [r3, #8]
 80028da:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80028dc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	7812      	ldrb	r2, [r2, #0]
 80028e2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028e4:	4a07      	ldr	r2, [pc, #28]	; (8002904 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80028e6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028e8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80028ea:	e005      	b.n	80028f8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_MPU_ConfigRegion+0x84>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80028f2:	4b04      	ldr	r3, [pc, #16]	; (8002904 <HAL_MPU_ConfigRegion+0x84>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	611a      	str	r2, [r3, #16]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000ed90 	.word	0xe000ed90

08002908 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e0cf      	b.n	8002aba <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002920:	2b00      	cmp	r3, #0
 8002922:	d106      	bne.n	8002932 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2223      	movs	r2, #35	; 0x23
 8002928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f005 fd83 	bl	8008438 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002932:	4b64      	ldr	r3, [pc, #400]	; (8002ac4 <HAL_ETH_Init+0x1bc>)
 8002934:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002938:	4a62      	ldr	r2, [pc, #392]	; (8002ac4 <HAL_ETH_Init+0x1bc>)
 800293a:	f043 0302 	orr.w	r3, r3, #2
 800293e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002942:	4b60      	ldr	r3, [pc, #384]	; (8002ac4 <HAL_ETH_Init+0x1bc>)
 8002944:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	7a1b      	ldrb	r3, [r3, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d103      	bne.n	8002960 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002958:	2000      	movs	r0, #0
 800295a:	f7fe fec1 	bl	80016e0 <HAL_SYSCFG_ETHInterfaceSelect>
 800295e:	e003      	b.n	8002968 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002960:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002964:	f7fe febc 	bl	80016e0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002968:	4b57      	ldr	r3, [pc, #348]	; (8002ac8 <HAL_ETH_Init+0x1c0>)
 800296a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002982:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002984:	f7fe fe94 	bl	80016b0 <HAL_GetTick>
 8002988:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800298a:	e011      	b.n	80029b0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800298c:	f7fe fe90 	bl	80016b0 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800299a:	d909      	bls.n	80029b0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2204      	movs	r2, #4
 80029a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	22e0      	movs	r2, #224	; 0xe0
 80029a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e084      	b.n	8002aba <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1e4      	bne.n	800298c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fd94 	bl	80034f0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80029c8:	f002 fcec 	bl	80053a4 <HAL_RCC_GetHCLKFreq>
 80029cc:	4603      	mov	r3, r0
 80029ce:	4a3f      	ldr	r2, [pc, #252]	; (8002acc <HAL_ETH_Init+0x1c4>)
 80029d0:	fba2 2303 	umull	r2, r3, r2, r3
 80029d4:	0c9a      	lsrs	r2, r3, #18
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	3a01      	subs	r2, #1
 80029dc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 ff7f 	bl	80038e4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80029f2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6812      	ldr	r2, [r2, #0]
 80029fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80029fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a02:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d009      	beq.n	8002a26 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	22e0      	movs	r2, #224	; 0xe0
 8002a1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e049      	b.n	8002aba <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a2e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002a32:	4b27      	ldr	r3, [pc, #156]	; (8002ad0 <HAL_ETH_Init+0x1c8>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6952      	ldr	r2, [r2, #20]
 8002a3a:	0051      	lsls	r1, r2, #1
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	430b      	orrs	r3, r1
 8002a42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a46:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 ffe7 	bl	8003a1e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f001 f82d 	bl	8003ab0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	3305      	adds	r3, #5
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	021a      	lsls	r2, r3, #8
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	3304      	adds	r3, #4
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	3303      	adds	r3, #3
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	061a      	lsls	r2, r3, #24
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	3302      	adds	r3, #2
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	041b      	lsls	r3, r3, #16
 8002a88:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002a94:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002aa2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002aa4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2210      	movs	r2, #16
 8002ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	58024400 	.word	0x58024400
 8002ac8:	58000400 	.word	0x58000400
 8002acc:	431bde83 	.word	0x431bde83
 8002ad0:	ffff8001 	.word	0xffff8001

08002ad4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ae2:	2b10      	cmp	r3, #16
 8002ae4:	d153      	bne.n	8002b8e <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2223      	movs	r2, #35	; 0x23
 8002aea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2204      	movs	r2, #4
 8002af2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f9f6 	bl	8002ee6 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0202 	orr.w	r2, r2, #2
 8002b08:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0201 	orr.w	r2, r2, #1
 8002b18:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b36:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6812      	ldr	r2, [r2, #0]
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b46:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b52:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b62:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b6e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8002b7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b7e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2223      	movs	r2, #35	; 0x23
 8002b86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	e000      	b.n	8002b90 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
  }
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ba6:	2b23      	cmp	r3, #35	; 0x23
 8002ba8:	d13f      	bne.n	8002c2a <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2223      	movs	r2, #35	; 0x23
 8002bae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bba:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6812      	ldr	r2, [r2, #0]
 8002bc2:	f023 0301 	bic.w	r3, r3, #1
 8002bc6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002bca:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	f023 0301 	bic.w	r3, r3, #1
 8002be2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002be6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0201 	bic.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0202 	bic.w	r2, r2, #2
 8002c1c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2210      	movs	r2, #16
 8002c22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	e000      	b.n	8002c2c <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
  }
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d109      	bne.n	8002c5e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c50:	f043 0201 	orr.w	r2, r3, #1
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e07f      	b.n	8002d5e <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c64:	2b23      	cmp	r3, #35	; 0x23
 8002c66:	d179      	bne.n	8002d5c <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	68b9      	ldr	r1, [r7, #8]
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 ff7d 	bl	8003b6c <ETH_Prepare_Tx_Descriptors>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d009      	beq.n	8002c8c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7e:	f043 0202 	orr.w	r2, r3, #2
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e068      	b.n	8002d5e <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8002c8c:	f3bf 8f4f 	dsb	sy
}
 8002c90:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	3206      	adds	r2, #6
 8002c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c9e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	629a      	str	r2, [r3, #40]	; 0x28
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d904      	bls.n	8002cbc <HAL_ETH_Transmit+0x84>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb6:	1f1a      	subs	r2, r3, #4
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	3106      	adds	r1, #6
 8002cc8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ccc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cd0:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 8002cd4:	f7fe fcec 	bl	80016b0 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002cda:	e039      	b.n	8002d50 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ce4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002ce8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d012      	beq.n	8002d16 <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf6:	f043 0208 	orr.w	r2, r3, #8
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d08:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e023      	b.n	8002d5e <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1c:	d018      	beq.n	8002d50 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d1e:	f7fe fcc7 	bl	80016b0 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d302      	bcc.n	8002d34 <HAL_ETH_Transmit+0xfc>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10d      	bne.n	8002d50 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3a:	f043 0204 	orr.w	r2, r3, #4
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002d4a:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e006      	b.n	8002d5e <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	dbc1      	blt.n	8002cdc <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e000      	b.n	8002d5e <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
  }
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b088      	sub	sp, #32
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d109      	bne.n	8002d92 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d84:	f043 0201 	orr.w	r2, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e0a5      	b.n	8002ede <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d98:	2b23      	cmp	r3, #35	; 0x23
 8002d9a:	d001      	beq.n	8002da0 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e09e      	b.n	8002ede <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	3212      	adds	r2, #18
 8002dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db0:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002db6:	f1c3 0304 	rsb	r3, r3, #4
 8002dba:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002dbc:	e067      	b.n	8002e8e <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d007      	beq.n	8002dda <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d103      	bne.n	8002dee <HAL_ETH_ReadData+0x88>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d03d      	beq.n	8002e6a <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d005      	beq.n	8002e06 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00d      	beq.n	8002e34 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002e44:	461a      	mov	r2, r3
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	f005 fd2f 	bl	80088ac <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	441a      	add	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2200      	movs	r2, #0
 8002e68:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	61fb      	str	r3, [r7, #28]
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d902      	bls.n	8002e7c <HAL_ETH_ReadData+0x116>
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	3b04      	subs	r3, #4
 8002e7a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69fa      	ldr	r2, [r7, #28]
 8002e80:	3212      	adds	r2, #18
 8002e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e86:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	db06      	blt.n	8002ea4 <HAL_ETH_ReadData+0x13e>
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d202      	bcs.n	8002ea4 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d08c      	beq.n	8002dbe <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	441a      	add	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f814 	bl	8002ee6 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69fa      	ldr	r2, [r7, #28]
 8002ec2:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d108      	bne.n	8002edc <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	e000      	b.n	8002ede <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3720      	adds	r7, #32
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b088      	sub	sp, #32
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002efa:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	3212      	adds	r2, #18
 8002f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f06:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f0c:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002f0e:	e03b      	b.n	8002f88 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d112      	bne.n	8002f3e <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002f18:	f107 030c 	add.w	r3, r7, #12
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f005 fc95 	bl	800884c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d102      	bne.n	8002f2e <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	74fb      	strb	r3, [r7, #19]
 8002f2c:	e007      	b.n	8002f3e <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	461a      	mov	r2, r3
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8002f3e:	7cfb      	ldrb	r3, [r7, #19]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d021      	beq.n	8002f88 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002f44:	f3bf 8f5f 	dmb	sy
}
 8002f48:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d004      	beq.n	8002f5c <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8002f58:	60da      	str	r2, [r3, #12]
 8002f5a:	e003      	b.n	8002f64 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8002f62:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	3301      	adds	r3, #1
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d902      	bls.n	8002f76 <ETH_UpdateDescriptor+0x90>
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	3b04      	subs	r3, #4
 8002f74:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69fa      	ldr	r2, [r7, #28]
 8002f7a:	3212      	adds	r2, #18
 8002f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f80:	617b      	str	r3, [r7, #20]
      desccount--;
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	3b01      	subs	r3, #1
 8002f86:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <ETH_UpdateDescriptor+0xae>
 8002f8e:	7cfb      	ldrb	r3, [r7, #19]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1bd      	bne.n	8002f10 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d00d      	beq.n	8002fba <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002fba:	bf00      	nop
 8002fbc:	3720      	adds	r7, #32
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b086      	sub	sp, #24
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	60f8      	str	r0, [r7, #12]
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e03e      	b.n	8003062 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002fec:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	055b      	lsls	r3, r3, #21
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	041b      	lsls	r3, r3, #16
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f043 030c 	orr.w	r3, r3, #12
 8003010:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8003024:	f7fe fb44 	bl	80016b0 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800302a:	e009      	b.n	8003040 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800302c:	f7fe fb40 	bl	80016b0 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800303a:	d901      	bls.n	8003040 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e010      	b.n	8003062 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1ed      	bne.n	800302c <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003058:	b29b      	uxth	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e03c      	b.n	8003108 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003096:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	055b      	lsls	r3, r3, #21
 80030a2:	4313      	orrs	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	041b      	lsls	r3, r3, #16
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f023 030c 	bic.w	r3, r3, #12
 80030ba:	f043 0304 	orr.w	r3, r3, #4
 80030be:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	4b10      	ldr	r3, [pc, #64]	; (8003110 <HAL_ETH_WritePHYRegister+0xa4>)
 80030ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80030d2:	4a0f      	ldr	r2, [pc, #60]	; (8003110 <HAL_ETH_WritePHYRegister+0xa4>)
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80030da:	f7fe fae9 	bl	80016b0 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80030e0:	e009      	b.n	80030f6 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80030e2:	f7fe fae5 	bl	80016b0 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030f0:	d901      	bls.n	80030f6 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e008      	b.n	8003108 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1ed      	bne.n	80030e2 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40028000 	.word	0x40028000

08003114 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e1c3      	b.n	80034b0 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 020c 	and.w	r2, r3, #12
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b00      	cmp	r3, #0
 8003142:	bf14      	ite	ne
 8003144:	2301      	movne	r3, #1
 8003146:	2300      	moveq	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	461a      	mov	r2, r3
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316a:	2b00      	cmp	r3, #0
 800316c:	bf0c      	ite	eq
 800316e:	2301      	moveq	r3, #1
 8003170:	2300      	movne	r3, #0
 8003172:	b2db      	uxtb	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8003186:	2b00      	cmp	r3, #0
 8003188:	bf14      	ite	ne
 800318a:	2301      	movne	r3, #1
 800318c:	2300      	moveq	r3, #0
 800318e:	b2db      	uxtb	r3, r3
 8003190:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf0c      	ite	eq
 80031a4:	2301      	moveq	r3, #1
 80031a6:	2300      	movne	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	461a      	mov	r2, r3
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80031b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	bf14      	ite	ne
 80031be:	2301      	movne	r3, #1
 80031c0:	2300      	moveq	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	bf14      	ite	ne
 80031d8:	2301      	movne	r3, #1
 80031da:	2300      	moveq	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	461a      	mov	r2, r3
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800320a:	2b00      	cmp	r3, #0
 800320c:	bf14      	ite	ne
 800320e:	2301      	movne	r3, #1
 8003210:	2300      	moveq	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003224:	2b00      	cmp	r3, #0
 8003226:	bf0c      	ite	eq
 8003228:	2301      	moveq	r3, #1
 800322a:	2300      	movne	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800323e:	2b00      	cmp	r3, #0
 8003240:	bf0c      	ite	eq
 8003242:	2301      	moveq	r3, #1
 8003244:	2300      	movne	r3, #0
 8003246:	b2db      	uxtb	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf14      	ite	ne
 800325c:	2301      	movne	r3, #1
 800325e:	2300      	moveq	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	461a      	mov	r2, r3
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003272:	2b00      	cmp	r3, #0
 8003274:	bf14      	ite	ne
 8003276:	2301      	movne	r3, #1
 8003278:	2300      	moveq	r3, #0
 800327a:	b2db      	uxtb	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf14      	ite	ne
 8003290:	2301      	movne	r3, #1
 8003292:	2300      	moveq	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	461a      	mov	r2, r3
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80032a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bf14      	ite	ne
 80032aa:	2301      	movne	r3, #1
 80032ac:	2300      	moveq	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	bf14      	ite	ne
 80032d2:	2301      	movne	r3, #1
 80032d4:	2300      	moveq	r3, #0
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003304:	2b00      	cmp	r3, #0
 8003306:	bf0c      	ite	eq
 8003308:	2301      	moveq	r3, #1
 800330a:	2300      	movne	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	461a      	mov	r2, r3
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf14      	ite	ne
 8003324:	2301      	movne	r3, #1
 8003326:	2300      	moveq	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8003338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800333c:	2b00      	cmp	r3, #0
 800333e:	bf14      	ite	ne
 8003340:	2301      	movne	r3, #1
 8003342:	2300      	moveq	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8003358:	2b00      	cmp	r3, #0
 800335a:	bf14      	ite	ne
 800335c:	2301      	movne	r3, #1
 800335e:	2300      	moveq	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	0e5b      	lsrs	r3, r3, #25
 8003372:	f003 021f 	and.w	r2, r3, #31
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf14      	ite	ne
 8003388:	2301      	movne	r3, #1
 800338a:	2300      	moveq	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	461a      	mov	r2, r3
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f003 020f 	and.w	r2, r3, #15
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	bf14      	ite	ne
 80033b2:	2301      	movne	r3, #1
 80033b4:	2300      	moveq	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	461a      	mov	r2, r3
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	bf0c      	ite	eq
 80033ce:	2301      	moveq	r3, #1
 80033d0:	2300      	movne	r3, #0
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	0c1b      	lsrs	r3, r3, #16
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	bf14      	ite	ne
 8003408:	2301      	movne	r3, #1
 800340a:	2300      	moveq	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	461a      	mov	r2, r3
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341e:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8003422:	2b00      	cmp	r3, #0
 8003424:	bf14      	ite	ne
 8003426:	2301      	movne	r3, #1
 8003428:	2300      	moveq	r3, #0
 800342a:	b2db      	uxtb	r3, r3
 800342c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800343c:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800344c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf14      	ite	ne
 8003464:	2301      	movne	r3, #1
 8003466:	2300      	moveq	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	bf14      	ite	ne
 8003482:	2301      	movne	r3, #1
 8003484:	2300      	moveq	r3, #0
 8003486:	b2db      	uxtb	r3, r3
 8003488:	461a      	mov	r2, r3
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8003498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	bf0c      	ite	eq
 80034a0:	2301      	moveq	r3, #1
 80034a2:	2300      	movne	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e00b      	b.n	80034e8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034d6:	2b10      	cmp	r3, #16
 80034d8:	d105      	bne.n	80034e6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80034da:	6839      	ldr	r1, [r7, #0]
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f85f 	bl	80035a0 <ETH_SetMACConfig>

    return HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	e000      	b.n	80034e8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
  }
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003500:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003508:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800350a:	f001 ff4b 	bl	80053a4 <HAL_RCC_GetHCLKFreq>
 800350e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4a1e      	ldr	r2, [pc, #120]	; (800358c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d908      	bls.n	800352a <HAL_ETH_SetMDIOClockRange+0x3a>
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4a1d      	ldr	r2, [pc, #116]	; (8003590 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d804      	bhi.n	800352a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	e027      	b.n	800357a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4a18      	ldr	r2, [pc, #96]	; (8003590 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d908      	bls.n	8003544 <HAL_ETH_SetMDIOClockRange+0x54>
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	4a17      	ldr	r2, [pc, #92]	; (8003594 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d204      	bcs.n	8003544 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	e01a      	b.n	800357a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	4a13      	ldr	r2, [pc, #76]	; (8003594 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d303      	bcc.n	8003554 <HAL_ETH_SetMDIOClockRange+0x64>
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	4a12      	ldr	r2, [pc, #72]	; (8003598 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d911      	bls.n	8003578 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	4a10      	ldr	r2, [pc, #64]	; (8003598 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d908      	bls.n	800356e <HAL_ETH_SetMDIOClockRange+0x7e>
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4a0f      	ldr	r2, [pc, #60]	; (800359c <HAL_ETH_SetMDIOClockRange+0xac>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d804      	bhi.n	800356e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	e005      	b.n	800357a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	e000      	b.n	800357a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003578:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003584:	bf00      	nop
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	01312cff 	.word	0x01312cff
 8003590:	02160ebf 	.word	0x02160ebf
 8003594:	03938700 	.word	0x03938700
 8003598:	05f5e0ff 	.word	0x05f5e0ff
 800359c:	08f0d17f 	.word	0x08f0d17f

080035a0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80035b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	791b      	ldrb	r3, [r3, #4]
 80035b8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80035ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	7b1b      	ldrb	r3, [r3, #12]
 80035c0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80035c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	7b5b      	ldrb	r3, [r3, #13]
 80035c8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80035ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	7b9b      	ldrb	r3, [r3, #14]
 80035d0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80035d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	7bdb      	ldrb	r3, [r3, #15]
 80035d8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80035da:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	7c12      	ldrb	r2, [r2, #16]
 80035e0:	2a00      	cmp	r2, #0
 80035e2:	d102      	bne.n	80035ea <ETH_SetMACConfig+0x4a>
 80035e4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80035e8:	e000      	b.n	80035ec <ETH_SetMACConfig+0x4c>
 80035ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80035ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	7c52      	ldrb	r2, [r2, #17]
 80035f2:	2a00      	cmp	r2, #0
 80035f4:	d102      	bne.n	80035fc <ETH_SetMACConfig+0x5c>
 80035f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035fa:	e000      	b.n	80035fe <ETH_SetMACConfig+0x5e>
 80035fc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80035fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	7c9b      	ldrb	r3, [r3, #18]
 8003604:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003606:	431a      	orrs	r2, r3
               macconf->Speed |
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800360c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003612:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	7f1b      	ldrb	r3, [r3, #28]
 8003618:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800361a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	7f5b      	ldrb	r3, [r3, #29]
 8003620:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003622:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	7f92      	ldrb	r2, [r2, #30]
 8003628:	2a00      	cmp	r2, #0
 800362a:	d102      	bne.n	8003632 <ETH_SetMACConfig+0x92>
 800362c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003630:	e000      	b.n	8003634 <ETH_SetMACConfig+0x94>
 8003632:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003634:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	7fdb      	ldrb	r3, [r3, #31]
 800363a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800363c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003644:	2a00      	cmp	r2, #0
 8003646:	d102      	bne.n	800364e <ETH_SetMACConfig+0xae>
 8003648:	f44f 7280 	mov.w	r2, #256	; 0x100
 800364c:	e000      	b.n	8003650 <ETH_SetMACConfig+0xb0>
 800364e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003650:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003656:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800365e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003660:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	4b56      	ldr	r3, [pc, #344]	; (80037cc <ETH_SetMACConfig+0x22c>)
 8003672:	4013      	ands	r3, r2
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6812      	ldr	r2, [r2, #0]
 8003678:	68f9      	ldr	r1, [r7, #12]
 800367a:	430b      	orrs	r3, r1
 800367c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003682:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800368a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800368c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003694:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003696:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800369e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80036a0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80036a8:	2a00      	cmp	r2, #0
 80036aa:	d102      	bne.n	80036b2 <ETH_SetMACConfig+0x112>
 80036ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80036b0:	e000      	b.n	80036b4 <ETH_SetMACConfig+0x114>
 80036b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80036b4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	4b42      	ldr	r3, [pc, #264]	; (80037d0 <ETH_SetMACConfig+0x230>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	68f9      	ldr	r1, [r7, #12]
 80036ce:	430b      	orrs	r3, r1
 80036d0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036d8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	4b3a      	ldr	r3, [pc, #232]	; (80037d4 <ETH_SetMACConfig+0x234>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6812      	ldr	r2, [r2, #0]
 80036f0:	68f9      	ldr	r1, [r7, #12]
 80036f2:	430b      	orrs	r3, r1
 80036f4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80036fc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003702:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800370a:	2a00      	cmp	r2, #0
 800370c:	d101      	bne.n	8003712 <ETH_SetMACConfig+0x172>
 800370e:	2280      	movs	r2, #128	; 0x80
 8003710:	e000      	b.n	8003714 <ETH_SetMACConfig+0x174>
 8003712:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003714:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800371c:	4313      	orrs	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003726:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800372a:	4013      	ands	r3, r2
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	68f9      	ldr	r1, [r7, #12]
 8003732:	430b      	orrs	r3, r1
 8003734:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800373c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003744:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	f023 0103 	bic.w	r1, r3, #3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	430a      	orrs	r2, r1
 800375e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800376a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003786:	2a00      	cmp	r2, #0
 8003788:	d101      	bne.n	800378e <ETH_SetMACConfig+0x1ee>
 800378a:	2240      	movs	r2, #64	; 0x40
 800378c:	e000      	b.n	8003790 <ETH_SetMACConfig+0x1f0>
 800378e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003790:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003798:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800379a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80037a2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80037a4:	4313      	orrs	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80037b0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80037c0:	bf00      	nop
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	00048083 	.word	0x00048083
 80037d0:	c0f88000 	.word	0xc0f88000
 80037d4:	fffffef0 	.word	0xfffffef0

080037d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	4b38      	ldr	r3, [pc, #224]	; (80038d0 <ETH_SetDMAConfig+0xf8>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	6811      	ldr	r1, [r2, #0]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6812      	ldr	r2, [r2, #0]
 80037f8:	430b      	orrs	r3, r1
 80037fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037fe:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	791b      	ldrb	r3, [r3, #4]
 8003804:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800380a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	7b1b      	ldrb	r3, [r3, #12]
 8003810:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	4b2c      	ldr	r3, [pc, #176]	; (80038d4 <ETH_SetDMAConfig+0xfc>)
 8003822:	4013      	ands	r3, r2
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	68f9      	ldr	r1, [r7, #12]
 800382a:	430b      	orrs	r3, r1
 800382c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003830:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	7b5b      	ldrb	r3, [r3, #13]
 8003836:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800383c:	4313      	orrs	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003848:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800384c:	4b22      	ldr	r3, [pc, #136]	; (80038d8 <ETH_SetDMAConfig+0x100>)
 800384e:	4013      	ands	r3, r2
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	68f9      	ldr	r1, [r7, #12]
 8003856:	430b      	orrs	r3, r1
 8003858:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800385c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	7d1b      	ldrb	r3, [r3, #20]
 8003868:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800386a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	7f5b      	ldrb	r3, [r3, #29]
 8003870:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800387e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003882:	4b16      	ldr	r3, [pc, #88]	; (80038dc <ETH_SetDMAConfig+0x104>)
 8003884:	4013      	ands	r3, r2
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6812      	ldr	r2, [r2, #0]
 800388a:	68f9      	ldr	r1, [r7, #12]
 800388c:	430b      	orrs	r3, r1
 800388e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003892:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	7f1b      	ldrb	r3, [r3, #28]
 800389a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ac:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <ETH_SetDMAConfig+0x108>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	68f9      	ldr	r1, [r7, #12]
 80038ba:	430b      	orrs	r3, r1
 80038bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038c0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80038c4:	bf00      	nop
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	ffff87fd 	.word	0xffff87fd
 80038d4:	ffff2ffe 	.word	0xffff2ffe
 80038d8:	fffec000 	.word	0xfffec000
 80038dc:	ffc0efef 	.word	0xffc0efef
 80038e0:	7fc0ffff 	.word	0x7fc0ffff

080038e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b0a4      	sub	sp, #144	; 0x90
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80038ec:	2301      	movs	r3, #1
 80038ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80038f2:	2300      	movs	r3, #0
 80038f4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80038f6:	2300      	movs	r3, #0
 80038f8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80038fc:	2300      	movs	r3, #0
 80038fe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003902:	2301      	movs	r3, #1
 8003904:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003908:	2301      	movs	r3, #1
 800390a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800390e:	2301      	movs	r3, #1
 8003910:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003914:	2300      	movs	r3, #0
 8003916:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800391a:	2301      	movs	r3, #1
 800391c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003924:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003926:	2300      	movs	r3, #0
 8003928:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800392c:	2300      	movs	r3, #0
 800392e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003930:	2300      	movs	r3, #0
 8003932:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003936:	2300      	movs	r3, #0
 8003938:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800393c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003940:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003942:	2300      	movs	r3, #0
 8003944:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003948:	2300      	movs	r3, #0
 800394a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800394c:	2301      	movs	r3, #1
 800394e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003952:	2300      	movs	r3, #0
 8003954:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003958:	2300      	movs	r3, #0
 800395a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800395e:	2300      	movs	r3, #0
 8003960:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003962:	2300      	movs	r3, #0
 8003964:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003966:	2300      	movs	r3, #0
 8003968:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800396a:	2300      	movs	r3, #0
 800396c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003970:	2300      	movs	r3, #0
 8003972:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003976:	2301      	movs	r3, #1
 8003978:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800397c:	2320      	movs	r3, #32
 800397e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003982:	2301      	movs	r3, #1
 8003984:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003988:	2300      	movs	r3, #0
 800398a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800398e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003992:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003994:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003998:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800399a:	2300      	movs	r3, #0
 800399c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80039a0:	2302      	movs	r3, #2
 80039a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80039a6:	2300      	movs	r3, #0
 80039a8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80039ac:	2300      	movs	r3, #0
 80039ae:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80039be:	2300      	movs	r3, #0
 80039c0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80039c2:	2301      	movs	r3, #1
 80039c4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80039c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039cc:	4619      	mov	r1, r3
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff fde6 	bl	80035a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80039d4:	2301      	movs	r3, #1
 80039d6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80039d8:	2301      	movs	r3, #1
 80039da:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80039dc:	2300      	movs	r3, #0
 80039de:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80039e0:	2300      	movs	r3, #0
 80039e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80039e6:	2300      	movs	r3, #0
 80039e8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80039ea:	2300      	movs	r3, #0
 80039ec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80039ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80039f2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80039f4:	2300      	movs	r3, #0
 80039f6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80039f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80039fc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80039fe:	2300      	movs	r3, #0
 8003a00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003a04:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003a08:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003a0a:	f107 0308 	add.w	r3, r7, #8
 8003a0e:	4619      	mov	r1, r3
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff fee1 	bl	80037d8 <ETH_SetDMAConfig>
}
 8003a16:	bf00      	nop
 8003a18:	3790      	adds	r7, #144	; 0x90
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b085      	sub	sp, #20
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	e01d      	b.n	8003a68 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68d9      	ldr	r1, [r3, #12]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4613      	mov	r3, r2
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	4413      	add	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	440b      	add	r3, r1
 8003a3c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2200      	movs	r2, #0
 8003a48:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2200      	movs	r2, #0
 8003a54:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003a56:	68b9      	ldr	r1, [r7, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	3206      	adds	r2, #6
 8003a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	3301      	adds	r3, #1
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d9de      	bls.n	8003a2c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	2303      	movs	r3, #3
 8003a80:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a90:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aa0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8003aa4:	bf00      	nop
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	e023      	b.n	8003b06 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6919      	ldr	r1, [r3, #16]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	4413      	add	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	440b      	add	r3, r1
 8003ace:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2200      	movs	r2, #0
 8003aec:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2200      	movs	r2, #0
 8003af2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003af4:	68b9      	ldr	r1, [r7, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	3212      	adds	r2, #18
 8003afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	3301      	adds	r3, #1
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d9d8      	bls.n	8003abe <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b32:	461a      	mov	r2, r3
 8003b34:	2303      	movs	r3, #3
 8003b36:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b46:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b5a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8003b5e:	bf00      	nop
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
	...

08003b6c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b08d      	sub	sp, #52	; 0x34
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	3318      	adds	r3, #24
 8003b7c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b96:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003baa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bae:	d007      	beq.n	8003bc0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e259      	b.n	8004078 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d044      	beq.n	8003c5a <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	4b75      	ldr	r3, [pc, #468]	; (8003dac <ETH_Prepare_Tx_Descriptors+0x240>)
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003bfc:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d027      	beq.n	8003c5a <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	041b      	lsls	r3, r3, #16
 8003c16:	431a      	orrs	r2, r3
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	431a      	orrs	r2, r3
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003c48:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003c58:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0310 	and.w	r3, r3, #16
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00e      	beq.n	8003c84 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	4b51      	ldr	r3, [pc, #324]	; (8003db0 <ETH_Prepare_Tx_Descriptors+0x244>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	6992      	ldr	r2, [r2, #24]
 8003c72:	431a      	orrs	r2, r3
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d105      	bne.n	8003c9c <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0310 	and.w	r3, r3, #16
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d036      	beq.n	8003d0a <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003ca8:	f3bf 8f5f 	dmb	sy
}
 8003cac:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d902      	bls.n	8003ccc <ETH_Prepare_Tx_Descriptors+0x160>
 8003cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc8:	3b04      	subs	r3, #4
 8003cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cd4:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	3301      	adds	r3, #1
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ce4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ce8:	d10f      	bne.n	8003d0a <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cf2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8003cf4:	f3bf 8f5f 	dmb	sy
}
 8003cf8:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003d06:	2302      	movs	r3, #2
 8003d08:	e1b6      	b.n	8004078 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	4b24      	ldr	r3, [pc, #144]	; (8003db0 <ETH_Prepare_Tx_Descriptors+0x244>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	69fa      	ldr	r2, [r7, #28]
 8003d24:	6852      	ldr	r2, [r2, #4]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d012      	beq.n	8003d5a <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	4b1a      	ldr	r3, [pc, #104]	; (8003db4 <ETH_Prepare_Tx_Descriptors+0x248>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	6852      	ldr	r2, [r2, #4]
 8003d50:	0412      	lsls	r2, r2, #16
 8003d52:	431a      	orrs	r2, r3
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	609a      	str	r2, [r3, #8]
 8003d58:	e008      	b.n	8003d6c <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <ETH_Prepare_Tx_Descriptors+0x248>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	6a3a      	ldr	r2, [r7, #32]
 8003d6a:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0310 	and.w	r3, r3, #16
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d021      	beq.n	8003dbc <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	04db      	lsls	r3, r3, #19
 8003d86:	431a      	orrs	r2, r3
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8003d92:	4013      	ands	r3, r2
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	69d2      	ldr	r2, [r2, #28]
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	60da      	str	r2, [r3, #12]
 8003daa:	e02e      	b.n	8003e0a <ETH_Prepare_Tx_Descriptors+0x29e>
 8003dac:	ffff0000 	.word	0xffff0000
 8003db0:	ffffc000 	.word	0xffffc000
 8003db4:	c000ffff 	.word	0xc000ffff
 8003db8:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	4b7b      	ldr	r3, [pc, #492]	; (8003fb0 <ETH_Prepare_Tx_Descriptors+0x444>)
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	6852      	ldr	r2, [r2, #4]
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d008      	beq.n	8003dec <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	431a      	orrs	r2, r3
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0304 	and.w	r3, r3, #4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d008      	beq.n	8003e28 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e22:	431a      	orrs	r2, r3
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003e40:	f3bf 8f5f 	dmb	sy
}
 8003e44:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 80da 	beq.w	8004014 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003e72:	e0cf      	b.n	8004014 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e82:	3301      	adds	r3, #1
 8003e84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e88:	2b03      	cmp	r3, #3
 8003e8a:	d902      	bls.n	8003e92 <ETH_Prepare_Tx_Descriptors+0x326>
 8003e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8e:	3b04      	subs	r3, #4
 8003e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e9a:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003eb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003eb4:	d007      	beq.n	8003ec6 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eba:	3304      	adds	r3, #4
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d029      	beq.n	8003f1a <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ed2:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ed8:	e019      	b.n	8003f0e <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8003eda:	f3bf 8f5f 	dmb	sy
}
 8003ede:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
 8003eea:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eee:	3301      	adds	r3, #1
 8003ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d902      	bls.n	8003efe <ETH_Prepare_Tx_Descriptors+0x392>
 8003ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efa:	3b04      	subs	r3, #4
 8003efc:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f06:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8003f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d3e1      	bcc.n	8003eda <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8003f16:	2302      	movs	r3, #2
 8003f18:	e0ae      	b.n	8004078 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	4b1f      	ldr	r3, [pc, #124]	; (8003fb4 <ETH_Prepare_Tx_Descriptors+0x448>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	6852      	ldr	r2, [r2, #4]
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d012      	beq.n	8003f70 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	4b16      	ldr	r3, [pc, #88]	; (8003fb8 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	6852      	ldr	r2, [r2, #4]
 8003f66:	0412      	lsls	r2, r2, #16
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	609a      	str	r2, [r3, #8]
 8003f6e:	e008      	b.n	8003f82 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	2200      	movs	r2, #0
 8003f74:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	6a3a      	ldr	r2, [r7, #32]
 8003f80:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d018      	beq.n	8003fc0 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <ETH_Prepare_Tx_Descriptors+0x450>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	69d2      	ldr	r2, [r2, #28]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	60da      	str	r2, [r3, #12]
 8003fac:	e020      	b.n	8003ff0 <ETH_Prepare_Tx_Descriptors+0x484>
 8003fae:	bf00      	nop
 8003fb0:	ffff8000 	.word	0xffff8000
 8003fb4:	ffffc000 	.word	0xffffc000
 8003fb8:	c000ffff 	.word	0xc000ffff
 8003fbc:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	68da      	ldr	r2, [r3, #12]
 8003fc4:	4b2f      	ldr	r3, [pc, #188]	; (8004084 <ETH_Prepare_Tx_Descriptors+0x518>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	6852      	ldr	r2, [r2, #4]
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d008      	beq.n	8003ff0 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	431a      	orrs	r2, r3
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8003ff6:	f3bf 8f5f 	dmb	sy
}
 8003ffa:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	f47f af2b 	bne.w	8003e74 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d006      	beq.n	8004032 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	609a      	str	r2, [r3, #8]
 8004030:	e005      	b.n	800403e <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800404e:	6979      	ldr	r1, [r7, #20]
 8004050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004052:	3304      	adds	r3, #4
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	440b      	add	r3, r1
 8004058:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800405e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004060:	b672      	cpsid	i
}
 8004062:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	4413      	add	r3, r2
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004072:	b662      	cpsie	i
}
 8004074:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3734      	adds	r7, #52	; 0x34
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	ffff8000 	.word	0xffff8000

08004088 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004088:	b480      	push	{r7}
 800408a:	b089      	sub	sp, #36	; 0x24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004092:	2300      	movs	r3, #0
 8004094:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004096:	4b89      	ldr	r3, [pc, #548]	; (80042bc <HAL_GPIO_Init+0x234>)
 8004098:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800409a:	e194      	b.n	80043c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	2101      	movs	r1, #1
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	fa01 f303 	lsl.w	r3, r1, r3
 80040a8:	4013      	ands	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 8186 	beq.w	80043c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 0303 	and.w	r3, r3, #3
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d005      	beq.n	80040cc <HAL_GPIO_Init+0x44>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f003 0303 	and.w	r3, r3, #3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d130      	bne.n	800412e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	2203      	movs	r2, #3
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4013      	ands	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004102:	2201      	movs	r2, #1
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	43db      	mvns	r3, r3
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	4013      	ands	r3, r2
 8004110:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	091b      	lsrs	r3, r3, #4
 8004118:	f003 0201 	and.w	r2, r3, #1
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	4313      	orrs	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	2b03      	cmp	r3, #3
 8004138:	d017      	beq.n	800416a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	2203      	movs	r2, #3
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	43db      	mvns	r3, r3
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	4013      	ands	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	fa02 f303 	lsl.w	r3, r2, r3
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	4313      	orrs	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d123      	bne.n	80041be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	08da      	lsrs	r2, r3, #3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3208      	adds	r2, #8
 800417e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	220f      	movs	r2, #15
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	43db      	mvns	r3, r3
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	4013      	ands	r3, r2
 8004198:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	08da      	lsrs	r2, r3, #3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3208      	adds	r2, #8
 80041b8:	69b9      	ldr	r1, [r7, #24]
 80041ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	2203      	movs	r2, #3
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	43db      	mvns	r3, r3
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	4013      	ands	r3, r2
 80041d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f003 0203 	and.w	r2, r3, #3
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 80e0 	beq.w	80043c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004200:	4b2f      	ldr	r3, [pc, #188]	; (80042c0 <HAL_GPIO_Init+0x238>)
 8004202:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004206:	4a2e      	ldr	r2, [pc, #184]	; (80042c0 <HAL_GPIO_Init+0x238>)
 8004208:	f043 0302 	orr.w	r3, r3, #2
 800420c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004210:	4b2b      	ldr	r3, [pc, #172]	; (80042c0 <HAL_GPIO_Init+0x238>)
 8004212:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800421e:	4a29      	ldr	r2, [pc, #164]	; (80042c4 <HAL_GPIO_Init+0x23c>)
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	089b      	lsrs	r3, r3, #2
 8004224:	3302      	adds	r3, #2
 8004226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800422a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	220f      	movs	r2, #15
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	43db      	mvns	r3, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4013      	ands	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a20      	ldr	r2, [pc, #128]	; (80042c8 <HAL_GPIO_Init+0x240>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d052      	beq.n	80042f0 <HAL_GPIO_Init+0x268>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a1f      	ldr	r2, [pc, #124]	; (80042cc <HAL_GPIO_Init+0x244>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d031      	beq.n	80042b6 <HAL_GPIO_Init+0x22e>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a1e      	ldr	r2, [pc, #120]	; (80042d0 <HAL_GPIO_Init+0x248>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d02b      	beq.n	80042b2 <HAL_GPIO_Init+0x22a>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a1d      	ldr	r2, [pc, #116]	; (80042d4 <HAL_GPIO_Init+0x24c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d025      	beq.n	80042ae <HAL_GPIO_Init+0x226>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a1c      	ldr	r2, [pc, #112]	; (80042d8 <HAL_GPIO_Init+0x250>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d01f      	beq.n	80042aa <HAL_GPIO_Init+0x222>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a1b      	ldr	r2, [pc, #108]	; (80042dc <HAL_GPIO_Init+0x254>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d019      	beq.n	80042a6 <HAL_GPIO_Init+0x21e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a1a      	ldr	r2, [pc, #104]	; (80042e0 <HAL_GPIO_Init+0x258>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d013      	beq.n	80042a2 <HAL_GPIO_Init+0x21a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a19      	ldr	r2, [pc, #100]	; (80042e4 <HAL_GPIO_Init+0x25c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00d      	beq.n	800429e <HAL_GPIO_Init+0x216>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a18      	ldr	r2, [pc, #96]	; (80042e8 <HAL_GPIO_Init+0x260>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d007      	beq.n	800429a <HAL_GPIO_Init+0x212>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a17      	ldr	r2, [pc, #92]	; (80042ec <HAL_GPIO_Init+0x264>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d101      	bne.n	8004296 <HAL_GPIO_Init+0x20e>
 8004292:	2309      	movs	r3, #9
 8004294:	e02d      	b.n	80042f2 <HAL_GPIO_Init+0x26a>
 8004296:	230a      	movs	r3, #10
 8004298:	e02b      	b.n	80042f2 <HAL_GPIO_Init+0x26a>
 800429a:	2308      	movs	r3, #8
 800429c:	e029      	b.n	80042f2 <HAL_GPIO_Init+0x26a>
 800429e:	2307      	movs	r3, #7
 80042a0:	e027      	b.n	80042f2 <HAL_GPIO_Init+0x26a>
 80042a2:	2306      	movs	r3, #6
 80042a4:	e025      	b.n	80042f2 <HAL_GPIO_Init+0x26a>
 80042a6:	2305      	movs	r3, #5
 80042a8:	e023      	b.n	80042f2 <HAL_GPIO_Init+0x26a>
 80042aa:	2304      	movs	r3, #4
 80042ac:	e021      	b.n	80042f2 <HAL_GPIO_Init+0x26a>
 80042ae:	2303      	movs	r3, #3
 80042b0:	e01f      	b.n	80042f2 <HAL_GPIO_Init+0x26a>
 80042b2:	2302      	movs	r3, #2
 80042b4:	e01d      	b.n	80042f2 <HAL_GPIO_Init+0x26a>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e01b      	b.n	80042f2 <HAL_GPIO_Init+0x26a>
 80042ba:	bf00      	nop
 80042bc:	58000080 	.word	0x58000080
 80042c0:	58024400 	.word	0x58024400
 80042c4:	58000400 	.word	0x58000400
 80042c8:	58020000 	.word	0x58020000
 80042cc:	58020400 	.word	0x58020400
 80042d0:	58020800 	.word	0x58020800
 80042d4:	58020c00 	.word	0x58020c00
 80042d8:	58021000 	.word	0x58021000
 80042dc:	58021400 	.word	0x58021400
 80042e0:	58021800 	.word	0x58021800
 80042e4:	58021c00 	.word	0x58021c00
 80042e8:	58022000 	.word	0x58022000
 80042ec:	58022400 	.word	0x58022400
 80042f0:	2300      	movs	r3, #0
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	f002 0203 	and.w	r2, r2, #3
 80042f8:	0092      	lsls	r2, r2, #2
 80042fa:	4093      	lsls	r3, r2
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4313      	orrs	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004302:	4938      	ldr	r1, [pc, #224]	; (80043e4 <HAL_GPIO_Init+0x35c>)
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	089b      	lsrs	r3, r3, #2
 8004308:	3302      	adds	r3, #2
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	43db      	mvns	r3, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4013      	ands	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004336:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800433e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	43db      	mvns	r3, r3
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4013      	ands	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004364:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	43db      	mvns	r3, r3
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	4013      	ands	r3, r2
 800437a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	4313      	orrs	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	43db      	mvns	r3, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4013      	ands	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	3301      	adds	r3, #1
 80043c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	fa22 f303 	lsr.w	r3, r2, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f47f ae63 	bne.w	800409c <HAL_GPIO_Init+0x14>
  }
}
 80043d6:	bf00      	nop
 80043d8:	bf00      	nop
 80043da:	3724      	adds	r7, #36	; 0x24
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	58000400 	.word	0x58000400

080043e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	460b      	mov	r3, r1
 80043f2:	807b      	strh	r3, [r7, #2]
 80043f4:	4613      	mov	r3, r2
 80043f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043f8:	787b      	ldrb	r3, [r7, #1]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043fe:	887a      	ldrh	r2, [r7, #2]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004404:	e003      	b.n	800440e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004406:	887b      	ldrh	r3, [r7, #2]
 8004408:	041a      	lsls	r2, r3, #16
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	619a      	str	r2, [r3, #24]
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
	...

0800441c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004424:	4b19      	ldr	r3, [pc, #100]	; (800448c <HAL_PWREx_ConfigSupply+0x70>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b04      	cmp	r3, #4
 800442e:	d00a      	beq.n	8004446 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004430:	4b16      	ldr	r3, [pc, #88]	; (800448c <HAL_PWREx_ConfigSupply+0x70>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	429a      	cmp	r2, r3
 800443c:	d001      	beq.n	8004442 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e01f      	b.n	8004482 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	e01d      	b.n	8004482 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004446:	4b11      	ldr	r3, [pc, #68]	; (800448c <HAL_PWREx_ConfigSupply+0x70>)
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f023 0207 	bic.w	r2, r3, #7
 800444e:	490f      	ldr	r1, [pc, #60]	; (800448c <HAL_PWREx_ConfigSupply+0x70>)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4313      	orrs	r3, r2
 8004454:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004456:	f7fd f92b 	bl	80016b0 <HAL_GetTick>
 800445a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800445c:	e009      	b.n	8004472 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800445e:	f7fd f927 	bl	80016b0 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800446c:	d901      	bls.n	8004472 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e007      	b.n	8004482 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004472:	4b06      	ldr	r3, [pc, #24]	; (800448c <HAL_PWREx_ConfigSupply+0x70>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800447a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800447e:	d1ee      	bne.n	800445e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	58024800 	.word	0x58024800

08004490 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08c      	sub	sp, #48	; 0x30
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d102      	bne.n	80044a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	f000 bc48 	b.w	8004d34 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 8088 	beq.w	80045c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044b2:	4b99      	ldr	r3, [pc, #612]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044bc:	4b96      	ldr	r3, [pc, #600]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 80044be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80044c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c4:	2b10      	cmp	r3, #16
 80044c6:	d007      	beq.n	80044d8 <HAL_RCC_OscConfig+0x48>
 80044c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ca:	2b18      	cmp	r3, #24
 80044cc:	d111      	bne.n	80044f2 <HAL_RCC_OscConfig+0x62>
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	f003 0303 	and.w	r3, r3, #3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d10c      	bne.n	80044f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d8:	4b8f      	ldr	r3, [pc, #572]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d06d      	beq.n	80045c0 <HAL_RCC_OscConfig+0x130>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d169      	bne.n	80045c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	f000 bc21 	b.w	8004d34 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044fa:	d106      	bne.n	800450a <HAL_RCC_OscConfig+0x7a>
 80044fc:	4b86      	ldr	r3, [pc, #536]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a85      	ldr	r2, [pc, #532]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 8004502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	e02e      	b.n	8004568 <HAL_RCC_OscConfig+0xd8>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10c      	bne.n	800452c <HAL_RCC_OscConfig+0x9c>
 8004512:	4b81      	ldr	r3, [pc, #516]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a80      	ldr	r2, [pc, #512]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 8004518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	4b7e      	ldr	r3, [pc, #504]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a7d      	ldr	r2, [pc, #500]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 8004524:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	e01d      	b.n	8004568 <HAL_RCC_OscConfig+0xd8>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004534:	d10c      	bne.n	8004550 <HAL_RCC_OscConfig+0xc0>
 8004536:	4b78      	ldr	r3, [pc, #480]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a77      	ldr	r2, [pc, #476]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 800453c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	4b75      	ldr	r3, [pc, #468]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a74      	ldr	r2, [pc, #464]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 8004548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	e00b      	b.n	8004568 <HAL_RCC_OscConfig+0xd8>
 8004550:	4b71      	ldr	r3, [pc, #452]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a70      	ldr	r2, [pc, #448]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 8004556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	4b6e      	ldr	r3, [pc, #440]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a6d      	ldr	r2, [pc, #436]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 8004562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d013      	beq.n	8004598 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004570:	f7fd f89e 	bl	80016b0 <HAL_GetTick>
 8004574:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004578:	f7fd f89a 	bl	80016b0 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b64      	cmp	r3, #100	; 0x64
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e3d4      	b.n	8004d34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800458a:	4b63      	ldr	r3, [pc, #396]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0f0      	beq.n	8004578 <HAL_RCC_OscConfig+0xe8>
 8004596:	e014      	b.n	80045c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004598:	f7fd f88a 	bl	80016b0 <HAL_GetTick>
 800459c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a0:	f7fd f886 	bl	80016b0 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b64      	cmp	r3, #100	; 0x64
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e3c0      	b.n	8004d34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045b2:	4b59      	ldr	r3, [pc, #356]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0x110>
 80045be:	e000      	b.n	80045c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 80ca 	beq.w	8004764 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045d0:	4b51      	ldr	r3, [pc, #324]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045da:	4b4f      	ldr	r3, [pc, #316]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 80045dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045de:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d007      	beq.n	80045f6 <HAL_RCC_OscConfig+0x166>
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	2b18      	cmp	r3, #24
 80045ea:	d156      	bne.n	800469a <HAL_RCC_OscConfig+0x20a>
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d151      	bne.n	800469a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045f6:	4b48      	ldr	r3, [pc, #288]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d005      	beq.n	800460e <HAL_RCC_OscConfig+0x17e>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e392      	b.n	8004d34 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800460e:	4b42      	ldr	r3, [pc, #264]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f023 0219 	bic.w	r2, r3, #25
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	493f      	ldr	r1, [pc, #252]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 800461c:	4313      	orrs	r3, r2
 800461e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004620:	f7fd f846 	bl	80016b0 <HAL_GetTick>
 8004624:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004628:	f7fd f842 	bl	80016b0 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e37c      	b.n	8004d34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800463a:	4b37      	ldr	r3, [pc, #220]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0f0      	beq.n	8004628 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004646:	f7fd f83f 	bl	80016c8 <HAL_GetREVID>
 800464a:	4603      	mov	r3, r0
 800464c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004650:	4293      	cmp	r3, r2
 8004652:	d817      	bhi.n	8004684 <HAL_RCC_OscConfig+0x1f4>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	2b40      	cmp	r3, #64	; 0x40
 800465a:	d108      	bne.n	800466e <HAL_RCC_OscConfig+0x1de>
 800465c:	4b2e      	ldr	r3, [pc, #184]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004664:	4a2c      	ldr	r2, [pc, #176]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 8004666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800466a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800466c:	e07a      	b.n	8004764 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800466e:	4b2a      	ldr	r3, [pc, #168]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	031b      	lsls	r3, r3, #12
 800467c:	4926      	ldr	r1, [pc, #152]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 800467e:	4313      	orrs	r3, r2
 8004680:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004682:	e06f      	b.n	8004764 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004684:	4b24      	ldr	r3, [pc, #144]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	061b      	lsls	r3, r3, #24
 8004692:	4921      	ldr	r1, [pc, #132]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 8004694:	4313      	orrs	r3, r2
 8004696:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004698:	e064      	b.n	8004764 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d047      	beq.n	8004732 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046a2:	4b1d      	ldr	r3, [pc, #116]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f023 0219 	bic.w	r2, r3, #25
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	491a      	ldr	r1, [pc, #104]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b4:	f7fc fffc 	bl	80016b0 <HAL_GetTick>
 80046b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046bc:	f7fc fff8 	bl	80016b0 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e332      	b.n	8004d34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046ce:	4b12      	ldr	r3, [pc, #72]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0f0      	beq.n	80046bc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046da:	f7fc fff5 	bl	80016c8 <HAL_GetREVID>
 80046de:	4603      	mov	r3, r0
 80046e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d819      	bhi.n	800471c <HAL_RCC_OscConfig+0x28c>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	2b40      	cmp	r3, #64	; 0x40
 80046ee:	d108      	bne.n	8004702 <HAL_RCC_OscConfig+0x272>
 80046f0:	4b09      	ldr	r3, [pc, #36]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80046f8:	4a07      	ldr	r2, [pc, #28]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 80046fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046fe:	6053      	str	r3, [r2, #4]
 8004700:	e030      	b.n	8004764 <HAL_RCC_OscConfig+0x2d4>
 8004702:	4b05      	ldr	r3, [pc, #20]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	031b      	lsls	r3, r3, #12
 8004710:	4901      	ldr	r1, [pc, #4]	; (8004718 <HAL_RCC_OscConfig+0x288>)
 8004712:	4313      	orrs	r3, r2
 8004714:	604b      	str	r3, [r1, #4]
 8004716:	e025      	b.n	8004764 <HAL_RCC_OscConfig+0x2d4>
 8004718:	58024400 	.word	0x58024400
 800471c:	4b9a      	ldr	r3, [pc, #616]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	061b      	lsls	r3, r3, #24
 800472a:	4997      	ldr	r1, [pc, #604]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 800472c:	4313      	orrs	r3, r2
 800472e:	604b      	str	r3, [r1, #4]
 8004730:	e018      	b.n	8004764 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004732:	4b95      	ldr	r3, [pc, #596]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a94      	ldr	r2, [pc, #592]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 8004738:	f023 0301 	bic.w	r3, r3, #1
 800473c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473e:	f7fc ffb7 	bl	80016b0 <HAL_GetTick>
 8004742:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004746:	f7fc ffb3 	bl	80016b0 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e2ed      	b.n	8004d34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004758:	4b8b      	ldr	r3, [pc, #556]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1f0      	bne.n	8004746 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0310 	and.w	r3, r3, #16
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 80a9 	beq.w	80048c4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004772:	4b85      	ldr	r3, [pc, #532]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800477a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800477c:	4b82      	ldr	r3, [pc, #520]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 800477e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004780:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	2b08      	cmp	r3, #8
 8004786:	d007      	beq.n	8004798 <HAL_RCC_OscConfig+0x308>
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	2b18      	cmp	r3, #24
 800478c:	d13a      	bne.n	8004804 <HAL_RCC_OscConfig+0x374>
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	2b01      	cmp	r3, #1
 8004796:	d135      	bne.n	8004804 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004798:	4b7b      	ldr	r3, [pc, #492]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d005      	beq.n	80047b0 <HAL_RCC_OscConfig+0x320>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	2b80      	cmp	r3, #128	; 0x80
 80047aa:	d001      	beq.n	80047b0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e2c1      	b.n	8004d34 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047b0:	f7fc ff8a 	bl	80016c8 <HAL_GetREVID>
 80047b4:	4603      	mov	r3, r0
 80047b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d817      	bhi.n	80047ee <HAL_RCC_OscConfig+0x35e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	d108      	bne.n	80047d8 <HAL_RCC_OscConfig+0x348>
 80047c6:	4b70      	ldr	r3, [pc, #448]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80047ce:	4a6e      	ldr	r2, [pc, #440]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 80047d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047d4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047d6:	e075      	b.n	80048c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047d8:	4b6b      	ldr	r3, [pc, #428]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	069b      	lsls	r3, r3, #26
 80047e6:	4968      	ldr	r1, [pc, #416]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047ec:	e06a      	b.n	80048c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047ee:	4b66      	ldr	r3, [pc, #408]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	061b      	lsls	r3, r3, #24
 80047fc:	4962      	ldr	r1, [pc, #392]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004802:	e05f      	b.n	80048c4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d042      	beq.n	8004892 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800480c:	4b5e      	ldr	r3, [pc, #376]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a5d      	ldr	r2, [pc, #372]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 8004812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004818:	f7fc ff4a 	bl	80016b0 <HAL_GetTick>
 800481c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004820:	f7fc ff46 	bl	80016b0 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e280      	b.n	8004d34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004832:	4b55      	ldr	r3, [pc, #340]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0f0      	beq.n	8004820 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800483e:	f7fc ff43 	bl	80016c8 <HAL_GetREVID>
 8004842:	4603      	mov	r3, r0
 8004844:	f241 0203 	movw	r2, #4099	; 0x1003
 8004848:	4293      	cmp	r3, r2
 800484a:	d817      	bhi.n	800487c <HAL_RCC_OscConfig+0x3ec>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	2b20      	cmp	r3, #32
 8004852:	d108      	bne.n	8004866 <HAL_RCC_OscConfig+0x3d6>
 8004854:	4b4c      	ldr	r3, [pc, #304]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800485c:	4a4a      	ldr	r2, [pc, #296]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 800485e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004862:	6053      	str	r3, [r2, #4]
 8004864:	e02e      	b.n	80048c4 <HAL_RCC_OscConfig+0x434>
 8004866:	4b48      	ldr	r3, [pc, #288]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	069b      	lsls	r3, r3, #26
 8004874:	4944      	ldr	r1, [pc, #272]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 8004876:	4313      	orrs	r3, r2
 8004878:	604b      	str	r3, [r1, #4]
 800487a:	e023      	b.n	80048c4 <HAL_RCC_OscConfig+0x434>
 800487c:	4b42      	ldr	r3, [pc, #264]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	061b      	lsls	r3, r3, #24
 800488a:	493f      	ldr	r1, [pc, #252]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 800488c:	4313      	orrs	r3, r2
 800488e:	60cb      	str	r3, [r1, #12]
 8004890:	e018      	b.n	80048c4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004892:	4b3d      	ldr	r3, [pc, #244]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a3c      	ldr	r2, [pc, #240]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 8004898:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800489c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489e:	f7fc ff07 	bl	80016b0 <HAL_GetTick>
 80048a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80048a6:	f7fc ff03 	bl	80016b0 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e23d      	b.n	8004d34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80048b8:	4b33      	ldr	r3, [pc, #204]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1f0      	bne.n	80048a6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d036      	beq.n	800493e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d019      	beq.n	800490c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048d8:	4b2b      	ldr	r3, [pc, #172]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 80048da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048dc:	4a2a      	ldr	r2, [pc, #168]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e4:	f7fc fee4 	bl	80016b0 <HAL_GetTick>
 80048e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ec:	f7fc fee0 	bl	80016b0 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e21a      	b.n	8004d34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80048fe:	4b22      	ldr	r3, [pc, #136]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 8004900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0f0      	beq.n	80048ec <HAL_RCC_OscConfig+0x45c>
 800490a:	e018      	b.n	800493e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800490c:	4b1e      	ldr	r3, [pc, #120]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 800490e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004910:	4a1d      	ldr	r2, [pc, #116]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 8004912:	f023 0301 	bic.w	r3, r3, #1
 8004916:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004918:	f7fc feca 	bl	80016b0 <HAL_GetTick>
 800491c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004920:	f7fc fec6 	bl	80016b0 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e200      	b.n	8004d34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004932:	4b15      	ldr	r3, [pc, #84]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 8004934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f0      	bne.n	8004920 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	2b00      	cmp	r3, #0
 8004948:	d039      	beq.n	80049be <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d01c      	beq.n	800498c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004952:	4b0d      	ldr	r3, [pc, #52]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a0c      	ldr	r2, [pc, #48]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 8004958:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800495c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800495e:	f7fc fea7 	bl	80016b0 <HAL_GetTick>
 8004962:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004964:	e008      	b.n	8004978 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004966:	f7fc fea3 	bl	80016b0 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e1dd      	b.n	8004d34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004978:	4b03      	ldr	r3, [pc, #12]	; (8004988 <HAL_RCC_OscConfig+0x4f8>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0f0      	beq.n	8004966 <HAL_RCC_OscConfig+0x4d6>
 8004984:	e01b      	b.n	80049be <HAL_RCC_OscConfig+0x52e>
 8004986:	bf00      	nop
 8004988:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800498c:	4b9b      	ldr	r3, [pc, #620]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a9a      	ldr	r2, [pc, #616]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004992:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004996:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004998:	f7fc fe8a 	bl	80016b0 <HAL_GetTick>
 800499c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800499e:	e008      	b.n	80049b2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049a0:	f7fc fe86 	bl	80016b0 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e1c0      	b.n	8004d34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049b2:	4b92      	ldr	r3, [pc, #584]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1f0      	bne.n	80049a0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 8081 	beq.w	8004ace <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80049cc:	4b8c      	ldr	r3, [pc, #560]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a8b      	ldr	r2, [pc, #556]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 80049d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049d8:	f7fc fe6a 	bl	80016b0 <HAL_GetTick>
 80049dc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049e0:	f7fc fe66 	bl	80016b0 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b64      	cmp	r3, #100	; 0x64
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e1a0      	b.n	8004d34 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049f2:	4b83      	ldr	r3, [pc, #524]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0f0      	beq.n	80049e0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d106      	bne.n	8004a14 <HAL_RCC_OscConfig+0x584>
 8004a06:	4b7d      	ldr	r3, [pc, #500]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0a:	4a7c      	ldr	r2, [pc, #496]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004a0c:	f043 0301 	orr.w	r3, r3, #1
 8004a10:	6713      	str	r3, [r2, #112]	; 0x70
 8004a12:	e02d      	b.n	8004a70 <HAL_RCC_OscConfig+0x5e0>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10c      	bne.n	8004a36 <HAL_RCC_OscConfig+0x5a6>
 8004a1c:	4b77      	ldr	r3, [pc, #476]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a20:	4a76      	ldr	r2, [pc, #472]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004a22:	f023 0301 	bic.w	r3, r3, #1
 8004a26:	6713      	str	r3, [r2, #112]	; 0x70
 8004a28:	4b74      	ldr	r3, [pc, #464]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2c:	4a73      	ldr	r2, [pc, #460]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004a2e:	f023 0304 	bic.w	r3, r3, #4
 8004a32:	6713      	str	r3, [r2, #112]	; 0x70
 8004a34:	e01c      	b.n	8004a70 <HAL_RCC_OscConfig+0x5e0>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	2b05      	cmp	r3, #5
 8004a3c:	d10c      	bne.n	8004a58 <HAL_RCC_OscConfig+0x5c8>
 8004a3e:	4b6f      	ldr	r3, [pc, #444]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a42:	4a6e      	ldr	r2, [pc, #440]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004a44:	f043 0304 	orr.w	r3, r3, #4
 8004a48:	6713      	str	r3, [r2, #112]	; 0x70
 8004a4a:	4b6c      	ldr	r3, [pc, #432]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4e:	4a6b      	ldr	r2, [pc, #428]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004a50:	f043 0301 	orr.w	r3, r3, #1
 8004a54:	6713      	str	r3, [r2, #112]	; 0x70
 8004a56:	e00b      	b.n	8004a70 <HAL_RCC_OscConfig+0x5e0>
 8004a58:	4b68      	ldr	r3, [pc, #416]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5c:	4a67      	ldr	r2, [pc, #412]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004a5e:	f023 0301 	bic.w	r3, r3, #1
 8004a62:	6713      	str	r3, [r2, #112]	; 0x70
 8004a64:	4b65      	ldr	r3, [pc, #404]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a68:	4a64      	ldr	r2, [pc, #400]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004a6a:	f023 0304 	bic.w	r3, r3, #4
 8004a6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d015      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a78:	f7fc fe1a 	bl	80016b0 <HAL_GetTick>
 8004a7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a7e:	e00a      	b.n	8004a96 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a80:	f7fc fe16 	bl	80016b0 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e14e      	b.n	8004d34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a96:	4b59      	ldr	r3, [pc, #356]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0ee      	beq.n	8004a80 <HAL_RCC_OscConfig+0x5f0>
 8004aa2:	e014      	b.n	8004ace <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa4:	f7fc fe04 	bl	80016b0 <HAL_GetTick>
 8004aa8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004aaa:	e00a      	b.n	8004ac2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aac:	f7fc fe00 	bl	80016b0 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e138      	b.n	8004d34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ac2:	4b4e      	ldr	r3, [pc, #312]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1ee      	bne.n	8004aac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 812d 	beq.w	8004d32 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004ad8:	4b48      	ldr	r3, [pc, #288]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ae0:	2b18      	cmp	r3, #24
 8004ae2:	f000 80bd 	beq.w	8004c60 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	f040 809e 	bne.w	8004c2c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004af0:	4b42      	ldr	r3, [pc, #264]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a41      	ldr	r2, [pc, #260]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afc:	f7fc fdd8 	bl	80016b0 <HAL_GetTick>
 8004b00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b04:	f7fc fdd4 	bl	80016b0 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e10e      	b.n	8004d34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b16:	4b39      	ldr	r3, [pc, #228]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1f0      	bne.n	8004b04 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b22:	4b36      	ldr	r3, [pc, #216]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b26:	4b37      	ldr	r3, [pc, #220]	; (8004c04 <HAL_RCC_OscConfig+0x774>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004b32:	0112      	lsls	r2, r2, #4
 8004b34:	430a      	orrs	r2, r1
 8004b36:	4931      	ldr	r1, [pc, #196]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	628b      	str	r3, [r1, #40]	; 0x28
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b40:	3b01      	subs	r3, #1
 8004b42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	025b      	lsls	r3, r3, #9
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	431a      	orrs	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b56:	3b01      	subs	r3, #1
 8004b58:	041b      	lsls	r3, r3, #16
 8004b5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b64:	3b01      	subs	r3, #1
 8004b66:	061b      	lsls	r3, r3, #24
 8004b68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b6c:	4923      	ldr	r1, [pc, #140]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004b72:	4b22      	ldr	r3, [pc, #136]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	4a21      	ldr	r2, [pc, #132]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004b78:	f023 0301 	bic.w	r3, r3, #1
 8004b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b7e:	4b1f      	ldr	r3, [pc, #124]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b82:	4b21      	ldr	r3, [pc, #132]	; (8004c08 <HAL_RCC_OscConfig+0x778>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004b8a:	00d2      	lsls	r2, r2, #3
 8004b8c:	491b      	ldr	r1, [pc, #108]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004b92:	4b1a      	ldr	r3, [pc, #104]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	f023 020c 	bic.w	r2, r3, #12
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	4917      	ldr	r1, [pc, #92]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004ba4:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba8:	f023 0202 	bic.w	r2, r3, #2
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb0:	4912      	ldr	r1, [pc, #72]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004bb6:	4b11      	ldr	r3, [pc, #68]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bba:	4a10      	ldr	r2, [pc, #64]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bc2:	4b0e      	ldr	r3, [pc, #56]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	4a0d      	ldr	r2, [pc, #52]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004bce:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd2:	4a0a      	ldr	r2, [pc, #40]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004bda:	4b08      	ldr	r3, [pc, #32]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bde:	4a07      	ldr	r2, [pc, #28]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004be0:	f043 0301 	orr.w	r3, r3, #1
 8004be4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004be6:	4b05      	ldr	r3, [pc, #20]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a04      	ldr	r2, [pc, #16]	; (8004bfc <HAL_RCC_OscConfig+0x76c>)
 8004bec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf2:	f7fc fd5d 	bl	80016b0 <HAL_GetTick>
 8004bf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bf8:	e011      	b.n	8004c1e <HAL_RCC_OscConfig+0x78e>
 8004bfa:	bf00      	nop
 8004bfc:	58024400 	.word	0x58024400
 8004c00:	58024800 	.word	0x58024800
 8004c04:	fffffc0c 	.word	0xfffffc0c
 8004c08:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c0c:	f7fc fd50 	bl	80016b0 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e08a      	b.n	8004d34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c1e:	4b47      	ldr	r3, [pc, #284]	; (8004d3c <HAL_RCC_OscConfig+0x8ac>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0f0      	beq.n	8004c0c <HAL_RCC_OscConfig+0x77c>
 8004c2a:	e082      	b.n	8004d32 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c2c:	4b43      	ldr	r3, [pc, #268]	; (8004d3c <HAL_RCC_OscConfig+0x8ac>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a42      	ldr	r2, [pc, #264]	; (8004d3c <HAL_RCC_OscConfig+0x8ac>)
 8004c32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c38:	f7fc fd3a 	bl	80016b0 <HAL_GetTick>
 8004c3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c40:	f7fc fd36 	bl	80016b0 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e070      	b.n	8004d34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c52:	4b3a      	ldr	r3, [pc, #232]	; (8004d3c <HAL_RCC_OscConfig+0x8ac>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f0      	bne.n	8004c40 <HAL_RCC_OscConfig+0x7b0>
 8004c5e:	e068      	b.n	8004d32 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004c60:	4b36      	ldr	r3, [pc, #216]	; (8004d3c <HAL_RCC_OscConfig+0x8ac>)
 8004c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c64:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004c66:	4b35      	ldr	r3, [pc, #212]	; (8004d3c <HAL_RCC_OscConfig+0x8ac>)
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d031      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f003 0203 	and.w	r2, r3, #3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d12a      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	091b      	lsrs	r3, r3, #4
 8004c86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d122      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d11a      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	0a5b      	lsrs	r3, r3, #9
 8004ca6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d111      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	0c1b      	lsrs	r3, r3, #16
 8004cb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d108      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	0e1b      	lsrs	r3, r3, #24
 8004cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d001      	beq.n	8004cdc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e02b      	b.n	8004d34 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004cdc:	4b17      	ldr	r3, [pc, #92]	; (8004d3c <HAL_RCC_OscConfig+0x8ac>)
 8004cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce0:	08db      	lsrs	r3, r3, #3
 8004ce2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ce6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d01f      	beq.n	8004d32 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004cf2:	4b12      	ldr	r3, [pc, #72]	; (8004d3c <HAL_RCC_OscConfig+0x8ac>)
 8004cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf6:	4a11      	ldr	r2, [pc, #68]	; (8004d3c <HAL_RCC_OscConfig+0x8ac>)
 8004cf8:	f023 0301 	bic.w	r3, r3, #1
 8004cfc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004cfe:	f7fc fcd7 	bl	80016b0 <HAL_GetTick>
 8004d02:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004d04:	bf00      	nop
 8004d06:	f7fc fcd3 	bl	80016b0 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d0f9      	beq.n	8004d06 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d12:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <HAL_RCC_OscConfig+0x8ac>)
 8004d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d16:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <HAL_RCC_OscConfig+0x8b0>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004d1e:	00d2      	lsls	r2, r2, #3
 8004d20:	4906      	ldr	r1, [pc, #24]	; (8004d3c <HAL_RCC_OscConfig+0x8ac>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004d26:	4b05      	ldr	r3, [pc, #20]	; (8004d3c <HAL_RCC_OscConfig+0x8ac>)
 8004d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2a:	4a04      	ldr	r2, [pc, #16]	; (8004d3c <HAL_RCC_OscConfig+0x8ac>)
 8004d2c:	f043 0301 	orr.w	r3, r3, #1
 8004d30:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3730      	adds	r7, #48	; 0x30
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	58024400 	.word	0x58024400
 8004d40:	ffff0007 	.word	0xffff0007

08004d44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e19c      	b.n	8005092 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d58:	4b8a      	ldr	r3, [pc, #552]	; (8004f84 <HAL_RCC_ClockConfig+0x240>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 030f 	and.w	r3, r3, #15
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d910      	bls.n	8004d88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d66:	4b87      	ldr	r3, [pc, #540]	; (8004f84 <HAL_RCC_ClockConfig+0x240>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f023 020f 	bic.w	r2, r3, #15
 8004d6e:	4985      	ldr	r1, [pc, #532]	; (8004f84 <HAL_RCC_ClockConfig+0x240>)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d76:	4b83      	ldr	r3, [pc, #524]	; (8004f84 <HAL_RCC_ClockConfig+0x240>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d001      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e184      	b.n	8005092 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d010      	beq.n	8004db6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	4b7b      	ldr	r3, [pc, #492]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d908      	bls.n	8004db6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004da4:	4b78      	ldr	r3, [pc, #480]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	4975      	ldr	r1, [pc, #468]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d010      	beq.n	8004de4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695a      	ldr	r2, [r3, #20]
 8004dc6:	4b70      	ldr	r3, [pc, #448]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d908      	bls.n	8004de4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004dd2:	4b6d      	ldr	r3, [pc, #436]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	496a      	ldr	r1, [pc, #424]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0310 	and.w	r3, r3, #16
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d010      	beq.n	8004e12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	699a      	ldr	r2, [r3, #24]
 8004df4:	4b64      	ldr	r3, [pc, #400]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d908      	bls.n	8004e12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e00:	4b61      	ldr	r3, [pc, #388]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	495e      	ldr	r1, [pc, #376]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0320 	and.w	r3, r3, #32
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d010      	beq.n	8004e40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69da      	ldr	r2, [r3, #28]
 8004e22:	4b59      	ldr	r3, [pc, #356]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d908      	bls.n	8004e40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e2e:	4b56      	ldr	r3, [pc, #344]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	4953      	ldr	r1, [pc, #332]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d010      	beq.n	8004e6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	4b4d      	ldr	r3, [pc, #308]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	f003 030f 	and.w	r3, r3, #15
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d908      	bls.n	8004e6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e5c:	4b4a      	ldr	r3, [pc, #296]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	f023 020f 	bic.w	r2, r3, #15
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	4947      	ldr	r1, [pc, #284]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d055      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004e7a:	4b43      	ldr	r3, [pc, #268]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	4940      	ldr	r1, [pc, #256]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d107      	bne.n	8004ea4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e94:	4b3c      	ldr	r3, [pc, #240]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d121      	bne.n	8004ee4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e0f6      	b.n	8005092 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2b03      	cmp	r3, #3
 8004eaa:	d107      	bne.n	8004ebc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004eac:	4b36      	ldr	r3, [pc, #216]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d115      	bne.n	8004ee4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e0ea      	b.n	8005092 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d107      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ec4:	4b30      	ldr	r3, [pc, #192]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d109      	bne.n	8004ee4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e0de      	b.n	8005092 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ed4:	4b2c      	ldr	r3, [pc, #176]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e0d6      	b.n	8005092 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ee4:	4b28      	ldr	r3, [pc, #160]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	f023 0207 	bic.w	r2, r3, #7
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	4925      	ldr	r1, [pc, #148]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ef6:	f7fc fbdb 	bl	80016b0 <HAL_GetTick>
 8004efa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efc:	e00a      	b.n	8004f14 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004efe:	f7fc fbd7 	bl	80016b0 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e0be      	b.n	8005092 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f14:	4b1c      	ldr	r3, [pc, #112]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d1eb      	bne.n	8004efe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d010      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	4b14      	ldr	r3, [pc, #80]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d208      	bcs.n	8004f54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f42:	4b11      	ldr	r3, [pc, #68]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	f023 020f 	bic.w	r2, r3, #15
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	490e      	ldr	r1, [pc, #56]	; (8004f88 <HAL_RCC_ClockConfig+0x244>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f54:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <HAL_RCC_ClockConfig+0x240>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 030f 	and.w	r3, r3, #15
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d214      	bcs.n	8004f8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f62:	4b08      	ldr	r3, [pc, #32]	; (8004f84 <HAL_RCC_ClockConfig+0x240>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f023 020f 	bic.w	r2, r3, #15
 8004f6a:	4906      	ldr	r1, [pc, #24]	; (8004f84 <HAL_RCC_ClockConfig+0x240>)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f72:	4b04      	ldr	r3, [pc, #16]	; (8004f84 <HAL_RCC_ClockConfig+0x240>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d005      	beq.n	8004f8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e086      	b.n	8005092 <HAL_RCC_ClockConfig+0x34e>
 8004f84:	52002000 	.word	0x52002000
 8004f88:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d010      	beq.n	8004fba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	4b3f      	ldr	r3, [pc, #252]	; (800509c <HAL_RCC_ClockConfig+0x358>)
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d208      	bcs.n	8004fba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004fa8:	4b3c      	ldr	r3, [pc, #240]	; (800509c <HAL_RCC_ClockConfig+0x358>)
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	4939      	ldr	r1, [pc, #228]	; (800509c <HAL_RCC_ClockConfig+0x358>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0308 	and.w	r3, r3, #8
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d010      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	695a      	ldr	r2, [r3, #20]
 8004fca:	4b34      	ldr	r3, [pc, #208]	; (800509c <HAL_RCC_ClockConfig+0x358>)
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d208      	bcs.n	8004fe8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004fd6:	4b31      	ldr	r3, [pc, #196]	; (800509c <HAL_RCC_ClockConfig+0x358>)
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	492e      	ldr	r1, [pc, #184]	; (800509c <HAL_RCC_ClockConfig+0x358>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0310 	and.w	r3, r3, #16
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d010      	beq.n	8005016 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699a      	ldr	r2, [r3, #24]
 8004ff8:	4b28      	ldr	r3, [pc, #160]	; (800509c <HAL_RCC_ClockConfig+0x358>)
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005000:	429a      	cmp	r2, r3
 8005002:	d208      	bcs.n	8005016 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005004:	4b25      	ldr	r3, [pc, #148]	; (800509c <HAL_RCC_ClockConfig+0x358>)
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	4922      	ldr	r1, [pc, #136]	; (800509c <HAL_RCC_ClockConfig+0x358>)
 8005012:	4313      	orrs	r3, r2
 8005014:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0320 	and.w	r3, r3, #32
 800501e:	2b00      	cmp	r3, #0
 8005020:	d010      	beq.n	8005044 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69da      	ldr	r2, [r3, #28]
 8005026:	4b1d      	ldr	r3, [pc, #116]	; (800509c <HAL_RCC_ClockConfig+0x358>)
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800502e:	429a      	cmp	r2, r3
 8005030:	d208      	bcs.n	8005044 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005032:	4b1a      	ldr	r3, [pc, #104]	; (800509c <HAL_RCC_ClockConfig+0x358>)
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	4917      	ldr	r1, [pc, #92]	; (800509c <HAL_RCC_ClockConfig+0x358>)
 8005040:	4313      	orrs	r3, r2
 8005042:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005044:	f000 f834 	bl	80050b0 <HAL_RCC_GetSysClockFreq>
 8005048:	4602      	mov	r2, r0
 800504a:	4b14      	ldr	r3, [pc, #80]	; (800509c <HAL_RCC_ClockConfig+0x358>)
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	0a1b      	lsrs	r3, r3, #8
 8005050:	f003 030f 	and.w	r3, r3, #15
 8005054:	4912      	ldr	r1, [pc, #72]	; (80050a0 <HAL_RCC_ClockConfig+0x35c>)
 8005056:	5ccb      	ldrb	r3, [r1, r3]
 8005058:	f003 031f 	and.w	r3, r3, #31
 800505c:	fa22 f303 	lsr.w	r3, r2, r3
 8005060:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005062:	4b0e      	ldr	r3, [pc, #56]	; (800509c <HAL_RCC_ClockConfig+0x358>)
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	4a0d      	ldr	r2, [pc, #52]	; (80050a0 <HAL_RCC_ClockConfig+0x35c>)
 800506c:	5cd3      	ldrb	r3, [r2, r3]
 800506e:	f003 031f 	and.w	r3, r3, #31
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	fa22 f303 	lsr.w	r3, r2, r3
 8005078:	4a0a      	ldr	r2, [pc, #40]	; (80050a4 <HAL_RCC_ClockConfig+0x360>)
 800507a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800507c:	4a0a      	ldr	r2, [pc, #40]	; (80050a8 <HAL_RCC_ClockConfig+0x364>)
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005082:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <HAL_RCC_ClockConfig+0x368>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f7fc fac8 	bl	800161c <HAL_InitTick>
 800508c:	4603      	mov	r3, r0
 800508e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005090:	7bfb      	ldrb	r3, [r7, #15]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	58024400 	.word	0x58024400
 80050a0:	08017d60 	.word	0x08017d60
 80050a4:	24000004 	.word	0x24000004
 80050a8:	24000000 	.word	0x24000000
 80050ac:	24000008 	.word	0x24000008

080050b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b089      	sub	sp, #36	; 0x24
 80050b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050b6:	4bb3      	ldr	r3, [pc, #716]	; (8005384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050be:	2b18      	cmp	r3, #24
 80050c0:	f200 8155 	bhi.w	800536e <HAL_RCC_GetSysClockFreq+0x2be>
 80050c4:	a201      	add	r2, pc, #4	; (adr r2, 80050cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80050c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ca:	bf00      	nop
 80050cc:	08005131 	.word	0x08005131
 80050d0:	0800536f 	.word	0x0800536f
 80050d4:	0800536f 	.word	0x0800536f
 80050d8:	0800536f 	.word	0x0800536f
 80050dc:	0800536f 	.word	0x0800536f
 80050e0:	0800536f 	.word	0x0800536f
 80050e4:	0800536f 	.word	0x0800536f
 80050e8:	0800536f 	.word	0x0800536f
 80050ec:	08005157 	.word	0x08005157
 80050f0:	0800536f 	.word	0x0800536f
 80050f4:	0800536f 	.word	0x0800536f
 80050f8:	0800536f 	.word	0x0800536f
 80050fc:	0800536f 	.word	0x0800536f
 8005100:	0800536f 	.word	0x0800536f
 8005104:	0800536f 	.word	0x0800536f
 8005108:	0800536f 	.word	0x0800536f
 800510c:	0800515d 	.word	0x0800515d
 8005110:	0800536f 	.word	0x0800536f
 8005114:	0800536f 	.word	0x0800536f
 8005118:	0800536f 	.word	0x0800536f
 800511c:	0800536f 	.word	0x0800536f
 8005120:	0800536f 	.word	0x0800536f
 8005124:	0800536f 	.word	0x0800536f
 8005128:	0800536f 	.word	0x0800536f
 800512c:	08005163 	.word	0x08005163
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005130:	4b94      	ldr	r3, [pc, #592]	; (8005384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0320 	and.w	r3, r3, #32
 8005138:	2b00      	cmp	r3, #0
 800513a:	d009      	beq.n	8005150 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800513c:	4b91      	ldr	r3, [pc, #580]	; (8005384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	08db      	lsrs	r3, r3, #3
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	4a90      	ldr	r2, [pc, #576]	; (8005388 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005148:	fa22 f303 	lsr.w	r3, r2, r3
 800514c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800514e:	e111      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005150:	4b8d      	ldr	r3, [pc, #564]	; (8005388 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005152:	61bb      	str	r3, [r7, #24]
      break;
 8005154:	e10e      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005156:	4b8d      	ldr	r3, [pc, #564]	; (800538c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005158:	61bb      	str	r3, [r7, #24]
      break;
 800515a:	e10b      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800515c:	4b8c      	ldr	r3, [pc, #560]	; (8005390 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800515e:	61bb      	str	r3, [r7, #24]
      break;
 8005160:	e108      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005162:	4b88      	ldr	r3, [pc, #544]	; (8005384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800516c:	4b85      	ldr	r3, [pc, #532]	; (8005384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800516e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005170:	091b      	lsrs	r3, r3, #4
 8005172:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005176:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005178:	4b82      	ldr	r3, [pc, #520]	; (8005384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005182:	4b80      	ldr	r3, [pc, #512]	; (8005384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005186:	08db      	lsrs	r3, r3, #3
 8005188:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	fb02 f303 	mul.w	r3, r2, r3
 8005192:	ee07 3a90 	vmov	s15, r3
 8005196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 80e1 	beq.w	8005368 <HAL_RCC_GetSysClockFreq+0x2b8>
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	f000 8083 	beq.w	80052b4 <HAL_RCC_GetSysClockFreq+0x204>
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	f200 80a1 	bhi.w	80052f8 <HAL_RCC_GetSysClockFreq+0x248>
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d003      	beq.n	80051c4 <HAL_RCC_GetSysClockFreq+0x114>
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d056      	beq.n	8005270 <HAL_RCC_GetSysClockFreq+0x1c0>
 80051c2:	e099      	b.n	80052f8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051c4:	4b6f      	ldr	r3, [pc, #444]	; (8005384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0320 	and.w	r3, r3, #32
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d02d      	beq.n	800522c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051d0:	4b6c      	ldr	r3, [pc, #432]	; (8005384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	08db      	lsrs	r3, r3, #3
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	4a6b      	ldr	r2, [pc, #428]	; (8005388 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051dc:	fa22 f303 	lsr.w	r3, r2, r3
 80051e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	ee07 3a90 	vmov	s15, r3
 80051e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	ee07 3a90 	vmov	s15, r3
 80051f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051fa:	4b62      	ldr	r3, [pc, #392]	; (8005384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005202:	ee07 3a90 	vmov	s15, r3
 8005206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800520a:	ed97 6a02 	vldr	s12, [r7, #8]
 800520e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005394 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800521a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800521e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005226:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800522a:	e087      	b.n	800533c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	ee07 3a90 	vmov	s15, r3
 8005232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005236:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005398 <HAL_RCC_GetSysClockFreq+0x2e8>
 800523a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800523e:	4b51      	ldr	r3, [pc, #324]	; (8005384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005246:	ee07 3a90 	vmov	s15, r3
 800524a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800524e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005252:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005394 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800525a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800525e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800526a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800526e:	e065      	b.n	800533c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	ee07 3a90 	vmov	s15, r3
 8005276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800539c <HAL_RCC_GetSysClockFreq+0x2ec>
 800527e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005282:	4b40      	ldr	r3, [pc, #256]	; (8005384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800528a:	ee07 3a90 	vmov	s15, r3
 800528e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005292:	ed97 6a02 	vldr	s12, [r7, #8]
 8005296:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005394 <HAL_RCC_GetSysClockFreq+0x2e4>
 800529a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800529e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052b2:	e043      	b.n	800533c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	ee07 3a90 	vmov	s15, r3
 80052ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052be:	eddf 6a38 	vldr	s13, [pc, #224]	; 80053a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80052c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052c6:	4b2f      	ldr	r3, [pc, #188]	; (8005384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ce:	ee07 3a90 	vmov	s15, r3
 80052d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80052da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005394 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052f6:	e021      	b.n	800533c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005302:	eddf 6a26 	vldr	s13, [pc, #152]	; 800539c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800530a:	4b1e      	ldr	r3, [pc, #120]	; (8005384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800530c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005312:	ee07 3a90 	vmov	s15, r3
 8005316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800531a:	ed97 6a02 	vldr	s12, [r7, #8]
 800531e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005394 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800532a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800532e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005336:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800533a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800533c:	4b11      	ldr	r3, [pc, #68]	; (8005384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800533e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005340:	0a5b      	lsrs	r3, r3, #9
 8005342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005346:	3301      	adds	r3, #1
 8005348:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	ee07 3a90 	vmov	s15, r3
 8005350:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005354:	edd7 6a07 	vldr	s13, [r7, #28]
 8005358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800535c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005360:	ee17 3a90 	vmov	r3, s15
 8005364:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005366:	e005      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	61bb      	str	r3, [r7, #24]
      break;
 800536c:	e002      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800536e:	4b07      	ldr	r3, [pc, #28]	; (800538c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005370:	61bb      	str	r3, [r7, #24]
      break;
 8005372:	bf00      	nop
  }

  return sysclockfreq;
 8005374:	69bb      	ldr	r3, [r7, #24]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3724      	adds	r7, #36	; 0x24
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	58024400 	.word	0x58024400
 8005388:	03d09000 	.word	0x03d09000
 800538c:	003d0900 	.word	0x003d0900
 8005390:	017d7840 	.word	0x017d7840
 8005394:	46000000 	.word	0x46000000
 8005398:	4c742400 	.word	0x4c742400
 800539c:	4a742400 	.word	0x4a742400
 80053a0:	4bbebc20 	.word	0x4bbebc20

080053a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80053aa:	f7ff fe81 	bl	80050b0 <HAL_RCC_GetSysClockFreq>
 80053ae:	4602      	mov	r2, r0
 80053b0:	4b10      	ldr	r3, [pc, #64]	; (80053f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	0a1b      	lsrs	r3, r3, #8
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	490f      	ldr	r1, [pc, #60]	; (80053f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80053bc:	5ccb      	ldrb	r3, [r1, r3]
 80053be:	f003 031f 	and.w	r3, r3, #31
 80053c2:	fa22 f303 	lsr.w	r3, r2, r3
 80053c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053c8:	4b0a      	ldr	r3, [pc, #40]	; (80053f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	f003 030f 	and.w	r3, r3, #15
 80053d0:	4a09      	ldr	r2, [pc, #36]	; (80053f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80053d2:	5cd3      	ldrb	r3, [r2, r3]
 80053d4:	f003 031f 	and.w	r3, r3, #31
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	fa22 f303 	lsr.w	r3, r2, r3
 80053de:	4a07      	ldr	r2, [pc, #28]	; (80053fc <HAL_RCC_GetHCLKFreq+0x58>)
 80053e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80053e2:	4a07      	ldr	r2, [pc, #28]	; (8005400 <HAL_RCC_GetHCLKFreq+0x5c>)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80053e8:	4b04      	ldr	r3, [pc, #16]	; (80053fc <HAL_RCC_GetHCLKFreq+0x58>)
 80053ea:	681b      	ldr	r3, [r3, #0]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	58024400 	.word	0x58024400
 80053f8:	08017d60 	.word	0x08017d60
 80053fc:	24000004 	.word	0x24000004
 8005400:	24000000 	.word	0x24000000

08005404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005408:	f7ff ffcc 	bl	80053a4 <HAL_RCC_GetHCLKFreq>
 800540c:	4602      	mov	r2, r0
 800540e:	4b06      	ldr	r3, [pc, #24]	; (8005428 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	091b      	lsrs	r3, r3, #4
 8005414:	f003 0307 	and.w	r3, r3, #7
 8005418:	4904      	ldr	r1, [pc, #16]	; (800542c <HAL_RCC_GetPCLK1Freq+0x28>)
 800541a:	5ccb      	ldrb	r3, [r1, r3]
 800541c:	f003 031f 	and.w	r3, r3, #31
 8005420:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005424:	4618      	mov	r0, r3
 8005426:	bd80      	pop	{r7, pc}
 8005428:	58024400 	.word	0x58024400
 800542c:	08017d60 	.word	0x08017d60

08005430 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005434:	b0ca      	sub	sp, #296	; 0x128
 8005436:	af00      	add	r7, sp, #0
 8005438:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800543c:	2300      	movs	r3, #0
 800543e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005442:	2300      	movs	r3, #0
 8005444:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005450:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005454:	2500      	movs	r5, #0
 8005456:	ea54 0305 	orrs.w	r3, r4, r5
 800545a:	d049      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800545c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005462:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005466:	d02f      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005468:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800546c:	d828      	bhi.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800546e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005472:	d01a      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005474:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005478:	d822      	bhi.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800547e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005482:	d007      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005484:	e01c      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005486:	4bb8      	ldr	r3, [pc, #736]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548a:	4ab7      	ldr	r2, [pc, #732]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800548c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005490:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005492:	e01a      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005498:	3308      	adds	r3, #8
 800549a:	2102      	movs	r1, #2
 800549c:	4618      	mov	r0, r3
 800549e:	f002 fb61 	bl	8007b64 <RCCEx_PLL2_Config>
 80054a2:	4603      	mov	r3, r0
 80054a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80054a8:	e00f      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ae:	3328      	adds	r3, #40	; 0x28
 80054b0:	2102      	movs	r1, #2
 80054b2:	4618      	mov	r0, r3
 80054b4:	f002 fc08 	bl	8007cc8 <RCCEx_PLL3_Config>
 80054b8:	4603      	mov	r3, r0
 80054ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80054be:	e004      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054c6:	e000      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80054c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10a      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80054d2:	4ba5      	ldr	r3, [pc, #660]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80054da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054e0:	4aa1      	ldr	r2, [pc, #644]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054e2:	430b      	orrs	r3, r1
 80054e4:	6513      	str	r3, [r2, #80]	; 0x50
 80054e6:	e003      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80054fc:	f04f 0900 	mov.w	r9, #0
 8005500:	ea58 0309 	orrs.w	r3, r8, r9
 8005504:	d047      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800550a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800550c:	2b04      	cmp	r3, #4
 800550e:	d82a      	bhi.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005510:	a201      	add	r2, pc, #4	; (adr r2, 8005518 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005516:	bf00      	nop
 8005518:	0800552d 	.word	0x0800552d
 800551c:	0800553b 	.word	0x0800553b
 8005520:	08005551 	.word	0x08005551
 8005524:	0800556f 	.word	0x0800556f
 8005528:	0800556f 	.word	0x0800556f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800552c:	4b8e      	ldr	r3, [pc, #568]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	4a8d      	ldr	r2, [pc, #564]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005536:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005538:	e01a      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800553a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800553e:	3308      	adds	r3, #8
 8005540:	2100      	movs	r1, #0
 8005542:	4618      	mov	r0, r3
 8005544:	f002 fb0e 	bl	8007b64 <RCCEx_PLL2_Config>
 8005548:	4603      	mov	r3, r0
 800554a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800554e:	e00f      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005554:	3328      	adds	r3, #40	; 0x28
 8005556:	2100      	movs	r1, #0
 8005558:	4618      	mov	r0, r3
 800555a:	f002 fbb5 	bl	8007cc8 <RCCEx_PLL3_Config>
 800555e:	4603      	mov	r3, r0
 8005560:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005564:	e004      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800556c:	e000      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800556e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005570:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10a      	bne.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005578:	4b7b      	ldr	r3, [pc, #492]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800557a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800557c:	f023 0107 	bic.w	r1, r3, #7
 8005580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005586:	4a78      	ldr	r2, [pc, #480]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005588:	430b      	orrs	r3, r1
 800558a:	6513      	str	r3, [r2, #80]	; 0x50
 800558c:	e003      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005592:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80055a2:	f04f 0b00 	mov.w	fp, #0
 80055a6:	ea5a 030b 	orrs.w	r3, sl, fp
 80055aa:	d04c      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80055ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055b6:	d030      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80055b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055bc:	d829      	bhi.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80055be:	2bc0      	cmp	r3, #192	; 0xc0
 80055c0:	d02d      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80055c2:	2bc0      	cmp	r3, #192	; 0xc0
 80055c4:	d825      	bhi.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80055c6:	2b80      	cmp	r3, #128	; 0x80
 80055c8:	d018      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80055ca:	2b80      	cmp	r3, #128	; 0x80
 80055cc:	d821      	bhi.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80055d2:	2b40      	cmp	r3, #64	; 0x40
 80055d4:	d007      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80055d6:	e01c      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055d8:	4b63      	ldr	r3, [pc, #396]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055dc:	4a62      	ldr	r2, [pc, #392]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80055e4:	e01c      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ea:	3308      	adds	r3, #8
 80055ec:	2100      	movs	r1, #0
 80055ee:	4618      	mov	r0, r3
 80055f0:	f002 fab8 	bl	8007b64 <RCCEx_PLL2_Config>
 80055f4:	4603      	mov	r3, r0
 80055f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80055fa:	e011      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005600:	3328      	adds	r3, #40	; 0x28
 8005602:	2100      	movs	r1, #0
 8005604:	4618      	mov	r0, r3
 8005606:	f002 fb5f 	bl	8007cc8 <RCCEx_PLL3_Config>
 800560a:	4603      	mov	r3, r0
 800560c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005610:	e006      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005618:	e002      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800561a:	bf00      	nop
 800561c:	e000      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800561e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005620:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10a      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005628:	4b4f      	ldr	r3, [pc, #316]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800562a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800562c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005630:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005636:	4a4c      	ldr	r2, [pc, #304]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005638:	430b      	orrs	r3, r1
 800563a:	6513      	str	r3, [r2, #80]	; 0x50
 800563c:	e003      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800563e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005642:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800564a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005652:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005656:	2300      	movs	r3, #0
 8005658:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800565c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005660:	460b      	mov	r3, r1
 8005662:	4313      	orrs	r3, r2
 8005664:	d053      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800566a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800566e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005672:	d035      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005674:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005678:	d82e      	bhi.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800567a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800567e:	d031      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005680:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005684:	d828      	bhi.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005686:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800568a:	d01a      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800568c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005690:	d822      	bhi.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005696:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800569a:	d007      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800569c:	e01c      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800569e:	4b32      	ldr	r3, [pc, #200]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a2:	4a31      	ldr	r2, [pc, #196]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056aa:	e01c      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056b0:	3308      	adds	r3, #8
 80056b2:	2100      	movs	r1, #0
 80056b4:	4618      	mov	r0, r3
 80056b6:	f002 fa55 	bl	8007b64 <RCCEx_PLL2_Config>
 80056ba:	4603      	mov	r3, r0
 80056bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80056c0:	e011      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056c6:	3328      	adds	r3, #40	; 0x28
 80056c8:	2100      	movs	r1, #0
 80056ca:	4618      	mov	r0, r3
 80056cc:	f002 fafc 	bl	8007cc8 <RCCEx_PLL3_Config>
 80056d0:	4603      	mov	r3, r0
 80056d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056d6:	e006      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056de:	e002      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80056e0:	bf00      	nop
 80056e2:	e000      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80056e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10b      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80056ee:	4b1e      	ldr	r3, [pc, #120]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80056f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80056fe:	4a1a      	ldr	r2, [pc, #104]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005700:	430b      	orrs	r3, r1
 8005702:	6593      	str	r3, [r2, #88]	; 0x58
 8005704:	e003      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005706:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800570a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800570e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005716:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800571a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800571e:	2300      	movs	r3, #0
 8005720:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005724:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005728:	460b      	mov	r3, r1
 800572a:	4313      	orrs	r3, r2
 800572c:	d056      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800572e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005732:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005736:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800573a:	d038      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800573c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005740:	d831      	bhi.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005742:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005746:	d034      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005748:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800574c:	d82b      	bhi.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800574e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005752:	d01d      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005754:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005758:	d825      	bhi.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800575a:	2b00      	cmp	r3, #0
 800575c:	d006      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800575e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005762:	d00a      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005764:	e01f      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005766:	bf00      	nop
 8005768:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800576c:	4ba2      	ldr	r3, [pc, #648]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	4aa1      	ldr	r2, [pc, #644]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005776:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005778:	e01c      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800577a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800577e:	3308      	adds	r3, #8
 8005780:	2100      	movs	r1, #0
 8005782:	4618      	mov	r0, r3
 8005784:	f002 f9ee 	bl	8007b64 <RCCEx_PLL2_Config>
 8005788:	4603      	mov	r3, r0
 800578a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800578e:	e011      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005794:	3328      	adds	r3, #40	; 0x28
 8005796:	2100      	movs	r1, #0
 8005798:	4618      	mov	r0, r3
 800579a:	f002 fa95 	bl	8007cc8 <RCCEx_PLL3_Config>
 800579e:	4603      	mov	r3, r0
 80057a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057a4:	e006      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057ac:	e002      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80057ae:	bf00      	nop
 80057b0:	e000      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80057b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10b      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80057bc:	4b8e      	ldr	r3, [pc, #568]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80057c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80057cc:	4a8a      	ldr	r2, [pc, #552]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057ce:	430b      	orrs	r3, r1
 80057d0:	6593      	str	r3, [r2, #88]	; 0x58
 80057d2:	e003      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80057dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80057e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80057ec:	2300      	movs	r3, #0
 80057ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80057f2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80057f6:	460b      	mov	r3, r1
 80057f8:	4313      	orrs	r3, r2
 80057fa:	d03a      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80057fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005802:	2b30      	cmp	r3, #48	; 0x30
 8005804:	d01f      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005806:	2b30      	cmp	r3, #48	; 0x30
 8005808:	d819      	bhi.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800580a:	2b20      	cmp	r3, #32
 800580c:	d00c      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800580e:	2b20      	cmp	r3, #32
 8005810:	d815      	bhi.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005812:	2b00      	cmp	r3, #0
 8005814:	d019      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005816:	2b10      	cmp	r3, #16
 8005818:	d111      	bne.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800581a:	4b77      	ldr	r3, [pc, #476]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800581c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581e:	4a76      	ldr	r2, [pc, #472]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005824:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005826:	e011      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800582c:	3308      	adds	r3, #8
 800582e:	2102      	movs	r1, #2
 8005830:	4618      	mov	r0, r3
 8005832:	f002 f997 	bl	8007b64 <RCCEx_PLL2_Config>
 8005836:	4603      	mov	r3, r0
 8005838:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800583c:	e006      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005844:	e002      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005846:	bf00      	nop
 8005848:	e000      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800584a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800584c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10a      	bne.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005854:	4b68      	ldr	r3, [pc, #416]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005858:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800585c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005862:	4a65      	ldr	r2, [pc, #404]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005864:	430b      	orrs	r3, r1
 8005866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005868:	e003      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800586a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800586e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800587e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005882:	2300      	movs	r3, #0
 8005884:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005888:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800588c:	460b      	mov	r3, r1
 800588e:	4313      	orrs	r3, r2
 8005890:	d051      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005898:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800589c:	d035      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800589e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058a2:	d82e      	bhi.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80058a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058a8:	d031      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80058aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058ae:	d828      	bhi.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80058b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b4:	d01a      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80058b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ba:	d822      	bhi.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80058c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c4:	d007      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80058c6:	e01c      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058c8:	4b4b      	ldr	r3, [pc, #300]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	4a4a      	ldr	r2, [pc, #296]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80058d4:	e01c      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058da:	3308      	adds	r3, #8
 80058dc:	2100      	movs	r1, #0
 80058de:	4618      	mov	r0, r3
 80058e0:	f002 f940 	bl	8007b64 <RCCEx_PLL2_Config>
 80058e4:	4603      	mov	r3, r0
 80058e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80058ea:	e011      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f0:	3328      	adds	r3, #40	; 0x28
 80058f2:	2100      	movs	r1, #0
 80058f4:	4618      	mov	r0, r3
 80058f6:	f002 f9e7 	bl	8007cc8 <RCCEx_PLL3_Config>
 80058fa:	4603      	mov	r3, r0
 80058fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005900:	e006      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005908:	e002      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800590a:	bf00      	nop
 800590c:	e000      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800590e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005910:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005918:	4b37      	ldr	r3, [pc, #220]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800591a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800591c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005926:	4a34      	ldr	r2, [pc, #208]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005928:	430b      	orrs	r3, r1
 800592a:	6513      	str	r3, [r2, #80]	; 0x50
 800592c:	e003      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005932:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005942:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005946:	2300      	movs	r3, #0
 8005948:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800594c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005950:	460b      	mov	r3, r1
 8005952:	4313      	orrs	r3, r2
 8005954:	d056      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800595a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800595c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005960:	d033      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005962:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005966:	d82c      	bhi.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005968:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800596c:	d02f      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800596e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005972:	d826      	bhi.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005974:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005978:	d02b      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800597a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800597e:	d820      	bhi.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005980:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005984:	d012      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005986:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800598a:	d81a      	bhi.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800598c:	2b00      	cmp	r3, #0
 800598e:	d022      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005994:	d115      	bne.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800599a:	3308      	adds	r3, #8
 800599c:	2101      	movs	r1, #1
 800599e:	4618      	mov	r0, r3
 80059a0:	f002 f8e0 	bl	8007b64 <RCCEx_PLL2_Config>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80059aa:	e015      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059b0:	3328      	adds	r3, #40	; 0x28
 80059b2:	2101      	movs	r1, #1
 80059b4:	4618      	mov	r0, r3
 80059b6:	f002 f987 	bl	8007cc8 <RCCEx_PLL3_Config>
 80059ba:	4603      	mov	r3, r0
 80059bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80059c0:	e00a      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80059c8:	e006      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80059ca:	bf00      	nop
 80059cc:	e004      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80059ce:	bf00      	nop
 80059d0:	e002      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80059d2:	bf00      	nop
 80059d4:	e000      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80059d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10d      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80059e0:	4b05      	ldr	r3, [pc, #20]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80059e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059ee:	4a02      	ldr	r2, [pc, #8]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059f0:	430b      	orrs	r3, r1
 80059f2:	6513      	str	r3, [r2, #80]	; 0x50
 80059f4:	e006      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80059f6:	bf00      	nop
 80059f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005a10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a14:	2300      	movs	r3, #0
 8005a16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a1a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4313      	orrs	r3, r2
 8005a22:	d055      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a30:	d033      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005a32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a36:	d82c      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a3c:	d02f      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a42:	d826      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a48:	d02b      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005a4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a4e:	d820      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a54:	d012      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005a56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a5a:	d81a      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d022      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005a60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a64:	d115      	bne.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f002 f878 	bl	8007b64 <RCCEx_PLL2_Config>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005a7a:	e015      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a80:	3328      	adds	r3, #40	; 0x28
 8005a82:	2101      	movs	r1, #1
 8005a84:	4618      	mov	r0, r3
 8005a86:	f002 f91f 	bl	8007cc8 <RCCEx_PLL3_Config>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005a90:	e00a      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a98:	e006      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a9a:	bf00      	nop
 8005a9c:	e004      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a9e:	bf00      	nop
 8005aa0:	e002      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005aa2:	bf00      	nop
 8005aa4:	e000      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005aa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10b      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005ab0:	4ba3      	ldr	r3, [pc, #652]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005abc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ac0:	4a9f      	ldr	r2, [pc, #636]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ac2:	430b      	orrs	r3, r1
 8005ac4:	6593      	str	r3, [r2, #88]	; 0x58
 8005ac6:	e003      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005acc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005adc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ae6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005aea:	460b      	mov	r3, r1
 8005aec:	4313      	orrs	r3, r2
 8005aee:	d037      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005afa:	d00e      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b00:	d816      	bhi.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d018      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005b06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b0a:	d111      	bne.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b0c:	4b8c      	ldr	r3, [pc, #560]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	4a8b      	ldr	r2, [pc, #556]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b18:	e00f      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b1e:	3308      	adds	r3, #8
 8005b20:	2101      	movs	r1, #1
 8005b22:	4618      	mov	r0, r3
 8005b24:	f002 f81e 	bl	8007b64 <RCCEx_PLL2_Config>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b2e:	e004      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b36:	e000      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10a      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b42:	4b7f      	ldr	r3, [pc, #508]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b46:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b50:	4a7b      	ldr	r2, [pc, #492]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b52:	430b      	orrs	r3, r1
 8005b54:	6513      	str	r3, [r2, #80]	; 0x50
 8005b56:	e003      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b68:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005b6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b70:	2300      	movs	r3, #0
 8005b72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005b76:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	d039      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b86:	2b03      	cmp	r3, #3
 8005b88:	d81c      	bhi.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005b8a:	a201      	add	r2, pc, #4	; (adr r2, 8005b90 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b90:	08005bcd 	.word	0x08005bcd
 8005b94:	08005ba1 	.word	0x08005ba1
 8005b98:	08005baf 	.word	0x08005baf
 8005b9c:	08005bcd 	.word	0x08005bcd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ba0:	4b67      	ldr	r3, [pc, #412]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba4:	4a66      	ldr	r2, [pc, #408]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005baa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005bac:	e00f      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb2:	3308      	adds	r3, #8
 8005bb4:	2102      	movs	r1, #2
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f001 ffd4 	bl	8007b64 <RCCEx_PLL2_Config>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005bc2:	e004      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005bca:	e000      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10a      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005bd6:	4b5a      	ldr	r3, [pc, #360]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bda:	f023 0103 	bic.w	r1, r3, #3
 8005bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005be4:	4a56      	ldr	r2, [pc, #344]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005be6:	430b      	orrs	r3, r1
 8005be8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bea:	e003      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bf0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005c00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c04:	2300      	movs	r3, #0
 8005c06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c0a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005c0e:	460b      	mov	r3, r1
 8005c10:	4313      	orrs	r3, r2
 8005c12:	f000 809f 	beq.w	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c16:	4b4b      	ldr	r3, [pc, #300]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a4a      	ldr	r2, [pc, #296]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c22:	f7fb fd45 	bl	80016b0 <HAL_GetTick>
 8005c26:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c2a:	e00b      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c2c:	f7fb fd40 	bl	80016b0 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b64      	cmp	r3, #100	; 0x64
 8005c3a:	d903      	bls.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c42:	e005      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c44:	4b3f      	ldr	r3, [pc, #252]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0ed      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005c50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d179      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005c58:	4b39      	ldr	r3, [pc, #228]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c64:	4053      	eors	r3, r2
 8005c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d015      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c6e:	4b34      	ldr	r3, [pc, #208]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c76:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c7a:	4b31      	ldr	r3, [pc, #196]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7e:	4a30      	ldr	r2, [pc, #192]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c84:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c86:	4b2e      	ldr	r3, [pc, #184]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8a:	4a2d      	ldr	r2, [pc, #180]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c90:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005c92:	4a2b      	ldr	r2, [pc, #172]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c98:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca6:	d118      	bne.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca8:	f7fb fd02 	bl	80016b0 <HAL_GetTick>
 8005cac:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cb0:	e00d      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb2:	f7fb fcfd 	bl	80016b0 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005cbc:	1ad2      	subs	r2, r2, r3
 8005cbe:	f241 3388 	movw	r3, #5000	; 0x1388
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d903      	bls.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005ccc:	e005      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cce:	4b1c      	ldr	r3, [pc, #112]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d0eb      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005cda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d129      	bne.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ce6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cf2:	d10e      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005cf4:	4b12      	ldr	r3, [pc, #72]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d04:	091a      	lsrs	r2, r3, #4
 8005d06:	4b10      	ldr	r3, [pc, #64]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005d08:	4013      	ands	r3, r2
 8005d0a:	4a0d      	ldr	r2, [pc, #52]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d0c:	430b      	orrs	r3, r1
 8005d0e:	6113      	str	r3, [r2, #16]
 8005d10:	e005      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005d12:	4b0b      	ldr	r3, [pc, #44]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	4a0a      	ldr	r2, [pc, #40]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005d1c:	6113      	str	r3, [r2, #16]
 8005d1e:	4b08      	ldr	r3, [pc, #32]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d20:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d2e:	4a04      	ldr	r2, [pc, #16]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d30:	430b      	orrs	r3, r1
 8005d32:	6713      	str	r3, [r2, #112]	; 0x70
 8005d34:	e00e      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005d3e:	e009      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005d40:	58024400 	.word	0x58024400
 8005d44:	58024800 	.word	0x58024800
 8005d48:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5c:	f002 0301 	and.w	r3, r2, #1
 8005d60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d64:	2300      	movs	r3, #0
 8005d66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d6a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4313      	orrs	r3, r2
 8005d72:	f000 8089 	beq.w	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d7c:	2b28      	cmp	r3, #40	; 0x28
 8005d7e:	d86b      	bhi.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005d80:	a201      	add	r2, pc, #4	; (adr r2, 8005d88 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d86:	bf00      	nop
 8005d88:	08005e61 	.word	0x08005e61
 8005d8c:	08005e59 	.word	0x08005e59
 8005d90:	08005e59 	.word	0x08005e59
 8005d94:	08005e59 	.word	0x08005e59
 8005d98:	08005e59 	.word	0x08005e59
 8005d9c:	08005e59 	.word	0x08005e59
 8005da0:	08005e59 	.word	0x08005e59
 8005da4:	08005e59 	.word	0x08005e59
 8005da8:	08005e2d 	.word	0x08005e2d
 8005dac:	08005e59 	.word	0x08005e59
 8005db0:	08005e59 	.word	0x08005e59
 8005db4:	08005e59 	.word	0x08005e59
 8005db8:	08005e59 	.word	0x08005e59
 8005dbc:	08005e59 	.word	0x08005e59
 8005dc0:	08005e59 	.word	0x08005e59
 8005dc4:	08005e59 	.word	0x08005e59
 8005dc8:	08005e43 	.word	0x08005e43
 8005dcc:	08005e59 	.word	0x08005e59
 8005dd0:	08005e59 	.word	0x08005e59
 8005dd4:	08005e59 	.word	0x08005e59
 8005dd8:	08005e59 	.word	0x08005e59
 8005ddc:	08005e59 	.word	0x08005e59
 8005de0:	08005e59 	.word	0x08005e59
 8005de4:	08005e59 	.word	0x08005e59
 8005de8:	08005e61 	.word	0x08005e61
 8005dec:	08005e59 	.word	0x08005e59
 8005df0:	08005e59 	.word	0x08005e59
 8005df4:	08005e59 	.word	0x08005e59
 8005df8:	08005e59 	.word	0x08005e59
 8005dfc:	08005e59 	.word	0x08005e59
 8005e00:	08005e59 	.word	0x08005e59
 8005e04:	08005e59 	.word	0x08005e59
 8005e08:	08005e61 	.word	0x08005e61
 8005e0c:	08005e59 	.word	0x08005e59
 8005e10:	08005e59 	.word	0x08005e59
 8005e14:	08005e59 	.word	0x08005e59
 8005e18:	08005e59 	.word	0x08005e59
 8005e1c:	08005e59 	.word	0x08005e59
 8005e20:	08005e59 	.word	0x08005e59
 8005e24:	08005e59 	.word	0x08005e59
 8005e28:	08005e61 	.word	0x08005e61
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e30:	3308      	adds	r3, #8
 8005e32:	2101      	movs	r1, #1
 8005e34:	4618      	mov	r0, r3
 8005e36:	f001 fe95 	bl	8007b64 <RCCEx_PLL2_Config>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e40:	e00f      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e46:	3328      	adds	r3, #40	; 0x28
 8005e48:	2101      	movs	r1, #1
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f001 ff3c 	bl	8007cc8 <RCCEx_PLL3_Config>
 8005e50:	4603      	mov	r3, r0
 8005e52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e56:	e004      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e5e:	e000      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10a      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005e6a:	4bbf      	ldr	r3, [pc, #764]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e78:	4abb      	ldr	r2, [pc, #748]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e7a:	430b      	orrs	r3, r1
 8005e7c:	6553      	str	r3, [r2, #84]	; 0x54
 8005e7e:	e003      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e90:	f002 0302 	and.w	r3, r2, #2
 8005e94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e9e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	d041      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eae:	2b05      	cmp	r3, #5
 8005eb0:	d824      	bhi.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005eb2:	a201      	add	r2, pc, #4	; (adr r2, 8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb8:	08005f05 	.word	0x08005f05
 8005ebc:	08005ed1 	.word	0x08005ed1
 8005ec0:	08005ee7 	.word	0x08005ee7
 8005ec4:	08005f05 	.word	0x08005f05
 8005ec8:	08005f05 	.word	0x08005f05
 8005ecc:	08005f05 	.word	0x08005f05
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ed4:	3308      	adds	r3, #8
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f001 fe43 	bl	8007b64 <RCCEx_PLL2_Config>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005ee4:	e00f      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eea:	3328      	adds	r3, #40	; 0x28
 8005eec:	2101      	movs	r1, #1
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f001 feea 	bl	8007cc8 <RCCEx_PLL3_Config>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005efa:	e004      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f02:	e000      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10a      	bne.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005f0e:	4b96      	ldr	r3, [pc, #600]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f12:	f023 0107 	bic.w	r1, r3, #7
 8005f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f1c:	4a92      	ldr	r2, [pc, #584]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f1e:	430b      	orrs	r3, r1
 8005f20:	6553      	str	r3, [r2, #84]	; 0x54
 8005f22:	e003      	b.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f34:	f002 0304 	and.w	r3, r2, #4
 8005f38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f42:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005f46:	460b      	mov	r3, r1
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	d044      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f54:	2b05      	cmp	r3, #5
 8005f56:	d825      	bhi.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005f58:	a201      	add	r2, pc, #4	; (adr r2, 8005f60 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5e:	bf00      	nop
 8005f60:	08005fad 	.word	0x08005fad
 8005f64:	08005f79 	.word	0x08005f79
 8005f68:	08005f8f 	.word	0x08005f8f
 8005f6c:	08005fad 	.word	0x08005fad
 8005f70:	08005fad 	.word	0x08005fad
 8005f74:	08005fad 	.word	0x08005fad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f7c:	3308      	adds	r3, #8
 8005f7e:	2101      	movs	r1, #1
 8005f80:	4618      	mov	r0, r3
 8005f82:	f001 fdef 	bl	8007b64 <RCCEx_PLL2_Config>
 8005f86:	4603      	mov	r3, r0
 8005f88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005f8c:	e00f      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f92:	3328      	adds	r3, #40	; 0x28
 8005f94:	2101      	movs	r1, #1
 8005f96:	4618      	mov	r0, r3
 8005f98:	f001 fe96 	bl	8007cc8 <RCCEx_PLL3_Config>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005fa2:	e004      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005faa:	e000      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10b      	bne.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fb6:	4b6c      	ldr	r3, [pc, #432]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fba:	f023 0107 	bic.w	r1, r3, #7
 8005fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fc6:	4a68      	ldr	r2, [pc, #416]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fc8:	430b      	orrs	r3, r1
 8005fca:	6593      	str	r3, [r2, #88]	; 0x58
 8005fcc:	e003      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fde:	f002 0320 	and.w	r3, r2, #32
 8005fe2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	d055      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006002:	d033      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006004:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006008:	d82c      	bhi.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800600a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800600e:	d02f      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006014:	d826      	bhi.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006016:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800601a:	d02b      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800601c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006020:	d820      	bhi.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006026:	d012      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800602c:	d81a      	bhi.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800602e:	2b00      	cmp	r3, #0
 8006030:	d022      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006032:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006036:	d115      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800603c:	3308      	adds	r3, #8
 800603e:	2100      	movs	r1, #0
 8006040:	4618      	mov	r0, r3
 8006042:	f001 fd8f 	bl	8007b64 <RCCEx_PLL2_Config>
 8006046:	4603      	mov	r3, r0
 8006048:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800604c:	e015      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800604e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006052:	3328      	adds	r3, #40	; 0x28
 8006054:	2102      	movs	r1, #2
 8006056:	4618      	mov	r0, r3
 8006058:	f001 fe36 	bl	8007cc8 <RCCEx_PLL3_Config>
 800605c:	4603      	mov	r3, r0
 800605e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006062:	e00a      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800606a:	e006      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800606c:	bf00      	nop
 800606e:	e004      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006070:	bf00      	nop
 8006072:	e002      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006074:	bf00      	nop
 8006076:	e000      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800607a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10b      	bne.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006082:	4b39      	ldr	r3, [pc, #228]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006086:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800608a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800608e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006092:	4a35      	ldr	r2, [pc, #212]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006094:	430b      	orrs	r3, r1
 8006096:	6553      	str	r3, [r2, #84]	; 0x54
 8006098:	e003      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800609a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800609e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80060a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060aa:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80060ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060b2:	2300      	movs	r3, #0
 80060b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80060b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80060bc:	460b      	mov	r3, r1
 80060be:	4313      	orrs	r3, r2
 80060c0:	d058      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80060c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80060ce:	d033      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80060d0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80060d4:	d82c      	bhi.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80060d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060da:	d02f      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80060dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e0:	d826      	bhi.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80060e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060e6:	d02b      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80060e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060ec:	d820      	bhi.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80060ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060f2:	d012      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80060f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060f8:	d81a      	bhi.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d022      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80060fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006102:	d115      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006108:	3308      	adds	r3, #8
 800610a:	2100      	movs	r1, #0
 800610c:	4618      	mov	r0, r3
 800610e:	f001 fd29 	bl	8007b64 <RCCEx_PLL2_Config>
 8006112:	4603      	mov	r3, r0
 8006114:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006118:	e015      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800611a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800611e:	3328      	adds	r3, #40	; 0x28
 8006120:	2102      	movs	r1, #2
 8006122:	4618      	mov	r0, r3
 8006124:	f001 fdd0 	bl	8007cc8 <RCCEx_PLL3_Config>
 8006128:	4603      	mov	r3, r0
 800612a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800612e:	e00a      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006136:	e006      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006138:	bf00      	nop
 800613a:	e004      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800613c:	bf00      	nop
 800613e:	e002      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006140:	bf00      	nop
 8006142:	e000      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006146:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10e      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800614e:	4b06      	ldr	r3, [pc, #24]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006152:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800615a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800615e:	4a02      	ldr	r2, [pc, #8]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006160:	430b      	orrs	r3, r1
 8006162:	6593      	str	r3, [r2, #88]	; 0x58
 8006164:	e006      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006166:	bf00      	nop
 8006168:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800616c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006170:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006180:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006184:	2300      	movs	r3, #0
 8006186:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800618a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800618e:	460b      	mov	r3, r1
 8006190:	4313      	orrs	r3, r2
 8006192:	d055      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006198:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800619c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80061a0:	d033      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80061a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80061a6:	d82c      	bhi.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80061a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ac:	d02f      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80061ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061b2:	d826      	bhi.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80061b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80061b8:	d02b      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80061ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80061be:	d820      	bhi.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80061c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061c4:	d012      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80061c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061ca:	d81a      	bhi.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d022      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80061d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061d4:	d115      	bne.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061da:	3308      	adds	r3, #8
 80061dc:	2100      	movs	r1, #0
 80061de:	4618      	mov	r0, r3
 80061e0:	f001 fcc0 	bl	8007b64 <RCCEx_PLL2_Config>
 80061e4:	4603      	mov	r3, r0
 80061e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80061ea:	e015      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061f0:	3328      	adds	r3, #40	; 0x28
 80061f2:	2102      	movs	r1, #2
 80061f4:	4618      	mov	r0, r3
 80061f6:	f001 fd67 	bl	8007cc8 <RCCEx_PLL3_Config>
 80061fa:	4603      	mov	r3, r0
 80061fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006200:	e00a      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006208:	e006      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800620a:	bf00      	nop
 800620c:	e004      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800620e:	bf00      	nop
 8006210:	e002      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006212:	bf00      	nop
 8006214:	e000      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006216:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006218:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10b      	bne.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006220:	4ba1      	ldr	r3, [pc, #644]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006224:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800622c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006230:	4a9d      	ldr	r2, [pc, #628]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006232:	430b      	orrs	r3, r1
 8006234:	6593      	str	r3, [r2, #88]	; 0x58
 8006236:	e003      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006238:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800623c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006248:	f002 0308 	and.w	r3, r2, #8
 800624c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006250:	2300      	movs	r3, #0
 8006252:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006256:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800625a:	460b      	mov	r3, r1
 800625c:	4313      	orrs	r3, r2
 800625e:	d01e      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800626c:	d10c      	bne.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800626e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006272:	3328      	adds	r3, #40	; 0x28
 8006274:	2102      	movs	r1, #2
 8006276:	4618      	mov	r0, r3
 8006278:	f001 fd26 	bl	8007cc8 <RCCEx_PLL3_Config>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006288:	4b87      	ldr	r3, [pc, #540]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800628a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006298:	4a83      	ldr	r2, [pc, #524]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800629a:	430b      	orrs	r3, r1
 800629c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800629e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	f002 0310 	and.w	r3, r2, #16
 80062aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062ae:	2300      	movs	r3, #0
 80062b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80062b4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80062b8:	460b      	mov	r3, r1
 80062ba:	4313      	orrs	r3, r2
 80062bc:	d01e      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80062be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ca:	d10c      	bne.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d0:	3328      	adds	r3, #40	; 0x28
 80062d2:	2102      	movs	r1, #2
 80062d4:	4618      	mov	r0, r3
 80062d6:	f001 fcf7 	bl	8007cc8 <RCCEx_PLL3_Config>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80062e6:	4b70      	ldr	r3, [pc, #448]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062f6:	4a6c      	ldr	r2, [pc, #432]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062f8:	430b      	orrs	r3, r1
 80062fa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006304:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006308:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800630c:	2300      	movs	r3, #0
 800630e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006312:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006316:	460b      	mov	r3, r1
 8006318:	4313      	orrs	r3, r2
 800631a:	d03e      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800631c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006320:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006328:	d022      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800632a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800632e:	d81b      	bhi.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006330:	2b00      	cmp	r3, #0
 8006332:	d003      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006338:	d00b      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800633a:	e015      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800633c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006340:	3308      	adds	r3, #8
 8006342:	2100      	movs	r1, #0
 8006344:	4618      	mov	r0, r3
 8006346:	f001 fc0d 	bl	8007b64 <RCCEx_PLL2_Config>
 800634a:	4603      	mov	r3, r0
 800634c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006350:	e00f      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006356:	3328      	adds	r3, #40	; 0x28
 8006358:	2102      	movs	r1, #2
 800635a:	4618      	mov	r0, r3
 800635c:	f001 fcb4 	bl	8007cc8 <RCCEx_PLL3_Config>
 8006360:	4603      	mov	r3, r0
 8006362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006366:	e004      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800636e:	e000      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006372:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10b      	bne.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800637a:	4b4b      	ldr	r3, [pc, #300]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800637c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800637e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006386:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800638a:	4a47      	ldr	r2, [pc, #284]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800638c:	430b      	orrs	r3, r1
 800638e:	6593      	str	r3, [r2, #88]	; 0x58
 8006390:	e003      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006392:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006396:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800639a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800639e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80063a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80063a8:	2300      	movs	r3, #0
 80063aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063ac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80063b0:	460b      	mov	r3, r1
 80063b2:	4313      	orrs	r3, r2
 80063b4:	d03b      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80063b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063c2:	d01f      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80063c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063c8:	d818      	bhi.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80063ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ce:	d003      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80063d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063d4:	d007      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80063d6:	e011      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063d8:	4b33      	ldr	r3, [pc, #204]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063dc:	4a32      	ldr	r2, [pc, #200]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80063e4:	e00f      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ea:	3328      	adds	r3, #40	; 0x28
 80063ec:	2101      	movs	r1, #1
 80063ee:	4618      	mov	r0, r3
 80063f0:	f001 fc6a 	bl	8007cc8 <RCCEx_PLL3_Config>
 80063f4:	4603      	mov	r3, r0
 80063f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80063fa:	e004      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006402:	e000      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006406:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10b      	bne.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800640e:	4b26      	ldr	r3, [pc, #152]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006412:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800641a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800641e:	4a22      	ldr	r2, [pc, #136]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006420:	430b      	orrs	r3, r1
 8006422:	6553      	str	r3, [r2, #84]	; 0x54
 8006424:	e003      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006426:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800642a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800642e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006436:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800643a:	673b      	str	r3, [r7, #112]	; 0x70
 800643c:	2300      	movs	r3, #0
 800643e:	677b      	str	r3, [r7, #116]	; 0x74
 8006440:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006444:	460b      	mov	r3, r1
 8006446:	4313      	orrs	r3, r2
 8006448:	d034      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800644a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800644e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006458:	d007      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800645a:	e011      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800645c:	4b12      	ldr	r3, [pc, #72]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800645e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006460:	4a11      	ldr	r2, [pc, #68]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006466:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006468:	e00e      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800646a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800646e:	3308      	adds	r3, #8
 8006470:	2102      	movs	r1, #2
 8006472:	4618      	mov	r0, r3
 8006474:	f001 fb76 	bl	8007b64 <RCCEx_PLL2_Config>
 8006478:	4603      	mov	r3, r0
 800647a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800647e:	e003      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006486:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006488:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10d      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006490:	4b05      	ldr	r3, [pc, #20]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006494:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800649c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800649e:	4a02      	ldr	r2, [pc, #8]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064a0:	430b      	orrs	r3, r1
 80064a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80064a4:	e006      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80064a6:	bf00      	nop
 80064a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064bc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80064c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80064c2:	2300      	movs	r3, #0
 80064c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064c6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80064ca:	460b      	mov	r3, r1
 80064cc:	4313      	orrs	r3, r2
 80064ce:	d00c      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80064d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064d4:	3328      	adds	r3, #40	; 0x28
 80064d6:	2102      	movs	r1, #2
 80064d8:	4618      	mov	r0, r3
 80064da:	f001 fbf5 	bl	8007cc8 <RCCEx_PLL3_Config>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d002      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80064ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80064f6:	663b      	str	r3, [r7, #96]	; 0x60
 80064f8:	2300      	movs	r3, #0
 80064fa:	667b      	str	r3, [r7, #100]	; 0x64
 80064fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006500:	460b      	mov	r3, r1
 8006502:	4313      	orrs	r3, r2
 8006504:	d038      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800650a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800650e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006512:	d018      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006514:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006518:	d811      	bhi.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800651a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800651e:	d014      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006524:	d80b      	bhi.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006526:	2b00      	cmp	r3, #0
 8006528:	d011      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800652a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800652e:	d106      	bne.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006530:	4bc3      	ldr	r3, [pc, #780]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006534:	4ac2      	ldr	r2, [pc, #776]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800653a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800653c:	e008      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006544:	e004      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006546:	bf00      	nop
 8006548:	e002      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800654a:	bf00      	nop
 800654c:	e000      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800654e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006550:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10b      	bne.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006558:	4bb9      	ldr	r3, [pc, #740]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800655a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006568:	4ab5      	ldr	r2, [pc, #724]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800656a:	430b      	orrs	r3, r1
 800656c:	6553      	str	r3, [r2, #84]	; 0x54
 800656e:	e003      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006570:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006574:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800657c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006580:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006584:	65bb      	str	r3, [r7, #88]	; 0x58
 8006586:	2300      	movs	r3, #0
 8006588:	65fb      	str	r3, [r7, #92]	; 0x5c
 800658a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800658e:	460b      	mov	r3, r1
 8006590:	4313      	orrs	r3, r2
 8006592:	d009      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006594:	4baa      	ldr	r3, [pc, #680]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006598:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800659c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065a2:	4aa7      	ldr	r2, [pc, #668]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065a4:	430b      	orrs	r3, r1
 80065a6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80065a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80065b4:	653b      	str	r3, [r7, #80]	; 0x50
 80065b6:	2300      	movs	r3, #0
 80065b8:	657b      	str	r3, [r7, #84]	; 0x54
 80065ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80065be:	460b      	mov	r3, r1
 80065c0:	4313      	orrs	r3, r2
 80065c2:	d00a      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80065c4:	4b9e      	ldr	r3, [pc, #632]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80065cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80065d4:	4a9a      	ldr	r2, [pc, #616]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065d6:	430b      	orrs	r3, r1
 80065d8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80065da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80065e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80065e8:	2300      	movs	r3, #0
 80065ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065ec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80065f0:	460b      	mov	r3, r1
 80065f2:	4313      	orrs	r3, r2
 80065f4:	d009      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065f6:	4b92      	ldr	r3, [pc, #584]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065fa:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80065fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006604:	4a8e      	ldr	r2, [pc, #568]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006606:	430b      	orrs	r3, r1
 8006608:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800660a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800660e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006612:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006616:	643b      	str	r3, [r7, #64]	; 0x40
 8006618:	2300      	movs	r3, #0
 800661a:	647b      	str	r3, [r7, #68]	; 0x44
 800661c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006620:	460b      	mov	r3, r1
 8006622:	4313      	orrs	r3, r2
 8006624:	d00e      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006626:	4b86      	ldr	r3, [pc, #536]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	4a85      	ldr	r2, [pc, #532]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800662c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006630:	6113      	str	r3, [r2, #16]
 8006632:	4b83      	ldr	r3, [pc, #524]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006634:	6919      	ldr	r1, [r3, #16]
 8006636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800663a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800663e:	4a80      	ldr	r2, [pc, #512]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006640:	430b      	orrs	r3, r1
 8006642:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006650:	63bb      	str	r3, [r7, #56]	; 0x38
 8006652:	2300      	movs	r3, #0
 8006654:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006656:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800665a:	460b      	mov	r3, r1
 800665c:	4313      	orrs	r3, r2
 800665e:	d009      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006660:	4b77      	ldr	r3, [pc, #476]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006664:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800666c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666e:	4a74      	ldr	r2, [pc, #464]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006670:	430b      	orrs	r3, r1
 8006672:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006680:	633b      	str	r3, [r7, #48]	; 0x30
 8006682:	2300      	movs	r3, #0
 8006684:	637b      	str	r3, [r7, #52]	; 0x34
 8006686:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800668a:	460b      	mov	r3, r1
 800668c:	4313      	orrs	r3, r2
 800668e:	d00a      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006690:	4b6b      	ldr	r3, [pc, #428]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006694:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800669c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066a0:	4a67      	ldr	r2, [pc, #412]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066a2:	430b      	orrs	r3, r1
 80066a4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80066a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ae:	2100      	movs	r1, #0
 80066b0:	62b9      	str	r1, [r7, #40]	; 0x28
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066b8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80066bc:	460b      	mov	r3, r1
 80066be:	4313      	orrs	r3, r2
 80066c0:	d011      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066c6:	3308      	adds	r3, #8
 80066c8:	2100      	movs	r1, #0
 80066ca:	4618      	mov	r0, r3
 80066cc:	f001 fa4a 	bl	8007b64 <RCCEx_PLL2_Config>
 80066d0:	4603      	mov	r3, r0
 80066d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80066d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80066e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	2100      	movs	r1, #0
 80066f0:	6239      	str	r1, [r7, #32]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	627b      	str	r3, [r7, #36]	; 0x24
 80066f8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80066fc:	460b      	mov	r3, r1
 80066fe:	4313      	orrs	r3, r2
 8006700:	d011      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006706:	3308      	adds	r3, #8
 8006708:	2101      	movs	r1, #1
 800670a:	4618      	mov	r0, r3
 800670c:	f001 fa2a 	bl	8007b64 <RCCEx_PLL2_Config>
 8006710:	4603      	mov	r3, r0
 8006712:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006716:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800671e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006722:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	2100      	movs	r1, #0
 8006730:	61b9      	str	r1, [r7, #24]
 8006732:	f003 0304 	and.w	r3, r3, #4
 8006736:	61fb      	str	r3, [r7, #28]
 8006738:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800673c:	460b      	mov	r3, r1
 800673e:	4313      	orrs	r3, r2
 8006740:	d011      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006746:	3308      	adds	r3, #8
 8006748:	2102      	movs	r1, #2
 800674a:	4618      	mov	r0, r3
 800674c:	f001 fa0a 	bl	8007b64 <RCCEx_PLL2_Config>
 8006750:	4603      	mov	r3, r0
 8006752:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006756:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006762:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800676a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676e:	2100      	movs	r1, #0
 8006770:	6139      	str	r1, [r7, #16]
 8006772:	f003 0308 	and.w	r3, r3, #8
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800677c:	460b      	mov	r3, r1
 800677e:	4313      	orrs	r3, r2
 8006780:	d011      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006786:	3328      	adds	r3, #40	; 0x28
 8006788:	2100      	movs	r1, #0
 800678a:	4618      	mov	r0, r3
 800678c:	f001 fa9c 	bl	8007cc8 <RCCEx_PLL3_Config>
 8006790:	4603      	mov	r3, r0
 8006792:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006796:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80067a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	2100      	movs	r1, #0
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	f003 0310 	and.w	r3, r3, #16
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80067bc:	460b      	mov	r3, r1
 80067be:	4313      	orrs	r3, r2
 80067c0:	d011      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067c6:	3328      	adds	r3, #40	; 0x28
 80067c8:	2101      	movs	r1, #1
 80067ca:	4618      	mov	r0, r3
 80067cc:	f001 fa7c 	bl	8007cc8 <RCCEx_PLL3_Config>
 80067d0:	4603      	mov	r3, r0
 80067d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80067d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80067e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ee:	2100      	movs	r1, #0
 80067f0:	6039      	str	r1, [r7, #0]
 80067f2:	f003 0320 	and.w	r3, r3, #32
 80067f6:	607b      	str	r3, [r7, #4]
 80067f8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80067fc:	460b      	mov	r3, r1
 80067fe:	4313      	orrs	r3, r2
 8006800:	d011      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006806:	3328      	adds	r3, #40	; 0x28
 8006808:	2102      	movs	r1, #2
 800680a:	4618      	mov	r0, r3
 800680c:	f001 fa5c 	bl	8007cc8 <RCCEx_PLL3_Config>
 8006810:	4603      	mov	r3, r0
 8006812:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006816:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006822:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006826:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	e000      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
}
 8006834:	4618      	mov	r0, r3
 8006836:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800683a:	46bd      	mov	sp, r7
 800683c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006840:	58024400 	.word	0x58024400

08006844 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b090      	sub	sp, #64	; 0x40
 8006848:	af00      	add	r7, sp, #0
 800684a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800684e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006852:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006856:	430b      	orrs	r3, r1
 8006858:	f040 8094 	bne.w	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800685c:	4b9e      	ldr	r3, [pc, #632]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800685e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006860:	f003 0307 	and.w	r3, r3, #7
 8006864:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006868:	2b04      	cmp	r3, #4
 800686a:	f200 8087 	bhi.w	800697c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800686e:	a201      	add	r2, pc, #4	; (adr r2, 8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006874:	08006889 	.word	0x08006889
 8006878:	080068b1 	.word	0x080068b1
 800687c:	080068d9 	.word	0x080068d9
 8006880:	08006975 	.word	0x08006975
 8006884:	08006901 	.word	0x08006901
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006888:	4b93      	ldr	r3, [pc, #588]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006890:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006894:	d108      	bne.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800689a:	4618      	mov	r0, r3
 800689c:	f001 f810 	bl	80078c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068a4:	f000 bd45 	b.w	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068ac:	f000 bd41 	b.w	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068b0:	4b89      	ldr	r3, [pc, #548]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068bc:	d108      	bne.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068be:	f107 0318 	add.w	r3, r7, #24
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 fd54 	bl	8007370 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068cc:	f000 bd31 	b.w	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068d0:	2300      	movs	r3, #0
 80068d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068d4:	f000 bd2d 	b.w	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068d8:	4b7f      	ldr	r3, [pc, #508]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068e4:	d108      	bne.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068e6:	f107 030c 	add.w	r3, r7, #12
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fe94 	bl	8007618 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068f4:	f000 bd1d 	b.w	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068f8:	2300      	movs	r3, #0
 80068fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068fc:	f000 bd19 	b.w	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006900:	4b75      	ldr	r3, [pc, #468]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006904:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006908:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800690a:	4b73      	ldr	r3, [pc, #460]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0304 	and.w	r3, r3, #4
 8006912:	2b04      	cmp	r3, #4
 8006914:	d10c      	bne.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006918:	2b00      	cmp	r3, #0
 800691a:	d109      	bne.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800691c:	4b6e      	ldr	r3, [pc, #440]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	08db      	lsrs	r3, r3, #3
 8006922:	f003 0303 	and.w	r3, r3, #3
 8006926:	4a6d      	ldr	r2, [pc, #436]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006928:	fa22 f303 	lsr.w	r3, r2, r3
 800692c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800692e:	e01f      	b.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006930:	4b69      	ldr	r3, [pc, #420]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800693c:	d106      	bne.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800693e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006940:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006944:	d102      	bne.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006946:	4b66      	ldr	r3, [pc, #408]	; (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006948:	63fb      	str	r3, [r7, #60]	; 0x3c
 800694a:	e011      	b.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800694c:	4b62      	ldr	r3, [pc, #392]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006954:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006958:	d106      	bne.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800695a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800695c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006960:	d102      	bne.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006962:	4b60      	ldr	r3, [pc, #384]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006964:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006966:	e003      	b.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006968:	2300      	movs	r3, #0
 800696a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800696c:	f000 bce1 	b.w	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006970:	f000 bcdf 	b.w	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006974:	4b5c      	ldr	r3, [pc, #368]	; (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006978:	f000 bcdb 	b.w	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800697c:	2300      	movs	r3, #0
 800697e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006980:	f000 bcd7 	b.w	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006984:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006988:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800698c:	430b      	orrs	r3, r1
 800698e:	f040 80ad 	bne.w	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006992:	4b51      	ldr	r3, [pc, #324]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006996:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800699a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069a2:	d056      	beq.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80069a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069aa:	f200 8090 	bhi.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80069ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b0:	2bc0      	cmp	r3, #192	; 0xc0
 80069b2:	f000 8088 	beq.w	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80069b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b8:	2bc0      	cmp	r3, #192	; 0xc0
 80069ba:	f200 8088 	bhi.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	2b80      	cmp	r3, #128	; 0x80
 80069c2:	d032      	beq.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80069c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c6:	2b80      	cmp	r3, #128	; 0x80
 80069c8:	f200 8081 	bhi.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80069d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d4:	2b40      	cmp	r3, #64	; 0x40
 80069d6:	d014      	beq.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80069d8:	e079      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069da:	4b3f      	ldr	r3, [pc, #252]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069e6:	d108      	bne.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 ff67 	bl	80078c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069f6:	f000 bc9c 	b.w	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069fa:	2300      	movs	r3, #0
 80069fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069fe:	f000 bc98 	b.w	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a02:	4b35      	ldr	r3, [pc, #212]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a0e:	d108      	bne.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a10:	f107 0318 	add.w	r3, r7, #24
 8006a14:	4618      	mov	r0, r3
 8006a16:	f000 fcab 	bl	8007370 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a1e:	f000 bc88 	b.w	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a22:	2300      	movs	r3, #0
 8006a24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a26:	f000 bc84 	b.w	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a2a:	4b2b      	ldr	r3, [pc, #172]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a36:	d108      	bne.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a38:	f107 030c 	add.w	r3, r7, #12
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 fdeb 	bl	8007618 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a46:	f000 bc74 	b.w	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a4e:	f000 bc70 	b.w	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a52:	4b21      	ldr	r3, [pc, #132]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a5a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a5c:	4b1e      	ldr	r3, [pc, #120]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0304 	and.w	r3, r3, #4
 8006a64:	2b04      	cmp	r3, #4
 8006a66:	d10c      	bne.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d109      	bne.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a6e:	4b1a      	ldr	r3, [pc, #104]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	08db      	lsrs	r3, r3, #3
 8006a74:	f003 0303 	and.w	r3, r3, #3
 8006a78:	4a18      	ldr	r2, [pc, #96]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a80:	e01f      	b.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a82:	4b15      	ldr	r3, [pc, #84]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a8e:	d106      	bne.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a96:	d102      	bne.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a98:	4b11      	ldr	r3, [pc, #68]	; (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a9c:	e011      	b.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a9e:	4b0e      	ldr	r3, [pc, #56]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006aaa:	d106      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ab2:	d102      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ab4:	4b0b      	ldr	r3, [pc, #44]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ab8:	e003      	b.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006aba:	2300      	movs	r3, #0
 8006abc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006abe:	f000 bc38 	b.w	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ac2:	f000 bc36 	b.w	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ac6:	4b08      	ldr	r3, [pc, #32]	; (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aca:	f000 bc32 	b.w	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ad2:	f000 bc2e 	b.w	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ad6:	bf00      	nop
 8006ad8:	58024400 	.word	0x58024400
 8006adc:	03d09000 	.word	0x03d09000
 8006ae0:	003d0900 	.word	0x003d0900
 8006ae4:	017d7840 	.word	0x017d7840
 8006ae8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006aec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006af0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006af4:	430b      	orrs	r3, r1
 8006af6:	f040 809c 	bne.w	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006afa:	4b9e      	ldr	r3, [pc, #632]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006afe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006b02:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b0a:	d054      	beq.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b12:	f200 808b 	bhi.w	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b18:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006b1c:	f000 8083 	beq.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006b26:	f200 8081 	bhi.w	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b30:	d02f      	beq.n	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b38:	d878      	bhi.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d004      	beq.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b46:	d012      	beq.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006b48:	e070      	b.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b4a:	4b8a      	ldr	r3, [pc, #552]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b56:	d107      	bne.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 feaf 	bl	80078c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b66:	e3e4      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b6c:	e3e1      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b6e:	4b81      	ldr	r3, [pc, #516]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b7a:	d107      	bne.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b7c:	f107 0318 	add.w	r3, r7, #24
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 fbf5 	bl	8007370 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b8a:	e3d2      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b90:	e3cf      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b92:	4b78      	ldr	r3, [pc, #480]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b9e:	d107      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ba0:	f107 030c 	add.w	r3, r7, #12
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 fd37 	bl	8007618 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bae:	e3c0      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bb4:	e3bd      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006bb6:	4b6f      	ldr	r3, [pc, #444]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006bbe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bc0:	4b6c      	ldr	r3, [pc, #432]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0304 	and.w	r3, r3, #4
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d10c      	bne.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d109      	bne.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bd2:	4b68      	ldr	r3, [pc, #416]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	08db      	lsrs	r3, r3, #3
 8006bd8:	f003 0303 	and.w	r3, r3, #3
 8006bdc:	4a66      	ldr	r2, [pc, #408]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006bde:	fa22 f303 	lsr.w	r3, r2, r3
 8006be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006be4:	e01e      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006be6:	4b63      	ldr	r3, [pc, #396]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bf2:	d106      	bne.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bfa:	d102      	bne.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006bfc:	4b5f      	ldr	r3, [pc, #380]	; (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c00:	e010      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c02:	4b5c      	ldr	r3, [pc, #368]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c0e:	d106      	bne.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c16:	d102      	bne.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c18:	4b59      	ldr	r3, [pc, #356]	; (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c1c:	e002      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006c22:	e386      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c24:	e385      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c26:	4b57      	ldr	r3, [pc, #348]	; (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006c28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c2a:	e382      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c30:	e37f      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006c32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c36:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006c3a:	430b      	orrs	r3, r1
 8006c3c:	f040 80a7 	bne.w	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006c40:	4b4c      	ldr	r3, [pc, #304]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c44:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006c48:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c50:	d055      	beq.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c58:	f200 8096 	bhi.w	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c62:	f000 8084 	beq.w	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c6c:	f200 808c 	bhi.w	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c76:	d030      	beq.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c7e:	f200 8083 	bhi.w	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d004      	beq.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c8e:	d012      	beq.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006c90:	e07a      	b.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c92:	4b38      	ldr	r3, [pc, #224]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c9e:	d107      	bne.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 fe0b 	bl	80078c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cae:	e340      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cb4:	e33d      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cb6:	4b2f      	ldr	r3, [pc, #188]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cc2:	d107      	bne.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cc4:	f107 0318 	add.w	r3, r7, #24
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 fb51 	bl	8007370 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cd2:	e32e      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cd8:	e32b      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cda:	4b26      	ldr	r3, [pc, #152]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ce2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ce6:	d107      	bne.n	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ce8:	f107 030c 	add.w	r3, r7, #12
 8006cec:	4618      	mov	r0, r3
 8006cee:	f000 fc93 	bl	8007618 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cf6:	e31c      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cfc:	e319      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cfe:	4b1d      	ldr	r3, [pc, #116]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d06:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d08:	4b1a      	ldr	r3, [pc, #104]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0304 	and.w	r3, r3, #4
 8006d10:	2b04      	cmp	r3, #4
 8006d12:	d10c      	bne.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d109      	bne.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d1a:	4b16      	ldr	r3, [pc, #88]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	08db      	lsrs	r3, r3, #3
 8006d20:	f003 0303 	and.w	r3, r3, #3
 8006d24:	4a14      	ldr	r2, [pc, #80]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006d26:	fa22 f303 	lsr.w	r3, r2, r3
 8006d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d2c:	e01e      	b.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d2e:	4b11      	ldr	r3, [pc, #68]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d3a:	d106      	bne.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d42:	d102      	bne.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d44:	4b0d      	ldr	r3, [pc, #52]	; (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d48:	e010      	b.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d4a:	4b0a      	ldr	r3, [pc, #40]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d56:	d106      	bne.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d5e:	d102      	bne.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d60:	4b07      	ldr	r3, [pc, #28]	; (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d64:	e002      	b.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006d6a:	e2e2      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d6c:	e2e1      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d6e:	4b05      	ldr	r3, [pc, #20]	; (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006d70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d72:	e2de      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d74:	58024400 	.word	0x58024400
 8006d78:	03d09000 	.word	0x03d09000
 8006d7c:	003d0900 	.word	0x003d0900
 8006d80:	017d7840 	.word	0x017d7840
 8006d84:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d8c:	e2d1      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006d8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d92:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006d96:	430b      	orrs	r3, r1
 8006d98:	f040 809c 	bne.w	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006d9c:	4b93      	ldr	r3, [pc, #588]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006da4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dac:	d054      	beq.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006db4:	f200 808b 	bhi.w	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006dbe:	f000 8083 	beq.w	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006dc8:	f200 8081 	bhi.w	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dd2:	d02f      	beq.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dda:	d878      	bhi.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d004      	beq.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006de8:	d012      	beq.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006dea:	e070      	b.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006dec:	4b7f      	ldr	r3, [pc, #508]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006df4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006df8:	d107      	bne.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 fd5e 	bl	80078c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e08:	e293      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e0e:	e290      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e10:	4b76      	ldr	r3, [pc, #472]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e1c:	d107      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e1e:	f107 0318 	add.w	r3, r7, #24
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 faa4 	bl	8007370 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e2c:	e281      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e32:	e27e      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e34:	4b6d      	ldr	r3, [pc, #436]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e40:	d107      	bne.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e42:	f107 030c 	add.w	r3, r7, #12
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 fbe6 	bl	8007618 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e50:	e26f      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e52:	2300      	movs	r3, #0
 8006e54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e56:	e26c      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e58:	4b64      	ldr	r3, [pc, #400]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e60:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e62:	4b62      	ldr	r3, [pc, #392]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0304 	and.w	r3, r3, #4
 8006e6a:	2b04      	cmp	r3, #4
 8006e6c:	d10c      	bne.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d109      	bne.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e74:	4b5d      	ldr	r3, [pc, #372]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	08db      	lsrs	r3, r3, #3
 8006e7a:	f003 0303 	and.w	r3, r3, #3
 8006e7e:	4a5c      	ldr	r2, [pc, #368]	; (8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006e80:	fa22 f303 	lsr.w	r3, r2, r3
 8006e84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e86:	e01e      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e88:	4b58      	ldr	r3, [pc, #352]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e94:	d106      	bne.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e9c:	d102      	bne.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e9e:	4b55      	ldr	r3, [pc, #340]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ea2:	e010      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ea4:	4b51      	ldr	r3, [pc, #324]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eb0:	d106      	bne.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eb8:	d102      	bne.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006eba:	4b4f      	ldr	r3, [pc, #316]	; (8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ebe:	e002      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006ec4:	e235      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ec6:	e234      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ec8:	4b4c      	ldr	r3, [pc, #304]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ecc:	e231      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ed2:	e22e      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ed8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006edc:	430b      	orrs	r3, r1
 8006ede:	f040 808f 	bne.w	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006ee2:	4b42      	ldr	r3, [pc, #264]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006eea:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ef2:	d06b      	beq.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006efa:	d874      	bhi.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f02:	d056      	beq.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f0a:	d86c      	bhi.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f12:	d03b      	beq.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f1a:	d864      	bhi.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f22:	d021      	beq.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f2a:	d85c      	bhi.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d004      	beq.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f38:	d004      	beq.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006f3a:	e054      	b.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006f3c:	f7fe fa62 	bl	8005404 <HAL_RCC_GetPCLK1Freq>
 8006f40:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f42:	e1f6      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f44:	4b29      	ldr	r3, [pc, #164]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f50:	d107      	bne.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f52:	f107 0318 	add.w	r3, r7, #24
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 fa0a 	bl	8007370 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f60:	e1e7      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f62:	2300      	movs	r3, #0
 8006f64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f66:	e1e4      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f68:	4b20      	ldr	r3, [pc, #128]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f74:	d107      	bne.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f76:	f107 030c 	add.w	r3, r7, #12
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 fb4c 	bl	8007618 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f84:	e1d5      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f86:	2300      	movs	r3, #0
 8006f88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f8a:	e1d2      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f8c:	4b17      	ldr	r3, [pc, #92]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0304 	and.w	r3, r3, #4
 8006f94:	2b04      	cmp	r3, #4
 8006f96:	d109      	bne.n	8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f98:	4b14      	ldr	r3, [pc, #80]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	08db      	lsrs	r3, r3, #3
 8006f9e:	f003 0303 	and.w	r3, r3, #3
 8006fa2:	4a13      	ldr	r2, [pc, #76]	; (8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006faa:	e1c2      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fac:	2300      	movs	r3, #0
 8006fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fb0:	e1bf      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006fb2:	4b0e      	ldr	r3, [pc, #56]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fbe:	d102      	bne.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006fc0:	4b0c      	ldr	r3, [pc, #48]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fc4:	e1b5      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fca:	e1b2      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006fcc:	4b07      	ldr	r3, [pc, #28]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fd8:	d102      	bne.n	8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006fda:	4b07      	ldr	r3, [pc, #28]	; (8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fde:	e1a8      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fe4:	e1a5      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fea:	e1a2      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006fec:	58024400 	.word	0x58024400
 8006ff0:	03d09000 	.word	0x03d09000
 8006ff4:	003d0900 	.word	0x003d0900
 8006ff8:	017d7840 	.word	0x017d7840
 8006ffc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007004:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007008:	430b      	orrs	r3, r1
 800700a:	d173      	bne.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800700c:	4b9c      	ldr	r3, [pc, #624]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800700e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007010:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007014:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007018:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800701c:	d02f      	beq.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800701e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007020:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007024:	d863      	bhi.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007028:	2b00      	cmp	r3, #0
 800702a:	d004      	beq.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800702c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007032:	d012      	beq.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007034:	e05b      	b.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007036:	4b92      	ldr	r3, [pc, #584]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800703e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007042:	d107      	bne.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007044:	f107 0318 	add.w	r3, r7, #24
 8007048:	4618      	mov	r0, r3
 800704a:	f000 f991 	bl	8007370 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007052:	e16e      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007054:	2300      	movs	r3, #0
 8007056:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007058:	e16b      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800705a:	4b89      	ldr	r3, [pc, #548]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007062:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007066:	d107      	bne.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007068:	f107 030c 	add.w	r3, r7, #12
 800706c:	4618      	mov	r0, r3
 800706e:	f000 fad3 	bl	8007618 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007076:	e15c      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007078:	2300      	movs	r3, #0
 800707a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800707c:	e159      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800707e:	4b80      	ldr	r3, [pc, #512]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007082:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007086:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007088:	4b7d      	ldr	r3, [pc, #500]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0304 	and.w	r3, r3, #4
 8007090:	2b04      	cmp	r3, #4
 8007092:	d10c      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007096:	2b00      	cmp	r3, #0
 8007098:	d109      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800709a:	4b79      	ldr	r3, [pc, #484]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	08db      	lsrs	r3, r3, #3
 80070a0:	f003 0303 	and.w	r3, r3, #3
 80070a4:	4a77      	ldr	r2, [pc, #476]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80070a6:	fa22 f303 	lsr.w	r3, r2, r3
 80070aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070ac:	e01e      	b.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80070ae:	4b74      	ldr	r3, [pc, #464]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ba:	d106      	bne.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80070bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070c2:	d102      	bne.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80070c4:	4b70      	ldr	r3, [pc, #448]	; (8007288 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80070c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070c8:	e010      	b.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80070ca:	4b6d      	ldr	r3, [pc, #436]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070d6:	d106      	bne.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80070d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070de:	d102      	bne.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80070e0:	4b6a      	ldr	r3, [pc, #424]	; (800728c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80070e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070e4:	e002      	b.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80070e6:	2300      	movs	r3, #0
 80070e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80070ea:	e122      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80070ec:	e121      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80070ee:	2300      	movs	r3, #0
 80070f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070f2:	e11e      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80070f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070f8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80070fc:	430b      	orrs	r3, r1
 80070fe:	d133      	bne.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007100:	4b5f      	ldr	r3, [pc, #380]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007108:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800710a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710c:	2b00      	cmp	r3, #0
 800710e:	d004      	beq.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007116:	d012      	beq.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007118:	e023      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800711a:	4b59      	ldr	r3, [pc, #356]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007122:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007126:	d107      	bne.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800712c:	4618      	mov	r0, r3
 800712e:	f000 fbc7 	bl	80078c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007134:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007136:	e0fc      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800713c:	e0f9      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800713e:	4b50      	ldr	r3, [pc, #320]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007146:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800714a:	d107      	bne.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800714c:	f107 0318 	add.w	r3, r7, #24
 8007150:	4618      	mov	r0, r3
 8007152:	f000 f90d 	bl	8007370 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800715a:	e0ea      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800715c:	2300      	movs	r3, #0
 800715e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007160:	e0e7      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007162:	2300      	movs	r3, #0
 8007164:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007166:	e0e4      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800716c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007170:	430b      	orrs	r3, r1
 8007172:	f040 808d 	bne.w	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007176:	4b42      	ldr	r3, [pc, #264]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800717a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800717e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007182:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007186:	d06b      	beq.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800718e:	d874      	bhi.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007196:	d056      	beq.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800719e:	d86c      	bhi.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80071a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80071a6:	d03b      	beq.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80071a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80071ae:	d864      	bhi.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80071b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071b6:	d021      	beq.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80071b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071be:	d85c      	bhi.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80071c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d004      	beq.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80071c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071cc:	d004      	beq.n	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80071ce:	e054      	b.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80071d0:	f000 f8b8 	bl	8007344 <HAL_RCCEx_GetD3PCLK1Freq>
 80071d4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80071d6:	e0ac      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071d8:	4b29      	ldr	r3, [pc, #164]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071e4:	d107      	bne.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071e6:	f107 0318 	add.w	r3, r7, #24
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 f8c0 	bl	8007370 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071f4:	e09d      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071f6:	2300      	movs	r3, #0
 80071f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071fa:	e09a      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071fc:	4b20      	ldr	r3, [pc, #128]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007204:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007208:	d107      	bne.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800720a:	f107 030c 	add.w	r3, r7, #12
 800720e:	4618      	mov	r0, r3
 8007210:	f000 fa02 	bl	8007618 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007218:	e08b      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800721a:	2300      	movs	r3, #0
 800721c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800721e:	e088      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007220:	4b17      	ldr	r3, [pc, #92]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0304 	and.w	r3, r3, #4
 8007228:	2b04      	cmp	r3, #4
 800722a:	d109      	bne.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800722c:	4b14      	ldr	r3, [pc, #80]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	08db      	lsrs	r3, r3, #3
 8007232:	f003 0303 	and.w	r3, r3, #3
 8007236:	4a13      	ldr	r2, [pc, #76]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007238:	fa22 f303 	lsr.w	r3, r2, r3
 800723c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800723e:	e078      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007240:	2300      	movs	r3, #0
 8007242:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007244:	e075      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007246:	4b0e      	ldr	r3, [pc, #56]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800724e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007252:	d102      	bne.n	800725a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007254:	4b0c      	ldr	r3, [pc, #48]	; (8007288 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007256:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007258:	e06b      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800725a:	2300      	movs	r3, #0
 800725c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800725e:	e068      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007260:	4b07      	ldr	r3, [pc, #28]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007268:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800726c:	d102      	bne.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800726e:	4b07      	ldr	r3, [pc, #28]	; (800728c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007270:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007272:	e05e      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007274:	2300      	movs	r3, #0
 8007276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007278:	e05b      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800727a:	2300      	movs	r3, #0
 800727c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800727e:	e058      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007280:	58024400 	.word	0x58024400
 8007284:	03d09000 	.word	0x03d09000
 8007288:	003d0900 	.word	0x003d0900
 800728c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007294:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007298:	430b      	orrs	r3, r1
 800729a:	d148      	bne.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800729c:	4b27      	ldr	r3, [pc, #156]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800729e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072a4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80072a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072ac:	d02a      	beq.n	8007304 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80072ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072b4:	d838      	bhi.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80072b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d004      	beq.n	80072c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80072bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072c2:	d00d      	beq.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80072c4:	e030      	b.n	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80072c6:	4b1d      	ldr	r3, [pc, #116]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072d2:	d102      	bne.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80072d4:	4b1a      	ldr	r3, [pc, #104]	; (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80072d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072d8:	e02b      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072da:	2300      	movs	r3, #0
 80072dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072de:	e028      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80072e0:	4b16      	ldr	r3, [pc, #88]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072ec:	d107      	bne.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 fae4 	bl	80078c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80072f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072fc:	e019      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072fe:	2300      	movs	r3, #0
 8007300:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007302:	e016      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007304:	4b0d      	ldr	r3, [pc, #52]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800730c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007310:	d107      	bne.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007312:	f107 0318 	add.w	r3, r7, #24
 8007316:	4618      	mov	r0, r3
 8007318:	f000 f82a 	bl	8007370 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007320:	e007      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007322:	2300      	movs	r3, #0
 8007324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007326:	e004      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007328:	2300      	movs	r3, #0
 800732a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800732c:	e001      	b.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800732e:	2300      	movs	r3, #0
 8007330:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8007332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007334:	4618      	mov	r0, r3
 8007336:	3740      	adds	r7, #64	; 0x40
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	58024400 	.word	0x58024400
 8007340:	017d7840 	.word	0x017d7840

08007344 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007348:	f7fe f82c 	bl	80053a4 <HAL_RCC_GetHCLKFreq>
 800734c:	4602      	mov	r2, r0
 800734e:	4b06      	ldr	r3, [pc, #24]	; (8007368 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	091b      	lsrs	r3, r3, #4
 8007354:	f003 0307 	and.w	r3, r3, #7
 8007358:	4904      	ldr	r1, [pc, #16]	; (800736c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800735a:	5ccb      	ldrb	r3, [r1, r3]
 800735c:	f003 031f 	and.w	r3, r3, #31
 8007360:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007364:	4618      	mov	r0, r3
 8007366:	bd80      	pop	{r7, pc}
 8007368:	58024400 	.word	0x58024400
 800736c:	08017d60 	.word	0x08017d60

08007370 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007370:	b480      	push	{r7}
 8007372:	b089      	sub	sp, #36	; 0x24
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007378:	4ba1      	ldr	r3, [pc, #644]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800737a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737c:	f003 0303 	and.w	r3, r3, #3
 8007380:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007382:	4b9f      	ldr	r3, [pc, #636]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007386:	0b1b      	lsrs	r3, r3, #12
 8007388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800738c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800738e:	4b9c      	ldr	r3, [pc, #624]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007392:	091b      	lsrs	r3, r3, #4
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800739a:	4b99      	ldr	r3, [pc, #612]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800739c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800739e:	08db      	lsrs	r3, r3, #3
 80073a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	fb02 f303 	mul.w	r3, r2, r3
 80073aa:	ee07 3a90 	vmov	s15, r3
 80073ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 8111 	beq.w	80075e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	f000 8083 	beq.w	80074cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	f200 80a1 	bhi.w	8007510 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d056      	beq.n	8007488 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80073da:	e099      	b.n	8007510 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073dc:	4b88      	ldr	r3, [pc, #544]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0320 	and.w	r3, r3, #32
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d02d      	beq.n	8007444 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073e8:	4b85      	ldr	r3, [pc, #532]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	08db      	lsrs	r3, r3, #3
 80073ee:	f003 0303 	and.w	r3, r3, #3
 80073f2:	4a84      	ldr	r2, [pc, #528]	; (8007604 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80073f4:	fa22 f303 	lsr.w	r3, r2, r3
 80073f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	ee07 3a90 	vmov	s15, r3
 8007400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	ee07 3a90 	vmov	s15, r3
 800740a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800740e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007412:	4b7b      	ldr	r3, [pc, #492]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800741a:	ee07 3a90 	vmov	s15, r3
 800741e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007422:	ed97 6a03 	vldr	s12, [r7, #12]
 8007426:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800742a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800742e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800743a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800743e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007442:	e087      	b.n	8007554 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	ee07 3a90 	vmov	s15, r3
 800744a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800744e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800760c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007456:	4b6a      	ldr	r3, [pc, #424]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800745e:	ee07 3a90 	vmov	s15, r3
 8007462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007466:	ed97 6a03 	vldr	s12, [r7, #12]
 800746a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800746e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800747a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800747e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007482:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007486:	e065      	b.n	8007554 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007492:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800749a:	4b59      	ldr	r3, [pc, #356]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800749c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074ca:	e043      	b.n	8007554 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	ee07 3a90 	vmov	s15, r3
 80074d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80074da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074de:	4b48      	ldr	r3, [pc, #288]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80074f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800750a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800750e:	e021      	b.n	8007554 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	ee07 3a90 	vmov	s15, r3
 8007516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800751a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800751e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007522:	4b37      	ldr	r3, [pc, #220]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800752a:	ee07 3a90 	vmov	s15, r3
 800752e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007532:	ed97 6a03 	vldr	s12, [r7, #12]
 8007536:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800753a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800753e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800754a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007552:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007554:	4b2a      	ldr	r3, [pc, #168]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007558:	0a5b      	lsrs	r3, r3, #9
 800755a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800755e:	ee07 3a90 	vmov	s15, r3
 8007562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007566:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800756a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800756e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800757a:	ee17 2a90 	vmov	r2, s15
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007582:	4b1f      	ldr	r3, [pc, #124]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007586:	0c1b      	lsrs	r3, r3, #16
 8007588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800758c:	ee07 3a90 	vmov	s15, r3
 8007590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007594:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007598:	ee37 7a87 	vadd.f32	s14, s15, s14
 800759c:	edd7 6a07 	vldr	s13, [r7, #28]
 80075a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075a8:	ee17 2a90 	vmov	r2, s15
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80075b0:	4b13      	ldr	r3, [pc, #76]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b4:	0e1b      	lsrs	r3, r3, #24
 80075b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ba:	ee07 3a90 	vmov	s15, r3
 80075be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075d6:	ee17 2a90 	vmov	r2, s15
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80075de:	e008      	b.n	80075f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	609a      	str	r2, [r3, #8]
}
 80075f2:	bf00      	nop
 80075f4:	3724      	adds	r7, #36	; 0x24
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	58024400 	.word	0x58024400
 8007604:	03d09000 	.word	0x03d09000
 8007608:	46000000 	.word	0x46000000
 800760c:	4c742400 	.word	0x4c742400
 8007610:	4a742400 	.word	0x4a742400
 8007614:	4bbebc20 	.word	0x4bbebc20

08007618 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007618:	b480      	push	{r7}
 800761a:	b089      	sub	sp, #36	; 0x24
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007620:	4ba1      	ldr	r3, [pc, #644]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007624:	f003 0303 	and.w	r3, r3, #3
 8007628:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800762a:	4b9f      	ldr	r3, [pc, #636]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800762c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762e:	0d1b      	lsrs	r3, r3, #20
 8007630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007634:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007636:	4b9c      	ldr	r3, [pc, #624]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763a:	0a1b      	lsrs	r3, r3, #8
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007642:	4b99      	ldr	r3, [pc, #612]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007646:	08db      	lsrs	r3, r3, #3
 8007648:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	fb02 f303 	mul.w	r3, r2, r3
 8007652:	ee07 3a90 	vmov	s15, r3
 8007656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 8111 	beq.w	8007888 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	2b02      	cmp	r3, #2
 800766a:	f000 8083 	beq.w	8007774 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	2b02      	cmp	r3, #2
 8007672:	f200 80a1 	bhi.w	80077b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d003      	beq.n	8007684 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d056      	beq.n	8007730 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007682:	e099      	b.n	80077b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007684:	4b88      	ldr	r3, [pc, #544]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0320 	and.w	r3, r3, #32
 800768c:	2b00      	cmp	r3, #0
 800768e:	d02d      	beq.n	80076ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007690:	4b85      	ldr	r3, [pc, #532]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	08db      	lsrs	r3, r3, #3
 8007696:	f003 0303 	and.w	r3, r3, #3
 800769a:	4a84      	ldr	r2, [pc, #528]	; (80078ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800769c:	fa22 f303 	lsr.w	r3, r2, r3
 80076a0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	ee07 3a90 	vmov	s15, r3
 80076a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	ee07 3a90 	vmov	s15, r3
 80076b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ba:	4b7b      	ldr	r3, [pc, #492]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c2:	ee07 3a90 	vmov	s15, r3
 80076c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80076ea:	e087      	b.n	80077fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	ee07 3a90 	vmov	s15, r3
 80076f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80078b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80076fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076fe:	4b6a      	ldr	r3, [pc, #424]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007706:	ee07 3a90 	vmov	s15, r3
 800770a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800770e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007712:	eddf 5a67 	vldr	s11, [pc, #412]	; 80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800771a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800771e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800772a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800772e:	e065      	b.n	80077fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	ee07 3a90 	vmov	s15, r3
 8007736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80078b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800773e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007742:	4b59      	ldr	r3, [pc, #356]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800774a:	ee07 3a90 	vmov	s15, r3
 800774e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007752:	ed97 6a03 	vldr	s12, [r7, #12]
 8007756:	eddf 5a56 	vldr	s11, [pc, #344]	; 80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800775a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800775e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800776a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800776e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007772:	e043      	b.n	80077fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	ee07 3a90 	vmov	s15, r3
 800777a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007786:	4b48      	ldr	r3, [pc, #288]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800778e:	ee07 3a90 	vmov	s15, r3
 8007792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007796:	ed97 6a03 	vldr	s12, [r7, #12]
 800779a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800779e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077b6:	e021      	b.n	80077fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	ee07 3a90 	vmov	s15, r3
 80077be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80078b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80077c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077ca:	4b37      	ldr	r3, [pc, #220]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077d2:	ee07 3a90 	vmov	s15, r3
 80077d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077da:	ed97 6a03 	vldr	s12, [r7, #12]
 80077de:	eddf 5a34 	vldr	s11, [pc, #208]	; 80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80077fc:	4b2a      	ldr	r3, [pc, #168]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007800:	0a5b      	lsrs	r3, r3, #9
 8007802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007806:	ee07 3a90 	vmov	s15, r3
 800780a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800780e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007812:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007816:	edd7 6a07 	vldr	s13, [r7, #28]
 800781a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800781e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007822:	ee17 2a90 	vmov	r2, s15
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800782a:	4b1f      	ldr	r3, [pc, #124]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800782c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782e:	0c1b      	lsrs	r3, r3, #16
 8007830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007834:	ee07 3a90 	vmov	s15, r3
 8007838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007840:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007844:	edd7 6a07 	vldr	s13, [r7, #28]
 8007848:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800784c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007850:	ee17 2a90 	vmov	r2, s15
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007858:	4b13      	ldr	r3, [pc, #76]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800785a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785c:	0e1b      	lsrs	r3, r3, #24
 800785e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007862:	ee07 3a90 	vmov	s15, r3
 8007866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800786a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800786e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007872:	edd7 6a07 	vldr	s13, [r7, #28]
 8007876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800787a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800787e:	ee17 2a90 	vmov	r2, s15
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007886:	e008      	b.n	800789a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	609a      	str	r2, [r3, #8]
}
 800789a:	bf00      	nop
 800789c:	3724      	adds	r7, #36	; 0x24
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	58024400 	.word	0x58024400
 80078ac:	03d09000 	.word	0x03d09000
 80078b0:	46000000 	.word	0x46000000
 80078b4:	4c742400 	.word	0x4c742400
 80078b8:	4a742400 	.word	0x4a742400
 80078bc:	4bbebc20 	.word	0x4bbebc20

080078c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b089      	sub	sp, #36	; 0x24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078c8:	4ba0      	ldr	r3, [pc, #640]	; (8007b4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078cc:	f003 0303 	and.w	r3, r3, #3
 80078d0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80078d2:	4b9e      	ldr	r3, [pc, #632]	; (8007b4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d6:	091b      	lsrs	r3, r3, #4
 80078d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078dc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80078de:	4b9b      	ldr	r3, [pc, #620]	; (8007b4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80078e8:	4b98      	ldr	r3, [pc, #608]	; (8007b4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ec:	08db      	lsrs	r3, r3, #3
 80078ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078f2:	693a      	ldr	r2, [r7, #16]
 80078f4:	fb02 f303 	mul.w	r3, r2, r3
 80078f8:	ee07 3a90 	vmov	s15, r3
 80078fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007900:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	2b00      	cmp	r3, #0
 8007908:	f000 8111 	beq.w	8007b2e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	2b02      	cmp	r3, #2
 8007910:	f000 8083 	beq.w	8007a1a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	2b02      	cmp	r3, #2
 8007918:	f200 80a1 	bhi.w	8007a5e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d003      	beq.n	800792a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d056      	beq.n	80079d6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007928:	e099      	b.n	8007a5e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800792a:	4b88      	ldr	r3, [pc, #544]	; (8007b4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0320 	and.w	r3, r3, #32
 8007932:	2b00      	cmp	r3, #0
 8007934:	d02d      	beq.n	8007992 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007936:	4b85      	ldr	r3, [pc, #532]	; (8007b4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	08db      	lsrs	r3, r3, #3
 800793c:	f003 0303 	and.w	r3, r3, #3
 8007940:	4a83      	ldr	r2, [pc, #524]	; (8007b50 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007942:	fa22 f303 	lsr.w	r3, r2, r3
 8007946:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	ee07 3a90 	vmov	s15, r3
 800794e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	ee07 3a90 	vmov	s15, r3
 8007958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800795c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007960:	4b7a      	ldr	r3, [pc, #488]	; (8007b4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007968:	ee07 3a90 	vmov	s15, r3
 800796c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007970:	ed97 6a03 	vldr	s12, [r7, #12]
 8007974:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007b54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007978:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800797c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007980:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007984:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800798c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007990:	e087      	b.n	8007aa2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	ee07 3a90 	vmov	s15, r3
 8007998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800799c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007b58 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80079a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079a4:	4b69      	ldr	r3, [pc, #420]	; (8007b4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ac:	ee07 3a90 	vmov	s15, r3
 80079b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80079b8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007b54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079d4:	e065      	b.n	8007aa2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	ee07 3a90 	vmov	s15, r3
 80079dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007b5c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80079e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079e8:	4b58      	ldr	r3, [pc, #352]	; (8007b4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f0:	ee07 3a90 	vmov	s15, r3
 80079f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80079fc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007b54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a18:	e043      	b.n	8007aa2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	ee07 3a90 	vmov	s15, r3
 8007a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a24:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007a28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a2c:	4b47      	ldr	r3, [pc, #284]	; (8007b4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a34:	ee07 3a90 	vmov	s15, r3
 8007a38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a40:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007b54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a5c:	e021      	b.n	8007aa2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	ee07 3a90 	vmov	s15, r3
 8007a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a68:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007b58 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007a6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a70:	4b36      	ldr	r3, [pc, #216]	; (8007b4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a78:	ee07 3a90 	vmov	s15, r3
 8007a7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a80:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a84:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007b54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007aa0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007aa2:	4b2a      	ldr	r3, [pc, #168]	; (8007b4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa6:	0a5b      	lsrs	r3, r3, #9
 8007aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aac:	ee07 3a90 	vmov	s15, r3
 8007ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ab8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007abc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ac8:	ee17 2a90 	vmov	r2, s15
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007ad0:	4b1e      	ldr	r3, [pc, #120]	; (8007b4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad4:	0c1b      	lsrs	r3, r3, #16
 8007ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ada:	ee07 3a90 	vmov	s15, r3
 8007ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ae6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aea:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007af6:	ee17 2a90 	vmov	r2, s15
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007afe:	4b13      	ldr	r3, [pc, #76]	; (8007b4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b02:	0e1b      	lsrs	r3, r3, #24
 8007b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b08:	ee07 3a90 	vmov	s15, r3
 8007b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b18:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b24:	ee17 2a90 	vmov	r2, s15
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007b2c:	e008      	b.n	8007b40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	609a      	str	r2, [r3, #8]
}
 8007b40:	bf00      	nop
 8007b42:	3724      	adds	r7, #36	; 0x24
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	58024400 	.word	0x58024400
 8007b50:	03d09000 	.word	0x03d09000
 8007b54:	46000000 	.word	0x46000000
 8007b58:	4c742400 	.word	0x4c742400
 8007b5c:	4a742400 	.word	0x4a742400
 8007b60:	4bbebc20 	.word	0x4bbebc20

08007b64 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b72:	4b53      	ldr	r3, [pc, #332]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b76:	f003 0303 	and.w	r3, r3, #3
 8007b7a:	2b03      	cmp	r3, #3
 8007b7c:	d101      	bne.n	8007b82 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e099      	b.n	8007cb6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b82:	4b4f      	ldr	r3, [pc, #316]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a4e      	ldr	r2, [pc, #312]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007b88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b8e:	f7f9 fd8f 	bl	80016b0 <HAL_GetTick>
 8007b92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b94:	e008      	b.n	8007ba8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b96:	f7f9 fd8b 	bl	80016b0 <HAL_GetTick>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d901      	bls.n	8007ba8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e086      	b.n	8007cb6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ba8:	4b45      	ldr	r3, [pc, #276]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1f0      	bne.n	8007b96 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007bb4:	4b42      	ldr	r3, [pc, #264]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	031b      	lsls	r3, r3, #12
 8007bc2:	493f      	ldr	r1, [pc, #252]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	628b      	str	r3, [r1, #40]	; 0x28
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	025b      	lsls	r3, r3, #9
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	431a      	orrs	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	3b01      	subs	r3, #1
 8007be4:	041b      	lsls	r3, r3, #16
 8007be6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007bea:	431a      	orrs	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	061b      	lsls	r3, r3, #24
 8007bf4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007bf8:	4931      	ldr	r1, [pc, #196]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007bfe:	4b30      	ldr	r3, [pc, #192]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	492d      	ldr	r1, [pc, #180]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007c10:	4b2b      	ldr	r3, [pc, #172]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c14:	f023 0220 	bic.w	r2, r3, #32
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	4928      	ldr	r1, [pc, #160]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007c22:	4b27      	ldr	r3, [pc, #156]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c26:	4a26      	ldr	r2, [pc, #152]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c28:	f023 0310 	bic.w	r3, r3, #16
 8007c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007c2e:	4b24      	ldr	r3, [pc, #144]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c32:	4b24      	ldr	r3, [pc, #144]	; (8007cc4 <RCCEx_PLL2_Config+0x160>)
 8007c34:	4013      	ands	r3, r2
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	69d2      	ldr	r2, [r2, #28]
 8007c3a:	00d2      	lsls	r2, r2, #3
 8007c3c:	4920      	ldr	r1, [pc, #128]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007c42:	4b1f      	ldr	r3, [pc, #124]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c46:	4a1e      	ldr	r2, [pc, #120]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c48:	f043 0310 	orr.w	r3, r3, #16
 8007c4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d106      	bne.n	8007c62 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007c54:	4b1a      	ldr	r3, [pc, #104]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c58:	4a19      	ldr	r2, [pc, #100]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c60:	e00f      	b.n	8007c82 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d106      	bne.n	8007c76 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007c68:	4b15      	ldr	r3, [pc, #84]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6c:	4a14      	ldr	r2, [pc, #80]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c74:	e005      	b.n	8007c82 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c76:	4b12      	ldr	r3, [pc, #72]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7a:	4a11      	ldr	r2, [pc, #68]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007c82:	4b0f      	ldr	r3, [pc, #60]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a0e      	ldr	r2, [pc, #56]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007c88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c8e:	f7f9 fd0f 	bl	80016b0 <HAL_GetTick>
 8007c92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c94:	e008      	b.n	8007ca8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c96:	f7f9 fd0b 	bl	80016b0 <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d901      	bls.n	8007ca8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e006      	b.n	8007cb6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ca8:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <RCCEx_PLL2_Config+0x15c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d0f0      	beq.n	8007c96 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	58024400 	.word	0x58024400
 8007cc4:	ffff0007 	.word	0xffff0007

08007cc8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007cd6:	4b53      	ldr	r3, [pc, #332]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cda:	f003 0303 	and.w	r3, r3, #3
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	d101      	bne.n	8007ce6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e099      	b.n	8007e1a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007ce6:	4b4f      	ldr	r3, [pc, #316]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a4e      	ldr	r2, [pc, #312]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cf2:	f7f9 fcdd 	bl	80016b0 <HAL_GetTick>
 8007cf6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cf8:	e008      	b.n	8007d0c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cfa:	f7f9 fcd9 	bl	80016b0 <HAL_GetTick>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d901      	bls.n	8007d0c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e086      	b.n	8007e1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d0c:	4b45      	ldr	r3, [pc, #276]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1f0      	bne.n	8007cfa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007d18:	4b42      	ldr	r3, [pc, #264]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	051b      	lsls	r3, r3, #20
 8007d26:	493f      	ldr	r1, [pc, #252]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	628b      	str	r3, [r1, #40]	; 0x28
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	025b      	lsls	r3, r3, #9
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	431a      	orrs	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	3b01      	subs	r3, #1
 8007d48:	041b      	lsls	r3, r3, #16
 8007d4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	061b      	lsls	r3, r3, #24
 8007d58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d5c:	4931      	ldr	r1, [pc, #196]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007d62:	4b30      	ldr	r3, [pc, #192]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	492d      	ldr	r1, [pc, #180]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007d70:	4313      	orrs	r3, r2
 8007d72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d74:	4b2b      	ldr	r3, [pc, #172]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d78:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	4928      	ldr	r1, [pc, #160]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007d86:	4b27      	ldr	r3, [pc, #156]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8a:	4a26      	ldr	r2, [pc, #152]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d92:	4b24      	ldr	r3, [pc, #144]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007d94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d96:	4b24      	ldr	r3, [pc, #144]	; (8007e28 <RCCEx_PLL3_Config+0x160>)
 8007d98:	4013      	ands	r3, r2
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	69d2      	ldr	r2, [r2, #28]
 8007d9e:	00d2      	lsls	r2, r2, #3
 8007da0:	4920      	ldr	r1, [pc, #128]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007da6:	4b1f      	ldr	r3, [pc, #124]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007daa:	4a1e      	ldr	r2, [pc, #120]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007db0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d106      	bne.n	8007dc6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007db8:	4b1a      	ldr	r3, [pc, #104]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dbc:	4a19      	ldr	r2, [pc, #100]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007dbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007dc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007dc4:	e00f      	b.n	8007de6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d106      	bne.n	8007dda <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007dcc:	4b15      	ldr	r3, [pc, #84]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	4a14      	ldr	r2, [pc, #80]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007dd2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007dd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007dd8:	e005      	b.n	8007de6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007dda:	4b12      	ldr	r3, [pc, #72]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dde:	4a11      	ldr	r2, [pc, #68]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007de0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007de4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007de6:	4b0f      	ldr	r3, [pc, #60]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a0e      	ldr	r2, [pc, #56]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007df0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007df2:	f7f9 fc5d 	bl	80016b0 <HAL_GetTick>
 8007df6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007df8:	e008      	b.n	8007e0c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007dfa:	f7f9 fc59 	bl	80016b0 <HAL_GetTick>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d901      	bls.n	8007e0c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e006      	b.n	8007e1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e0c:	4b05      	ldr	r3, [pc, #20]	; (8007e24 <RCCEx_PLL3_Config+0x15c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d0f0      	beq.n	8007dfa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	58024400 	.word	0x58024400
 8007e28:	ffff0007 	.word	0xffff0007

08007e2c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007e32:	4b8d      	ldr	r3, [pc, #564]	; (8008068 <MX_LWIP_Init+0x23c>)
 8007e34:	22c0      	movs	r2, #192	; 0xc0
 8007e36:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007e38:	4b8b      	ldr	r3, [pc, #556]	; (8008068 <MX_LWIP_Init+0x23c>)
 8007e3a:	22a8      	movs	r2, #168	; 0xa8
 8007e3c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 68;
 8007e3e:	4b8a      	ldr	r3, [pc, #552]	; (8008068 <MX_LWIP_Init+0x23c>)
 8007e40:	2244      	movs	r2, #68	; 0x44
 8007e42:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8007e44:	4b88      	ldr	r3, [pc, #544]	; (8008068 <MX_LWIP_Init+0x23c>)
 8007e46:	227b      	movs	r2, #123	; 0x7b
 8007e48:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007e4a:	4b88      	ldr	r3, [pc, #544]	; (800806c <MX_LWIP_Init+0x240>)
 8007e4c:	22ff      	movs	r2, #255	; 0xff
 8007e4e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007e50:	4b86      	ldr	r3, [pc, #536]	; (800806c <MX_LWIP_Init+0x240>)
 8007e52:	22ff      	movs	r2, #255	; 0xff
 8007e54:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007e56:	4b85      	ldr	r3, [pc, #532]	; (800806c <MX_LWIP_Init+0x240>)
 8007e58:	22ff      	movs	r2, #255	; 0xff
 8007e5a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007e5c:	4b83      	ldr	r3, [pc, #524]	; (800806c <MX_LWIP_Init+0x240>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8007e62:	4b83      	ldr	r3, [pc, #524]	; (8008070 <MX_LWIP_Init+0x244>)
 8007e64:	22c0      	movs	r2, #192	; 0xc0
 8007e66:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007e68:	4b81      	ldr	r3, [pc, #516]	; (8008070 <MX_LWIP_Init+0x244>)
 8007e6a:	22a8      	movs	r2, #168	; 0xa8
 8007e6c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 68;
 8007e6e:	4b80      	ldr	r3, [pc, #512]	; (8008070 <MX_LWIP_Init+0x244>)
 8007e70:	2244      	movs	r2, #68	; 0x44
 8007e72:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007e74:	4b7e      	ldr	r3, [pc, #504]	; (8008070 <MX_LWIP_Init+0x244>)
 8007e76:	2201      	movs	r2, #1
 8007e78:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8007e7a:	f001 fcb9 	bl	80097f0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007e7e:	4b7a      	ldr	r3, [pc, #488]	; (8008068 <MX_LWIP_Init+0x23c>)
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	061a      	lsls	r2, r3, #24
 8007e84:	4b78      	ldr	r3, [pc, #480]	; (8008068 <MX_LWIP_Init+0x23c>)
 8007e86:	785b      	ldrb	r3, [r3, #1]
 8007e88:	041b      	lsls	r3, r3, #16
 8007e8a:	431a      	orrs	r2, r3
 8007e8c:	4b76      	ldr	r3, [pc, #472]	; (8008068 <MX_LWIP_Init+0x23c>)
 8007e8e:	789b      	ldrb	r3, [r3, #2]
 8007e90:	021b      	lsls	r3, r3, #8
 8007e92:	4313      	orrs	r3, r2
 8007e94:	4a74      	ldr	r2, [pc, #464]	; (8008068 <MX_LWIP_Init+0x23c>)
 8007e96:	78d2      	ldrb	r2, [r2, #3]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	061a      	lsls	r2, r3, #24
 8007e9c:	4b72      	ldr	r3, [pc, #456]	; (8008068 <MX_LWIP_Init+0x23c>)
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	0619      	lsls	r1, r3, #24
 8007ea2:	4b71      	ldr	r3, [pc, #452]	; (8008068 <MX_LWIP_Init+0x23c>)
 8007ea4:	785b      	ldrb	r3, [r3, #1]
 8007ea6:	041b      	lsls	r3, r3, #16
 8007ea8:	4319      	orrs	r1, r3
 8007eaa:	4b6f      	ldr	r3, [pc, #444]	; (8008068 <MX_LWIP_Init+0x23c>)
 8007eac:	789b      	ldrb	r3, [r3, #2]
 8007eae:	021b      	lsls	r3, r3, #8
 8007eb0:	430b      	orrs	r3, r1
 8007eb2:	496d      	ldr	r1, [pc, #436]	; (8008068 <MX_LWIP_Init+0x23c>)
 8007eb4:	78c9      	ldrb	r1, [r1, #3]
 8007eb6:	430b      	orrs	r3, r1
 8007eb8:	021b      	lsls	r3, r3, #8
 8007eba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ebe:	431a      	orrs	r2, r3
 8007ec0:	4b69      	ldr	r3, [pc, #420]	; (8008068 <MX_LWIP_Init+0x23c>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	0619      	lsls	r1, r3, #24
 8007ec6:	4b68      	ldr	r3, [pc, #416]	; (8008068 <MX_LWIP_Init+0x23c>)
 8007ec8:	785b      	ldrb	r3, [r3, #1]
 8007eca:	041b      	lsls	r3, r3, #16
 8007ecc:	4319      	orrs	r1, r3
 8007ece:	4b66      	ldr	r3, [pc, #408]	; (8008068 <MX_LWIP_Init+0x23c>)
 8007ed0:	789b      	ldrb	r3, [r3, #2]
 8007ed2:	021b      	lsls	r3, r3, #8
 8007ed4:	430b      	orrs	r3, r1
 8007ed6:	4964      	ldr	r1, [pc, #400]	; (8008068 <MX_LWIP_Init+0x23c>)
 8007ed8:	78c9      	ldrb	r1, [r1, #3]
 8007eda:	430b      	orrs	r3, r1
 8007edc:	0a1b      	lsrs	r3, r3, #8
 8007ede:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007ee2:	431a      	orrs	r2, r3
 8007ee4:	4b60      	ldr	r3, [pc, #384]	; (8008068 <MX_LWIP_Init+0x23c>)
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	0619      	lsls	r1, r3, #24
 8007eea:	4b5f      	ldr	r3, [pc, #380]	; (8008068 <MX_LWIP_Init+0x23c>)
 8007eec:	785b      	ldrb	r3, [r3, #1]
 8007eee:	041b      	lsls	r3, r3, #16
 8007ef0:	4319      	orrs	r1, r3
 8007ef2:	4b5d      	ldr	r3, [pc, #372]	; (8008068 <MX_LWIP_Init+0x23c>)
 8007ef4:	789b      	ldrb	r3, [r3, #2]
 8007ef6:	021b      	lsls	r3, r3, #8
 8007ef8:	430b      	orrs	r3, r1
 8007efa:	495b      	ldr	r1, [pc, #364]	; (8008068 <MX_LWIP_Init+0x23c>)
 8007efc:	78c9      	ldrb	r1, [r1, #3]
 8007efe:	430b      	orrs	r3, r1
 8007f00:	0e1b      	lsrs	r3, r3, #24
 8007f02:	4313      	orrs	r3, r2
 8007f04:	4a5b      	ldr	r2, [pc, #364]	; (8008074 <MX_LWIP_Init+0x248>)
 8007f06:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007f08:	4b58      	ldr	r3, [pc, #352]	; (800806c <MX_LWIP_Init+0x240>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	061a      	lsls	r2, r3, #24
 8007f0e:	4b57      	ldr	r3, [pc, #348]	; (800806c <MX_LWIP_Init+0x240>)
 8007f10:	785b      	ldrb	r3, [r3, #1]
 8007f12:	041b      	lsls	r3, r3, #16
 8007f14:	431a      	orrs	r2, r3
 8007f16:	4b55      	ldr	r3, [pc, #340]	; (800806c <MX_LWIP_Init+0x240>)
 8007f18:	789b      	ldrb	r3, [r3, #2]
 8007f1a:	021b      	lsls	r3, r3, #8
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	4a53      	ldr	r2, [pc, #332]	; (800806c <MX_LWIP_Init+0x240>)
 8007f20:	78d2      	ldrb	r2, [r2, #3]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	061a      	lsls	r2, r3, #24
 8007f26:	4b51      	ldr	r3, [pc, #324]	; (800806c <MX_LWIP_Init+0x240>)
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	0619      	lsls	r1, r3, #24
 8007f2c:	4b4f      	ldr	r3, [pc, #316]	; (800806c <MX_LWIP_Init+0x240>)
 8007f2e:	785b      	ldrb	r3, [r3, #1]
 8007f30:	041b      	lsls	r3, r3, #16
 8007f32:	4319      	orrs	r1, r3
 8007f34:	4b4d      	ldr	r3, [pc, #308]	; (800806c <MX_LWIP_Init+0x240>)
 8007f36:	789b      	ldrb	r3, [r3, #2]
 8007f38:	021b      	lsls	r3, r3, #8
 8007f3a:	430b      	orrs	r3, r1
 8007f3c:	494b      	ldr	r1, [pc, #300]	; (800806c <MX_LWIP_Init+0x240>)
 8007f3e:	78c9      	ldrb	r1, [r1, #3]
 8007f40:	430b      	orrs	r3, r1
 8007f42:	021b      	lsls	r3, r3, #8
 8007f44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f48:	431a      	orrs	r2, r3
 8007f4a:	4b48      	ldr	r3, [pc, #288]	; (800806c <MX_LWIP_Init+0x240>)
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	0619      	lsls	r1, r3, #24
 8007f50:	4b46      	ldr	r3, [pc, #280]	; (800806c <MX_LWIP_Init+0x240>)
 8007f52:	785b      	ldrb	r3, [r3, #1]
 8007f54:	041b      	lsls	r3, r3, #16
 8007f56:	4319      	orrs	r1, r3
 8007f58:	4b44      	ldr	r3, [pc, #272]	; (800806c <MX_LWIP_Init+0x240>)
 8007f5a:	789b      	ldrb	r3, [r3, #2]
 8007f5c:	021b      	lsls	r3, r3, #8
 8007f5e:	430b      	orrs	r3, r1
 8007f60:	4942      	ldr	r1, [pc, #264]	; (800806c <MX_LWIP_Init+0x240>)
 8007f62:	78c9      	ldrb	r1, [r1, #3]
 8007f64:	430b      	orrs	r3, r1
 8007f66:	0a1b      	lsrs	r3, r3, #8
 8007f68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007f6c:	431a      	orrs	r2, r3
 8007f6e:	4b3f      	ldr	r3, [pc, #252]	; (800806c <MX_LWIP_Init+0x240>)
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	0619      	lsls	r1, r3, #24
 8007f74:	4b3d      	ldr	r3, [pc, #244]	; (800806c <MX_LWIP_Init+0x240>)
 8007f76:	785b      	ldrb	r3, [r3, #1]
 8007f78:	041b      	lsls	r3, r3, #16
 8007f7a:	4319      	orrs	r1, r3
 8007f7c:	4b3b      	ldr	r3, [pc, #236]	; (800806c <MX_LWIP_Init+0x240>)
 8007f7e:	789b      	ldrb	r3, [r3, #2]
 8007f80:	021b      	lsls	r3, r3, #8
 8007f82:	430b      	orrs	r3, r1
 8007f84:	4939      	ldr	r1, [pc, #228]	; (800806c <MX_LWIP_Init+0x240>)
 8007f86:	78c9      	ldrb	r1, [r1, #3]
 8007f88:	430b      	orrs	r3, r1
 8007f8a:	0e1b      	lsrs	r3, r3, #24
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	4a3a      	ldr	r2, [pc, #232]	; (8008078 <MX_LWIP_Init+0x24c>)
 8007f90:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007f92:	4b37      	ldr	r3, [pc, #220]	; (8008070 <MX_LWIP_Init+0x244>)
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	061a      	lsls	r2, r3, #24
 8007f98:	4b35      	ldr	r3, [pc, #212]	; (8008070 <MX_LWIP_Init+0x244>)
 8007f9a:	785b      	ldrb	r3, [r3, #1]
 8007f9c:	041b      	lsls	r3, r3, #16
 8007f9e:	431a      	orrs	r2, r3
 8007fa0:	4b33      	ldr	r3, [pc, #204]	; (8008070 <MX_LWIP_Init+0x244>)
 8007fa2:	789b      	ldrb	r3, [r3, #2]
 8007fa4:	021b      	lsls	r3, r3, #8
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	4a31      	ldr	r2, [pc, #196]	; (8008070 <MX_LWIP_Init+0x244>)
 8007faa:	78d2      	ldrb	r2, [r2, #3]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	061a      	lsls	r2, r3, #24
 8007fb0:	4b2f      	ldr	r3, [pc, #188]	; (8008070 <MX_LWIP_Init+0x244>)
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	0619      	lsls	r1, r3, #24
 8007fb6:	4b2e      	ldr	r3, [pc, #184]	; (8008070 <MX_LWIP_Init+0x244>)
 8007fb8:	785b      	ldrb	r3, [r3, #1]
 8007fba:	041b      	lsls	r3, r3, #16
 8007fbc:	4319      	orrs	r1, r3
 8007fbe:	4b2c      	ldr	r3, [pc, #176]	; (8008070 <MX_LWIP_Init+0x244>)
 8007fc0:	789b      	ldrb	r3, [r3, #2]
 8007fc2:	021b      	lsls	r3, r3, #8
 8007fc4:	430b      	orrs	r3, r1
 8007fc6:	492a      	ldr	r1, [pc, #168]	; (8008070 <MX_LWIP_Init+0x244>)
 8007fc8:	78c9      	ldrb	r1, [r1, #3]
 8007fca:	430b      	orrs	r3, r1
 8007fcc:	021b      	lsls	r3, r3, #8
 8007fce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007fd2:	431a      	orrs	r2, r3
 8007fd4:	4b26      	ldr	r3, [pc, #152]	; (8008070 <MX_LWIP_Init+0x244>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	0619      	lsls	r1, r3, #24
 8007fda:	4b25      	ldr	r3, [pc, #148]	; (8008070 <MX_LWIP_Init+0x244>)
 8007fdc:	785b      	ldrb	r3, [r3, #1]
 8007fde:	041b      	lsls	r3, r3, #16
 8007fe0:	4319      	orrs	r1, r3
 8007fe2:	4b23      	ldr	r3, [pc, #140]	; (8008070 <MX_LWIP_Init+0x244>)
 8007fe4:	789b      	ldrb	r3, [r3, #2]
 8007fe6:	021b      	lsls	r3, r3, #8
 8007fe8:	430b      	orrs	r3, r1
 8007fea:	4921      	ldr	r1, [pc, #132]	; (8008070 <MX_LWIP_Init+0x244>)
 8007fec:	78c9      	ldrb	r1, [r1, #3]
 8007fee:	430b      	orrs	r3, r1
 8007ff0:	0a1b      	lsrs	r3, r3, #8
 8007ff2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007ff6:	431a      	orrs	r2, r3
 8007ff8:	4b1d      	ldr	r3, [pc, #116]	; (8008070 <MX_LWIP_Init+0x244>)
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	0619      	lsls	r1, r3, #24
 8007ffe:	4b1c      	ldr	r3, [pc, #112]	; (8008070 <MX_LWIP_Init+0x244>)
 8008000:	785b      	ldrb	r3, [r3, #1]
 8008002:	041b      	lsls	r3, r3, #16
 8008004:	4319      	orrs	r1, r3
 8008006:	4b1a      	ldr	r3, [pc, #104]	; (8008070 <MX_LWIP_Init+0x244>)
 8008008:	789b      	ldrb	r3, [r3, #2]
 800800a:	021b      	lsls	r3, r3, #8
 800800c:	430b      	orrs	r3, r1
 800800e:	4918      	ldr	r1, [pc, #96]	; (8008070 <MX_LWIP_Init+0x244>)
 8008010:	78c9      	ldrb	r1, [r1, #3]
 8008012:	430b      	orrs	r3, r1
 8008014:	0e1b      	lsrs	r3, r3, #24
 8008016:	4313      	orrs	r3, r2
 8008018:	4a18      	ldr	r2, [pc, #96]	; (800807c <MX_LWIP_Init+0x250>)
 800801a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800801c:	4b18      	ldr	r3, [pc, #96]	; (8008080 <MX_LWIP_Init+0x254>)
 800801e:	9302      	str	r3, [sp, #8]
 8008020:	4b18      	ldr	r3, [pc, #96]	; (8008084 <MX_LWIP_Init+0x258>)
 8008022:	9301      	str	r3, [sp, #4]
 8008024:	2300      	movs	r3, #0
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	4b14      	ldr	r3, [pc, #80]	; (800807c <MX_LWIP_Init+0x250>)
 800802a:	4a13      	ldr	r2, [pc, #76]	; (8008078 <MX_LWIP_Init+0x24c>)
 800802c:	4911      	ldr	r1, [pc, #68]	; (8008074 <MX_LWIP_Init+0x248>)
 800802e:	4816      	ldr	r0, [pc, #88]	; (8008088 <MX_LWIP_Init+0x25c>)
 8008030:	f002 f8b4 	bl	800a19c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008034:	4814      	ldr	r0, [pc, #80]	; (8008088 <MX_LWIP_Init+0x25c>)
 8008036:	f002 fa63 	bl	800a500 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800803a:	4b13      	ldr	r3, [pc, #76]	; (8008088 <MX_LWIP_Init+0x25c>)
 800803c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008040:	089b      	lsrs	r3, r3, #2
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	b2db      	uxtb	r3, r3
 8008048:	2b00      	cmp	r3, #0
 800804a:	d003      	beq.n	8008054 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800804c:	480e      	ldr	r0, [pc, #56]	; (8008088 <MX_LWIP_Init+0x25c>)
 800804e:	f002 fa67 	bl	800a520 <netif_set_up>
 8008052:	e002      	b.n	800805a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8008054:	480c      	ldr	r0, [pc, #48]	; (8008088 <MX_LWIP_Init+0x25c>)
 8008056:	f002 facf 	bl	800a5f8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800805a:	490c      	ldr	r1, [pc, #48]	; (800808c <MX_LWIP_Init+0x260>)
 800805c:	480a      	ldr	r0, [pc, #40]	; (8008088 <MX_LWIP_Init+0x25c>)
 800805e:	f002 fb61 	bl	800a724 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008062:	bf00      	nop
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	24000160 	.word	0x24000160
 800806c:	24000164 	.word	0x24000164
 8008070:	24000168 	.word	0x24000168
 8008074:	24000154 	.word	0x24000154
 8008078:	24000158 	.word	0x24000158
 800807c:	2400015c 	.word	0x2400015c
 8008080:	08013e25 	.word	0x08013e25
 8008084:	08008399 	.word	0x08008399
 8008088:	24000120 	.word	0x24000120
 800808c:	080080e1 	.word	0x080080e1

08008090 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8008098:	f7f9 fb0a 	bl	80016b0 <HAL_GetTick>
 800809c:	4602      	mov	r2, r0
 800809e:	4b08      	ldr	r3, [pc, #32]	; (80080c0 <Ethernet_Link_Periodic_Handle+0x30>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	1ad3      	subs	r3, r2, r3
 80080a4:	2b63      	cmp	r3, #99	; 0x63
 80080a6:	d907      	bls.n	80080b8 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80080a8:	f7f9 fb02 	bl	80016b0 <HAL_GetTick>
 80080ac:	4603      	mov	r3, r0
 80080ae:	4a04      	ldr	r2, [pc, #16]	; (80080c0 <Ethernet_Link_Periodic_Handle+0x30>)
 80080b0:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fb3e 	bl	8008734 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 80080b8:	bf00      	nop
 80080ba:	3708      	adds	r7, #8
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	2400011c 	.word	0x2400011c

080080c4 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80080c8:	4804      	ldr	r0, [pc, #16]	; (80080dc <MX_LWIP_Process+0x18>)
 80080ca:	f000 f945 	bl	8008358 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80080ce:	f009 fa97 	bl	8011600 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80080d2:	4802      	ldr	r0, [pc, #8]	; (80080dc <MX_LWIP_Process+0x18>)
 80080d4:	f7ff ffdc 	bl	8008090 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80080d8:	bf00      	nop
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	24000120 	.word	0x24000120

080080e0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008100:	4b3f      	ldr	r3, [pc, #252]	; (8008200 <low_level_init+0x10c>)
 8008102:	4a40      	ldr	r2, [pc, #256]	; (8008204 <low_level_init+0x110>)
 8008104:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8008106:	2300      	movs	r3, #0
 8008108:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800810a:	2380      	movs	r3, #128	; 0x80
 800810c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800810e:	23e1      	movs	r3, #225	; 0xe1
 8008110:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8008112:	2300      	movs	r3, #0
 8008114:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8008116:	2300      	movs	r3, #0
 8008118:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800811a:	2300      	movs	r3, #0
 800811c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800811e:	4a38      	ldr	r2, [pc, #224]	; (8008200 <low_level_init+0x10c>)
 8008120:	f107 0308 	add.w	r3, r7, #8
 8008124:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8008126:	4b36      	ldr	r3, [pc, #216]	; (8008200 <low_level_init+0x10c>)
 8008128:	2200      	movs	r2, #0
 800812a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800812c:	4b34      	ldr	r3, [pc, #208]	; (8008200 <low_level_init+0x10c>)
 800812e:	4a36      	ldr	r2, [pc, #216]	; (8008208 <low_level_init+0x114>)
 8008130:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8008132:	4b33      	ldr	r3, [pc, #204]	; (8008200 <low_level_init+0x10c>)
 8008134:	4a35      	ldr	r2, [pc, #212]	; (800820c <low_level_init+0x118>)
 8008136:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8008138:	4b31      	ldr	r3, [pc, #196]	; (8008200 <low_level_init+0x10c>)
 800813a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800813e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008140:	482f      	ldr	r0, [pc, #188]	; (8008200 <low_level_init+0x10c>)
 8008142:	f7fa fbe1 	bl	8002908 <HAL_ETH_Init>
 8008146:	4603      	mov	r3, r0
 8008148:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800814a:	2238      	movs	r2, #56	; 0x38
 800814c:	2100      	movs	r1, #0
 800814e:	4830      	ldr	r0, [pc, #192]	; (8008210 <low_level_init+0x11c>)
 8008150:	f00b ff80 	bl	8014054 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008154:	4b2e      	ldr	r3, [pc, #184]	; (8008210 <low_level_init+0x11c>)
 8008156:	2221      	movs	r2, #33	; 0x21
 8008158:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800815a:	4b2d      	ldr	r3, [pc, #180]	; (8008210 <low_level_init+0x11c>)
 800815c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008160:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8008162:	4b2b      	ldr	r3, [pc, #172]	; (8008210 <low_level_init+0x11c>)
 8008164:	2200      	movs	r2, #0
 8008166:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8008168:	482a      	ldr	r0, [pc, #168]	; (8008214 <low_level_init+0x120>)
 800816a:	f001 fedf 	bl	8009f2c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2206      	movs	r2, #6
 8008172:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008176:	4b22      	ldr	r3, [pc, #136]	; (8008200 <low_level_init+0x10c>)
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	781a      	ldrb	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008182:	4b1f      	ldr	r3, [pc, #124]	; (8008200 <low_level_init+0x10c>)
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	785a      	ldrb	r2, [r3, #1]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800818e:	4b1c      	ldr	r3, [pc, #112]	; (8008200 <low_level_init+0x10c>)
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	789a      	ldrb	r2, [r3, #2]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800819a:	4b19      	ldr	r3, [pc, #100]	; (8008200 <low_level_init+0x10c>)
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	78da      	ldrb	r2, [r3, #3]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80081a6:	4b16      	ldr	r3, [pc, #88]	; (8008200 <low_level_init+0x10c>)
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	791a      	ldrb	r2, [r3, #4]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80081b2:	4b13      	ldr	r3, [pc, #76]	; (8008200 <low_level_init+0x10c>)
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	795a      	ldrb	r2, [r3, #5]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80081c4:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80081cc:	f043 030a 	orr.w	r3, r3, #10
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80081d8:	490f      	ldr	r1, [pc, #60]	; (8008218 <low_level_init+0x124>)
 80081da:	4810      	ldr	r0, [pc, #64]	; (800821c <low_level_init+0x128>)
 80081dc:	f7f9 f881 	bl	80012e2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80081e0:	480e      	ldr	r0, [pc, #56]	; (800821c <low_level_init+0x128>)
 80081e2:	f7f9 f8b0 	bl	8001346 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80081e6:	7bfb      	ldrb	r3, [r7, #15]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d103      	bne.n	80081f4 <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 faa1 	bl	8008734 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80081f2:	e001      	b.n	80081f8 <low_level_init+0x104>
    Error_Handler();
 80081f4:	f7f8 fe10 	bl	8000e18 <Error_Handler>
}
 80081f8:	bf00      	nop
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	24000174 	.word	0x24000174
 8008204:	40028000 	.word	0x40028000
 8008208:	30040060 	.word	0x30040060
 800820c:	30040000 	.word	0x30040000
 8008210:	24000224 	.word	0x24000224
 8008214:	08017d70 	.word	0x08017d70
 8008218:	24000010 	.word	0x24000010
 800821c:	2400025c 	.word	0x2400025c

08008220 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b092      	sub	sp, #72	; 0x48
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800822a:	2300      	movs	r3, #0
 800822c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800822e:	2300      	movs	r3, #0
 8008230:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8008232:	2300      	movs	r3, #0
 8008234:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8008238:	f107 030c 	add.w	r3, r7, #12
 800823c:	2230      	movs	r2, #48	; 0x30
 800823e:	2100      	movs	r1, #0
 8008240:	4618      	mov	r0, r3
 8008242:	f00b ff07 	bl	8014054 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008246:	f107 030c 	add.w	r3, r7, #12
 800824a:	2230      	movs	r2, #48	; 0x30
 800824c:	2100      	movs	r1, #0
 800824e:	4618      	mov	r0, r3
 8008250:	f00b ff00 	bl	8014054 <memset>

  for(q = p; q != NULL; q = q->next)
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	643b      	str	r3, [r7, #64]	; 0x40
 8008258:	e045      	b.n	80082e6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800825a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800825c:	2b03      	cmp	r3, #3
 800825e:	d902      	bls.n	8008266 <low_level_output+0x46>
      return ERR_IF;
 8008260:	f06f 030b 	mvn.w	r3, #11
 8008264:	e055      	b.n	8008312 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8008266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008268:	6859      	ldr	r1, [r3, #4]
 800826a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800826c:	4613      	mov	r3, r2
 800826e:	005b      	lsls	r3, r3, #1
 8008270:	4413      	add	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	3348      	adds	r3, #72	; 0x48
 8008276:	443b      	add	r3, r7
 8008278:	3b3c      	subs	r3, #60	; 0x3c
 800827a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800827c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800827e:	895b      	ldrh	r3, [r3, #10]
 8008280:	4619      	mov	r1, r3
 8008282:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008284:	4613      	mov	r3, r2
 8008286:	005b      	lsls	r3, r3, #1
 8008288:	4413      	add	r3, r2
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	3348      	adds	r3, #72	; 0x48
 800828e:	443b      	add	r3, r7
 8008290:	3b38      	subs	r3, #56	; 0x38
 8008292:	6019      	str	r1, [r3, #0]

    if(i>0)
 8008294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008296:	2b00      	cmp	r3, #0
 8008298:	d011      	beq.n	80082be <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800829a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800829c:	1e5a      	subs	r2, r3, #1
 800829e:	f107 000c 	add.w	r0, r7, #12
 80082a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082a4:	460b      	mov	r3, r1
 80082a6:	005b      	lsls	r3, r3, #1
 80082a8:	440b      	add	r3, r1
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	18c1      	adds	r1, r0, r3
 80082ae:	4613      	mov	r3, r2
 80082b0:	005b      	lsls	r3, r3, #1
 80082b2:	4413      	add	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	3348      	adds	r3, #72	; 0x48
 80082b8:	443b      	add	r3, r7
 80082ba:	3b34      	subs	r3, #52	; 0x34
 80082bc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80082be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d109      	bne.n	80082da <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80082c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082c8:	4613      	mov	r3, r2
 80082ca:	005b      	lsls	r3, r3, #1
 80082cc:	4413      	add	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	3348      	adds	r3, #72	; 0x48
 80082d2:	443b      	add	r3, r7
 80082d4:	3b34      	subs	r3, #52	; 0x34
 80082d6:	2200      	movs	r2, #0
 80082d8:	601a      	str	r2, [r3, #0]
    }

    i++;
 80082da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082dc:	3301      	adds	r3, #1
 80082de:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80082e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	643b      	str	r3, [r7, #64]	; 0x40
 80082e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1b6      	bne.n	800825a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	891b      	ldrh	r3, [r3, #8]
 80082f0:	461a      	mov	r2, r3
 80082f2:	4b0a      	ldr	r3, [pc, #40]	; (800831c <low_level_output+0xfc>)
 80082f4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80082f6:	4a09      	ldr	r2, [pc, #36]	; (800831c <low_level_output+0xfc>)
 80082f8:	f107 030c 	add.w	r3, r7, #12
 80082fc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80082fe:	4a07      	ldr	r2, [pc, #28]	; (800831c <low_level_output+0xfc>)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8008304:	2214      	movs	r2, #20
 8008306:	4905      	ldr	r1, [pc, #20]	; (800831c <low_level_output+0xfc>)
 8008308:	4805      	ldr	r0, [pc, #20]	; (8008320 <low_level_output+0x100>)
 800830a:	f7fa fc95 	bl	8002c38 <HAL_ETH_Transmit>

  return errval;
 800830e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008312:	4618      	mov	r0, r3
 8008314:	3748      	adds	r7, #72	; 0x48
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	24000224 	.word	0x24000224
 8008320:	24000174 	.word	0x24000174

08008324 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800832c:	2300      	movs	r3, #0
 800832e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8008330:	4b07      	ldr	r3, [pc, #28]	; (8008350 <low_level_input+0x2c>)
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d105      	bne.n	8008344 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8008338:	f107 030c 	add.w	r3, r7, #12
 800833c:	4619      	mov	r1, r3
 800833e:	4805      	ldr	r0, [pc, #20]	; (8008354 <low_level_input+0x30>)
 8008340:	f7fa fd11 	bl	8002d66 <HAL_ETH_ReadData>
  }

  return p;
 8008344:	68fb      	ldr	r3, [r7, #12]
}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	24000170 	.word	0x24000170
 8008354:	24000174 	.word	0x24000174

08008358 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008360:	2300      	movs	r3, #0
 8008362:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7ff ffdd 	bl	8008324 <low_level_input>
 800836a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00a      	beq.n	8008388 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	6879      	ldr	r1, [r7, #4]
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	4798      	blx	r3
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d002      	beq.n	8008388 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f002 fd4c 	bl	800ae20 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1ea      	bne.n	8008364 <ethernetif_input+0xc>
}
 800838e:	bf00      	nop
 8008390:	bf00      	nop
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d106      	bne.n	80083b4 <ethernetif_init+0x1c>
 80083a6:	4b0e      	ldr	r3, [pc, #56]	; (80083e0 <ethernetif_init+0x48>)
 80083a8:	f240 1287 	movw	r2, #391	; 0x187
 80083ac:	490d      	ldr	r1, [pc, #52]	; (80083e4 <ethernetif_init+0x4c>)
 80083ae:	480e      	ldr	r0, [pc, #56]	; (80083e8 <ethernetif_init+0x50>)
 80083b0:	f00b fe58 	bl	8014064 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2273      	movs	r2, #115	; 0x73
 80083b8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2274      	movs	r2, #116	; 0x74
 80083c0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a09      	ldr	r2, [pc, #36]	; (80083ec <ethernetif_init+0x54>)
 80083c8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a08      	ldr	r2, [pc, #32]	; (80083f0 <ethernetif_init+0x58>)
 80083ce:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f7ff fe8f 	bl	80080f4 <low_level_init>

  return ERR_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	08015160 	.word	0x08015160
 80083e4:	0801517c 	.word	0x0801517c
 80083e8:	0801518c 	.word	0x0801518c
 80083ec:	08012291 	.word	0x08012291
 80083f0:	08008221 	.word	0x08008221

080083f4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008400:	68f9      	ldr	r1, [r7, #12]
 8008402:	4807      	ldr	r0, [pc, #28]	; (8008420 <pbuf_free_custom+0x2c>)
 8008404:	f001 fe74 	bl	800a0f0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8008408:	4b06      	ldr	r3, [pc, #24]	; (8008424 <pbuf_free_custom+0x30>)
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d102      	bne.n	8008416 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8008410:	4b04      	ldr	r3, [pc, #16]	; (8008424 <pbuf_free_custom+0x30>)
 8008412:	2200      	movs	r2, #0
 8008414:	701a      	strb	r2, [r3, #0]
  }
}
 8008416:	bf00      	nop
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	08017d70 	.word	0x08017d70
 8008424:	24000170 	.word	0x24000170

08008428 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800842c:	f7f9 f940 	bl	80016b0 <HAL_GetTick>
 8008430:	4603      	mov	r3, r0
}
 8008432:	4618      	mov	r0, r3
 8008434:	bd80      	pop	{r7, pc}
	...

08008438 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b092      	sub	sp, #72	; 0x48
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008440:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008444:	2200      	movs	r2, #0
 8008446:	601a      	str	r2, [r3, #0]
 8008448:	605a      	str	r2, [r3, #4]
 800844a:	609a      	str	r2, [r3, #8]
 800844c:	60da      	str	r2, [r3, #12]
 800844e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a87      	ldr	r2, [pc, #540]	; (8008674 <HAL_ETH_MspInit+0x23c>)
 8008456:	4293      	cmp	r3, r2
 8008458:	f040 8108 	bne.w	800866c <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800845c:	4b86      	ldr	r3, [pc, #536]	; (8008678 <HAL_ETH_MspInit+0x240>)
 800845e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008462:	4a85      	ldr	r2, [pc, #532]	; (8008678 <HAL_ETH_MspInit+0x240>)
 8008464:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008468:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800846c:	4b82      	ldr	r3, [pc, #520]	; (8008678 <HAL_ETH_MspInit+0x240>)
 800846e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008472:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008476:	633b      	str	r3, [r7, #48]	; 0x30
 8008478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800847a:	4b7f      	ldr	r3, [pc, #508]	; (8008678 <HAL_ETH_MspInit+0x240>)
 800847c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008480:	4a7d      	ldr	r2, [pc, #500]	; (8008678 <HAL_ETH_MspInit+0x240>)
 8008482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008486:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800848a:	4b7b      	ldr	r3, [pc, #492]	; (8008678 <HAL_ETH_MspInit+0x240>)
 800848c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8008498:	4b77      	ldr	r3, [pc, #476]	; (8008678 <HAL_ETH_MspInit+0x240>)
 800849a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800849e:	4a76      	ldr	r2, [pc, #472]	; (8008678 <HAL_ETH_MspInit+0x240>)
 80084a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084a4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80084a8:	4b73      	ldr	r3, [pc, #460]	; (8008678 <HAL_ETH_MspInit+0x240>)
 80084aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80084ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80084b4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80084b6:	4b70      	ldr	r3, [pc, #448]	; (8008678 <HAL_ETH_MspInit+0x240>)
 80084b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084bc:	4a6e      	ldr	r2, [pc, #440]	; (8008678 <HAL_ETH_MspInit+0x240>)
 80084be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80084c6:	4b6c      	ldr	r3, [pc, #432]	; (8008678 <HAL_ETH_MspInit+0x240>)
 80084c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d0:	627b      	str	r3, [r7, #36]	; 0x24
 80084d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80084d4:	4b68      	ldr	r3, [pc, #416]	; (8008678 <HAL_ETH_MspInit+0x240>)
 80084d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084da:	4a67      	ldr	r2, [pc, #412]	; (8008678 <HAL_ETH_MspInit+0x240>)
 80084dc:	f043 0310 	orr.w	r3, r3, #16
 80084e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80084e4:	4b64      	ldr	r3, [pc, #400]	; (8008678 <HAL_ETH_MspInit+0x240>)
 80084e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084ea:	f003 0310 	and.w	r3, r3, #16
 80084ee:	623b      	str	r3, [r7, #32]
 80084f0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80084f2:	4b61      	ldr	r3, [pc, #388]	; (8008678 <HAL_ETH_MspInit+0x240>)
 80084f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084f8:	4a5f      	ldr	r2, [pc, #380]	; (8008678 <HAL_ETH_MspInit+0x240>)
 80084fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008502:	4b5d      	ldr	r3, [pc, #372]	; (8008678 <HAL_ETH_MspInit+0x240>)
 8008504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800850c:	61fb      	str	r3, [r7, #28]
 800850e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008510:	4b59      	ldr	r3, [pc, #356]	; (8008678 <HAL_ETH_MspInit+0x240>)
 8008512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008516:	4a58      	ldr	r2, [pc, #352]	; (8008678 <HAL_ETH_MspInit+0x240>)
 8008518:	f043 0304 	orr.w	r3, r3, #4
 800851c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008520:	4b55      	ldr	r3, [pc, #340]	; (8008678 <HAL_ETH_MspInit+0x240>)
 8008522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008526:	f003 0304 	and.w	r3, r3, #4
 800852a:	61bb      	str	r3, [r7, #24]
 800852c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800852e:	4b52      	ldr	r3, [pc, #328]	; (8008678 <HAL_ETH_MspInit+0x240>)
 8008530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008534:	4a50      	ldr	r2, [pc, #320]	; (8008678 <HAL_ETH_MspInit+0x240>)
 8008536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800853a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800853e:	4b4e      	ldr	r3, [pc, #312]	; (8008678 <HAL_ETH_MspInit+0x240>)
 8008540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008548:	617b      	str	r3, [r7, #20]
 800854a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800854c:	4b4a      	ldr	r3, [pc, #296]	; (8008678 <HAL_ETH_MspInit+0x240>)
 800854e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008552:	4a49      	ldr	r2, [pc, #292]	; (8008678 <HAL_ETH_MspInit+0x240>)
 8008554:	f043 0301 	orr.w	r3, r3, #1
 8008558:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800855c:	4b46      	ldr	r3, [pc, #280]	; (8008678 <HAL_ETH_MspInit+0x240>)
 800855e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	613b      	str	r3, [r7, #16]
 8008568:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800856a:	4b43      	ldr	r3, [pc, #268]	; (8008678 <HAL_ETH_MspInit+0x240>)
 800856c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008570:	4a41      	ldr	r2, [pc, #260]	; (8008678 <HAL_ETH_MspInit+0x240>)
 8008572:	f043 0302 	orr.w	r3, r3, #2
 8008576:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800857a:	4b3f      	ldr	r3, [pc, #252]	; (8008678 <HAL_ETH_MspInit+0x240>)
 800857c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008580:	f003 0302 	and.w	r3, r3, #2
 8008584:	60fb      	str	r3, [r7, #12]
 8008586:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8008588:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800858c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800858e:	2302      	movs	r3, #2
 8008590:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008592:	2300      	movs	r3, #0
 8008594:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008596:	2303      	movs	r3, #3
 8008598:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800859a:	230b      	movs	r3, #11
 800859c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800859e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80085a2:	4619      	mov	r1, r3
 80085a4:	4835      	ldr	r0, [pc, #212]	; (800867c <HAL_ETH_MspInit+0x244>)
 80085a6:	f7fb fd6f 	bl	8004088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 80085aa:	2304      	movs	r3, #4
 80085ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085ae:	2302      	movs	r3, #2
 80085b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085b2:	2300      	movs	r3, #0
 80085b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085b6:	2303      	movs	r3, #3
 80085b8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80085ba:	230b      	movs	r3, #11
 80085bc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 80085be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80085c2:	4619      	mov	r1, r3
 80085c4:	482e      	ldr	r0, [pc, #184]	; (8008680 <HAL_ETH_MspInit+0x248>)
 80085c6:	f7fb fd5f 	bl	8004088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 80085ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085ce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085d0:	2302      	movs	r3, #2
 80085d2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085d4:	2300      	movs	r3, #0
 80085d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085d8:	2300      	movs	r3, #0
 80085da:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80085dc:	230b      	movs	r3, #11
 80085de:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 80085e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80085e4:	4619      	mov	r1, r3
 80085e6:	4827      	ldr	r0, [pc, #156]	; (8008684 <HAL_ETH_MspInit+0x24c>)
 80085e8:	f7fb fd4e 	bl	8004088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 80085ec:	233e      	movs	r3, #62	; 0x3e
 80085ee:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085f0:	2302      	movs	r3, #2
 80085f2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085f4:	2300      	movs	r3, #0
 80085f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085f8:	2303      	movs	r3, #3
 80085fa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80085fc:	230b      	movs	r3, #11
 80085fe:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008600:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008604:	4619      	mov	r1, r3
 8008606:	4820      	ldr	r0, [pc, #128]	; (8008688 <HAL_ETH_MspInit+0x250>)
 8008608:	f7fb fd3e 	bl	8004088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 800860c:	230c      	movs	r3, #12
 800860e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008610:	2302      	movs	r3, #2
 8008612:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008614:	2300      	movs	r3, #0
 8008616:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008618:	2303      	movs	r3, #3
 800861a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800861c:	230b      	movs	r3, #11
 800861e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008620:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008624:	4619      	mov	r1, r3
 8008626:	4819      	ldr	r0, [pc, #100]	; (800868c <HAL_ETH_MspInit+0x254>)
 8008628:	f7fb fd2e 	bl	8004088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 800862c:	2386      	movs	r3, #134	; 0x86
 800862e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008630:	2302      	movs	r3, #2
 8008632:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008634:	2300      	movs	r3, #0
 8008636:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008638:	2303      	movs	r3, #3
 800863a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800863c:	230b      	movs	r3, #11
 800863e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008640:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008644:	4619      	mov	r1, r3
 8008646:	4812      	ldr	r0, [pc, #72]	; (8008690 <HAL_ETH_MspInit+0x258>)
 8008648:	f7fb fd1e 	bl	8004088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 800864c:	2303      	movs	r3, #3
 800864e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008650:	2302      	movs	r3, #2
 8008652:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008654:	2300      	movs	r3, #0
 8008656:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008658:	2303      	movs	r3, #3
 800865a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800865c:	230b      	movs	r3, #11
 800865e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008660:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008664:	4619      	mov	r1, r3
 8008666:	480b      	ldr	r0, [pc, #44]	; (8008694 <HAL_ETH_MspInit+0x25c>)
 8008668:	f7fb fd0e 	bl	8004088 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800866c:	bf00      	nop
 800866e:	3748      	adds	r7, #72	; 0x48
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	40028000 	.word	0x40028000
 8008678:	58024400 	.word	0x58024400
 800867c:	58021800 	.word	0x58021800
 8008680:	58021000 	.word	0x58021000
 8008684:	58022000 	.word	0x58022000
 8008688:	58020800 	.word	0x58020800
 800868c:	58021c00 	.word	0x58021c00
 8008690:	58020000 	.word	0x58020000
 8008694:	58020400 	.word	0x58020400

08008698 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800869c:	4802      	ldr	r0, [pc, #8]	; (80086a8 <ETH_PHY_IO_Init+0x10>)
 800869e:	f7fa ff27 	bl	80034f0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	24000174 	.word	0x24000174

080086ac <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80086ac:	b480      	push	{r7}
 80086ae:	af00      	add	r7, sp, #0
  return 0;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	68f9      	ldr	r1, [r7, #12]
 80086ce:	4807      	ldr	r0, [pc, #28]	; (80086ec <ETH_PHY_IO_ReadReg+0x30>)
 80086d0:	f7fa fc77 	bl	8002fc2 <HAL_ETH_ReadPHYRegister>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d002      	beq.n	80086e0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80086da:	f04f 33ff 	mov.w	r3, #4294967295
 80086de:	e000      	b.n	80086e2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	24000174 	.word	0x24000174

080086f0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	68f9      	ldr	r1, [r7, #12]
 8008702:	4807      	ldr	r0, [pc, #28]	; (8008720 <ETH_PHY_IO_WriteReg+0x30>)
 8008704:	f7fa fcb2 	bl	800306c <HAL_ETH_WritePHYRegister>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d002      	beq.n	8008714 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800870e:	f04f 33ff 	mov.w	r3, #4294967295
 8008712:	e000      	b.n	8008716 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	24000174 	.word	0x24000174

08008724 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008728:	f7f8 ffc2 	bl	80016b0 <HAL_GetTick>
 800872c:	4603      	mov	r3, r0
}
 800872e:	4618      	mov	r0, r3
 8008730:	bd80      	pop	{r7, pc}
	...

08008734 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b0a0      	sub	sp, #128	; 0x80
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800873c:	f107 030c 	add.w	r3, r7, #12
 8008740:	2264      	movs	r2, #100	; 0x64
 8008742:	2100      	movs	r1, #0
 8008744:	4618      	mov	r0, r3
 8008746:	f00b fc85 	bl	8014054 <memset>
  int32_t PHYLinkState = 0;
 800874a:	2300      	movs	r3, #0
 800874c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800874e:	2300      	movs	r3, #0
 8008750:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008752:	2300      	movs	r3, #0
 8008754:	67bb      	str	r3, [r7, #120]	; 0x78
 8008756:	2300      	movs	r3, #0
 8008758:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800875a:	483a      	ldr	r0, [pc, #232]	; (8008844 <ethernet_link_check_state+0x110>)
 800875c:	f7f8 fe9b 	bl	8001496 <LAN8742_GetLinkState>
 8008760:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008768:	089b      	lsrs	r3, r3, #2
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	b2db      	uxtb	r3, r3
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00c      	beq.n	800878e <ethernet_link_check_state+0x5a>
 8008774:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008776:	2b01      	cmp	r3, #1
 8008778:	dc09      	bgt.n	800878e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800877a:	4833      	ldr	r0, [pc, #204]	; (8008848 <ethernet_link_check_state+0x114>)
 800877c:	f7fa fa0c 	bl	8002b98 <HAL_ETH_Stop>
    netif_set_down(netif);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f001 ff39 	bl	800a5f8 <netif_set_down>
    netif_set_link_down(netif);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f001 ff9c 	bl	800a6c4 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800878c:	e055      	b.n	800883a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008794:	f003 0304 	and.w	r3, r3, #4
 8008798:	2b00      	cmp	r3, #0
 800879a:	d14e      	bne.n	800883a <ethernet_link_check_state+0x106>
 800879c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800879e:	2b01      	cmp	r3, #1
 80087a0:	dd4b      	ble.n	800883a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80087a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087a4:	3b02      	subs	r3, #2
 80087a6:	2b03      	cmp	r3, #3
 80087a8:	d82a      	bhi.n	8008800 <ethernet_link_check_state+0xcc>
 80087aa:	a201      	add	r2, pc, #4	; (adr r2, 80087b0 <ethernet_link_check_state+0x7c>)
 80087ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b0:	080087c1 	.word	0x080087c1
 80087b4:	080087d3 	.word	0x080087d3
 80087b8:	080087e3 	.word	0x080087e3
 80087bc:	080087f3 	.word	0x080087f3
      duplex = ETH_FULLDUPLEX_MODE;
 80087c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087c4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80087c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80087ca:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80087cc:	2301      	movs	r3, #1
 80087ce:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80087d0:	e017      	b.n	8008802 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80087d2:	2300      	movs	r3, #0
 80087d4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80087d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80087da:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80087dc:	2301      	movs	r3, #1
 80087de:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80087e0:	e00f      	b.n	8008802 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80087e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087e6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80087e8:	2300      	movs	r3, #0
 80087ea:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80087ec:	2301      	movs	r3, #1
 80087ee:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80087f0:	e007      	b.n	8008802 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80087f2:	2300      	movs	r3, #0
 80087f4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80087f6:	2300      	movs	r3, #0
 80087f8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80087fa:	2301      	movs	r3, #1
 80087fc:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80087fe:	e000      	b.n	8008802 <ethernet_link_check_state+0xce>
      break;
 8008800:	bf00      	nop
    if(linkchanged)
 8008802:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008804:	2b00      	cmp	r3, #0
 8008806:	d018      	beq.n	800883a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008808:	f107 030c 	add.w	r3, r7, #12
 800880c:	4619      	mov	r1, r3
 800880e:	480e      	ldr	r0, [pc, #56]	; (8008848 <ethernet_link_check_state+0x114>)
 8008810:	f7fa fc80 	bl	8003114 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8008814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008816:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8008818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800881a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800881c:	f107 030c 	add.w	r3, r7, #12
 8008820:	4619      	mov	r1, r3
 8008822:	4809      	ldr	r0, [pc, #36]	; (8008848 <ethernet_link_check_state+0x114>)
 8008824:	f7fa fe4a 	bl	80034bc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8008828:	4807      	ldr	r0, [pc, #28]	; (8008848 <ethernet_link_check_state+0x114>)
 800882a:	f7fa f953 	bl	8002ad4 <HAL_ETH_Start>
      netif_set_up(netif);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f001 fe76 	bl	800a520 <netif_set_up>
      netif_set_link_up(netif);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f001 ff11 	bl	800a65c <netif_set_link_up>
}
 800883a:	bf00      	nop
 800883c:	3780      	adds	r7, #128	; 0x80
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	2400025c 	.word	0x2400025c
 8008848:	24000174 	.word	0x24000174

0800884c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b086      	sub	sp, #24
 8008850:	af02      	add	r7, sp, #8
 8008852:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008854:	4812      	ldr	r0, [pc, #72]	; (80088a0 <HAL_ETH_RxAllocateCallback+0x54>)
 8008856:	f001 fbdd 	bl	800a014 <memp_malloc_pool>
 800885a:	60f8      	str	r0, [r7, #12]
  if (p)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d014      	beq.n	800888c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f103 0220 	add.w	r2, r3, #32
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	4a0d      	ldr	r2, [pc, #52]	; (80088a4 <HAL_ETH_RxAllocateCallback+0x58>)
 8008870:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800887a:	9201      	str	r2, [sp, #4]
 800887c:	9300      	str	r3, [sp, #0]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2241      	movs	r2, #65	; 0x41
 8008882:	2100      	movs	r1, #0
 8008884:	2000      	movs	r0, #0
 8008886:	f002 f913 	bl	800aab0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800888a:	e005      	b.n	8008898 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800888c:	4b06      	ldr	r3, [pc, #24]	; (80088a8 <HAL_ETH_RxAllocateCallback+0x5c>)
 800888e:	2201      	movs	r2, #1
 8008890:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	601a      	str	r2, [r3, #0]
}
 8008898:	bf00      	nop
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	08017d70 	.word	0x08017d70
 80088a4:	080083f5 	.word	0x080083f5
 80088a8:	24000170 	.word	0x24000170

080088ac <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b08d      	sub	sp, #52	; 0x34
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
 80088b8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 80088c2:	2300      	movs	r3, #0
 80088c4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	3b20      	subs	r3, #32
 80088ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 80088cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ce:	2200      	movs	r2, #0
 80088d0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80088d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d4:	2200      	movs	r2, #0
 80088d6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80088d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088da:	887a      	ldrh	r2, [r7, #2]
 80088dc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80088de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d103      	bne.n	80088ee <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80088e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088ea:	601a      	str	r2, [r3, #0]
 80088ec:	e003      	b.n	80088f6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80088ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088f4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088fa:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80088fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008902:	e009      	b.n	8008918 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8008904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008906:	891a      	ldrh	r2, [r3, #8]
 8008908:	887b      	ldrh	r3, [r7, #2]
 800890a:	4413      	add	r3, r2
 800890c:	b29a      	uxth	r2, r3
 800890e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008910:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8008912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1f2      	bne.n	8008904 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800891e:	887b      	ldrh	r3, [r7, #2]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	623a      	str	r2, [r7, #32]
 8008924:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	2b00      	cmp	r3, #0
 800892a:	dd1d      	ble.n	8008968 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800892c:	6a3b      	ldr	r3, [r7, #32]
 800892e:	f003 021f 	and.w	r2, r3, #31
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	4413      	add	r3, r2
 8008936:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8008938:	6a3b      	ldr	r3, [r7, #32]
 800893a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800893c:	f3bf 8f4f 	dsb	sy
}
 8008940:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8008942:	4a0d      	ldr	r2, [pc, #52]	; (8008978 <HAL_ETH_RxLinkCallback+0xcc>)
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	3320      	adds	r3, #32
 800894e:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	3b20      	subs	r3, #32
 8008954:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	2b00      	cmp	r3, #0
 800895a:	dcf2      	bgt.n	8008942 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800895c:	f3bf 8f4f 	dsb	sy
}
 8008960:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008962:	f3bf 8f6f 	isb	sy
}
 8008966:	bf00      	nop
}
 8008968:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800896a:	bf00      	nop
 800896c:	3734      	adds	r7, #52	; 0x34
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	e000ed00 	.word	0xe000ed00

0800897c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d002      	beq.n	8008992 <fs_open+0x16>
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d102      	bne.n	8008998 <fs_open+0x1c>
    return ERR_ARG;
 8008992:	f06f 030f 	mvn.w	r3, #15
 8008996:	e028      	b.n	80089ea <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8008998:	4b16      	ldr	r3, [pc, #88]	; (80089f4 <fs_open+0x78>)
 800899a:	60fb      	str	r3, [r7, #12]
 800899c:	e020      	b.n	80089e0 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	4619      	mov	r1, r3
 80089a4:	6838      	ldr	r0, [r7, #0]
 80089a6:	f7f7 fc9b 	bl	80002e0 <strcmp>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d114      	bne.n	80089da <fs_open+0x5e>
      file->data = (const char *)f->data;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	689a      	ldr	r2, [r3, #8]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	68da      	ldr	r2, [r3, #12]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	68da      	ldr	r2, [r3, #12]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	7c1a      	ldrb	r2, [r3, #16]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	e007      	b.n	80089ea <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	60fb      	str	r3, [r7, #12]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1db      	bne.n	800899e <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 80089e6:	f06f 0305 	mvn.w	r3, #5
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	08018b3c 	.word	0x08018b3c

080089f8 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8008a00:	bf00      	nop
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	1ad3      	subs	r3, r2, r3
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b082      	sub	sp, #8
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8008a32:	222c      	movs	r2, #44	; 0x2c
 8008a34:	2100      	movs	r1, #0
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f00b fb0c 	bl	8014054 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8008a3c:	bf00      	nop
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8008a4a:	202c      	movs	r0, #44	; 0x2c
 8008a4c:	f001 f97c 	bl	8009d48 <mem_malloc>
 8008a50:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d002      	beq.n	8008a5e <http_state_alloc+0x1a>
    http_state_init(ret);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f7ff ffe6 	bl	8008a2a <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8008a5e:	687b      	ldr	r3, [r7, #4]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	695b      	ldr	r3, [r3, #20]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d007      	beq.n	8008a88 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	695b      	ldr	r3, [r3, #20]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7ff ffbb 	bl	80089f8 <fs_close>
    hs->handle = NULL;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d007      	beq.n	8008aa0 <http_state_eof+0x38>
    pbuf_free(hs->req);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a1b      	ldr	r3, [r3, #32]
 8008a94:	4618      	mov	r0, r3
 8008a96:	f002 f9c3 	bl	800ae20 <pbuf_free>
    hs->req = NULL;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8008aa0:	bf00      	nop
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d005      	beq.n	8008ac2 <http_state_free+0x1a>
    http_state_eof(hs);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f7ff ffd6 	bl	8008a68 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 ffe5 	bl	8009a8c <mem_free>
  }
}
 8008ac2:	bf00      	nop
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
	...

08008acc <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	607a      	str	r2, [r7, #4]
 8008ad8:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d106      	bne.n	8008aee <http_write+0x22>
 8008ae0:	4b2c      	ldr	r3, [pc, #176]	; (8008b94 <http_write+0xc8>)
 8008ae2:	f240 2219 	movw	r2, #537	; 0x219
 8008ae6:	492c      	ldr	r1, [pc, #176]	; (8008b98 <http_write+0xcc>)
 8008ae8:	482c      	ldr	r0, [pc, #176]	; (8008b9c <http_write+0xd0>)
 8008aea:	f00b fabb 	bl	8014064 <iprintf>
  len = *length;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	881b      	ldrh	r3, [r3, #0]
 8008af2:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8008af4:	8afb      	ldrh	r3, [r7, #22]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d101      	bne.n	8008afe <http_write+0x32>
    return ERR_OK;
 8008afa:	2300      	movs	r3, #0
 8008afc:	e045      	b.n	8008b8a <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008b04:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8008b06:	8aba      	ldrh	r2, [r7, #20]
 8008b08:	8afb      	ldrh	r3, [r7, #22]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d201      	bcs.n	8008b12 <http_write+0x46>
    len = max_len;
 8008b0e:	8abb      	ldrh	r3, [r7, #20]
 8008b10:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b16:	005b      	lsls	r3, r3, #1
 8008b18:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8008b1a:	8afa      	ldrh	r2, [r7, #22]
 8008b1c:	8abb      	ldrh	r3, [r7, #20]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d901      	bls.n	8008b26 <http_write+0x5a>
    len = max_len;
 8008b22:	8abb      	ldrh	r3, [r7, #20]
 8008b24:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8008b26:	78fb      	ldrb	r3, [r7, #3]
 8008b28:	8afa      	ldrh	r2, [r7, #22]
 8008b2a:	68b9      	ldr	r1, [r7, #8]
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f006 feff 	bl	800f930 <tcp_write>
 8008b32:	4603      	mov	r3, r0
 8008b34:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8008b36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b3e:	d10f      	bne.n	8008b60 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d004      	beq.n	8008b54 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8008b50:	2b08      	cmp	r3, #8
 8008b52:	d902      	bls.n	8008b5a <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8008b54:	2301      	movs	r3, #1
 8008b56:	82fb      	strh	r3, [r7, #22]
 8008b58:	e002      	b.n	8008b60 <http_write+0x94>
      } else {
        len /= 2;
 8008b5a:	8afb      	ldrh	r3, [r7, #22]
 8008b5c:	085b      	lsrs	r3, r3, #1
 8008b5e:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8008b60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b68:	d102      	bne.n	8008b70 <http_write+0xa4>
 8008b6a:	8afb      	ldrh	r3, [r7, #22]
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d8da      	bhi.n	8008b26 <http_write+0x5a>

  if (err == ERR_OK) {
 8008b70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d103      	bne.n	8008b80 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	8afa      	ldrh	r2, [r7, #22]
 8008b7c:	801a      	strh	r2, [r3, #0]
 8008b7e:	e002      	b.n	8008b86 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8008b86:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3718      	adds	r7, #24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	080151f4 	.word	0x080151f4
 8008b98:	0801522c 	.word	0x0801522c
 8008b9c:	0801523c 	.word	0x0801523c

08008ba0 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b086      	sub	sp, #24
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	4613      	mov	r3, r2
 8008bac:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8008bae:	2100      	movs	r1, #0
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f003 ff7b 	bl	800caac <tcp_arg>
  altcp_recv(pcb, NULL);
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f003 ff89 	bl	800cad0 <tcp_recv>
  altcp_err(pcb, NULL);
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f003 ffc9 	bl	800cb58 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	2100      	movs	r1, #0
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f003 fffe 	bl	800cbcc <tcp_poll>
  altcp_sent(pcb, NULL);
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f003 ff9e 	bl	800cb14 <tcp_sent>
  if (hs != NULL) {
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d002      	beq.n	8008be4 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8008bde:	68b8      	ldr	r0, [r7, #8]
 8008be0:	f7ff ff62 	bl	8008aa8 <http_state_free>
  }

  if (abort_conn) {
 8008be4:	79fb      	ldrb	r3, [r7, #7]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d004      	beq.n	8008bf4 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f002 fea0 	bl	800b930 <tcp_abort>
    return ERR_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	e00f      	b.n	8008c14 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f002 fdb1 	bl	800b75c <tcp_close>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8008bfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d004      	beq.n	8008c10 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8008c06:	2204      	movs	r2, #4
 8008c08:	4904      	ldr	r1, [pc, #16]	; (8008c1c <http_close_or_abort_conn+0x7c>)
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f003 ffde 	bl	800cbcc <tcp_poll>
  }
  return err;
 8008c10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	080092e3 	.word	0x080092e3

08008c20 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f7ff ffb6 	bl	8008ba0 <http_close_or_abort_conn>
 8008c34:	4603      	mov	r3, r0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3708      	adds	r7, #8
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b082      	sub	sp, #8
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8008c48:	6839      	ldr	r1, [r7, #0]
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7ff ffe8 	bl	8008c20 <http_close_conn>
  }
}
 8008c50:	bf00      	nop
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	695b      	ldr	r3, [r3, #20]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d105      	bne.n	8008c76 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f7ff ffe6 	bl	8008c3e <http_eof>
    return 0;
 8008c72:	2300      	movs	r3, #0
 8008c74:	e016      	b.n	8008ca4 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	695b      	ldr	r3, [r3, #20]
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7ff fec6 	bl	8008a0c <fs_bytes_left>
 8008c80:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	dc05      	bgt.n	8008c94 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8008c88:	6839      	ldr	r1, [r7, #0]
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f7ff ffd7 	bl	8008c3e <http_eof>
    return 0;
 8008c90:	2300      	movs	r3, #0
 8008c92:	e007      	b.n	8008ca4 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8008c94:	4b05      	ldr	r3, [pc, #20]	; (8008cac <http_check_eof+0x54>)
 8008c96:	f240 429d 	movw	r2, #1181	; 0x49d
 8008c9a:	4905      	ldr	r1, [pc, #20]	; (8008cb0 <http_check_eof+0x58>)
 8008c9c:	4805      	ldr	r0, [pc, #20]	; (8008cb4 <http_check_eof+0x5c>)
 8008c9e:	f00b f9e1 	bl	8014064 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8008ca2:	2301      	movs	r3, #1
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	080151f4 	.word	0x080151f4
 8008cb0:	08015264 	.word	0x08015264
 8008cb4:	0801523c 	.word	0x0801523c

08008cb8 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d803      	bhi.n	8008cda <http_send_data_nonssi+0x22>
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	e001      	b.n	8008cde <http_send_data_nonssi+0x26>
 8008cda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008cde:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	6999      	ldr	r1, [r3, #24]
 8008ce4:	f107 020c 	add.w	r2, r7, #12
 8008ce8:	2300      	movs	r3, #0
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7ff feee 	bl	8008acc <http_write>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8008cf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10d      	bne.n	8008d18 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	699b      	ldr	r3, [r3, #24]
 8008d04:	89ba      	ldrh	r2, [r7, #12]
 8008d06:	441a      	add	r2, r3
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d10:	89ba      	ldrh	r2, [r7, #12]
 8008d12:	1a9a      	subs	r2, r3, r2
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b084      	sub	sp, #16
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d101      	bne.n	8008d3a <http_send+0x18>
    return 0;
 8008d36:	2300      	movs	r3, #0
 8008d38:	e025      	b.n	8008d86 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d108      	bne.n	8008d54 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8008d42:	6839      	ldr	r1, [r7, #0]
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f7ff ff87 	bl	8008c58 <http_check_eof>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d101      	bne.n	8008d54 <http_send+0x32>
      return 0;
 8008d50:	2300      	movs	r3, #0
 8008d52:	e018      	b.n	8008d86 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8008d54:	6839      	ldr	r1, [r7, #0]
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7ff ffae 	bl	8008cb8 <http_send_data_nonssi>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d10d      	bne.n	8008d84 <http_send+0x62>
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	695b      	ldr	r3, [r3, #20]
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7ff fe4d 	bl	8008a0c <fs_bytes_left>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	dc05      	bgt.n	8008d84 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7ff ff5f 	bl	8008c3e <http_eof>
    return 0;
 8008d80:	2300      	movs	r3, #0
 8008d82:	e000      	b.n	8008d86 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8008d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3710      	adds	r7, #16
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
	...

08008d90 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	4a1c      	ldr	r2, [pc, #112]	; (8008e10 <http_get_404_file+0x80>)
 8008d9e:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4619      	mov	r1, r3
 8008da8:	4610      	mov	r0, r2
 8008daa:	f7ff fde7 	bl	800897c <fs_open>
 8008dae:	4603      	mov	r3, r0
 8008db0:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8008db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d024      	beq.n	8008e04 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	4a15      	ldr	r2, [pc, #84]	; (8008e14 <http_get_404_file+0x84>)
 8008dbe:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	4610      	mov	r0, r2
 8008dca:	f7ff fdd7 	bl	800897c <fs_open>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8008dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d014      	beq.n	8008e04 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	4a0e      	ldr	r2, [pc, #56]	; (8008e18 <http_get_404_file+0x88>)
 8008dde:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4619      	mov	r1, r3
 8008de8:	4610      	mov	r0, r2
 8008dea:	f7ff fdc7 	bl	800897c <fs_open>
 8008dee:	4603      	mov	r3, r0
 8008df0:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8008df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d004      	beq.n	8008e04 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	601a      	str	r2, [r3, #0]
        return NULL;
 8008e00:	2300      	movs	r3, #0
 8008e02:	e000      	b.n	8008e06 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8008e04:	687b      	ldr	r3, [r7, #4]
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3710      	adds	r7, #16
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	0801529c 	.word	0x0801529c
 8008e14:	080152a8 	.word	0x080152a8
 8008e18:	080152b4 	.word	0x080152b4

08008e1c <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b08e      	sub	sp, #56	; 0x38
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d106      	bne.n	8008e40 <http_parse_request+0x24>
 8008e32:	4b65      	ldr	r3, [pc, #404]	; (8008fc8 <http_parse_request+0x1ac>)
 8008e34:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8008e38:	4964      	ldr	r1, [pc, #400]	; (8008fcc <http_parse_request+0x1b0>)
 8008e3a:	4865      	ldr	r0, [pc, #404]	; (8008fd0 <http_parse_request+0x1b4>)
 8008e3c:	f00b f912 	bl	8014064 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d106      	bne.n	8008e54 <http_parse_request+0x38>
 8008e46:	4b60      	ldr	r3, [pc, #384]	; (8008fc8 <http_parse_request+0x1ac>)
 8008e48:	f240 72af 	movw	r2, #1967	; 0x7af
 8008e4c:	4961      	ldr	r1, [pc, #388]	; (8008fd4 <http_parse_request+0x1b8>)
 8008e4e:	4860      	ldr	r0, [pc, #384]	; (8008fd0 <http_parse_request+0x1b4>)
 8008e50:	f00b f908 	bl	8014064 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	695b      	ldr	r3, [r3, #20]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d103      	bne.n	8008e64 <http_parse_request+0x48>
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d002      	beq.n	8008e6a <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8008e64:	f06f 0307 	mvn.w	r3, #7
 8008e68:	e0a9      	b.n	8008fbe <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d103      	bne.n	8008e7a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e76:	621a      	str	r2, [r3, #32]
 8008e78:	e005      	b.n	8008e86 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	6a1b      	ldr	r3, [r3, #32]
 8008e7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e80:	4618      	mov	r0, r3
 8008e82:	f002 f88f 	bl	800afa4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8008e86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e88:	f002 f86a 	bl	800af60 <pbuf_ref>

  if (hs->req->next != NULL) {
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	6a1b      	ldr	r3, [r3, #32]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d012      	beq.n	8008ebc <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	6a1b      	ldr	r3, [r3, #32]
 8008e9a:	891b      	ldrh	r3, [r3, #8]
 8008e9c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	bf28      	it	cs
 8008ea4:	4613      	movcs	r3, r2
 8008ea6:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	6a18      	ldr	r0, [r3, #32]
 8008eac:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008eae:	2300      	movs	r3, #0
 8008eb0:	4949      	ldr	r1, [pc, #292]	; (8008fd8 <http_parse_request+0x1bc>)
 8008eb2:	f002 f99f 	bl	800b1f4 <pbuf_copy_partial>
    data = httpd_req_buf;
 8008eb6:	4b48      	ldr	r3, [pc, #288]	; (8008fd8 <http_parse_request+0x1bc>)
 8008eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8008eba:	e005      	b.n	8008ec8 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec4:	895b      	ldrh	r3, [r3, #10]
 8008ec6:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8008ec8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008eca:	2b06      	cmp	r3, #6
 8008ecc:	d962      	bls.n	8008f94 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8008ece:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	4942      	ldr	r1, [pc, #264]	; (8008fdc <http_parse_request+0x1c0>)
 8008ed4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008ed6:	f000 fb99 	bl	800960c <lwip_strnstr>
 8008eda:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8008edc:	6a3b      	ldr	r3, [r7, #32]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d058      	beq.n	8008f94 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8008ee6:	2204      	movs	r2, #4
 8008ee8:	493d      	ldr	r1, [pc, #244]	; (8008fe0 <http_parse_request+0x1c4>)
 8008eea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008eec:	f00b f91d 	bl	801412a <strncmp>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d116      	bne.n	8008f24 <http_parse_request+0x108>
        sp1 = data + 3;
 8008ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef8:	3303      	adds	r3, #3
 8008efa:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	1c5a      	adds	r2, r3, #1
 8008f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	8b7a      	ldrh	r2, [r7, #26]
 8008f12:	4934      	ldr	r1, [pc, #208]	; (8008fe4 <http_parse_request+0x1c8>)
 8008f14:	4618      	mov	r0, r3
 8008f16:	f000 fb79 	bl	800960c <lwip_strnstr>
 8008f1a:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8008f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d111      	bne.n	8008f46 <http_parse_request+0x12a>
 8008f22:	e006      	b.n	8008f32 <http_parse_request+0x116>
        data[4] = 0;
 8008f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f26:	3304      	adds	r3, #4
 8008f28:	2200      	movs	r2, #0
 8008f2a:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8008f2c:	f06f 030f 	mvn.w	r3, #15
 8008f30:	e045      	b.n	8008fbe <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	3301      	adds	r3, #1
 8008f36:	8b7a      	ldrh	r2, [r7, #26]
 8008f38:	4928      	ldr	r1, [pc, #160]	; (8008fdc <http_parse_request+0x1c0>)
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f000 fb66 	bl	800960c <lwip_strnstr>
 8008f40:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8008f42:	2301      	movs	r3, #1
 8008f44:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f4c:	1ad3      	subs	r3, r2, r3
 8008f4e:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8008f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d01e      	beq.n	8008f94 <http_parse_request+0x178>
 8008f56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d91a      	bls.n	8008f94 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8008f5e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008f60:	461a      	mov	r2, r3
 8008f62:	4921      	ldr	r1, [pc, #132]	; (8008fe8 <http_parse_request+0x1cc>)
 8008f64:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008f66:	f000 fb51 	bl	800960c <lwip_strnstr>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d011      	beq.n	8008f94 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	3301      	adds	r3, #1
 8008f74:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8008f7c:	8b3b      	ldrh	r3, [r7, #24]
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	4413      	add	r3, r2
 8008f82:	2200      	movs	r2, #0
 8008f84:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8008f86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f88:	6979      	ldr	r1, [r7, #20]
 8008f8a:	68b8      	ldr	r0, [r7, #8]
 8008f8c:	f000 f82e 	bl	8008fec <http_find_file>
 8008f90:	4603      	mov	r3, r0
 8008f92:	e014      	b.n	8008fbe <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	6a1b      	ldr	r3, [r3, #32]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f001 ffc9 	bl	800af30 <pbuf_clen>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	891b      	ldrh	r3, [r3, #8]
 8008fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fac:	d205      	bcs.n	8008fba <http_parse_request+0x19e>
 8008fae:	8a7b      	ldrh	r3, [r7, #18]
 8008fb0:	2b05      	cmp	r3, #5
 8008fb2:	d802      	bhi.n	8008fba <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8008fb4:	f06f 0304 	mvn.w	r3, #4
 8008fb8:	e001      	b.n	8008fbe <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8008fba:	f06f 030f 	mvn.w	r3, #15
  }
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3738      	adds	r7, #56	; 0x38
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	080151f4 	.word	0x080151f4
 8008fcc:	080152c0 	.word	0x080152c0
 8008fd0:	0801523c 	.word	0x0801523c
 8008fd4:	080152cc 	.word	0x080152cc
 8008fd8:	2400027c 	.word	0x2400027c
 8008fdc:	080152d8 	.word	0x080152d8
 8008fe0:	080152dc 	.word	0x080152dc
 8008fe4:	080152e4 	.word	0x080152e4
 8008fe8:	080152e8 	.word	0x080152e8

08008fec <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b092      	sub	sp, #72	; 0x48
 8008ff0:	af02      	add	r7, sp, #8
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8009000:	2300      	movs	r3, #0
 8009002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	4618      	mov	r0, r3
 800900a:	f7f7 f973 	bl	80002f4 <strlen>
 800900e:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8009010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009012:	2b00      	cmp	r3, #0
 8009014:	d06b      	beq.n	80090ee <http_find_file+0x102>
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901a:	3b01      	subs	r3, #1
 800901c:	4413      	add	r3, r2
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	2b2f      	cmp	r3, #47	; 0x2f
 8009022:	d164      	bne.n	80090ee <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8009024:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8009026:	4a53      	ldr	r2, [pc, #332]	; (8009174 <http_find_file+0x188>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d102      	bne.n	8009032 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800902c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902e:	2b01      	cmp	r3, #1
 8009030:	d15d      	bne.n	80090ee <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8009032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009034:	3b01      	subs	r3, #1
 8009036:	2b3f      	cmp	r3, #63	; 0x3f
 8009038:	bf28      	it	cs
 800903a:	233f      	movcs	r3, #63	; 0x3f
 800903c:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00a      	beq.n	800905a <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009048:	4619      	mov	r1, r3
 800904a:	484a      	ldr	r0, [pc, #296]	; (8009174 <http_find_file+0x188>)
 800904c:	f00a fff4 	bl	8014038 <memcpy>
      http_uri_buf[copy_len] = 0;
 8009050:	4a48      	ldr	r2, [pc, #288]	; (8009174 <http_find_file+0x188>)
 8009052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009054:	4413      	add	r3, r2
 8009056:	2200      	movs	r2, #0
 8009058:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800905a:	2300      	movs	r3, #0
 800905c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800905e:	e043      	b.n	80090e8 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	2b00      	cmp	r3, #0
 8009064:	d028      	beq.n	80090b8 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8009066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009068:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800906c:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800906e:	6a3b      	ldr	r3, [r7, #32]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d01e      	beq.n	80090b2 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8009074:	4a40      	ldr	r2, [pc, #256]	; (8009178 <http_find_file+0x18c>)
 8009076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009078:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800907c:	4618      	mov	r0, r3
 800907e:	f7f7 f939 	bl	80002f4 <strlen>
 8009082:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8009084:	69fa      	ldr	r2, [r7, #28]
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	4293      	cmp	r3, r2
 800908a:	bf28      	it	cs
 800908c:	4613      	movcs	r3, r2
 800908e:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8009090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009092:	4a38      	ldr	r2, [pc, #224]	; (8009174 <http_find_file+0x188>)
 8009094:	1898      	adds	r0, r3, r2
 8009096:	4a38      	ldr	r2, [pc, #224]	; (8009178 <http_find_file+0x18c>)
 8009098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800909a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800909e:	69ba      	ldr	r2, [r7, #24]
 80090a0:	4619      	mov	r1, r3
 80090a2:	f00a ffc9 	bl	8014038 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 80090a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	4413      	add	r3, r2
 80090ac:	4a31      	ldr	r2, [pc, #196]	; (8009174 <http_find_file+0x188>)
 80090ae:	2100      	movs	r1, #0
 80090b0:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 80090b2:	4b30      	ldr	r3, [pc, #192]	; (8009174 <http_find_file+0x188>)
 80090b4:	633b      	str	r3, [r7, #48]	; 0x30
 80090b6:	e004      	b.n	80090c2 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 80090b8:	4a2f      	ldr	r2, [pc, #188]	; (8009178 <http_find_file+0x18c>)
 80090ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80090c0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7ff fc58 	bl	800897c <fs_open>
 80090cc:	4603      	mov	r3, r0
 80090ce:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 80090d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d104      	bne.n	80090e2 <http_find_file+0xf6>
        uri = file_name;
 80090d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090da:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 80090e0:	e005      	b.n	80090ee <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80090e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e4:	3301      	adds	r3, #1
 80090e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ea:	2b04      	cmp	r3, #4
 80090ec:	d9b8      	bls.n	8009060 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 80090ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d124      	bne.n	800913e <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	213f      	movs	r1, #63	; 0x3f
 80090f8:	4618      	mov	r0, r3
 80090fa:	f00b f809 	bl	8014110 <strchr>
 80090fe:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8009100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009102:	2b00      	cmp	r3, #0
 8009104:	d005      	beq.n	8009112 <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8009106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009108:	2200      	movs	r2, #0
 800910a:	701a      	strb	r2, [r3, #0]
      params++;
 800910c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800910e:	3301      	adds	r3, #1
 8009110:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	68ba      	ldr	r2, [r7, #8]
 8009116:	4611      	mov	r1, r2
 8009118:	4618      	mov	r0, r3
 800911a:	f7ff fc2f 	bl	800897c <fs_open>
 800911e:	4603      	mov	r3, r0
 8009120:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8009122:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d102      	bne.n	8009130 <http_find_file+0x144>
      file = &hs->file_handle;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	63bb      	str	r3, [r7, #56]	; 0x38
 800912e:	e006      	b.n	800913e <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 8009130:	f107 0308 	add.w	r3, r7, #8
 8009134:	4619      	mov	r1, r3
 8009136:	68f8      	ldr	r0, [r7, #12]
 8009138:	f7ff fe2a 	bl	8008d90 <http_get_404_file>
 800913c:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800913e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009140:	2b00      	cmp	r3, #0
 8009142:	d106      	bne.n	8009152 <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8009144:	f107 0308 	add.w	r3, r7, #8
 8009148:	4619      	mov	r1, r3
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f7ff fe20 	bl	8008d90 <http_get_404_file>
 8009150:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8009152:	68ba      	ldr	r2, [r7, #8]
 8009154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009156:	9301      	str	r3, [sp, #4]
 8009158:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800915c:	9300      	str	r3, [sp, #0]
 800915e:	4613      	mov	r3, r2
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f000 f809 	bl	800917c <http_init_file>
 800916a:	4603      	mov	r3, r0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3740      	adds	r7, #64	; 0x40
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	2400067c 	.word	0x2400067c
 8009178:	08018b50 	.word	0x08018b50

0800917c <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	607a      	str	r2, [r7, #4]
 8009188:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d05c      	beq.n	800924a <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d106      	bne.n	80091a6 <http_init_file+0x2a>
 8009198:	4b35      	ldr	r3, [pc, #212]	; (8009270 <http_init_file+0xf4>)
 800919a:	f640 120b 	movw	r2, #2315	; 0x90b
 800919e:	4935      	ldr	r1, [pc, #212]	; (8009274 <http_init_file+0xf8>)
 80091a0:	4835      	ldr	r0, [pc, #212]	; (8009278 <http_init_file+0xfc>)
 80091a2:	f00a ff5f 	bl	8014064 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	da06      	bge.n	80091ca <http_init_file+0x4e>
 80091bc:	4b2c      	ldr	r3, [pc, #176]	; (8009270 <http_init_file+0xf4>)
 80091be:	f640 1234 	movw	r2, #2356	; 0x934
 80091c2:	492e      	ldr	r1, [pc, #184]	; (800927c <http_init_file+0x100>)
 80091c4:	482c      	ldr	r0, [pc, #176]	; (8009278 <http_init_file+0xfc>)
 80091c6:	f00a ff4d 	bl	8014064 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	461a      	mov	r2, r3
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	695b      	ldr	r3, [r3, #20]
 80091e0:	7c1b      	ldrb	r3, [r3, #16]
 80091e2:	f003 0301 	and.w	r3, r3, #1
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d106      	bne.n	80091f8 <http_init_file+0x7c>
 80091ea:	4b21      	ldr	r3, [pc, #132]	; (8009270 <http_init_file+0xf4>)
 80091ec:	f640 1243 	movw	r2, #2371	; 0x943
 80091f0:	4923      	ldr	r1, [pc, #140]	; (8009280 <http_init_file+0x104>)
 80091f2:	4821      	ldr	r0, [pc, #132]	; (8009278 <http_init_file+0xfc>)
 80091f4:	f00a ff36 	bl	8014064 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d032      	beq.n	8009264 <http_init_file+0xe8>
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	695b      	ldr	r3, [r3, #20]
 8009202:	7c1b      	ldrb	r3, [r3, #16]
 8009204:	f003 0301 	and.w	r3, r3, #1
 8009208:	2b00      	cmp	r3, #0
 800920a:	d02b      	beq.n	8009264 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6998      	ldr	r0, [r3, #24]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009214:	461a      	mov	r2, r3
 8009216:	491b      	ldr	r1, [pc, #108]	; (8009284 <http_init_file+0x108>)
 8009218:	f000 f9f8 	bl	800960c <lwip_strnstr>
 800921c:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d01f      	beq.n	8009264 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	1d1a      	adds	r2, r3, #4
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	699a      	ldr	r2, [r3, #24]
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	441a      	add	r2, r3
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	1ad2      	subs	r2, r2, r3
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	625a      	str	r2, [r3, #36]	; 0x24
 8009248:	e00c      	b.n	8009264 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2200      	movs	r2, #0
 8009254:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2200      	movs	r2, #0
 8009260:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3718      	adds	r7, #24
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	080151f4 	.word	0x080151f4
 8009274:	080152f0 	.word	0x080152f0
 8009278:	0801523c 	.word	0x0801523c
 800927c:	08015304 	.word	0x08015304
 8009280:	08015324 	.word	0x08015324
 8009284:	080152e8 	.word	0x080152e8

08009288 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	460b      	mov	r3, r1
 8009292:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d002      	beq.n	80092a4 <http_err+0x1c>
    http_state_free(hs);
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f7ff fc02 	bl	8008aa8 <http_state_free>
  }
}
 80092a4:	bf00      	nop
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b086      	sub	sp, #24
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	4613      	mov	r3, r2
 80092b8:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d101      	bne.n	80092c8 <http_sent+0x1c>
    return ERR_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	e008      	b.n	80092da <http_sent+0x2e>
  }

  hs->retries = 0;
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 80092d0:	6979      	ldr	r1, [r7, #20]
 80092d2:	68b8      	ldr	r0, [r7, #8]
 80092d4:	f7ff fd25 	bl	8008d22 <http_send>

  return ERR_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3718      	adds	r7, #24
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b084      	sub	sp, #16
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d107      	bne.n	8009306 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 80092f6:	2100      	movs	r1, #0
 80092f8:	6838      	ldr	r0, [r7, #0]
 80092fa:	f7ff fc91 	bl	8008c20 <http_close_conn>
 80092fe:	4603      	mov	r3, r0
 8009300:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	e021      	b.n	800934a <http_poll+0x68>
  } else {
    hs->retries++;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800930c:	3301      	adds	r3, #1
 800930e:	b2da      	uxtb	r2, r3
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800931c:	2b04      	cmp	r3, #4
 800931e:	d105      	bne.n	800932c <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8009320:	68f9      	ldr	r1, [r7, #12]
 8009322:	6838      	ldr	r0, [r7, #0]
 8009324:	f7ff fc7c 	bl	8008c20 <http_close_conn>
      return ERR_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	e00e      	b.n	800934a <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	695b      	ldr	r3, [r3, #20]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d009      	beq.n	8009348 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8009334:	68f9      	ldr	r1, [r7, #12]
 8009336:	6838      	ldr	r0, [r7, #0]
 8009338:	f7ff fcf3 	bl	8008d22 <http_send>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d002      	beq.n	8009348 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8009342:	6838      	ldr	r0, [r7, #0]
 8009344:	f007 f8de 	bl	8010504 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
	...

08009354 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b086      	sub	sp, #24
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
 8009360:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8009366:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d105      	bne.n	800937a <http_recv+0x26>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d002      	beq.n	800937a <http_recv+0x26>
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d111      	bne.n	800939e <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d008      	beq.n	8009392 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	891b      	ldrh	r3, [r3, #8]
 8009384:	4619      	mov	r1, r3
 8009386:	68b8      	ldr	r0, [r7, #8]
 8009388:	f002 fcac 	bl	800bce4 <tcp_recved>
      pbuf_free(p);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f001 fd47 	bl	800ae20 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8009392:	6979      	ldr	r1, [r7, #20]
 8009394:	68b8      	ldr	r0, [r7, #8]
 8009396:	f7ff fc43 	bl	8008c20 <http_close_conn>
    return ERR_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	e055      	b.n	800944a <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	891b      	ldrh	r3, [r3, #8]
 80093a2:	4619      	mov	r1, r3
 80093a4:	68b8      	ldr	r0, [r7, #8]
 80093a6:	f002 fc9d 	bl	800bce4 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	695b      	ldr	r3, [r3, #20]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d147      	bne.n	8009442 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	6979      	ldr	r1, [r7, #20]
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f7ff fd30 	bl	8008e1c <http_parse_request>
 80093bc:	4603      	mov	r3, r0
 80093be:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 80093c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d015      	beq.n	80093f4 <http_recv+0xa0>
 80093c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80093cc:	f113 0f05 	cmn.w	r3, #5
 80093d0:	d010      	beq.n	80093f4 <http_recv+0xa0>
 80093d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80093d6:	f113 0f10 	cmn.w	r3, #16
 80093da:	d00b      	beq.n	80093f4 <http_recv+0xa0>
 80093dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80093e0:	f113 0f08 	cmn.w	r3, #8
 80093e4:	d006      	beq.n	80093f4 <http_recv+0xa0>
 80093e6:	4b1b      	ldr	r3, [pc, #108]	; (8009454 <http_recv+0x100>)
 80093e8:	f640 2204 	movw	r2, #2564	; 0xa04
 80093ec:	491a      	ldr	r1, [pc, #104]	; (8009458 <http_recv+0x104>)
 80093ee:	481b      	ldr	r0, [pc, #108]	; (800945c <http_recv+0x108>)
 80093f0:	f00a fe38 	bl	8014064 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 80093f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80093f8:	f113 0f05 	cmn.w	r3, #5
 80093fc:	d00b      	beq.n	8009416 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	6a1b      	ldr	r3, [r3, #32]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d007      	beq.n	8009416 <http_recv+0xc2>
          pbuf_free(hs->req);
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	6a1b      	ldr	r3, [r3, #32]
 800940a:	4618      	mov	r0, r3
 800940c:	f001 fd08 	bl	800ae20 <pbuf_free>
          hs->req = NULL;
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	2200      	movs	r2, #0
 8009414:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f001 fd02 	bl	800ae20 <pbuf_free>
      if (parsed == ERR_OK) {
 800941c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d104      	bne.n	800942e <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8009424:	6979      	ldr	r1, [r7, #20]
 8009426:	68b8      	ldr	r0, [r7, #8]
 8009428:	f7ff fc7b 	bl	8008d22 <http_send>
 800942c:	e00c      	b.n	8009448 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800942e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009432:	f113 0f10 	cmn.w	r3, #16
 8009436:	d107      	bne.n	8009448 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8009438:	6979      	ldr	r1, [r7, #20]
 800943a:	68b8      	ldr	r0, [r7, #8]
 800943c:	f7ff fbf0 	bl	8008c20 <http_close_conn>
 8009440:	e002      	b.n	8009448 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f001 fcec 	bl	800ae20 <pbuf_free>
    }
  }
  return ERR_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3718      	adds	r7, #24
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	080151f4 	.word	0x080151f4
 8009458:	08015350 	.word	0x08015350
 800945c:	0801523c 	.word	0x0801523c

08009460 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b086      	sub	sp, #24
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	4613      	mov	r3, r2
 800946c:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800946e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d102      	bne.n	800947c <http_accept+0x1c>
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d102      	bne.n	8009482 <http_accept+0x22>
    return ERR_VAL;
 800947c:	f06f 0305 	mvn.w	r3, #5
 8009480:	e025      	b.n	80094ce <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8009482:	2101      	movs	r1, #1
 8009484:	68b8      	ldr	r0, [r7, #8]
 8009486:	f003 f911 	bl	800c6ac <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800948a:	f7ff fadb 	bl	8008a44 <http_state_alloc>
 800948e:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d102      	bne.n	800949c <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8009496:	f04f 33ff 	mov.w	r3, #4294967295
 800949a:	e018      	b.n	80094ce <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	68ba      	ldr	r2, [r7, #8]
 80094a0:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 80094a2:	6979      	ldr	r1, [r7, #20]
 80094a4:	68b8      	ldr	r0, [r7, #8]
 80094a6:	f003 fb01 	bl	800caac <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 80094aa:	490b      	ldr	r1, [pc, #44]	; (80094d8 <http_accept+0x78>)
 80094ac:	68b8      	ldr	r0, [r7, #8]
 80094ae:	f003 fb0f 	bl	800cad0 <tcp_recv>
  altcp_err(pcb, http_err);
 80094b2:	490a      	ldr	r1, [pc, #40]	; (80094dc <http_accept+0x7c>)
 80094b4:	68b8      	ldr	r0, [r7, #8]
 80094b6:	f003 fb4f 	bl	800cb58 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80094ba:	2204      	movs	r2, #4
 80094bc:	4908      	ldr	r1, [pc, #32]	; (80094e0 <http_accept+0x80>)
 80094be:	68b8      	ldr	r0, [r7, #8]
 80094c0:	f003 fb84 	bl	800cbcc <tcp_poll>
  altcp_sent(pcb, http_sent);
 80094c4:	4907      	ldr	r1, [pc, #28]	; (80094e4 <http_accept+0x84>)
 80094c6:	68b8      	ldr	r0, [r7, #8]
 80094c8:	f003 fb24 	bl	800cb14 <tcp_sent>

  return ERR_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3718      	adds	r7, #24
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	08009355 	.word	0x08009355
 80094dc:	08009289 	.word	0x08009289
 80094e0:	080092e3 	.word	0x080092e3
 80094e4:	080092ad 	.word	0x080092ad

080094e8 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	460b      	mov	r3, r1
 80094f2:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d029      	beq.n	800954e <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80094fa:	2101      	movs	r1, #1
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f003 f8d5 	bl	800c6ac <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8009502:	887b      	ldrh	r3, [r7, #2]
 8009504:	461a      	mov	r2, r3
 8009506:	4914      	ldr	r1, [pc, #80]	; (8009558 <httpd_init_pcb+0x70>)
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f002 fa1d 	bl	800b948 <tcp_bind>
 800950e:	4603      	mov	r3, r0
 8009510:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8009512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d006      	beq.n	8009528 <httpd_init_pcb+0x40>
 800951a:	4b10      	ldr	r3, [pc, #64]	; (800955c <httpd_init_pcb+0x74>)
 800951c:	f640 2257 	movw	r2, #2647	; 0xa57
 8009520:	490f      	ldr	r1, [pc, #60]	; (8009560 <httpd_init_pcb+0x78>)
 8009522:	4810      	ldr	r0, [pc, #64]	; (8009564 <httpd_init_pcb+0x7c>)
 8009524:	f00a fd9e 	bl	8014064 <iprintf>
    pcb = altcp_listen(pcb);
 8009528:	21ff      	movs	r1, #255	; 0xff
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f002 fac4 	bl	800bab8 <tcp_listen_with_backlog>
 8009530:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d106      	bne.n	8009546 <httpd_init_pcb+0x5e>
 8009538:	4b08      	ldr	r3, [pc, #32]	; (800955c <httpd_init_pcb+0x74>)
 800953a:	f640 2259 	movw	r2, #2649	; 0xa59
 800953e:	490a      	ldr	r1, [pc, #40]	; (8009568 <httpd_init_pcb+0x80>)
 8009540:	4808      	ldr	r0, [pc, #32]	; (8009564 <httpd_init_pcb+0x7c>)
 8009542:	f00a fd8f 	bl	8014064 <iprintf>
    altcp_accept(pcb, http_accept);
 8009546:	4909      	ldr	r1, [pc, #36]	; (800956c <httpd_init_pcb+0x84>)
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f003 fb27 	bl	800cb9c <tcp_accept>
  }
}
 800954e:	bf00      	nop
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	08018c48 	.word	0x08018c48
 800955c:	080151f4 	.word	0x080151f4
 8009560:	0801537c 	.word	0x0801537c
 8009564:	0801523c 	.word	0x0801523c
 8009568:	08015398 	.word	0x08015398
 800956c:	08009461 	.word	0x08009461

08009570 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8009576:	202e      	movs	r0, #46	; 0x2e
 8009578:	f003 fa8a 	bl	800ca90 <tcp_new_ip_type>
 800957c:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d106      	bne.n	8009592 <httpd_init+0x22>
 8009584:	4b07      	ldr	r3, [pc, #28]	; (80095a4 <httpd_init+0x34>)
 8009586:	f640 2272 	movw	r2, #2674	; 0xa72
 800958a:	4907      	ldr	r1, [pc, #28]	; (80095a8 <httpd_init+0x38>)
 800958c:	4807      	ldr	r0, [pc, #28]	; (80095ac <httpd_init+0x3c>)
 800958e:	f00a fd69 	bl	8014064 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8009592:	2150      	movs	r1, #80	; 0x50
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f7ff ffa7 	bl	80094e8 <httpd_init_pcb>
}
 800959a:	bf00      	nop
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	080151f4 	.word	0x080151f4
 80095a8:	080153b8 	.word	0x080153b8
 80095ac:	0801523c 	.word	0x0801523c

080095b0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	4603      	mov	r3, r0
 80095b8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80095ba:	88fb      	ldrh	r3, [r7, #6]
 80095bc:	021b      	lsls	r3, r3, #8
 80095be:	b21a      	sxth	r2, r3
 80095c0:	88fb      	ldrh	r3, [r7, #6]
 80095c2:	0a1b      	lsrs	r3, r3, #8
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	b21b      	sxth	r3, r3
 80095c8:	4313      	orrs	r3, r2
 80095ca:	b21b      	sxth	r3, r3
 80095cc:	b29b      	uxth	r3, r3
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr

080095da <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80095da:	b480      	push	{r7}
 80095dc:	b083      	sub	sp, #12
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	061a      	lsls	r2, r3, #24
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	021b      	lsls	r3, r3, #8
 80095ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80095ee:	431a      	orrs	r2, r3
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	0a1b      	lsrs	r3, r3, #8
 80095f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80095f8:	431a      	orrs	r2, r3
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	0e1b      	lsrs	r3, r3, #24
 80095fe:	4313      	orrs	r3, r2
}
 8009600:	4618      	mov	r0, r3
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b086      	sub	sp, #24
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8009618:	68b8      	ldr	r0, [r7, #8]
 800961a:	f7f6 fe6b 	bl	80002f4 <strlen>
 800961e:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d101      	bne.n	800962a <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	e022      	b.n	8009670 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	617b      	str	r3, [r7, #20]
 800962e:	e012      	b.n	8009656 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	781a      	ldrb	r2, [r3, #0]
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	429a      	cmp	r2, r3
 800963a:	d109      	bne.n	8009650 <lwip_strnstr+0x44>
 800963c:	693a      	ldr	r2, [r7, #16]
 800963e:	68b9      	ldr	r1, [r7, #8]
 8009640:	6978      	ldr	r0, [r7, #20]
 8009642:	f00a fd72 	bl	801412a <strncmp>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d101      	bne.n	8009650 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	e00f      	b.n	8009670 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	3301      	adds	r3, #1
 8009654:	617b      	str	r3, [r7, #20]
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d007      	beq.n	800966e <lwip_strnstr+0x62>
 800965e:	697a      	ldr	r2, [r7, #20]
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	441a      	add	r2, r3
 8009664:	68f9      	ldr	r1, [r7, #12]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	440b      	add	r3, r1
 800966a:	429a      	cmp	r2, r3
 800966c:	d9e0      	bls.n	8009630 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3718      	adds	r7, #24
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8009678:	b480      	push	{r7}
 800967a:	b089      	sub	sp, #36	; 0x24
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8009686:	2300      	movs	r3, #0
 8009688:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800968a:	2300      	movs	r3, #0
 800968c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00d      	beq.n	80096b8 <lwip_standard_chksum+0x40>
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	dd0a      	ble.n	80096b8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80096a2:	69fa      	ldr	r2, [r7, #28]
 80096a4:	1c53      	adds	r3, r2, #1
 80096a6:	61fb      	str	r3, [r7, #28]
 80096a8:	f107 030e 	add.w	r3, r7, #14
 80096ac:	3301      	adds	r3, #1
 80096ae:	7812      	ldrb	r2, [r2, #0]
 80096b0:	701a      	strb	r2, [r3, #0]
    len--;
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	3b01      	subs	r3, #1
 80096b6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80096bc:	e00a      	b.n	80096d4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	1c9a      	adds	r2, r3, #2
 80096c2:	61ba      	str	r2, [r7, #24]
 80096c4:	881b      	ldrh	r3, [r3, #0]
 80096c6:	461a      	mov	r2, r3
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	4413      	add	r3, r2
 80096cc:	617b      	str	r3, [r7, #20]
    len -= 2;
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	3b02      	subs	r3, #2
 80096d2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	dcf1      	bgt.n	80096be <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	dd04      	ble.n	80096ea <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80096e0:	f107 030e 	add.w	r3, r7, #14
 80096e4:	69ba      	ldr	r2, [r7, #24]
 80096e6:	7812      	ldrb	r2, [r2, #0]
 80096e8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80096ea:	89fb      	ldrh	r3, [r7, #14]
 80096ec:	461a      	mov	r2, r3
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	4413      	add	r3, r2
 80096f2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	0c1a      	lsrs	r2, r3, #16
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	4413      	add	r3, r2
 80096fe:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	0c1a      	lsrs	r2, r3, #16
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	b29b      	uxth	r3, r3
 8009708:	4413      	add	r3, r2
 800970a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d007      	beq.n	8009722 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	021b      	lsls	r3, r3, #8
 8009716:	b29a      	uxth	r2, r3
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	0a1b      	lsrs	r3, r3, #8
 800971c:	b2db      	uxtb	r3, r3
 800971e:	4313      	orrs	r3, r2
 8009720:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	b29b      	uxth	r3, r3
}
 8009726:	4618      	mov	r0, r3
 8009728:	3724      	adds	r7, #36	; 0x24
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b082      	sub	sp, #8
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	460b      	mov	r3, r1
 800973c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800973e:	887b      	ldrh	r3, [r7, #2]
 8009740:	4619      	mov	r1, r3
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7ff ff98 	bl	8009678 <lwip_standard_chksum>
 8009748:	4603      	mov	r3, r0
 800974a:	43db      	mvns	r3, r3
 800974c:	b29b      	uxth	r3, r3
}
 800974e:	4618      	mov	r0, r3
 8009750:	3708      	adds	r7, #8
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b086      	sub	sp, #24
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800975e:	2300      	movs	r3, #0
 8009760:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8009762:	2300      	movs	r3, #0
 8009764:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	613b      	str	r3, [r7, #16]
 800976a:	e02b      	b.n	80097c4 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	685a      	ldr	r2, [r3, #4]
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	895b      	ldrh	r3, [r3, #10]
 8009774:	4619      	mov	r1, r3
 8009776:	4610      	mov	r0, r2
 8009778:	f7ff ff7e 	bl	8009678 <lwip_standard_chksum>
 800977c:	4603      	mov	r3, r0
 800977e:	461a      	mov	r2, r3
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	4413      	add	r3, r2
 8009784:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	0c1a      	lsrs	r2, r3, #16
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	b29b      	uxth	r3, r3
 800978e:	4413      	add	r3, r2
 8009790:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	895b      	ldrh	r3, [r3, #10]
 8009796:	f003 0301 	and.w	r3, r3, #1
 800979a:	b29b      	uxth	r3, r3
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00e      	beq.n	80097be <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	bf0c      	ite	eq
 80097a6:	2301      	moveq	r3, #1
 80097a8:	2300      	movne	r3, #0
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	021b      	lsls	r3, r3, #8
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	0a1b      	lsrs	r3, r3, #8
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	4313      	orrs	r3, r2
 80097bc:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	613b      	str	r3, [r7, #16]
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d1d0      	bne.n	800976c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d007      	beq.n	80097e0 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	021b      	lsls	r3, r3, #8
 80097d4:	b29a      	uxth	r2, r3
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	0a1b      	lsrs	r3, r3, #8
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	4313      	orrs	r3, r2
 80097de:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	43db      	mvns	r3, r3
 80097e6:	b29b      	uxth	r3, r3
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3718      	adds	r7, #24
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80097f6:	2300      	movs	r3, #0
 80097f8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80097fa:	f000 f8d3 	bl	80099a4 <mem_init>
  memp_init();
 80097fe:	f000 fbc5 	bl	8009f8c <memp_init>
  pbuf_init();
  netif_init();
 8009802:	f000 fcc3 	bl	800a18c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009806:	f007 ff3d 	bl	8011684 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800980a:	f001 fd97 	bl	800b33c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800980e:	f007 feaf 	bl	8011570 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009812:	bf00      	nop
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
	...

0800981c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 8009824:	4b04      	ldr	r3, [pc, #16]	; (8009838 <ptr_to_mem+0x1c>)
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4413      	add	r3, r2
}
 800982c:	4618      	mov	r0, r3
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr
 8009838:	240006d4 	.word	0x240006d4

0800983c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009844:	4b04      	ldr	r3, [pc, #16]	; (8009858 <mem_to_ptr+0x1c>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	1ad3      	subs	r3, r2, r3
}
 800984c:	4618      	mov	r0, r3
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr
 8009858:	240006d4 	.word	0x240006d4

0800985c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800985c:	b590      	push	{r4, r7, lr}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009864:	4b45      	ldr	r3, [pc, #276]	; (800997c <plug_holes+0x120>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	429a      	cmp	r2, r3
 800986c:	d206      	bcs.n	800987c <plug_holes+0x20>
 800986e:	4b44      	ldr	r3, [pc, #272]	; (8009980 <plug_holes+0x124>)
 8009870:	f240 12df 	movw	r2, #479	; 0x1df
 8009874:	4943      	ldr	r1, [pc, #268]	; (8009984 <plug_holes+0x128>)
 8009876:	4844      	ldr	r0, [pc, #272]	; (8009988 <plug_holes+0x12c>)
 8009878:	f00a fbf4 	bl	8014064 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800987c:	4b43      	ldr	r3, [pc, #268]	; (800998c <plug_holes+0x130>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	429a      	cmp	r2, r3
 8009884:	d306      	bcc.n	8009894 <plug_holes+0x38>
 8009886:	4b3e      	ldr	r3, [pc, #248]	; (8009980 <plug_holes+0x124>)
 8009888:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800988c:	4940      	ldr	r1, [pc, #256]	; (8009990 <plug_holes+0x134>)
 800988e:	483e      	ldr	r0, [pc, #248]	; (8009988 <plug_holes+0x12c>)
 8009890:	f00a fbe8 	bl	8014064 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	7a1b      	ldrb	r3, [r3, #8]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d006      	beq.n	80098aa <plug_holes+0x4e>
 800989c:	4b38      	ldr	r3, [pc, #224]	; (8009980 <plug_holes+0x124>)
 800989e:	f240 12e1 	movw	r2, #481	; 0x1e1
 80098a2:	493c      	ldr	r1, [pc, #240]	; (8009994 <plug_holes+0x138>)
 80098a4:	4838      	ldr	r0, [pc, #224]	; (8009988 <plug_holes+0x12c>)
 80098a6:	f00a fbdd 	bl	8014064 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a3a      	ldr	r2, [pc, #232]	; (8009998 <plug_holes+0x13c>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d906      	bls.n	80098c2 <plug_holes+0x66>
 80098b4:	4b32      	ldr	r3, [pc, #200]	; (8009980 <plug_holes+0x124>)
 80098b6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80098ba:	4938      	ldr	r1, [pc, #224]	; (800999c <plug_holes+0x140>)
 80098bc:	4832      	ldr	r0, [pc, #200]	; (8009988 <plug_holes+0x12c>)
 80098be:	f00a fbd1 	bl	8014064 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7ff ffa8 	bl	800981c <ptr_to_mem>
 80098cc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d024      	beq.n	8009920 <plug_holes+0xc4>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	7a1b      	ldrb	r3, [r3, #8]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d120      	bne.n	8009920 <plug_holes+0xc4>
 80098de:	4b2b      	ldr	r3, [pc, #172]	; (800998c <plug_holes+0x130>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d01b      	beq.n	8009920 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80098e8:	4b2d      	ldr	r3, [pc, #180]	; (80099a0 <plug_holes+0x144>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d102      	bne.n	80098f8 <plug_holes+0x9c>
      lfree = mem;
 80098f2:	4a2b      	ldr	r2, [pc, #172]	; (80099a0 <plug_holes+0x144>)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a24      	ldr	r2, [pc, #144]	; (8009998 <plug_holes+0x13c>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d00a      	beq.n	8009920 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4618      	mov	r0, r3
 8009910:	f7ff ff84 	bl	800981c <ptr_to_mem>
 8009914:	4604      	mov	r4, r0
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f7ff ff90 	bl	800983c <mem_to_ptr>
 800991c:	4603      	mov	r3, r0
 800991e:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	4618      	mov	r0, r3
 8009926:	f7ff ff79 	bl	800981c <ptr_to_mem>
 800992a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	429a      	cmp	r2, r3
 8009932:	d01f      	beq.n	8009974 <plug_holes+0x118>
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	7a1b      	ldrb	r3, [r3, #8]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d11b      	bne.n	8009974 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800993c:	4b18      	ldr	r3, [pc, #96]	; (80099a0 <plug_holes+0x144>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	429a      	cmp	r2, r3
 8009944:	d102      	bne.n	800994c <plug_holes+0xf0>
      lfree = pmem;
 8009946:	4a16      	ldr	r2, [pc, #88]	; (80099a0 <plug_holes+0x144>)
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a0f      	ldr	r2, [pc, #60]	; (8009998 <plug_holes+0x13c>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d00a      	beq.n	8009974 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4618      	mov	r0, r3
 8009964:	f7ff ff5a 	bl	800981c <ptr_to_mem>
 8009968:	4604      	mov	r4, r0
 800996a:	68b8      	ldr	r0, [r7, #8]
 800996c:	f7ff ff66 	bl	800983c <mem_to_ptr>
 8009970:	4603      	mov	r3, r0
 8009972:	6063      	str	r3, [r4, #4]
    }
  }
}
 8009974:	bf00      	nop
 8009976:	3714      	adds	r7, #20
 8009978:	46bd      	mov	sp, r7
 800997a:	bd90      	pop	{r4, r7, pc}
 800997c:	240006d4 	.word	0x240006d4
 8009980:	080153d4 	.word	0x080153d4
 8009984:	08015404 	.word	0x08015404
 8009988:	0801541c 	.word	0x0801541c
 800998c:	240006d8 	.word	0x240006d8
 8009990:	08015444 	.word	0x08015444
 8009994:	08015460 	.word	0x08015460
 8009998:	0001ffe8 	.word	0x0001ffe8
 800999c:	0801547c 	.word	0x0801547c
 80099a0:	240006dc 	.word	0x240006dc

080099a4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80099aa:	4b14      	ldr	r3, [pc, #80]	; (80099fc <mem_init+0x58>)
 80099ac:	4a14      	ldr	r2, [pc, #80]	; (8009a00 <mem_init+0x5c>)
 80099ae:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80099b0:	4b12      	ldr	r3, [pc, #72]	; (80099fc <mem_init+0x58>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	4a12      	ldr	r2, [pc, #72]	; (8009a04 <mem_init+0x60>)
 80099ba:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80099c8:	480e      	ldr	r0, [pc, #56]	; (8009a04 <mem_init+0x60>)
 80099ca:	f7ff ff27 	bl	800981c <ptr_to_mem>
 80099ce:	4603      	mov	r3, r0
 80099d0:	4a0d      	ldr	r2, [pc, #52]	; (8009a08 <mem_init+0x64>)
 80099d2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80099d4:	4b0c      	ldr	r3, [pc, #48]	; (8009a08 <mem_init+0x64>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2201      	movs	r2, #1
 80099da:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 80099dc:	4b0a      	ldr	r3, [pc, #40]	; (8009a08 <mem_init+0x64>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a08      	ldr	r2, [pc, #32]	; (8009a04 <mem_init+0x60>)
 80099e2:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80099e4:	4b08      	ldr	r3, [pc, #32]	; (8009a08 <mem_init+0x64>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a06      	ldr	r2, [pc, #24]	; (8009a04 <mem_init+0x60>)
 80099ea:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80099ec:	4b03      	ldr	r3, [pc, #12]	; (80099fc <mem_init+0x58>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a06      	ldr	r2, [pc, #24]	; (8009a0c <mem_init+0x68>)
 80099f2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80099f4:	bf00      	nop
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	240006d4 	.word	0x240006d4
 8009a00:	30020000 	.word	0x30020000
 8009a04:	0001ffe8 	.word	0x0001ffe8
 8009a08:	240006d8 	.word	0x240006d8
 8009a0c:	240006dc 	.word	0x240006dc

08009a10 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f7ff ff0f 	bl	800983c <mem_to_ptr>
 8009a1e:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7ff fef9 	bl	800981c <ptr_to_mem>
 8009a2a:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	4618      	mov	r0, r3
 8009a32:	f7ff fef3 	bl	800981c <ptr_to_mem>
 8009a36:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a11      	ldr	r2, [pc, #68]	; (8009a84 <mem_link_valid+0x74>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d818      	bhi.n	8009a74 <mem_link_valid+0x64>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	4a0f      	ldr	r2, [pc, #60]	; (8009a84 <mem_link_valid+0x74>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d813      	bhi.n	8009a74 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009a50:	697a      	ldr	r2, [r7, #20]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d004      	beq.n	8009a60 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	697a      	ldr	r2, [r7, #20]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d109      	bne.n	8009a74 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009a60:	4b09      	ldr	r3, [pc, #36]	; (8009a88 <mem_link_valid+0x78>)
 8009a62:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009a64:	693a      	ldr	r2, [r7, #16]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d006      	beq.n	8009a78 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	697a      	ldr	r2, [r7, #20]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d001      	beq.n	8009a78 <mem_link_valid+0x68>
    return 0;
 8009a74:	2300      	movs	r3, #0
 8009a76:	e000      	b.n	8009a7a <mem_link_valid+0x6a>
  }
  return 1;
 8009a78:	2301      	movs	r3, #1
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3718      	adds	r7, #24
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	0001ffe8 	.word	0x0001ffe8
 8009a88:	240006d8 	.word	0x240006d8

08009a8c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d04c      	beq.n	8009b34 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f003 0303 	and.w	r3, r3, #3
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d007      	beq.n	8009ab4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009aa4:	4b25      	ldr	r3, [pc, #148]	; (8009b3c <mem_free+0xb0>)
 8009aa6:	f240 2273 	movw	r2, #627	; 0x273
 8009aaa:	4925      	ldr	r1, [pc, #148]	; (8009b40 <mem_free+0xb4>)
 8009aac:	4825      	ldr	r0, [pc, #148]	; (8009b44 <mem_free+0xb8>)
 8009aae:	f00a fad9 	bl	8014064 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009ab2:	e040      	b.n	8009b36 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	3b0c      	subs	r3, #12
 8009ab8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009aba:	4b23      	ldr	r3, [pc, #140]	; (8009b48 <mem_free+0xbc>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d306      	bcc.n	8009ad2 <mem_free+0x46>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f103 020c 	add.w	r2, r3, #12
 8009aca:	4b20      	ldr	r3, [pc, #128]	; (8009b4c <mem_free+0xc0>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d907      	bls.n	8009ae2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009ad2:	4b1a      	ldr	r3, [pc, #104]	; (8009b3c <mem_free+0xb0>)
 8009ad4:	f240 227f 	movw	r2, #639	; 0x27f
 8009ad8:	491d      	ldr	r1, [pc, #116]	; (8009b50 <mem_free+0xc4>)
 8009ada:	481a      	ldr	r0, [pc, #104]	; (8009b44 <mem_free+0xb8>)
 8009adc:	f00a fac2 	bl	8014064 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009ae0:	e029      	b.n	8009b36 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	7a1b      	ldrb	r3, [r3, #8]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d107      	bne.n	8009afa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009aea:	4b14      	ldr	r3, [pc, #80]	; (8009b3c <mem_free+0xb0>)
 8009aec:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8009af0:	4918      	ldr	r1, [pc, #96]	; (8009b54 <mem_free+0xc8>)
 8009af2:	4814      	ldr	r0, [pc, #80]	; (8009b44 <mem_free+0xb8>)
 8009af4:	f00a fab6 	bl	8014064 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009af8:	e01d      	b.n	8009b36 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f7ff ff88 	bl	8009a10 <mem_link_valid>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d107      	bne.n	8009b16 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009b06:	4b0d      	ldr	r3, [pc, #52]	; (8009b3c <mem_free+0xb0>)
 8009b08:	f240 2295 	movw	r2, #661	; 0x295
 8009b0c:	4912      	ldr	r1, [pc, #72]	; (8009b58 <mem_free+0xcc>)
 8009b0e:	480d      	ldr	r0, [pc, #52]	; (8009b44 <mem_free+0xb8>)
 8009b10:	f00a faa8 	bl	8014064 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009b14:	e00f      	b.n	8009b36 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 8009b1c:	4b0f      	ldr	r3, [pc, #60]	; (8009b5c <mem_free+0xd0>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d202      	bcs.n	8009b2c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009b26:	4a0d      	ldr	r2, [pc, #52]	; (8009b5c <mem_free+0xd0>)
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009b2c:	68f8      	ldr	r0, [r7, #12]
 8009b2e:	f7ff fe95 	bl	800985c <plug_holes>
 8009b32:	e000      	b.n	8009b36 <mem_free+0xaa>
    return;
 8009b34:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	080153d4 	.word	0x080153d4
 8009b40:	080154a8 	.word	0x080154a8
 8009b44:	0801541c 	.word	0x0801541c
 8009b48:	240006d4 	.word	0x240006d4
 8009b4c:	240006d8 	.word	0x240006d8
 8009b50:	080154cc 	.word	0x080154cc
 8009b54:	080154e8 	.word	0x080154e8
 8009b58:	08015510 	.word	0x08015510
 8009b5c:	240006dc 	.word	0x240006dc

08009b60 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b08a      	sub	sp, #40	; 0x28
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	3303      	adds	r3, #3
 8009b6e:	f023 0303 	bic.w	r3, r3, #3
 8009b72:	627b      	str	r3, [r7, #36]	; 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 8009b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b76:	2b0b      	cmp	r3, #11
 8009b78:	d801      	bhi.n	8009b7e <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8009b7a:	230c      	movs	r3, #12
 8009b7c:	627b      	str	r3, [r7, #36]	; 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b80:	4a68      	ldr	r2, [pc, #416]	; (8009d24 <mem_trim+0x1c4>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d803      	bhi.n	8009b8e <mem_trim+0x2e>
 8009b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d201      	bcs.n	8009b92 <mem_trim+0x32>
    return NULL;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	e0c4      	b.n	8009d1c <mem_trim+0x1bc>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009b92:	4b65      	ldr	r3, [pc, #404]	; (8009d28 <mem_trim+0x1c8>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d304      	bcc.n	8009ba6 <mem_trim+0x46>
 8009b9c:	4b63      	ldr	r3, [pc, #396]	; (8009d2c <mem_trim+0x1cc>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d306      	bcc.n	8009bb4 <mem_trim+0x54>
 8009ba6:	4b62      	ldr	r3, [pc, #392]	; (8009d30 <mem_trim+0x1d0>)
 8009ba8:	f240 22d1 	movw	r2, #721	; 0x2d1
 8009bac:	4961      	ldr	r1, [pc, #388]	; (8009d34 <mem_trim+0x1d4>)
 8009bae:	4862      	ldr	r0, [pc, #392]	; (8009d38 <mem_trim+0x1d8>)
 8009bb0:	f00a fa58 	bl	8014064 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009bb4:	4b5c      	ldr	r3, [pc, #368]	; (8009d28 <mem_trim+0x1c8>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d304      	bcc.n	8009bc8 <mem_trim+0x68>
 8009bbe:	4b5b      	ldr	r3, [pc, #364]	; (8009d2c <mem_trim+0x1cc>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d301      	bcc.n	8009bcc <mem_trim+0x6c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	e0a7      	b.n	8009d1c <mem_trim+0x1bc>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	3b0c      	subs	r3, #12
 8009bd0:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009bd2:	6a38      	ldr	r0, [r7, #32]
 8009bd4:	f7ff fe32 	bl	800983c <mem_to_ptr>
 8009bd8:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009bda:	6a3b      	ldr	r3, [r7, #32]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	3b0c      	subs	r3, #12
 8009be4:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d906      	bls.n	8009bfc <mem_trim+0x9c>
 8009bee:	4b50      	ldr	r3, [pc, #320]	; (8009d30 <mem_trim+0x1d0>)
 8009bf0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009bf4:	4951      	ldr	r1, [pc, #324]	; (8009d3c <mem_trim+0x1dc>)
 8009bf6:	4850      	ldr	r0, [pc, #320]	; (8009d38 <mem_trim+0x1d8>)
 8009bf8:	f00a fa34 	bl	8014064 <iprintf>
  if (newsize > size) {
 8009bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d901      	bls.n	8009c08 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8009c04:	2300      	movs	r3, #0
 8009c06:	e089      	b.n	8009d1c <mem_trim+0x1bc>
  }
  if (newsize == size) {
 8009c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d101      	bne.n	8009c14 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	e083      	b.n	8009d1c <mem_trim+0x1bc>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8009c14:	6a3b      	ldr	r3, [r7, #32]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7ff fdff 	bl	800981c <ptr_to_mem>
 8009c1e:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	7a1b      	ldrb	r3, [r3, #8]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d13c      	bne.n	8009ca2 <mem_trim+0x142>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009c28:	6a3b      	ldr	r3, [r7, #32]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a3d      	ldr	r2, [pc, #244]	; (8009d24 <mem_trim+0x1c4>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d106      	bne.n	8009c40 <mem_trim+0xe0>
 8009c32:	4b3f      	ldr	r3, [pc, #252]	; (8009d30 <mem_trim+0x1d0>)
 8009c34:	f240 22f5 	movw	r2, #757	; 0x2f5
 8009c38:	4941      	ldr	r1, [pc, #260]	; (8009d40 <mem_trim+0x1e0>)
 8009c3a:	483f      	ldr	r0, [pc, #252]	; (8009d38 <mem_trim+0x1d8>)
 8009c3c:	f00a fa12 	bl	8014064 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009c46:	69fa      	ldr	r2, [r7, #28]
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	4413      	add	r3, r2
 8009c4c:	330c      	adds	r3, #12
 8009c4e:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 8009c50:	4b3c      	ldr	r3, [pc, #240]	; (8009d44 <mem_trim+0x1e4>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	697a      	ldr	r2, [r7, #20]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d105      	bne.n	8009c66 <mem_trim+0x106>
      lfree = ptr_to_mem(ptr2);
 8009c5a:	6938      	ldr	r0, [r7, #16]
 8009c5c:	f7ff fdde 	bl	800981c <ptr_to_mem>
 8009c60:	4603      	mov	r3, r0
 8009c62:	4a38      	ldr	r2, [pc, #224]	; (8009d44 <mem_trim+0x1e4>)
 8009c64:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8009c66:	6938      	ldr	r0, [r7, #16]
 8009c68:	f7ff fdd8 	bl	800981c <ptr_to_mem>
 8009c6c:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	2200      	movs	r2, #0
 8009c72:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	69fa      	ldr	r2, [r7, #28]
 8009c7e:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 8009c80:	6a3b      	ldr	r3, [r7, #32]
 8009c82:	693a      	ldr	r2, [r7, #16]
 8009c84:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a26      	ldr	r2, [pc, #152]	; (8009d24 <mem_trim+0x1c4>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d044      	beq.n	8009d1a <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7ff fdc1 	bl	800981c <ptr_to_mem>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	6053      	str	r3, [r2, #4]
 8009ca0:	e03b      	b.n	8009d1a <mem_trim+0x1ba>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca4:	3318      	adds	r3, #24
 8009ca6:	69ba      	ldr	r2, [r7, #24]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d336      	bcc.n	8009d1a <mem_trim+0x1ba>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009cac:	69fa      	ldr	r2, [r7, #28]
 8009cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb0:	4413      	add	r3, r2
 8009cb2:	330c      	adds	r3, #12
 8009cb4:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009cb6:	6a3b      	ldr	r3, [r7, #32]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a1a      	ldr	r2, [pc, #104]	; (8009d24 <mem_trim+0x1c4>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d106      	bne.n	8009cce <mem_trim+0x16e>
 8009cc0:	4b1b      	ldr	r3, [pc, #108]	; (8009d30 <mem_trim+0x1d0>)
 8009cc2:	f240 3216 	movw	r2, #790	; 0x316
 8009cc6:	491e      	ldr	r1, [pc, #120]	; (8009d40 <mem_trim+0x1e0>)
 8009cc8:	481b      	ldr	r0, [pc, #108]	; (8009d38 <mem_trim+0x1d8>)
 8009cca:	f00a f9cb 	bl	8014064 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009cce:	6938      	ldr	r0, [r7, #16]
 8009cd0:	f7ff fda4 	bl	800981c <ptr_to_mem>
 8009cd4:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 8009cd6:	4b1b      	ldr	r3, [pc, #108]	; (8009d44 <mem_trim+0x1e4>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	697a      	ldr	r2, [r7, #20]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d202      	bcs.n	8009ce6 <mem_trim+0x186>
      lfree = mem2;
 8009ce0:	4a18      	ldr	r2, [pc, #96]	; (8009d44 <mem_trim+0x1e4>)
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 8009cec:	6a3b      	ldr	r3, [r7, #32]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	69fa      	ldr	r2, [r7, #28]
 8009cf8:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 8009cfa:	6a3b      	ldr	r3, [r7, #32]
 8009cfc:	693a      	ldr	r2, [r7, #16]
 8009cfe:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a07      	ldr	r2, [pc, #28]	; (8009d24 <mem_trim+0x1c4>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d007      	beq.n	8009d1a <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7ff fd84 	bl	800981c <ptr_to_mem>
 8009d14:	4602      	mov	r2, r0
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	6053      	str	r3, [r2, #4]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8009d1a:	687b      	ldr	r3, [r7, #4]
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3728      	adds	r7, #40	; 0x28
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	0001ffe8 	.word	0x0001ffe8
 8009d28:	240006d4 	.word	0x240006d4
 8009d2c:	240006d8 	.word	0x240006d8
 8009d30:	080153d4 	.word	0x080153d4
 8009d34:	08015544 	.word	0x08015544
 8009d38:	0801541c 	.word	0x0801541c
 8009d3c:	0801555c 	.word	0x0801555c
 8009d40:	0801557c 	.word	0x0801557c
 8009d44:	240006dc 	.word	0x240006dc

08009d48 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b088      	sub	sp, #32
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d101      	bne.n	8009d5a <mem_malloc+0x12>
    return NULL;
 8009d56:	2300      	movs	r3, #0
 8009d58:	e0d0      	b.n	8009efc <mem_malloc+0x1b4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	3303      	adds	r3, #3
 8009d5e:	f023 0303 	bic.w	r3, r3, #3
 8009d62:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	2b0b      	cmp	r3, #11
 8009d68:	d801      	bhi.n	8009d6e <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009d6a:	230c      	movs	r3, #12
 8009d6c:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	4a64      	ldr	r2, [pc, #400]	; (8009f04 <mem_malloc+0x1bc>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d803      	bhi.n	8009d7e <mem_malloc+0x36>
 8009d76:	69ba      	ldr	r2, [r7, #24]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d201      	bcs.n	8009d82 <mem_malloc+0x3a>
    return NULL;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	e0bc      	b.n	8009efc <mem_malloc+0x1b4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009d82:	4b61      	ldr	r3, [pc, #388]	; (8009f08 <mem_malloc+0x1c0>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7ff fd58 	bl	800983c <mem_to_ptr>
 8009d8c:	61f8      	str	r0, [r7, #28]
 8009d8e:	e0ad      	b.n	8009eec <mem_malloc+0x1a4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009d90:	69f8      	ldr	r0, [r7, #28]
 8009d92:	f7ff fd43 	bl	800981c <ptr_to_mem>
 8009d96:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	7a1b      	ldrb	r3, [r3, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f040 809f 	bne.w	8009ee0 <mem_malloc+0x198>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	1ad3      	subs	r3, r2, r3
 8009daa:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 8009dac:	69ba      	ldr	r2, [r7, #24]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	f200 8096 	bhi.w	8009ee0 <mem_malloc+0x198>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	1ad3      	subs	r3, r2, r3
 8009dbc:	f1a3 020c 	sub.w	r2, r3, #12
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	3318      	adds	r3, #24
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d331      	bcc.n	8009e2c <mem_malloc+0xe4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009dc8:	69fa      	ldr	r2, [r7, #28]
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	4413      	add	r3, r2
 8009dce:	330c      	adds	r3, #12
 8009dd0:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	4a4b      	ldr	r2, [pc, #300]	; (8009f04 <mem_malloc+0x1bc>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d106      	bne.n	8009de8 <mem_malloc+0xa0>
 8009dda:	4b4c      	ldr	r3, [pc, #304]	; (8009f0c <mem_malloc+0x1c4>)
 8009ddc:	f240 3287 	movw	r2, #903	; 0x387
 8009de0:	494b      	ldr	r1, [pc, #300]	; (8009f10 <mem_malloc+0x1c8>)
 8009de2:	484c      	ldr	r0, [pc, #304]	; (8009f14 <mem_malloc+0x1cc>)
 8009de4:	f00a f93e 	bl	8014064 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009de8:	68f8      	ldr	r0, [r7, #12]
 8009dea:	f7ff fd17 	bl	800981c <ptr_to_mem>
 8009dee:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	2200      	movs	r2, #0
 8009df4:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	69fa      	ldr	r2, [r7, #28]
 8009e02:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a3b      	ldr	r2, [pc, #236]	; (8009f04 <mem_malloc+0x1bc>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d00b      	beq.n	8009e32 <mem_malloc+0xea>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7ff fcfc 	bl	800981c <ptr_to_mem>
 8009e24:	4602      	mov	r2, r0
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	6053      	str	r3, [r2, #4]
 8009e2a:	e002      	b.n	8009e32 <mem_malloc+0xea>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009e32:	4b35      	ldr	r3, [pc, #212]	; (8009f08 <mem_malloc+0x1c0>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	693a      	ldr	r2, [r7, #16]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d127      	bne.n	8009e8c <mem_malloc+0x144>
          struct mem *cur = lfree;
 8009e3c:	4b32      	ldr	r3, [pc, #200]	; (8009f08 <mem_malloc+0x1c0>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009e42:	e005      	b.n	8009e50 <mem_malloc+0x108>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7ff fce7 	bl	800981c <ptr_to_mem>
 8009e4e:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	7a1b      	ldrb	r3, [r3, #8]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d004      	beq.n	8009e62 <mem_malloc+0x11a>
 8009e58:	4b2f      	ldr	r3, [pc, #188]	; (8009f18 <mem_malloc+0x1d0>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	697a      	ldr	r2, [r7, #20]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d1f0      	bne.n	8009e44 <mem_malloc+0xfc>
          }
          lfree = cur;
 8009e62:	4a29      	ldr	r2, [pc, #164]	; (8009f08 <mem_malloc+0x1c0>)
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009e68:	4b27      	ldr	r3, [pc, #156]	; (8009f08 <mem_malloc+0x1c0>)
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	4b2a      	ldr	r3, [pc, #168]	; (8009f18 <mem_malloc+0x1d0>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d00b      	beq.n	8009e8c <mem_malloc+0x144>
 8009e74:	4b24      	ldr	r3, [pc, #144]	; (8009f08 <mem_malloc+0x1c0>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	7a1b      	ldrb	r3, [r3, #8]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d006      	beq.n	8009e8c <mem_malloc+0x144>
 8009e7e:	4b23      	ldr	r3, [pc, #140]	; (8009f0c <mem_malloc+0x1c4>)
 8009e80:	f240 32b5 	movw	r2, #949	; 0x3b5
 8009e84:	4925      	ldr	r1, [pc, #148]	; (8009f1c <mem_malloc+0x1d4>)
 8009e86:	4823      	ldr	r0, [pc, #140]	; (8009f14 <mem_malloc+0x1cc>)
 8009e88:	f00a f8ec 	bl	8014064 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009e8c:	693a      	ldr	r2, [r7, #16]
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	4413      	add	r3, r2
 8009e92:	330c      	adds	r3, #12
 8009e94:	4a20      	ldr	r2, [pc, #128]	; (8009f18 <mem_malloc+0x1d0>)
 8009e96:	6812      	ldr	r2, [r2, #0]
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d906      	bls.n	8009eaa <mem_malloc+0x162>
 8009e9c:	4b1b      	ldr	r3, [pc, #108]	; (8009f0c <mem_malloc+0x1c4>)
 8009e9e:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009ea2:	491f      	ldr	r1, [pc, #124]	; (8009f20 <mem_malloc+0x1d8>)
 8009ea4:	481b      	ldr	r0, [pc, #108]	; (8009f14 <mem_malloc+0x1cc>)
 8009ea6:	f00a f8dd 	bl	8014064 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	f003 0303 	and.w	r3, r3, #3
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d006      	beq.n	8009ec2 <mem_malloc+0x17a>
 8009eb4:	4b15      	ldr	r3, [pc, #84]	; (8009f0c <mem_malloc+0x1c4>)
 8009eb6:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009eba:	491a      	ldr	r1, [pc, #104]	; (8009f24 <mem_malloc+0x1dc>)
 8009ebc:	4815      	ldr	r0, [pc, #84]	; (8009f14 <mem_malloc+0x1cc>)
 8009ebe:	f00a f8d1 	bl	8014064 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	f003 0303 	and.w	r3, r3, #3
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d006      	beq.n	8009eda <mem_malloc+0x192>
 8009ecc:	4b0f      	ldr	r3, [pc, #60]	; (8009f0c <mem_malloc+0x1c4>)
 8009ece:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009ed2:	4915      	ldr	r1, [pc, #84]	; (8009f28 <mem_malloc+0x1e0>)
 8009ed4:	480f      	ldr	r0, [pc, #60]	; (8009f14 <mem_malloc+0x1cc>)
 8009ed6:	f00a f8c5 	bl	8014064 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	330c      	adds	r3, #12
 8009ede:	e00d      	b.n	8009efc <mem_malloc+0x1b4>
         ptr = ptr_to_mem(ptr)->next) {
 8009ee0:	69f8      	ldr	r0, [r7, #28]
 8009ee2:	f7ff fc9b 	bl	800981c <ptr_to_mem>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009eec:	69ba      	ldr	r2, [r7, #24]
 8009eee:	4b05      	ldr	r3, [pc, #20]	; (8009f04 <mem_malloc+0x1bc>)
 8009ef0:	1a9b      	subs	r3, r3, r2
 8009ef2:	69fa      	ldr	r2, [r7, #28]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	f4ff af4b 	bcc.w	8009d90 <mem_malloc+0x48>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009efa:	2300      	movs	r3, #0
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3720      	adds	r7, #32
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	0001ffe8 	.word	0x0001ffe8
 8009f08:	240006dc 	.word	0x240006dc
 8009f0c:	080153d4 	.word	0x080153d4
 8009f10:	0801557c 	.word	0x0801557c
 8009f14:	0801541c 	.word	0x0801541c
 8009f18:	240006d8 	.word	0x240006d8
 8009f1c:	08015590 	.word	0x08015590
 8009f20:	080155ac 	.word	0x080155ac
 8009f24:	080155dc 	.word	0x080155dc
 8009f28:	0801560c 	.word	0x0801560c

08009f2c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	3303      	adds	r3, #3
 8009f42:	f023 0303 	bic.w	r3, r3, #3
 8009f46:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009f48:	2300      	movs	r3, #0
 8009f4a:	60fb      	str	r3, [r7, #12]
 8009f4c:	e011      	b.n	8009f72 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	68ba      	ldr	r2, [r7, #8]
 8009f5e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	881b      	ldrh	r3, [r3, #0]
 8009f64:	461a      	mov	r2, r3
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	4413      	add	r3, r2
 8009f6a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	3301      	adds	r3, #1
 8009f70:	60fb      	str	r3, [r7, #12]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	885b      	ldrh	r3, [r3, #2]
 8009f76:	461a      	mov	r2, r3
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	dbe7      	blt.n	8009f4e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009f7e:	bf00      	nop
 8009f80:	bf00      	nop
 8009f82:	3714      	adds	r7, #20
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009f92:	2300      	movs	r3, #0
 8009f94:	80fb      	strh	r3, [r7, #6]
 8009f96:	e009      	b.n	8009fac <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009f98:	88fb      	ldrh	r3, [r7, #6]
 8009f9a:	4a08      	ldr	r2, [pc, #32]	; (8009fbc <memp_init+0x30>)
 8009f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7ff ffc3 	bl	8009f2c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009fa6:	88fb      	ldrh	r3, [r7, #6]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	80fb      	strh	r3, [r7, #6]
 8009fac:	88fb      	ldrh	r3, [r7, #6]
 8009fae:	2b08      	cmp	r3, #8
 8009fb0:	d9f2      	bls.n	8009f98 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009fb2:	bf00      	nop
 8009fb4:	bf00      	nop
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	08018be4 	.word	0x08018be4

08009fc0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d012      	beq.n	8009ffc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	68fa      	ldr	r2, [r7, #12]
 8009fdc:	6812      	ldr	r2, [r2, #0]
 8009fde:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f003 0303 	and.w	r3, r3, #3
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d006      	beq.n	8009ff8 <do_memp_malloc_pool+0x38>
 8009fea:	4b07      	ldr	r3, [pc, #28]	; (800a008 <do_memp_malloc_pool+0x48>)
 8009fec:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009ff0:	4906      	ldr	r1, [pc, #24]	; (800a00c <do_memp_malloc_pool+0x4c>)
 8009ff2:	4807      	ldr	r0, [pc, #28]	; (800a010 <do_memp_malloc_pool+0x50>)
 8009ff4:	f00a f836 	bl	8014064 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	e000      	b.n	8009ffe <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009ffc:	2300      	movs	r3, #0
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	08015630 	.word	0x08015630
 800a00c:	08015660 	.word	0x08015660
 800a010:	08015684 	.word	0x08015684

0800a014 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d106      	bne.n	800a030 <memp_malloc_pool+0x1c>
 800a022:	4b0a      	ldr	r3, [pc, #40]	; (800a04c <memp_malloc_pool+0x38>)
 800a024:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800a028:	4909      	ldr	r1, [pc, #36]	; (800a050 <memp_malloc_pool+0x3c>)
 800a02a:	480a      	ldr	r0, [pc, #40]	; (800a054 <memp_malloc_pool+0x40>)
 800a02c:	f00a f81a 	bl	8014064 <iprintf>
  if (desc == NULL) {
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d101      	bne.n	800a03a <memp_malloc_pool+0x26>
    return NULL;
 800a036:	2300      	movs	r3, #0
 800a038:	e003      	b.n	800a042 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f7ff ffc0 	bl	8009fc0 <do_memp_malloc_pool>
 800a040:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800a042:	4618      	mov	r0, r3
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	08015630 	.word	0x08015630
 800a050:	080156ac 	.word	0x080156ac
 800a054:	08015684 	.word	0x08015684

0800a058 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	4603      	mov	r3, r0
 800a060:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a062:	79fb      	ldrb	r3, [r7, #7]
 800a064:	2b08      	cmp	r3, #8
 800a066:	d908      	bls.n	800a07a <memp_malloc+0x22>
 800a068:	4b0a      	ldr	r3, [pc, #40]	; (800a094 <memp_malloc+0x3c>)
 800a06a:	f240 1257 	movw	r2, #343	; 0x157
 800a06e:	490a      	ldr	r1, [pc, #40]	; (800a098 <memp_malloc+0x40>)
 800a070:	480a      	ldr	r0, [pc, #40]	; (800a09c <memp_malloc+0x44>)
 800a072:	f009 fff7 	bl	8014064 <iprintf>
 800a076:	2300      	movs	r3, #0
 800a078:	e008      	b.n	800a08c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a07a:	79fb      	ldrb	r3, [r7, #7]
 800a07c:	4a08      	ldr	r2, [pc, #32]	; (800a0a0 <memp_malloc+0x48>)
 800a07e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a082:	4618      	mov	r0, r3
 800a084:	f7ff ff9c 	bl	8009fc0 <do_memp_malloc_pool>
 800a088:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a08a:	68fb      	ldr	r3, [r7, #12]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3710      	adds	r7, #16
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	08015630 	.word	0x08015630
 800a098:	080156c0 	.word	0x080156c0
 800a09c:	08015684 	.word	0x08015684
 800a0a0:	08018be4 	.word	0x08018be4

0800a0a4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	f003 0303 	and.w	r3, r3, #3
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d006      	beq.n	800a0c6 <do_memp_free_pool+0x22>
 800a0b8:	4b0a      	ldr	r3, [pc, #40]	; (800a0e4 <do_memp_free_pool+0x40>)
 800a0ba:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800a0be:	490a      	ldr	r1, [pc, #40]	; (800a0e8 <do_memp_free_pool+0x44>)
 800a0c0:	480a      	ldr	r0, [pc, #40]	; (800a0ec <do_memp_free_pool+0x48>)
 800a0c2:	f009 ffcf 	bl	8014064 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800a0dc:	bf00      	nop
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	08015630 	.word	0x08015630
 800a0e8:	080156e0 	.word	0x080156e0
 800a0ec:	08015684 	.word	0x08015684

0800a0f0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d106      	bne.n	800a10e <memp_free_pool+0x1e>
 800a100:	4b0a      	ldr	r3, [pc, #40]	; (800a12c <memp_free_pool+0x3c>)
 800a102:	f240 1295 	movw	r2, #405	; 0x195
 800a106:	490a      	ldr	r1, [pc, #40]	; (800a130 <memp_free_pool+0x40>)
 800a108:	480a      	ldr	r0, [pc, #40]	; (800a134 <memp_free_pool+0x44>)
 800a10a:	f009 ffab 	bl	8014064 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d007      	beq.n	800a124 <memp_free_pool+0x34>
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d004      	beq.n	800a124 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800a11a:	6839      	ldr	r1, [r7, #0]
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f7ff ffc1 	bl	800a0a4 <do_memp_free_pool>
 800a122:	e000      	b.n	800a126 <memp_free_pool+0x36>
    return;
 800a124:	bf00      	nop
}
 800a126:	3708      	adds	r7, #8
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	08015630 	.word	0x08015630
 800a130:	080156ac 	.word	0x080156ac
 800a134:	08015684 	.word	0x08015684

0800a138 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	4603      	mov	r3, r0
 800a140:	6039      	str	r1, [r7, #0]
 800a142:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a144:	79fb      	ldrb	r3, [r7, #7]
 800a146:	2b08      	cmp	r3, #8
 800a148:	d907      	bls.n	800a15a <memp_free+0x22>
 800a14a:	4b0c      	ldr	r3, [pc, #48]	; (800a17c <memp_free+0x44>)
 800a14c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a150:	490b      	ldr	r1, [pc, #44]	; (800a180 <memp_free+0x48>)
 800a152:	480c      	ldr	r0, [pc, #48]	; (800a184 <memp_free+0x4c>)
 800a154:	f009 ff86 	bl	8014064 <iprintf>
 800a158:	e00c      	b.n	800a174 <memp_free+0x3c>

  if (mem == NULL) {
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d008      	beq.n	800a172 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a160:	79fb      	ldrb	r3, [r7, #7]
 800a162:	4a09      	ldr	r2, [pc, #36]	; (800a188 <memp_free+0x50>)
 800a164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a168:	6839      	ldr	r1, [r7, #0]
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7ff ff9a 	bl	800a0a4 <do_memp_free_pool>
 800a170:	e000      	b.n	800a174 <memp_free+0x3c>
    return;
 800a172:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a174:	3708      	adds	r7, #8
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	08015630 	.word	0x08015630
 800a180:	08015700 	.word	0x08015700
 800a184:	08015684 	.word	0x08015684
 800a188:	08018be4 	.word	0x08018be4

0800a18c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a18c:	b480      	push	{r7}
 800a18e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a190:	bf00      	nop
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
	...

0800a19c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b086      	sub	sp, #24
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
 800a1a8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d108      	bne.n	800a1c2 <netif_add+0x26>
 800a1b0:	4b57      	ldr	r3, [pc, #348]	; (800a310 <netif_add+0x174>)
 800a1b2:	f240 1227 	movw	r2, #295	; 0x127
 800a1b6:	4957      	ldr	r1, [pc, #348]	; (800a314 <netif_add+0x178>)
 800a1b8:	4857      	ldr	r0, [pc, #348]	; (800a318 <netif_add+0x17c>)
 800a1ba:	f009 ff53 	bl	8014064 <iprintf>
 800a1be:	2300      	movs	r3, #0
 800a1c0:	e0a2      	b.n	800a308 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d108      	bne.n	800a1da <netif_add+0x3e>
 800a1c8:	4b51      	ldr	r3, [pc, #324]	; (800a310 <netif_add+0x174>)
 800a1ca:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a1ce:	4953      	ldr	r1, [pc, #332]	; (800a31c <netif_add+0x180>)
 800a1d0:	4851      	ldr	r0, [pc, #324]	; (800a318 <netif_add+0x17c>)
 800a1d2:	f009 ff47 	bl	8014064 <iprintf>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	e096      	b.n	800a308 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d101      	bne.n	800a1e4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a1e0:	4b4f      	ldr	r3, [pc, #316]	; (800a320 <netif_add+0x184>)
 800a1e2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d101      	bne.n	800a1ee <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a1ea:	4b4d      	ldr	r3, [pc, #308]	; (800a320 <netif_add+0x184>)
 800a1ec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d101      	bne.n	800a1f8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a1f4:	4b4a      	ldr	r3, [pc, #296]	; (800a320 <netif_add+0x184>)
 800a1f6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2200      	movs	r2, #0
 800a202:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	4a45      	ldr	r2, [pc, #276]	; (800a324 <netif_add+0x188>)
 800a20e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2200      	movs	r2, #0
 800a214:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2200      	movs	r2, #0
 800a222:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6a3a      	ldr	r2, [r7, #32]
 800a228:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a22a:	4b3f      	ldr	r3, [pc, #252]	; (800a328 <netif_add+0x18c>)
 800a22c:	781a      	ldrb	r2, [r3, #0]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a238:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	68b9      	ldr	r1, [r7, #8]
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f000 f913 	bl	800a46c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	4798      	blx	r3
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d001      	beq.n	800a256 <netif_add+0xba>
    return NULL;
 800a252:	2300      	movs	r3, #0
 800a254:	e058      	b.n	800a308 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a25c:	2bff      	cmp	r3, #255	; 0xff
 800a25e:	d103      	bne.n	800a268 <netif_add+0xcc>
        netif->num = 0;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2200      	movs	r2, #0
 800a264:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800a268:	2300      	movs	r3, #0
 800a26a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a26c:	4b2f      	ldr	r3, [pc, #188]	; (800a32c <netif_add+0x190>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	617b      	str	r3, [r7, #20]
 800a272:	e02b      	b.n	800a2cc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a274:	697a      	ldr	r2, [r7, #20]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d106      	bne.n	800a28a <netif_add+0xee>
 800a27c:	4b24      	ldr	r3, [pc, #144]	; (800a310 <netif_add+0x174>)
 800a27e:	f240 128b 	movw	r2, #395	; 0x18b
 800a282:	492b      	ldr	r1, [pc, #172]	; (800a330 <netif_add+0x194>)
 800a284:	4824      	ldr	r0, [pc, #144]	; (800a318 <netif_add+0x17c>)
 800a286:	f009 feed 	bl	8014064 <iprintf>
        num_netifs++;
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	3301      	adds	r3, #1
 800a28e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	2bff      	cmp	r3, #255	; 0xff
 800a294:	dd06      	ble.n	800a2a4 <netif_add+0x108>
 800a296:	4b1e      	ldr	r3, [pc, #120]	; (800a310 <netif_add+0x174>)
 800a298:	f240 128d 	movw	r2, #397	; 0x18d
 800a29c:	4925      	ldr	r1, [pc, #148]	; (800a334 <netif_add+0x198>)
 800a29e:	481e      	ldr	r0, [pc, #120]	; (800a318 <netif_add+0x17c>)
 800a2a0:	f009 fee0 	bl	8014064 <iprintf>
        if (netif2->num == netif->num) {
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d108      	bne.n	800a2c6 <netif_add+0x12a>
          netif->num++;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	b2da      	uxtb	r2, r3
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800a2c4:	e005      	b.n	800a2d2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	617b      	str	r3, [r7, #20]
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d1d0      	bne.n	800a274 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d1be      	bne.n	800a256 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a2de:	2bfe      	cmp	r3, #254	; 0xfe
 800a2e0:	d103      	bne.n	800a2ea <netif_add+0x14e>
    netif_num = 0;
 800a2e2:	4b11      	ldr	r3, [pc, #68]	; (800a328 <netif_add+0x18c>)
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	701a      	strb	r2, [r3, #0]
 800a2e8:	e006      	b.n	800a2f8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	b2da      	uxtb	r2, r3
 800a2f4:	4b0c      	ldr	r3, [pc, #48]	; (800a328 <netif_add+0x18c>)
 800a2f6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a2f8:	4b0c      	ldr	r3, [pc, #48]	; (800a32c <netif_add+0x190>)
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a300:	4a0a      	ldr	r2, [pc, #40]	; (800a32c <netif_add+0x190>)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a306:	68fb      	ldr	r3, [r7, #12]
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3718      	adds	r7, #24
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	0801571c 	.word	0x0801571c
 800a314:	080157b0 	.word	0x080157b0
 800a318:	0801576c 	.word	0x0801576c
 800a31c:	080157cc 	.word	0x080157cc
 800a320:	08018c48 	.word	0x08018c48
 800a324:	0800a747 	.word	0x0800a747
 800a328:	240035d4 	.word	0x240035d4
 800a32c:	240035cc 	.word	0x240035cc
 800a330:	080157f0 	.word	0x080157f0
 800a334:	08015804 	.word	0x08015804

0800a338 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a342:	6839      	ldr	r1, [r7, #0]
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f002 fde7 	bl	800cf18 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a34a:	6839      	ldr	r1, [r7, #0]
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f007 fb23 	bl	8011998 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a352:	bf00      	nop
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
	...

0800a35c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b086      	sub	sp, #24
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d106      	bne.n	800a37c <netif_do_set_ipaddr+0x20>
 800a36e:	4b1d      	ldr	r3, [pc, #116]	; (800a3e4 <netif_do_set_ipaddr+0x88>)
 800a370:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a374:	491c      	ldr	r1, [pc, #112]	; (800a3e8 <netif_do_set_ipaddr+0x8c>)
 800a376:	481d      	ldr	r0, [pc, #116]	; (800a3ec <netif_do_set_ipaddr+0x90>)
 800a378:	f009 fe74 	bl	8014064 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d106      	bne.n	800a390 <netif_do_set_ipaddr+0x34>
 800a382:	4b18      	ldr	r3, [pc, #96]	; (800a3e4 <netif_do_set_ipaddr+0x88>)
 800a384:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a388:	4917      	ldr	r1, [pc, #92]	; (800a3e8 <netif_do_set_ipaddr+0x8c>)
 800a38a:	4818      	ldr	r0, [pc, #96]	; (800a3ec <netif_do_set_ipaddr+0x90>)
 800a38c:	f009 fe6a 	bl	8014064 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	3304      	adds	r3, #4
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d01c      	beq.n	800a3d8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	3304      	adds	r3, #4
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a3ae:	f107 0314 	add.w	r3, r7, #20
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f7ff ffbf 	bl	800a338 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d002      	beq.n	800a3c6 <netif_do_set_ipaddr+0x6a>
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	e000      	b.n	800a3c8 <netif_do_set_ipaddr+0x6c>
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a3cc:	2101      	movs	r1, #1
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f000 f8d2 	bl	800a578 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e000      	b.n	800a3da <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3718      	adds	r7, #24
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	0801571c 	.word	0x0801571c
 800a3e8:	08015834 	.word	0x08015834
 800a3ec:	0801576c 	.word	0x0801576c

0800a3f0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	60b9      	str	r1, [r7, #8]
 800a3fa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	3308      	adds	r3, #8
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	429a      	cmp	r2, r3
 800a408:	d00a      	beq.n	800a420 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d002      	beq.n	800a416 <netif_do_set_netmask+0x26>
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	e000      	b.n	800a418 <netif_do_set_netmask+0x28>
 800a416:	2300      	movs	r3, #0
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a41c:	2301      	movs	r3, #1
 800a41e:	e000      	b.n	800a422 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3714      	adds	r7, #20
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr

0800a42e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a42e:	b480      	push	{r7}
 800a430:	b085      	sub	sp, #20
 800a432:	af00      	add	r7, sp, #0
 800a434:	60f8      	str	r0, [r7, #12]
 800a436:	60b9      	str	r1, [r7, #8]
 800a438:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	330c      	adds	r3, #12
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	429a      	cmp	r2, r3
 800a446:	d00a      	beq.n	800a45e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d002      	beq.n	800a454 <netif_do_set_gw+0x26>
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	e000      	b.n	800a456 <netif_do_set_gw+0x28>
 800a454:	2300      	movs	r3, #0
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a45a:	2301      	movs	r3, #1
 800a45c:	e000      	b.n	800a460 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3714      	adds	r7, #20
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b088      	sub	sp, #32
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]
 800a478:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a47a:	2300      	movs	r3, #0
 800a47c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a47e:	2300      	movs	r3, #0
 800a480:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d101      	bne.n	800a48c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a488:	4b1c      	ldr	r3, [pc, #112]	; (800a4fc <netif_set_addr+0x90>)
 800a48a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d101      	bne.n	800a496 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a492:	4b1a      	ldr	r3, [pc, #104]	; (800a4fc <netif_set_addr+0x90>)
 800a494:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d101      	bne.n	800a4a0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a49c:	4b17      	ldr	r3, [pc, #92]	; (800a4fc <netif_set_addr+0x90>)
 800a49e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d003      	beq.n	800a4ae <netif_set_addr+0x42>
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d101      	bne.n	800a4b2 <netif_set_addr+0x46>
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e000      	b.n	800a4b4 <netif_set_addr+0x48>
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d006      	beq.n	800a4ca <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a4bc:	f107 0310 	add.w	r3, r7, #16
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	68b9      	ldr	r1, [r7, #8]
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f7ff ff49 	bl	800a35c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a4ca:	69fa      	ldr	r2, [r7, #28]
 800a4cc:	6879      	ldr	r1, [r7, #4]
 800a4ce:	68f8      	ldr	r0, [r7, #12]
 800a4d0:	f7ff ff8e 	bl	800a3f0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a4d4:	69ba      	ldr	r2, [r7, #24]
 800a4d6:	6839      	ldr	r1, [r7, #0]
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f7ff ffa8 	bl	800a42e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d106      	bne.n	800a4f2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a4e4:	f107 0310 	add.w	r3, r7, #16
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	68b9      	ldr	r1, [r7, #8]
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f7ff ff35 	bl	800a35c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a4f2:	bf00      	nop
 800a4f4:	3720      	adds	r7, #32
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	08018c48 	.word	0x08018c48

0800a500 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a508:	4a04      	ldr	r2, [pc, #16]	; (800a51c <netif_set_default+0x1c>)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a50e:	bf00      	nop
 800a510:	370c      	adds	r7, #12
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	240035d0 	.word	0x240035d0

0800a520 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d107      	bne.n	800a53e <netif_set_up+0x1e>
 800a52e:	4b0f      	ldr	r3, [pc, #60]	; (800a56c <netif_set_up+0x4c>)
 800a530:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a534:	490e      	ldr	r1, [pc, #56]	; (800a570 <netif_set_up+0x50>)
 800a536:	480f      	ldr	r0, [pc, #60]	; (800a574 <netif_set_up+0x54>)
 800a538:	f009 fd94 	bl	8014064 <iprintf>
 800a53c:	e013      	b.n	800a566 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a544:	f003 0301 	and.w	r3, r3, #1
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d10c      	bne.n	800a566 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a552:	f043 0301 	orr.w	r3, r3, #1
 800a556:	b2da      	uxtb	r2, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a55e:	2103      	movs	r1, #3
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 f809 	bl	800a578 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a566:	3708      	adds	r7, #8
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	0801571c 	.word	0x0801571c
 800a570:	080158a4 	.word	0x080158a4
 800a574:	0801576c 	.word	0x0801576c

0800a578 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	460b      	mov	r3, r1
 800a582:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d106      	bne.n	800a598 <netif_issue_reports+0x20>
 800a58a:	4b18      	ldr	r3, [pc, #96]	; (800a5ec <netif_issue_reports+0x74>)
 800a58c:	f240 326d 	movw	r2, #877	; 0x36d
 800a590:	4917      	ldr	r1, [pc, #92]	; (800a5f0 <netif_issue_reports+0x78>)
 800a592:	4818      	ldr	r0, [pc, #96]	; (800a5f4 <netif_issue_reports+0x7c>)
 800a594:	f009 fd66 	bl	8014064 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a59e:	f003 0304 	and.w	r3, r3, #4
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d01e      	beq.n	800a5e4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a5ac:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d017      	beq.n	800a5e4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a5b4:	78fb      	ldrb	r3, [r7, #3]
 800a5b6:	f003 0301 	and.w	r3, r3, #1
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d013      	beq.n	800a5e6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	3304      	adds	r3, #4
 800a5c2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d00e      	beq.n	800a5e6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a5ce:	f003 0308 	and.w	r3, r3, #8
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d007      	beq.n	800a5e6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	3304      	adds	r3, #4
 800a5da:	4619      	mov	r1, r3
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f008 f945 	bl	801286c <etharp_request>
 800a5e2:	e000      	b.n	800a5e6 <netif_issue_reports+0x6e>
    return;
 800a5e4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	0801571c 	.word	0x0801571c
 800a5f0:	080158c0 	.word	0x080158c0
 800a5f4:	0801576c 	.word	0x0801576c

0800a5f8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d107      	bne.n	800a616 <netif_set_down+0x1e>
 800a606:	4b12      	ldr	r3, [pc, #72]	; (800a650 <netif_set_down+0x58>)
 800a608:	f240 329b 	movw	r2, #923	; 0x39b
 800a60c:	4911      	ldr	r1, [pc, #68]	; (800a654 <netif_set_down+0x5c>)
 800a60e:	4812      	ldr	r0, [pc, #72]	; (800a658 <netif_set_down+0x60>)
 800a610:	f009 fd28 	bl	8014064 <iprintf>
 800a614:	e019      	b.n	800a64a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a61c:	f003 0301 	and.w	r3, r3, #1
 800a620:	2b00      	cmp	r3, #0
 800a622:	d012      	beq.n	800a64a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a62a:	f023 0301 	bic.w	r3, r3, #1
 800a62e:	b2da      	uxtb	r2, r3
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a63c:	f003 0308 	and.w	r3, r3, #8
 800a640:	2b00      	cmp	r3, #0
 800a642:	d002      	beq.n	800a64a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f007 fccf 	bl	8011fe8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a64a:	3708      	adds	r7, #8
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	0801571c 	.word	0x0801571c
 800a654:	080158e4 	.word	0x080158e4
 800a658:	0801576c 	.word	0x0801576c

0800a65c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d107      	bne.n	800a67a <netif_set_link_up+0x1e>
 800a66a:	4b13      	ldr	r3, [pc, #76]	; (800a6b8 <netif_set_link_up+0x5c>)
 800a66c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800a670:	4912      	ldr	r1, [pc, #72]	; (800a6bc <netif_set_link_up+0x60>)
 800a672:	4813      	ldr	r0, [pc, #76]	; (800a6c0 <netif_set_link_up+0x64>)
 800a674:	f009 fcf6 	bl	8014064 <iprintf>
 800a678:	e01b      	b.n	800a6b2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a680:	f003 0304 	and.w	r3, r3, #4
 800a684:	2b00      	cmp	r3, #0
 800a686:	d114      	bne.n	800a6b2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a68e:	f043 0304 	orr.w	r3, r3, #4
 800a692:	b2da      	uxtb	r2, r3
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a69a:	2103      	movs	r1, #3
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f7ff ff6b 	bl	800a578 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	69db      	ldr	r3, [r3, #28]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d003      	beq.n	800a6b2 <netif_set_link_up+0x56>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	69db      	ldr	r3, [r3, #28]
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	0801571c 	.word	0x0801571c
 800a6bc:	08015904 	.word	0x08015904
 800a6c0:	0801576c 	.word	0x0801576c

0800a6c4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d107      	bne.n	800a6e2 <netif_set_link_down+0x1e>
 800a6d2:	4b11      	ldr	r3, [pc, #68]	; (800a718 <netif_set_link_down+0x54>)
 800a6d4:	f240 4206 	movw	r2, #1030	; 0x406
 800a6d8:	4910      	ldr	r1, [pc, #64]	; (800a71c <netif_set_link_down+0x58>)
 800a6da:	4811      	ldr	r0, [pc, #68]	; (800a720 <netif_set_link_down+0x5c>)
 800a6dc:	f009 fcc2 	bl	8014064 <iprintf>
 800a6e0:	e017      	b.n	800a712 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a6e8:	f003 0304 	and.w	r3, r3, #4
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d010      	beq.n	800a712 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a6f6:	f023 0304 	bic.w	r3, r3, #4
 800a6fa:	b2da      	uxtb	r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	69db      	ldr	r3, [r3, #28]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d003      	beq.n	800a712 <netif_set_link_down+0x4e>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	69db      	ldr	r3, [r3, #28]
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a712:	3708      	adds	r7, #8
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	0801571c 	.word	0x0801571c
 800a71c:	08015928 	.word	0x08015928
 800a720:	0801576c 	.word	0x0801576c

0800a724 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d002      	beq.n	800a73a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	683a      	ldr	r2, [r7, #0]
 800a738:	61da      	str	r2, [r3, #28]
  }
}
 800a73a:	bf00      	nop
 800a73c:	370c      	adds	r7, #12
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr

0800a746 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a746:	b480      	push	{r7}
 800a748:	b085      	sub	sp, #20
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	60f8      	str	r0, [r7, #12]
 800a74e:	60b9      	str	r1, [r7, #8]
 800a750:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a752:	f06f 030b 	mvn.w	r3, #11
}
 800a756:	4618      	mov	r0, r3
 800a758:	3714      	adds	r7, #20
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
	...

0800a764 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a764:	b480      	push	{r7}
 800a766:	b085      	sub	sp, #20
 800a768:	af00      	add	r7, sp, #0
 800a76a:	4603      	mov	r3, r0
 800a76c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a76e:	79fb      	ldrb	r3, [r7, #7]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d013      	beq.n	800a79c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a774:	4b0d      	ldr	r3, [pc, #52]	; (800a7ac <netif_get_by_index+0x48>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	60fb      	str	r3, [r7, #12]
 800a77a:	e00c      	b.n	800a796 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a782:	3301      	adds	r3, #1
 800a784:	b2db      	uxtb	r3, r3
 800a786:	79fa      	ldrb	r2, [r7, #7]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d101      	bne.n	800a790 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	e006      	b.n	800a79e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	60fb      	str	r3, [r7, #12]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d1ef      	bne.n	800a77c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3714      	adds	r7, #20
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr
 800a7aa:	bf00      	nop
 800a7ac:	240035cc 	.word	0x240035cc

0800a7b0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a7b6:	4b0c      	ldr	r3, [pc, #48]	; (800a7e8 <pbuf_free_ooseq+0x38>)
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a7bc:	4b0b      	ldr	r3, [pc, #44]	; (800a7ec <pbuf_free_ooseq+0x3c>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	607b      	str	r3, [r7, #4]
 800a7c2:	e00a      	b.n	800a7da <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d003      	beq.n	800a7d4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f002 fbe1 	bl	800cf94 <tcp_free_ooseq>
      return;
 800a7d2:	e005      	b.n	800a7e0 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	607b      	str	r3, [r7, #4]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d1f1      	bne.n	800a7c4 <pbuf_free_ooseq+0x14>
    }
  }
}
 800a7e0:	3708      	adds	r7, #8
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	240035d5 	.word	0x240035d5
 800a7ec:	240035e4 	.word	0x240035e4

0800a7f0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800a7f4:	4b03      	ldr	r3, [pc, #12]	; (800a804 <pbuf_pool_is_empty+0x14>)
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a7fa:	bf00      	nop
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr
 800a804:	240035d5 	.word	0x240035d5

0800a808 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a808:	b480      	push	{r7}
 800a80a:	b085      	sub	sp, #20
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	4611      	mov	r1, r2
 800a814:	461a      	mov	r2, r3
 800a816:	460b      	mov	r3, r1
 800a818:	80fb      	strh	r3, [r7, #6]
 800a81a:	4613      	mov	r3, r2
 800a81c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2200      	movs	r2, #0
 800a822:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	68ba      	ldr	r2, [r7, #8]
 800a828:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	88fa      	ldrh	r2, [r7, #6]
 800a82e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	88ba      	ldrh	r2, [r7, #4]
 800a834:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a836:	8b3b      	ldrh	r3, [r7, #24]
 800a838:	b2da      	uxtb	r2, r3
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	7f3a      	ldrb	r2, [r7, #28]
 800a842:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2201      	movs	r2, #1
 800a848:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2200      	movs	r2, #0
 800a84e:	73da      	strb	r2, [r3, #15]
}
 800a850:	bf00      	nop
 800a852:	3714      	adds	r7, #20
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b08c      	sub	sp, #48	; 0x30
 800a860:	af02      	add	r7, sp, #8
 800a862:	4603      	mov	r3, r0
 800a864:	71fb      	strb	r3, [r7, #7]
 800a866:	460b      	mov	r3, r1
 800a868:	80bb      	strh	r3, [r7, #4]
 800a86a:	4613      	mov	r3, r2
 800a86c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a86e:	79fb      	ldrb	r3, [r7, #7]
 800a870:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a872:	887b      	ldrh	r3, [r7, #2]
 800a874:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a878:	d07f      	beq.n	800a97a <pbuf_alloc+0x11e>
 800a87a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a87e:	f300 80c7 	bgt.w	800aa10 <pbuf_alloc+0x1b4>
 800a882:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a886:	d010      	beq.n	800a8aa <pbuf_alloc+0x4e>
 800a888:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a88c:	f300 80c0 	bgt.w	800aa10 <pbuf_alloc+0x1b4>
 800a890:	2b01      	cmp	r3, #1
 800a892:	d002      	beq.n	800a89a <pbuf_alloc+0x3e>
 800a894:	2b41      	cmp	r3, #65	; 0x41
 800a896:	f040 80bb 	bne.w	800aa10 <pbuf_alloc+0x1b4>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a89a:	887a      	ldrh	r2, [r7, #2]
 800a89c:	88bb      	ldrh	r3, [r7, #4]
 800a89e:	4619      	mov	r1, r3
 800a8a0:	2000      	movs	r0, #0
 800a8a2:	f000 f8d1 	bl	800aa48 <pbuf_alloc_reference>
 800a8a6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a8a8:	e0bc      	b.n	800aa24 <pbuf_alloc+0x1c8>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a8b2:	88bb      	ldrh	r3, [r7, #4]
 800a8b4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a8b6:	2008      	movs	r0, #8
 800a8b8:	f7ff fbce 	bl	800a058 <memp_malloc>
 800a8bc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d109      	bne.n	800a8d8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800a8c4:	f7ff ff94 	bl	800a7f0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d002      	beq.n	800a8d4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800a8ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8d0:	f000 faa6 	bl	800ae20 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	e0a6      	b.n	800aa26 <pbuf_alloc+0x1ca>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a8d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a8da:	3303      	adds	r3, #3
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	f023 0303 	bic.w	r3, r3, #3
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	8b7a      	ldrh	r2, [r7, #26]
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	bf28      	it	cs
 800a8f0:	4613      	movcs	r3, r2
 800a8f2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a8f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a8f6:	3310      	adds	r3, #16
 800a8f8:	693a      	ldr	r2, [r7, #16]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	3303      	adds	r3, #3
 800a8fe:	f023 0303 	bic.w	r3, r3, #3
 800a902:	4618      	mov	r0, r3
 800a904:	89f9      	ldrh	r1, [r7, #14]
 800a906:	8b7a      	ldrh	r2, [r7, #26]
 800a908:	2300      	movs	r3, #0
 800a90a:	9301      	str	r3, [sp, #4]
 800a90c:	887b      	ldrh	r3, [r7, #2]
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	460b      	mov	r3, r1
 800a912:	4601      	mov	r1, r0
 800a914:	6938      	ldr	r0, [r7, #16]
 800a916:	f7ff ff77 	bl	800a808 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	f003 0303 	and.w	r3, r3, #3
 800a922:	2b00      	cmp	r3, #0
 800a924:	d006      	beq.n	800a934 <pbuf_alloc+0xd8>
 800a926:	4b42      	ldr	r3, [pc, #264]	; (800aa30 <pbuf_alloc+0x1d4>)
 800a928:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a92c:	4941      	ldr	r1, [pc, #260]	; (800aa34 <pbuf_alloc+0x1d8>)
 800a92e:	4842      	ldr	r0, [pc, #264]	; (800aa38 <pbuf_alloc+0x1dc>)
 800a930:	f009 fb98 	bl	8014064 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a934:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a936:	3303      	adds	r3, #3
 800a938:	f023 0303 	bic.w	r3, r3, #3
 800a93c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800a940:	d106      	bne.n	800a950 <pbuf_alloc+0xf4>
 800a942:	4b3b      	ldr	r3, [pc, #236]	; (800aa30 <pbuf_alloc+0x1d4>)
 800a944:	f44f 7281 	mov.w	r2, #258	; 0x102
 800a948:	493c      	ldr	r1, [pc, #240]	; (800aa3c <pbuf_alloc+0x1e0>)
 800a94a:	483b      	ldr	r0, [pc, #236]	; (800aa38 <pbuf_alloc+0x1dc>)
 800a94c:	f009 fb8a 	bl	8014064 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a952:	2b00      	cmp	r3, #0
 800a954:	d102      	bne.n	800a95c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	627b      	str	r3, [r7, #36]	; 0x24
 800a95a:	e002      	b.n	800a962 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a95c:	69fb      	ldr	r3, [r7, #28]
 800a95e:	693a      	ldr	r2, [r7, #16]
 800a960:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a966:	8b7a      	ldrh	r2, [r7, #26]
 800a968:	89fb      	ldrh	r3, [r7, #14]
 800a96a:	1ad3      	subs	r3, r2, r3
 800a96c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a96e:	2300      	movs	r3, #0
 800a970:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800a972:	8b7b      	ldrh	r3, [r7, #26]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d19e      	bne.n	800a8b6 <pbuf_alloc+0x5a>
      break;
 800a978:	e054      	b.n	800aa24 <pbuf_alloc+0x1c8>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a97a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a97c:	3303      	adds	r3, #3
 800a97e:	b29b      	uxth	r3, r3
 800a980:	f023 0303 	bic.w	r3, r3, #3
 800a984:	b29a      	uxth	r2, r3
 800a986:	88bb      	ldrh	r3, [r7, #4]
 800a988:	3303      	adds	r3, #3
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	f023 0303 	bic.w	r3, r3, #3
 800a990:	b29b      	uxth	r3, r3
 800a992:	4413      	add	r3, r2
 800a994:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a996:	8b3b      	ldrh	r3, [r7, #24]
 800a998:	3310      	adds	r3, #16
 800a99a:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a99c:	8b3a      	ldrh	r2, [r7, #24]
 800a99e:	88bb      	ldrh	r3, [r7, #4]
 800a9a0:	3303      	adds	r3, #3
 800a9a2:	f023 0303 	bic.w	r3, r3, #3
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d306      	bcc.n	800a9b8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a9aa:	88bb      	ldrh	r3, [r7, #4]
 800a9ac:	3303      	adds	r3, #3
 800a9ae:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a9b2:	697a      	ldr	r2, [r7, #20]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d201      	bcs.n	800a9bc <pbuf_alloc+0x160>
        return NULL;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	e034      	b.n	800aa26 <pbuf_alloc+0x1ca>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a9bc:	6978      	ldr	r0, [r7, #20]
 800a9be:	f7ff f9c3 	bl	8009d48 <mem_malloc>
 800a9c2:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d101      	bne.n	800a9ce <pbuf_alloc+0x172>
        return NULL;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	e02b      	b.n	800aa26 <pbuf_alloc+0x1ca>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a9ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a9d0:	3310      	adds	r3, #16
 800a9d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9d4:	4413      	add	r3, r2
 800a9d6:	3303      	adds	r3, #3
 800a9d8:	f023 0303 	bic.w	r3, r3, #3
 800a9dc:	4618      	mov	r0, r3
 800a9de:	88b9      	ldrh	r1, [r7, #4]
 800a9e0:	88ba      	ldrh	r2, [r7, #4]
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	9301      	str	r3, [sp, #4]
 800a9e6:	887b      	ldrh	r3, [r7, #2]
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	4601      	mov	r1, r0
 800a9ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9f0:	f7ff ff0a 	bl	800a808 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	f003 0303 	and.w	r3, r3, #3
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d010      	beq.n	800aa22 <pbuf_alloc+0x1c6>
 800aa00:	4b0b      	ldr	r3, [pc, #44]	; (800aa30 <pbuf_alloc+0x1d4>)
 800aa02:	f44f 7291 	mov.w	r2, #290	; 0x122
 800aa06:	490e      	ldr	r1, [pc, #56]	; (800aa40 <pbuf_alloc+0x1e4>)
 800aa08:	480b      	ldr	r0, [pc, #44]	; (800aa38 <pbuf_alloc+0x1dc>)
 800aa0a:	f009 fb2b 	bl	8014064 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800aa0e:	e008      	b.n	800aa22 <pbuf_alloc+0x1c6>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800aa10:	4b07      	ldr	r3, [pc, #28]	; (800aa30 <pbuf_alloc+0x1d4>)
 800aa12:	f240 1227 	movw	r2, #295	; 0x127
 800aa16:	490b      	ldr	r1, [pc, #44]	; (800aa44 <pbuf_alloc+0x1e8>)
 800aa18:	4807      	ldr	r0, [pc, #28]	; (800aa38 <pbuf_alloc+0x1dc>)
 800aa1a:	f009 fb23 	bl	8014064 <iprintf>
      return NULL;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	e001      	b.n	800aa26 <pbuf_alloc+0x1ca>
      break;
 800aa22:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800aa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3728      	adds	r7, #40	; 0x28
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	0801594c 	.word	0x0801594c
 800aa34:	0801597c 	.word	0x0801597c
 800aa38:	080159ac 	.word	0x080159ac
 800aa3c:	080159d4 	.word	0x080159d4
 800aa40:	08015a08 	.word	0x08015a08
 800aa44:	08015a34 	.word	0x08015a34

0800aa48 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af02      	add	r7, sp, #8
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	460b      	mov	r3, r1
 800aa52:	807b      	strh	r3, [r7, #2]
 800aa54:	4613      	mov	r3, r2
 800aa56:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800aa58:	883b      	ldrh	r3, [r7, #0]
 800aa5a:	2b41      	cmp	r3, #65	; 0x41
 800aa5c:	d009      	beq.n	800aa72 <pbuf_alloc_reference+0x2a>
 800aa5e:	883b      	ldrh	r3, [r7, #0]
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d006      	beq.n	800aa72 <pbuf_alloc_reference+0x2a>
 800aa64:	4b0f      	ldr	r3, [pc, #60]	; (800aaa4 <pbuf_alloc_reference+0x5c>)
 800aa66:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800aa6a:	490f      	ldr	r1, [pc, #60]	; (800aaa8 <pbuf_alloc_reference+0x60>)
 800aa6c:	480f      	ldr	r0, [pc, #60]	; (800aaac <pbuf_alloc_reference+0x64>)
 800aa6e:	f009 faf9 	bl	8014064 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800aa72:	2007      	movs	r0, #7
 800aa74:	f7ff faf0 	bl	800a058 <memp_malloc>
 800aa78:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d101      	bne.n	800aa84 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800aa80:	2300      	movs	r3, #0
 800aa82:	e00b      	b.n	800aa9c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800aa84:	8879      	ldrh	r1, [r7, #2]
 800aa86:	887a      	ldrh	r2, [r7, #2]
 800aa88:	2300      	movs	r3, #0
 800aa8a:	9301      	str	r3, [sp, #4]
 800aa8c:	883b      	ldrh	r3, [r7, #0]
 800aa8e:	9300      	str	r3, [sp, #0]
 800aa90:	460b      	mov	r3, r1
 800aa92:	6879      	ldr	r1, [r7, #4]
 800aa94:	68f8      	ldr	r0, [r7, #12]
 800aa96:	f7ff feb7 	bl	800a808 <pbuf_init_alloced_pbuf>
  return p;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3710      	adds	r7, #16
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	0801594c 	.word	0x0801594c
 800aaa8:	08015a50 	.word	0x08015a50
 800aaac:	080159ac 	.word	0x080159ac

0800aab0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b088      	sub	sp, #32
 800aab4:	af02      	add	r7, sp, #8
 800aab6:	607b      	str	r3, [r7, #4]
 800aab8:	4603      	mov	r3, r0
 800aaba:	73fb      	strb	r3, [r7, #15]
 800aabc:	460b      	mov	r3, r1
 800aabe:	81bb      	strh	r3, [r7, #12]
 800aac0:	4613      	mov	r3, r2
 800aac2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800aac4:	7bfb      	ldrb	r3, [r7, #15]
 800aac6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800aac8:	8a7b      	ldrh	r3, [r7, #18]
 800aaca:	3303      	adds	r3, #3
 800aacc:	f023 0203 	bic.w	r2, r3, #3
 800aad0:	89bb      	ldrh	r3, [r7, #12]
 800aad2:	441a      	add	r2, r3
 800aad4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d901      	bls.n	800aade <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800aada:	2300      	movs	r3, #0
 800aadc:	e018      	b.n	800ab10 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800aade:	6a3b      	ldr	r3, [r7, #32]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d007      	beq.n	800aaf4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800aae4:	8a7b      	ldrh	r3, [r7, #18]
 800aae6:	3303      	adds	r3, #3
 800aae8:	f023 0303 	bic.w	r3, r3, #3
 800aaec:	6a3a      	ldr	r2, [r7, #32]
 800aaee:	4413      	add	r3, r2
 800aaf0:	617b      	str	r3, [r7, #20]
 800aaf2:	e001      	b.n	800aaf8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	89b9      	ldrh	r1, [r7, #12]
 800aafc:	89ba      	ldrh	r2, [r7, #12]
 800aafe:	2302      	movs	r3, #2
 800ab00:	9301      	str	r3, [sp, #4]
 800ab02:	897b      	ldrh	r3, [r7, #10]
 800ab04:	9300      	str	r3, [sp, #0]
 800ab06:	460b      	mov	r3, r1
 800ab08:	6979      	ldr	r1, [r7, #20]
 800ab0a:	f7ff fe7d 	bl	800a808 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ab0e:	687b      	ldr	r3, [r7, #4]
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3718      	adds	r7, #24
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	460b      	mov	r3, r1
 800ab22:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d106      	bne.n	800ab38 <pbuf_realloc+0x20>
 800ab2a:	4b39      	ldr	r3, [pc, #228]	; (800ac10 <pbuf_realloc+0xf8>)
 800ab2c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ab30:	4938      	ldr	r1, [pc, #224]	; (800ac14 <pbuf_realloc+0xfc>)
 800ab32:	4839      	ldr	r0, [pc, #228]	; (800ac18 <pbuf_realloc+0x100>)
 800ab34:	f009 fa96 	bl	8014064 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	891b      	ldrh	r3, [r3, #8]
 800ab3c:	887a      	ldrh	r2, [r7, #2]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d261      	bcs.n	800ac06 <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	891a      	ldrh	r2, [r3, #8]
 800ab46:	887b      	ldrh	r3, [r7, #2]
 800ab48:	1ad3      	subs	r3, r2, r3
 800ab4a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ab4c:	887b      	ldrh	r3, [r7, #2]
 800ab4e:	817b      	strh	r3, [r7, #10]
  q = p;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ab54:	e018      	b.n	800ab88 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	895b      	ldrh	r3, [r3, #10]
 800ab5a:	897a      	ldrh	r2, [r7, #10]
 800ab5c:	1ad3      	subs	r3, r2, r3
 800ab5e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	891a      	ldrh	r2, [r3, #8]
 800ab64:	893b      	ldrh	r3, [r7, #8]
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	b29a      	uxth	r2, r3
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d106      	bne.n	800ab88 <pbuf_realloc+0x70>
 800ab7a:	4b25      	ldr	r3, [pc, #148]	; (800ac10 <pbuf_realloc+0xf8>)
 800ab7c:	f240 12af 	movw	r2, #431	; 0x1af
 800ab80:	4926      	ldr	r1, [pc, #152]	; (800ac1c <pbuf_realloc+0x104>)
 800ab82:	4825      	ldr	r0, [pc, #148]	; (800ac18 <pbuf_realloc+0x100>)
 800ab84:	f009 fa6e 	bl	8014064 <iprintf>
  while (rem_len > q->len) {
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	895b      	ldrh	r3, [r3, #10]
 800ab8c:	897a      	ldrh	r2, [r7, #10]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d8e1      	bhi.n	800ab56 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	7b1b      	ldrb	r3, [r3, #12]
 800ab96:	f003 030f 	and.w	r3, r3, #15
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d11f      	bne.n	800abde <pbuf_realloc+0xc6>
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	895b      	ldrh	r3, [r3, #10]
 800aba2:	897a      	ldrh	r2, [r7, #10]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d01a      	beq.n	800abde <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	7b5b      	ldrb	r3, [r3, #13]
 800abac:	f003 0302 	and.w	r3, r3, #2
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d114      	bne.n	800abde <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	685a      	ldr	r2, [r3, #4]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	1ad2      	subs	r2, r2, r3
 800abbc:	897b      	ldrh	r3, [r7, #10]
 800abbe:	4413      	add	r3, r2
 800abc0:	4619      	mov	r1, r3
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f7fe ffcc 	bl	8009b60 <mem_trim>
 800abc8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d106      	bne.n	800abde <pbuf_realloc+0xc6>
 800abd0:	4b0f      	ldr	r3, [pc, #60]	; (800ac10 <pbuf_realloc+0xf8>)
 800abd2:	f240 12bd 	movw	r2, #445	; 0x1bd
 800abd6:	4912      	ldr	r1, [pc, #72]	; (800ac20 <pbuf_realloc+0x108>)
 800abd8:	480f      	ldr	r0, [pc, #60]	; (800ac18 <pbuf_realloc+0x100>)
 800abda:	f009 fa43 	bl	8014064 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	897a      	ldrh	r2, [r7, #10]
 800abe2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	895a      	ldrh	r2, [r3, #10]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d004      	beq.n	800abfe <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4618      	mov	r0, r3
 800abfa:	f000 f911 	bl	800ae20 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2200      	movs	r2, #0
 800ac02:	601a      	str	r2, [r3, #0]
 800ac04:	e000      	b.n	800ac08 <pbuf_realloc+0xf0>
    return;
 800ac06:	bf00      	nop

}
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	0801594c 	.word	0x0801594c
 800ac14:	08015a64 	.word	0x08015a64
 800ac18:	080159ac 	.word	0x080159ac
 800ac1c:	08015a7c 	.word	0x08015a7c
 800ac20:	08015a94 	.word	0x08015a94

0800ac24 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b086      	sub	sp, #24
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	60b9      	str	r1, [r7, #8]
 800ac2e:	4613      	mov	r3, r2
 800ac30:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d106      	bne.n	800ac46 <pbuf_add_header_impl+0x22>
 800ac38:	4b2b      	ldr	r3, [pc, #172]	; (800ace8 <pbuf_add_header_impl+0xc4>)
 800ac3a:	f240 12df 	movw	r2, #479	; 0x1df
 800ac3e:	492b      	ldr	r1, [pc, #172]	; (800acec <pbuf_add_header_impl+0xc8>)
 800ac40:	482b      	ldr	r0, [pc, #172]	; (800acf0 <pbuf_add_header_impl+0xcc>)
 800ac42:	f009 fa0f 	bl	8014064 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d003      	beq.n	800ac54 <pbuf_add_header_impl+0x30>
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac52:	d301      	bcc.n	800ac58 <pbuf_add_header_impl+0x34>
    return 1;
 800ac54:	2301      	movs	r3, #1
 800ac56:	e043      	b.n	800ace0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d101      	bne.n	800ac62 <pbuf_add_header_impl+0x3e>
    return 0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	e03e      	b.n	800ace0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	891a      	ldrh	r2, [r3, #8]
 800ac6a:	8a7b      	ldrh	r3, [r7, #18]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	8a7a      	ldrh	r2, [r7, #18]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d901      	bls.n	800ac7a <pbuf_add_header_impl+0x56>
    return 1;
 800ac76:	2301      	movs	r3, #1
 800ac78:	e032      	b.n	800ace0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	7b1b      	ldrb	r3, [r3, #12]
 800ac7e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ac80:	8a3b      	ldrh	r3, [r7, #16]
 800ac82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00c      	beq.n	800aca4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	685a      	ldr	r2, [r3, #4]
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	425b      	negs	r3, r3
 800ac92:	4413      	add	r3, r2
 800ac94:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	3310      	adds	r3, #16
 800ac9a:	697a      	ldr	r2, [r7, #20]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d20d      	bcs.n	800acbc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800aca0:	2301      	movs	r3, #1
 800aca2:	e01d      	b.n	800ace0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800aca4:	79fb      	ldrb	r3, [r7, #7]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d006      	beq.n	800acb8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	685a      	ldr	r2, [r3, #4]
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	425b      	negs	r3, r3
 800acb2:	4413      	add	r3, r2
 800acb4:	617b      	str	r3, [r7, #20]
 800acb6:	e001      	b.n	800acbc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800acb8:	2301      	movs	r3, #1
 800acba:	e011      	b.n	800ace0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	697a      	ldr	r2, [r7, #20]
 800acc0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	895a      	ldrh	r2, [r3, #10]
 800acc6:	8a7b      	ldrh	r3, [r7, #18]
 800acc8:	4413      	add	r3, r2
 800acca:	b29a      	uxth	r2, r3
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	891a      	ldrh	r2, [r3, #8]
 800acd4:	8a7b      	ldrh	r3, [r7, #18]
 800acd6:	4413      	add	r3, r2
 800acd8:	b29a      	uxth	r2, r3
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	811a      	strh	r2, [r3, #8]


  return 0;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3718      	adds	r7, #24
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	0801594c 	.word	0x0801594c
 800acec:	08015ab0 	.word	0x08015ab0
 800acf0:	080159ac 	.word	0x080159ac

0800acf4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800acfe:	2200      	movs	r2, #0
 800ad00:	6839      	ldr	r1, [r7, #0]
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f7ff ff8e 	bl	800ac24 <pbuf_add_header_impl>
 800ad08:	4603      	mov	r3, r0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3708      	adds	r7, #8
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
	...

0800ad14 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d106      	bne.n	800ad32 <pbuf_remove_header+0x1e>
 800ad24:	4b20      	ldr	r3, [pc, #128]	; (800ada8 <pbuf_remove_header+0x94>)
 800ad26:	f240 224b 	movw	r2, #587	; 0x24b
 800ad2a:	4920      	ldr	r1, [pc, #128]	; (800adac <pbuf_remove_header+0x98>)
 800ad2c:	4820      	ldr	r0, [pc, #128]	; (800adb0 <pbuf_remove_header+0x9c>)
 800ad2e:	f009 f999 	bl	8014064 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d003      	beq.n	800ad40 <pbuf_remove_header+0x2c>
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad3e:	d301      	bcc.n	800ad44 <pbuf_remove_header+0x30>
    return 1;
 800ad40:	2301      	movs	r3, #1
 800ad42:	e02c      	b.n	800ad9e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d101      	bne.n	800ad4e <pbuf_remove_header+0x3a>
    return 0;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	e027      	b.n	800ad9e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	895b      	ldrh	r3, [r3, #10]
 800ad56:	89fa      	ldrh	r2, [r7, #14]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d908      	bls.n	800ad6e <pbuf_remove_header+0x5a>
 800ad5c:	4b12      	ldr	r3, [pc, #72]	; (800ada8 <pbuf_remove_header+0x94>)
 800ad5e:	f240 2255 	movw	r2, #597	; 0x255
 800ad62:	4914      	ldr	r1, [pc, #80]	; (800adb4 <pbuf_remove_header+0xa0>)
 800ad64:	4812      	ldr	r0, [pc, #72]	; (800adb0 <pbuf_remove_header+0x9c>)
 800ad66:	f009 f97d 	bl	8014064 <iprintf>
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e017      	b.n	800ad9e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	685a      	ldr	r2, [r3, #4]
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	441a      	add	r2, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	895a      	ldrh	r2, [r3, #10]
 800ad84:	89fb      	ldrh	r3, [r7, #14]
 800ad86:	1ad3      	subs	r3, r2, r3
 800ad88:	b29a      	uxth	r2, r3
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	891a      	ldrh	r2, [r3, #8]
 800ad92:	89fb      	ldrh	r3, [r7, #14]
 800ad94:	1ad3      	subs	r3, r2, r3
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3710      	adds	r7, #16
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	0801594c 	.word	0x0801594c
 800adac:	08015ab0 	.word	0x08015ab0
 800adb0:	080159ac 	.word	0x080159ac
 800adb4:	08015abc 	.word	0x08015abc

0800adb8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	460b      	mov	r3, r1
 800adc2:	807b      	strh	r3, [r7, #2]
 800adc4:	4613      	mov	r3, r2
 800adc6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800adc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	da08      	bge.n	800ade2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800add0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800add4:	425b      	negs	r3, r3
 800add6:	4619      	mov	r1, r3
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f7ff ff9b 	bl	800ad14 <pbuf_remove_header>
 800adde:	4603      	mov	r3, r0
 800ade0:	e007      	b.n	800adf2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ade2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ade6:	787a      	ldrb	r2, [r7, #1]
 800ade8:	4619      	mov	r1, r3
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f7ff ff1a 	bl	800ac24 <pbuf_add_header_impl>
 800adf0:	4603      	mov	r3, r0
  }
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3708      	adds	r7, #8
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b082      	sub	sp, #8
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
 800ae02:	460b      	mov	r3, r1
 800ae04:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ae06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f7ff ffd2 	bl	800adb8 <pbuf_header_impl>
 800ae14:	4603      	mov	r3, r0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
	...

0800ae20 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b086      	sub	sp, #24
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d10b      	bne.n	800ae46 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d106      	bne.n	800ae42 <pbuf_free+0x22>
 800ae34:	4b38      	ldr	r3, [pc, #224]	; (800af18 <pbuf_free+0xf8>)
 800ae36:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ae3a:	4938      	ldr	r1, [pc, #224]	; (800af1c <pbuf_free+0xfc>)
 800ae3c:	4838      	ldr	r0, [pc, #224]	; (800af20 <pbuf_free+0x100>)
 800ae3e:	f009 f911 	bl	8014064 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ae42:	2300      	movs	r3, #0
 800ae44:	e063      	b.n	800af0e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ae46:	2300      	movs	r3, #0
 800ae48:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ae4a:	e05c      	b.n	800af06 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	7b9b      	ldrb	r3, [r3, #14]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d106      	bne.n	800ae62 <pbuf_free+0x42>
 800ae54:	4b30      	ldr	r3, [pc, #192]	; (800af18 <pbuf_free+0xf8>)
 800ae56:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ae5a:	4932      	ldr	r1, [pc, #200]	; (800af24 <pbuf_free+0x104>)
 800ae5c:	4830      	ldr	r0, [pc, #192]	; (800af20 <pbuf_free+0x100>)
 800ae5e:	f009 f901 	bl	8014064 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	7b9b      	ldrb	r3, [r3, #14]
 800ae66:	3b01      	subs	r3, #1
 800ae68:	b2da      	uxtb	r2, r3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	739a      	strb	r2, [r3, #14]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	7b9b      	ldrb	r3, [r3, #14]
 800ae72:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ae74:	7dbb      	ldrb	r3, [r7, #22]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d143      	bne.n	800af02 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	7b1b      	ldrb	r3, [r3, #12]
 800ae84:	f003 030f 	and.w	r3, r3, #15
 800ae88:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	7b5b      	ldrb	r3, [r3, #13]
 800ae8e:	f003 0302 	and.w	r3, r3, #2
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d011      	beq.n	800aeba <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	691b      	ldr	r3, [r3, #16]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d106      	bne.n	800aeb0 <pbuf_free+0x90>
 800aea2:	4b1d      	ldr	r3, [pc, #116]	; (800af18 <pbuf_free+0xf8>)
 800aea4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800aea8:	491f      	ldr	r1, [pc, #124]	; (800af28 <pbuf_free+0x108>)
 800aeaa:	481d      	ldr	r0, [pc, #116]	; (800af20 <pbuf_free+0x100>)
 800aeac:	f009 f8da 	bl	8014064 <iprintf>
        pc->custom_free_function(p);
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	691b      	ldr	r3, [r3, #16]
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	4798      	blx	r3
 800aeb8:	e01d      	b.n	800aef6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800aeba:	7bfb      	ldrb	r3, [r7, #15]
 800aebc:	2b02      	cmp	r3, #2
 800aebe:	d104      	bne.n	800aeca <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800aec0:	6879      	ldr	r1, [r7, #4]
 800aec2:	2008      	movs	r0, #8
 800aec4:	f7ff f938 	bl	800a138 <memp_free>
 800aec8:	e015      	b.n	800aef6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800aeca:	7bfb      	ldrb	r3, [r7, #15]
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d104      	bne.n	800aeda <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800aed0:	6879      	ldr	r1, [r7, #4]
 800aed2:	2007      	movs	r0, #7
 800aed4:	f7ff f930 	bl	800a138 <memp_free>
 800aed8:	e00d      	b.n	800aef6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800aeda:	7bfb      	ldrb	r3, [r7, #15]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d103      	bne.n	800aee8 <pbuf_free+0xc8>
          mem_free(p);
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f7fe fdd3 	bl	8009a8c <mem_free>
 800aee6:	e006      	b.n	800aef6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800aee8:	4b0b      	ldr	r3, [pc, #44]	; (800af18 <pbuf_free+0xf8>)
 800aeea:	f240 320f 	movw	r2, #783	; 0x30f
 800aeee:	490f      	ldr	r1, [pc, #60]	; (800af2c <pbuf_free+0x10c>)
 800aef0:	480b      	ldr	r0, [pc, #44]	; (800af20 <pbuf_free+0x100>)
 800aef2:	f009 f8b7 	bl	8014064 <iprintf>
        }
      }
      count++;
 800aef6:	7dfb      	ldrb	r3, [r7, #23]
 800aef8:	3301      	adds	r3, #1
 800aefa:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	607b      	str	r3, [r7, #4]
 800af00:	e001      	b.n	800af06 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800af02:	2300      	movs	r3, #0
 800af04:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d19f      	bne.n	800ae4c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800af0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3718      	adds	r7, #24
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	0801594c 	.word	0x0801594c
 800af1c:	08015ab0 	.word	0x08015ab0
 800af20:	080159ac 	.word	0x080159ac
 800af24:	08015adc 	.word	0x08015adc
 800af28:	08015af4 	.word	0x08015af4
 800af2c:	08015b18 	.word	0x08015b18

0800af30 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800af30:	b480      	push	{r7}
 800af32:	b085      	sub	sp, #20
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800af38:	2300      	movs	r3, #0
 800af3a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800af3c:	e005      	b.n	800af4a <pbuf_clen+0x1a>
    ++len;
 800af3e:	89fb      	ldrh	r3, [r7, #14]
 800af40:	3301      	adds	r3, #1
 800af42:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d1f6      	bne.n	800af3e <pbuf_clen+0xe>
  }
  return len;
 800af50:	89fb      	ldrh	r3, [r7, #14]
}
 800af52:	4618      	mov	r0, r3
 800af54:	3714      	adds	r7, #20
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr
	...

0800af60 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d010      	beq.n	800af90 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	7b9b      	ldrb	r3, [r3, #14]
 800af72:	3301      	adds	r3, #1
 800af74:	b2da      	uxtb	r2, r3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	7b9b      	ldrb	r3, [r3, #14]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d106      	bne.n	800af90 <pbuf_ref+0x30>
 800af82:	4b05      	ldr	r3, [pc, #20]	; (800af98 <pbuf_ref+0x38>)
 800af84:	f240 3242 	movw	r2, #834	; 0x342
 800af88:	4904      	ldr	r1, [pc, #16]	; (800af9c <pbuf_ref+0x3c>)
 800af8a:	4805      	ldr	r0, [pc, #20]	; (800afa0 <pbuf_ref+0x40>)
 800af8c:	f009 f86a 	bl	8014064 <iprintf>
  }
}
 800af90:	bf00      	nop
 800af92:	3708      	adds	r7, #8
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	0801594c 	.word	0x0801594c
 800af9c:	08015b2c 	.word	0x08015b2c
 800afa0:	080159ac 	.word	0x080159ac

0800afa4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d002      	beq.n	800afba <pbuf_cat+0x16>
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d107      	bne.n	800afca <pbuf_cat+0x26>
 800afba:	4b20      	ldr	r3, [pc, #128]	; (800b03c <pbuf_cat+0x98>)
 800afbc:	f240 3259 	movw	r2, #857	; 0x359
 800afc0:	491f      	ldr	r1, [pc, #124]	; (800b040 <pbuf_cat+0x9c>)
 800afc2:	4820      	ldr	r0, [pc, #128]	; (800b044 <pbuf_cat+0xa0>)
 800afc4:	f009 f84e 	bl	8014064 <iprintf>
 800afc8:	e034      	b.n	800b034 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	60fb      	str	r3, [r7, #12]
 800afce:	e00a      	b.n	800afe6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	891a      	ldrh	r2, [r3, #8]
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	891b      	ldrh	r3, [r3, #8]
 800afd8:	4413      	add	r3, r2
 800afda:	b29a      	uxth	r2, r3
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	60fb      	str	r3, [r7, #12]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1f0      	bne.n	800afd0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	891a      	ldrh	r2, [r3, #8]
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	895b      	ldrh	r3, [r3, #10]
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d006      	beq.n	800b008 <pbuf_cat+0x64>
 800affa:	4b10      	ldr	r3, [pc, #64]	; (800b03c <pbuf_cat+0x98>)
 800affc:	f240 3262 	movw	r2, #866	; 0x362
 800b000:	4911      	ldr	r1, [pc, #68]	; (800b048 <pbuf_cat+0xa4>)
 800b002:	4810      	ldr	r0, [pc, #64]	; (800b044 <pbuf_cat+0xa0>)
 800b004:	f009 f82e 	bl	8014064 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d006      	beq.n	800b01e <pbuf_cat+0x7a>
 800b010:	4b0a      	ldr	r3, [pc, #40]	; (800b03c <pbuf_cat+0x98>)
 800b012:	f240 3263 	movw	r2, #867	; 0x363
 800b016:	490d      	ldr	r1, [pc, #52]	; (800b04c <pbuf_cat+0xa8>)
 800b018:	480a      	ldr	r0, [pc, #40]	; (800b044 <pbuf_cat+0xa0>)
 800b01a:	f009 f823 	bl	8014064 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	891a      	ldrh	r2, [r3, #8]
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	891b      	ldrh	r3, [r3, #8]
 800b026:	4413      	add	r3, r2
 800b028:	b29a      	uxth	r2, r3
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	683a      	ldr	r2, [r7, #0]
 800b032:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	0801594c 	.word	0x0801594c
 800b040:	08015b40 	.word	0x08015b40
 800b044:	080159ac 	.word	0x080159ac
 800b048:	08015b78 	.word	0x08015b78
 800b04c:	08015ba8 	.word	0x08015ba8

0800b050 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b086      	sub	sp, #24
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b05a:	2300      	movs	r3, #0
 800b05c:	617b      	str	r3, [r7, #20]
 800b05e:	2300      	movs	r3, #0
 800b060:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d008      	beq.n	800b07a <pbuf_copy+0x2a>
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d005      	beq.n	800b07a <pbuf_copy+0x2a>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	891a      	ldrh	r2, [r3, #8]
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	891b      	ldrh	r3, [r3, #8]
 800b076:	429a      	cmp	r2, r3
 800b078:	d209      	bcs.n	800b08e <pbuf_copy+0x3e>
 800b07a:	4b57      	ldr	r3, [pc, #348]	; (800b1d8 <pbuf_copy+0x188>)
 800b07c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b080:	4956      	ldr	r1, [pc, #344]	; (800b1dc <pbuf_copy+0x18c>)
 800b082:	4857      	ldr	r0, [pc, #348]	; (800b1e0 <pbuf_copy+0x190>)
 800b084:	f008 ffee 	bl	8014064 <iprintf>
 800b088:	f06f 030f 	mvn.w	r3, #15
 800b08c:	e09f      	b.n	800b1ce <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	895b      	ldrh	r3, [r3, #10]
 800b092:	461a      	mov	r2, r3
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	1ad2      	subs	r2, r2, r3
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	895b      	ldrh	r3, [r3, #10]
 800b09c:	4619      	mov	r1, r3
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	1acb      	subs	r3, r1, r3
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d306      	bcc.n	800b0b4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	895b      	ldrh	r3, [r3, #10]
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	1ad3      	subs	r3, r2, r3
 800b0b0:	60fb      	str	r3, [r7, #12]
 800b0b2:	e005      	b.n	800b0c0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	895b      	ldrh	r3, [r3, #10]
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	1ad3      	subs	r3, r2, r3
 800b0be:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	685a      	ldr	r2, [r3, #4]
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	18d0      	adds	r0, r2, r3
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	685a      	ldr	r2, [r3, #4]
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	4413      	add	r3, r2
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	f008 ffb0 	bl	8014038 <memcpy>
    offset_to += len;
 800b0d8:	697a      	ldr	r2, [r7, #20]
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	4413      	add	r3, r2
 800b0de:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b0e0:	693a      	ldr	r2, [r7, #16]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	4413      	add	r3, r2
 800b0e6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	895b      	ldrh	r3, [r3, #10]
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d906      	bls.n	800b102 <pbuf_copy+0xb2>
 800b0f4:	4b38      	ldr	r3, [pc, #224]	; (800b1d8 <pbuf_copy+0x188>)
 800b0f6:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b0fa:	493a      	ldr	r1, [pc, #232]	; (800b1e4 <pbuf_copy+0x194>)
 800b0fc:	4838      	ldr	r0, [pc, #224]	; (800b1e0 <pbuf_copy+0x190>)
 800b0fe:	f008 ffb1 	bl	8014064 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	895b      	ldrh	r3, [r3, #10]
 800b106:	461a      	mov	r2, r3
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d906      	bls.n	800b11c <pbuf_copy+0xcc>
 800b10e:	4b32      	ldr	r3, [pc, #200]	; (800b1d8 <pbuf_copy+0x188>)
 800b110:	f240 32da 	movw	r2, #986	; 0x3da
 800b114:	4934      	ldr	r1, [pc, #208]	; (800b1e8 <pbuf_copy+0x198>)
 800b116:	4832      	ldr	r0, [pc, #200]	; (800b1e0 <pbuf_copy+0x190>)
 800b118:	f008 ffa4 	bl	8014064 <iprintf>
    if (offset_from >= p_from->len) {
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	895b      	ldrh	r3, [r3, #10]
 800b120:	461a      	mov	r2, r3
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	4293      	cmp	r3, r2
 800b126:	d304      	bcc.n	800b132 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b128:	2300      	movs	r3, #0
 800b12a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	895b      	ldrh	r3, [r3, #10]
 800b136:	461a      	mov	r2, r3
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d114      	bne.n	800b168 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b13e:	2300      	movs	r3, #0
 800b140:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d10c      	bne.n	800b168 <pbuf_copy+0x118>
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d009      	beq.n	800b168 <pbuf_copy+0x118>
 800b154:	4b20      	ldr	r3, [pc, #128]	; (800b1d8 <pbuf_copy+0x188>)
 800b156:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b15a:	4924      	ldr	r1, [pc, #144]	; (800b1ec <pbuf_copy+0x19c>)
 800b15c:	4820      	ldr	r0, [pc, #128]	; (800b1e0 <pbuf_copy+0x190>)
 800b15e:	f008 ff81 	bl	8014064 <iprintf>
 800b162:	f06f 030f 	mvn.w	r3, #15
 800b166:	e032      	b.n	800b1ce <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d013      	beq.n	800b196 <pbuf_copy+0x146>
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	895a      	ldrh	r2, [r3, #10]
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	891b      	ldrh	r3, [r3, #8]
 800b176:	429a      	cmp	r2, r3
 800b178:	d10d      	bne.n	800b196 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d009      	beq.n	800b196 <pbuf_copy+0x146>
 800b182:	4b15      	ldr	r3, [pc, #84]	; (800b1d8 <pbuf_copy+0x188>)
 800b184:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800b188:	4919      	ldr	r1, [pc, #100]	; (800b1f0 <pbuf_copy+0x1a0>)
 800b18a:	4815      	ldr	r0, [pc, #84]	; (800b1e0 <pbuf_copy+0x190>)
 800b18c:	f008 ff6a 	bl	8014064 <iprintf>
 800b190:	f06f 0305 	mvn.w	r3, #5
 800b194:	e01b      	b.n	800b1ce <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d013      	beq.n	800b1c4 <pbuf_copy+0x174>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	895a      	ldrh	r2, [r3, #10]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	891b      	ldrh	r3, [r3, #8]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d10d      	bne.n	800b1c4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d009      	beq.n	800b1c4 <pbuf_copy+0x174>
 800b1b0:	4b09      	ldr	r3, [pc, #36]	; (800b1d8 <pbuf_copy+0x188>)
 800b1b2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b1b6:	490e      	ldr	r1, [pc, #56]	; (800b1f0 <pbuf_copy+0x1a0>)
 800b1b8:	4809      	ldr	r0, [pc, #36]	; (800b1e0 <pbuf_copy+0x190>)
 800b1ba:	f008 ff53 	bl	8014064 <iprintf>
 800b1be:	f06f 0305 	mvn.w	r3, #5
 800b1c2:	e004      	b.n	800b1ce <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f47f af61 	bne.w	800b08e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b1cc:	2300      	movs	r3, #0
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3718      	adds	r7, #24
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
 800b1d6:	bf00      	nop
 800b1d8:	0801594c 	.word	0x0801594c
 800b1dc:	08015bf4 	.word	0x08015bf4
 800b1e0:	080159ac 	.word	0x080159ac
 800b1e4:	08015c24 	.word	0x08015c24
 800b1e8:	08015c3c 	.word	0x08015c3c
 800b1ec:	08015c58 	.word	0x08015c58
 800b1f0:	08015c68 	.word	0x08015c68

0800b1f4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b088      	sub	sp, #32
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	4611      	mov	r1, r2
 800b200:	461a      	mov	r2, r3
 800b202:	460b      	mov	r3, r1
 800b204:	80fb      	strh	r3, [r7, #6]
 800b206:	4613      	mov	r3, r2
 800b208:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b20a:	2300      	movs	r3, #0
 800b20c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b20e:	2300      	movs	r3, #0
 800b210:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d108      	bne.n	800b22a <pbuf_copy_partial+0x36>
 800b218:	4b2b      	ldr	r3, [pc, #172]	; (800b2c8 <pbuf_copy_partial+0xd4>)
 800b21a:	f240 420a 	movw	r2, #1034	; 0x40a
 800b21e:	492b      	ldr	r1, [pc, #172]	; (800b2cc <pbuf_copy_partial+0xd8>)
 800b220:	482b      	ldr	r0, [pc, #172]	; (800b2d0 <pbuf_copy_partial+0xdc>)
 800b222:	f008 ff1f 	bl	8014064 <iprintf>
 800b226:	2300      	movs	r3, #0
 800b228:	e04a      	b.n	800b2c0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d108      	bne.n	800b242 <pbuf_copy_partial+0x4e>
 800b230:	4b25      	ldr	r3, [pc, #148]	; (800b2c8 <pbuf_copy_partial+0xd4>)
 800b232:	f240 420b 	movw	r2, #1035	; 0x40b
 800b236:	4927      	ldr	r1, [pc, #156]	; (800b2d4 <pbuf_copy_partial+0xe0>)
 800b238:	4825      	ldr	r0, [pc, #148]	; (800b2d0 <pbuf_copy_partial+0xdc>)
 800b23a:	f008 ff13 	bl	8014064 <iprintf>
 800b23e:	2300      	movs	r3, #0
 800b240:	e03e      	b.n	800b2c0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	61fb      	str	r3, [r7, #28]
 800b246:	e034      	b.n	800b2b2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b248:	88bb      	ldrh	r3, [r7, #4]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d00a      	beq.n	800b264 <pbuf_copy_partial+0x70>
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	895b      	ldrh	r3, [r3, #10]
 800b252:	88ba      	ldrh	r2, [r7, #4]
 800b254:	429a      	cmp	r2, r3
 800b256:	d305      	bcc.n	800b264 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b258:	69fb      	ldr	r3, [r7, #28]
 800b25a:	895b      	ldrh	r3, [r3, #10]
 800b25c:	88ba      	ldrh	r2, [r7, #4]
 800b25e:	1ad3      	subs	r3, r2, r3
 800b260:	80bb      	strh	r3, [r7, #4]
 800b262:	e023      	b.n	800b2ac <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b264:	69fb      	ldr	r3, [r7, #28]
 800b266:	895a      	ldrh	r2, [r3, #10]
 800b268:	88bb      	ldrh	r3, [r7, #4]
 800b26a:	1ad3      	subs	r3, r2, r3
 800b26c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b26e:	8b3a      	ldrh	r2, [r7, #24]
 800b270:	88fb      	ldrh	r3, [r7, #6]
 800b272:	429a      	cmp	r2, r3
 800b274:	d901      	bls.n	800b27a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b276:	88fb      	ldrh	r3, [r7, #6]
 800b278:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b27a:	8b7b      	ldrh	r3, [r7, #26]
 800b27c:	68ba      	ldr	r2, [r7, #8]
 800b27e:	18d0      	adds	r0, r2, r3
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	685a      	ldr	r2, [r3, #4]
 800b284:	88bb      	ldrh	r3, [r7, #4]
 800b286:	4413      	add	r3, r2
 800b288:	8b3a      	ldrh	r2, [r7, #24]
 800b28a:	4619      	mov	r1, r3
 800b28c:	f008 fed4 	bl	8014038 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b290:	8afa      	ldrh	r2, [r7, #22]
 800b292:	8b3b      	ldrh	r3, [r7, #24]
 800b294:	4413      	add	r3, r2
 800b296:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b298:	8b7a      	ldrh	r2, [r7, #26]
 800b29a:	8b3b      	ldrh	r3, [r7, #24]
 800b29c:	4413      	add	r3, r2
 800b29e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b2a0:	88fa      	ldrh	r2, [r7, #6]
 800b2a2:	8b3b      	ldrh	r3, [r7, #24]
 800b2a4:	1ad3      	subs	r3, r2, r3
 800b2a6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b2ac:	69fb      	ldr	r3, [r7, #28]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	61fb      	str	r3, [r7, #28]
 800b2b2:	88fb      	ldrh	r3, [r7, #6]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d002      	beq.n	800b2be <pbuf_copy_partial+0xca>
 800b2b8:	69fb      	ldr	r3, [r7, #28]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d1c4      	bne.n	800b248 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b2be:	8afb      	ldrh	r3, [r7, #22]
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3720      	adds	r7, #32
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	0801594c 	.word	0x0801594c
 800b2cc:	08015c94 	.word	0x08015c94
 800b2d0:	080159ac 	.word	0x080159ac
 800b2d4:	08015cb4 	.word	0x08015cb4

0800b2d8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	4603      	mov	r3, r0
 800b2e0:	603a      	str	r2, [r7, #0]
 800b2e2:	71fb      	strb	r3, [r7, #7]
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	8919      	ldrh	r1, [r3, #8]
 800b2ec:	88ba      	ldrh	r2, [r7, #4]
 800b2ee:	79fb      	ldrb	r3, [r7, #7]
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f7ff fab3 	bl	800a85c <pbuf_alloc>
 800b2f6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d101      	bne.n	800b302 <pbuf_clone+0x2a>
    return NULL;
 800b2fe:	2300      	movs	r3, #0
 800b300:	e011      	b.n	800b326 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b302:	6839      	ldr	r1, [r7, #0]
 800b304:	68f8      	ldr	r0, [r7, #12]
 800b306:	f7ff fea3 	bl	800b050 <pbuf_copy>
 800b30a:	4603      	mov	r3, r0
 800b30c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b30e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d006      	beq.n	800b324 <pbuf_clone+0x4c>
 800b316:	4b06      	ldr	r3, [pc, #24]	; (800b330 <pbuf_clone+0x58>)
 800b318:	f240 5224 	movw	r2, #1316	; 0x524
 800b31c:	4905      	ldr	r1, [pc, #20]	; (800b334 <pbuf_clone+0x5c>)
 800b31e:	4806      	ldr	r0, [pc, #24]	; (800b338 <pbuf_clone+0x60>)
 800b320:	f008 fea0 	bl	8014064 <iprintf>
  return q;
 800b324:	68fb      	ldr	r3, [r7, #12]
}
 800b326:	4618      	mov	r0, r3
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	0801594c 	.word	0x0801594c
 800b334:	08015dc0 	.word	0x08015dc0
 800b338:	080159ac 	.word	0x080159ac

0800b33c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b340:	f008 fea8 	bl	8014094 <rand>
 800b344:	4603      	mov	r3, r0
 800b346:	b29b      	uxth	r3, r3
 800b348:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b352:	b29a      	uxth	r2, r3
 800b354:	4b01      	ldr	r3, [pc, #4]	; (800b35c <tcp_init+0x20>)
 800b356:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b358:	bf00      	nop
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	24000024 	.word	0x24000024

0800b360 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	7d1b      	ldrb	r3, [r3, #20]
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d105      	bne.n	800b37c <tcp_free+0x1c>
 800b370:	4b06      	ldr	r3, [pc, #24]	; (800b38c <tcp_free+0x2c>)
 800b372:	22d4      	movs	r2, #212	; 0xd4
 800b374:	4906      	ldr	r1, [pc, #24]	; (800b390 <tcp_free+0x30>)
 800b376:	4807      	ldr	r0, [pc, #28]	; (800b394 <tcp_free+0x34>)
 800b378:	f008 fe74 	bl	8014064 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b37c:	6879      	ldr	r1, [r7, #4]
 800b37e:	2001      	movs	r0, #1
 800b380:	f7fe feda 	bl	800a138 <memp_free>
}
 800b384:	bf00      	nop
 800b386:	3708      	adds	r7, #8
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}
 800b38c:	08015e4c 	.word	0x08015e4c
 800b390:	08015e7c 	.word	0x08015e7c
 800b394:	08015e90 	.word	0x08015e90

0800b398 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	7d1b      	ldrb	r3, [r3, #20]
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d105      	bne.n	800b3b4 <tcp_free_listen+0x1c>
 800b3a8:	4b06      	ldr	r3, [pc, #24]	; (800b3c4 <tcp_free_listen+0x2c>)
 800b3aa:	22df      	movs	r2, #223	; 0xdf
 800b3ac:	4906      	ldr	r1, [pc, #24]	; (800b3c8 <tcp_free_listen+0x30>)
 800b3ae:	4807      	ldr	r0, [pc, #28]	; (800b3cc <tcp_free_listen+0x34>)
 800b3b0:	f008 fe58 	bl	8014064 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b3b4:	6879      	ldr	r1, [r7, #4]
 800b3b6:	2002      	movs	r0, #2
 800b3b8:	f7fe febe 	bl	800a138 <memp_free>
}
 800b3bc:	bf00      	nop
 800b3be:	3708      	adds	r7, #8
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	08015e4c 	.word	0x08015e4c
 800b3c8:	08015eb8 	.word	0x08015eb8
 800b3cc:	08015e90 	.word	0x08015e90

0800b3d0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b3d4:	f001 f85c 	bl	800c490 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b3d8:	4b07      	ldr	r3, [pc, #28]	; (800b3f8 <tcp_tmr+0x28>)
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	b2da      	uxtb	r2, r3
 800b3e0:	4b05      	ldr	r3, [pc, #20]	; (800b3f8 <tcp_tmr+0x28>)
 800b3e2:	701a      	strb	r2, [r3, #0]
 800b3e4:	4b04      	ldr	r3, [pc, #16]	; (800b3f8 <tcp_tmr+0x28>)
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	f003 0301 	and.w	r3, r3, #1
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d001      	beq.n	800b3f4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b3f0:	f000 fd0e 	bl	800be10 <tcp_slowtmr>
  }
}
 800b3f4:	bf00      	nop
 800b3f6:	bd80      	pop	{r7, pc}
 800b3f8:	240035ed 	.word	0x240035ed

0800b3fc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d105      	bne.n	800b418 <tcp_remove_listener+0x1c>
 800b40c:	4b0d      	ldr	r3, [pc, #52]	; (800b444 <tcp_remove_listener+0x48>)
 800b40e:	22ff      	movs	r2, #255	; 0xff
 800b410:	490d      	ldr	r1, [pc, #52]	; (800b448 <tcp_remove_listener+0x4c>)
 800b412:	480e      	ldr	r0, [pc, #56]	; (800b44c <tcp_remove_listener+0x50>)
 800b414:	f008 fe26 	bl	8014064 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	60fb      	str	r3, [r7, #12]
 800b41c:	e00a      	b.n	800b434 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b422:	683a      	ldr	r2, [r7, #0]
 800b424:	429a      	cmp	r2, r3
 800b426:	d102      	bne.n	800b42e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2200      	movs	r2, #0
 800b42c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	60fb      	str	r3, [r7, #12]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d1f1      	bne.n	800b41e <tcp_remove_listener+0x22>
    }
  }
}
 800b43a:	bf00      	nop
 800b43c:	bf00      	nop
 800b43e:	3710      	adds	r7, #16
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}
 800b444:	08015e4c 	.word	0x08015e4c
 800b448:	08015ed4 	.word	0x08015ed4
 800b44c:	08015e90 	.word	0x08015e90

0800b450 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d106      	bne.n	800b46c <tcp_listen_closed+0x1c>
 800b45e:	4b14      	ldr	r3, [pc, #80]	; (800b4b0 <tcp_listen_closed+0x60>)
 800b460:	f240 1211 	movw	r2, #273	; 0x111
 800b464:	4913      	ldr	r1, [pc, #76]	; (800b4b4 <tcp_listen_closed+0x64>)
 800b466:	4814      	ldr	r0, [pc, #80]	; (800b4b8 <tcp_listen_closed+0x68>)
 800b468:	f008 fdfc 	bl	8014064 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	7d1b      	ldrb	r3, [r3, #20]
 800b470:	2b01      	cmp	r3, #1
 800b472:	d006      	beq.n	800b482 <tcp_listen_closed+0x32>
 800b474:	4b0e      	ldr	r3, [pc, #56]	; (800b4b0 <tcp_listen_closed+0x60>)
 800b476:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b47a:	4910      	ldr	r1, [pc, #64]	; (800b4bc <tcp_listen_closed+0x6c>)
 800b47c:	480e      	ldr	r0, [pc, #56]	; (800b4b8 <tcp_listen_closed+0x68>)
 800b47e:	f008 fdf1 	bl	8014064 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b482:	2301      	movs	r3, #1
 800b484:	60fb      	str	r3, [r7, #12]
 800b486:	e00b      	b.n	800b4a0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b488:	4a0d      	ldr	r2, [pc, #52]	; (800b4c0 <tcp_listen_closed+0x70>)
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	6879      	ldr	r1, [r7, #4]
 800b494:	4618      	mov	r0, r3
 800b496:	f7ff ffb1 	bl	800b3fc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	3301      	adds	r3, #1
 800b49e:	60fb      	str	r3, [r7, #12]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2b03      	cmp	r3, #3
 800b4a4:	d9f0      	bls.n	800b488 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b4a6:	bf00      	nop
 800b4a8:	bf00      	nop
 800b4aa:	3710      	adds	r7, #16
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}
 800b4b0:	08015e4c 	.word	0x08015e4c
 800b4b4:	08015efc 	.word	0x08015efc
 800b4b8:	08015e90 	.word	0x08015e90
 800b4bc:	08015f08 	.word	0x08015f08
 800b4c0:	08018c20 	.word	0x08018c20

0800b4c4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b4c4:	b5b0      	push	{r4, r5, r7, lr}
 800b4c6:	b088      	sub	sp, #32
 800b4c8:	af04      	add	r7, sp, #16
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d106      	bne.n	800b4e4 <tcp_close_shutdown+0x20>
 800b4d6:	4b63      	ldr	r3, [pc, #396]	; (800b664 <tcp_close_shutdown+0x1a0>)
 800b4d8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b4dc:	4962      	ldr	r1, [pc, #392]	; (800b668 <tcp_close_shutdown+0x1a4>)
 800b4de:	4863      	ldr	r0, [pc, #396]	; (800b66c <tcp_close_shutdown+0x1a8>)
 800b4e0:	f008 fdc0 	bl	8014064 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b4e4:	78fb      	ldrb	r3, [r7, #3]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d066      	beq.n	800b5b8 <tcp_close_shutdown+0xf4>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	7d1b      	ldrb	r3, [r3, #20]
 800b4ee:	2b04      	cmp	r3, #4
 800b4f0:	d003      	beq.n	800b4fa <tcp_close_shutdown+0x36>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	7d1b      	ldrb	r3, [r3, #20]
 800b4f6:	2b07      	cmp	r3, #7
 800b4f8:	d15e      	bne.n	800b5b8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d104      	bne.n	800b50c <tcp_close_shutdown+0x48>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b506:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b50a:	d055      	beq.n	800b5b8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	8b5b      	ldrh	r3, [r3, #26]
 800b510:	f003 0310 	and.w	r3, r3, #16
 800b514:	2b00      	cmp	r3, #0
 800b516:	d106      	bne.n	800b526 <tcp_close_shutdown+0x62>
 800b518:	4b52      	ldr	r3, [pc, #328]	; (800b664 <tcp_close_shutdown+0x1a0>)
 800b51a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b51e:	4954      	ldr	r1, [pc, #336]	; (800b670 <tcp_close_shutdown+0x1ac>)
 800b520:	4852      	ldr	r0, [pc, #328]	; (800b66c <tcp_close_shutdown+0x1a8>)
 800b522:	f008 fd9f 	bl	8014064 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b52e:	687d      	ldr	r5, [r7, #4]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	3304      	adds	r3, #4
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	8ad2      	ldrh	r2, [r2, #22]
 800b538:	6879      	ldr	r1, [r7, #4]
 800b53a:	8b09      	ldrh	r1, [r1, #24]
 800b53c:	9102      	str	r1, [sp, #8]
 800b53e:	9201      	str	r2, [sp, #4]
 800b540:	9300      	str	r3, [sp, #0]
 800b542:	462b      	mov	r3, r5
 800b544:	4622      	mov	r2, r4
 800b546:	4601      	mov	r1, r0
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f005 fd8f 	bl	801106c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f001 fb6c 	bl	800cc2c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b554:	4b47      	ldr	r3, [pc, #284]	; (800b674 <tcp_close_shutdown+0x1b0>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d105      	bne.n	800b56a <tcp_close_shutdown+0xa6>
 800b55e:	4b45      	ldr	r3, [pc, #276]	; (800b674 <tcp_close_shutdown+0x1b0>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	4a43      	ldr	r2, [pc, #268]	; (800b674 <tcp_close_shutdown+0x1b0>)
 800b566:	6013      	str	r3, [r2, #0]
 800b568:	e013      	b.n	800b592 <tcp_close_shutdown+0xce>
 800b56a:	4b42      	ldr	r3, [pc, #264]	; (800b674 <tcp_close_shutdown+0x1b0>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	60fb      	str	r3, [r7, #12]
 800b570:	e00c      	b.n	800b58c <tcp_close_shutdown+0xc8>
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	687a      	ldr	r2, [r7, #4]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d104      	bne.n	800b586 <tcp_close_shutdown+0xc2>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	68da      	ldr	r2, [r3, #12]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	60da      	str	r2, [r3, #12]
 800b584:	e005      	b.n	800b592 <tcp_close_shutdown+0xce>
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	68db      	ldr	r3, [r3, #12]
 800b58a:	60fb      	str	r3, [r7, #12]
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d1ef      	bne.n	800b572 <tcp_close_shutdown+0xae>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2200      	movs	r2, #0
 800b596:	60da      	str	r2, [r3, #12]
 800b598:	4b37      	ldr	r3, [pc, #220]	; (800b678 <tcp_close_shutdown+0x1b4>)
 800b59a:	2201      	movs	r2, #1
 800b59c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b59e:	4b37      	ldr	r3, [pc, #220]	; (800b67c <tcp_close_shutdown+0x1b8>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d102      	bne.n	800b5ae <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b5a8:	f004 f804 	bl	800f5b4 <tcp_trigger_input_pcb_close>
 800b5ac:	e002      	b.n	800b5b4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f7ff fed6 	bl	800b360 <tcp_free>
      }
      return ERR_OK;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	e050      	b.n	800b65a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	7d1b      	ldrb	r3, [r3, #20]
 800b5bc:	2b02      	cmp	r3, #2
 800b5be:	d03b      	beq.n	800b638 <tcp_close_shutdown+0x174>
 800b5c0:	2b02      	cmp	r3, #2
 800b5c2:	dc44      	bgt.n	800b64e <tcp_close_shutdown+0x18a>
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d002      	beq.n	800b5ce <tcp_close_shutdown+0x10a>
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d02a      	beq.n	800b622 <tcp_close_shutdown+0x15e>
 800b5cc:	e03f      	b.n	800b64e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	8adb      	ldrh	r3, [r3, #22]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d021      	beq.n	800b61a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b5d6:	4b2a      	ldr	r3, [pc, #168]	; (800b680 <tcp_close_shutdown+0x1bc>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d105      	bne.n	800b5ec <tcp_close_shutdown+0x128>
 800b5e0:	4b27      	ldr	r3, [pc, #156]	; (800b680 <tcp_close_shutdown+0x1bc>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	4a26      	ldr	r2, [pc, #152]	; (800b680 <tcp_close_shutdown+0x1bc>)
 800b5e8:	6013      	str	r3, [r2, #0]
 800b5ea:	e013      	b.n	800b614 <tcp_close_shutdown+0x150>
 800b5ec:	4b24      	ldr	r3, [pc, #144]	; (800b680 <tcp_close_shutdown+0x1bc>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	60bb      	str	r3, [r7, #8]
 800b5f2:	e00c      	b.n	800b60e <tcp_close_shutdown+0x14a>
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d104      	bne.n	800b608 <tcp_close_shutdown+0x144>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	68da      	ldr	r2, [r3, #12]
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	60da      	str	r2, [r3, #12]
 800b606:	e005      	b.n	800b614 <tcp_close_shutdown+0x150>
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	68db      	ldr	r3, [r3, #12]
 800b60c:	60bb      	str	r3, [r7, #8]
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d1ef      	bne.n	800b5f4 <tcp_close_shutdown+0x130>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2200      	movs	r2, #0
 800b618:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f7ff fea0 	bl	800b360 <tcp_free>
      break;
 800b620:	e01a      	b.n	800b658 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f7ff ff14 	bl	800b450 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b628:	6879      	ldr	r1, [r7, #4]
 800b62a:	4816      	ldr	r0, [pc, #88]	; (800b684 <tcp_close_shutdown+0x1c0>)
 800b62c:	f001 fb4e 	bl	800cccc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f7ff feb1 	bl	800b398 <tcp_free_listen>
      break;
 800b636:	e00f      	b.n	800b658 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b638:	6879      	ldr	r1, [r7, #4]
 800b63a:	480e      	ldr	r0, [pc, #56]	; (800b674 <tcp_close_shutdown+0x1b0>)
 800b63c:	f001 fb46 	bl	800cccc <tcp_pcb_remove>
 800b640:	4b0d      	ldr	r3, [pc, #52]	; (800b678 <tcp_close_shutdown+0x1b4>)
 800b642:	2201      	movs	r2, #1
 800b644:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f7ff fe8a 	bl	800b360 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b64c:	e004      	b.n	800b658 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 f81a 	bl	800b688 <tcp_close_shutdown_fin>
 800b654:	4603      	mov	r3, r0
 800b656:	e000      	b.n	800b65a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bdb0      	pop	{r4, r5, r7, pc}
 800b662:	bf00      	nop
 800b664:	08015e4c 	.word	0x08015e4c
 800b668:	08015f20 	.word	0x08015f20
 800b66c:	08015e90 	.word	0x08015e90
 800b670:	08015f40 	.word	0x08015f40
 800b674:	240035e4 	.word	0x240035e4
 800b678:	240035ec 	.word	0x240035ec
 800b67c:	24003624 	.word	0x24003624
 800b680:	240035dc 	.word	0x240035dc
 800b684:	240035e0 	.word	0x240035e0

0800b688 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d106      	bne.n	800b6a4 <tcp_close_shutdown_fin+0x1c>
 800b696:	4b2e      	ldr	r3, [pc, #184]	; (800b750 <tcp_close_shutdown_fin+0xc8>)
 800b698:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b69c:	492d      	ldr	r1, [pc, #180]	; (800b754 <tcp_close_shutdown_fin+0xcc>)
 800b69e:	482e      	ldr	r0, [pc, #184]	; (800b758 <tcp_close_shutdown_fin+0xd0>)
 800b6a0:	f008 fce0 	bl	8014064 <iprintf>

  switch (pcb->state) {
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	7d1b      	ldrb	r3, [r3, #20]
 800b6a8:	2b07      	cmp	r3, #7
 800b6aa:	d020      	beq.n	800b6ee <tcp_close_shutdown_fin+0x66>
 800b6ac:	2b07      	cmp	r3, #7
 800b6ae:	dc2b      	bgt.n	800b708 <tcp_close_shutdown_fin+0x80>
 800b6b0:	2b03      	cmp	r3, #3
 800b6b2:	d002      	beq.n	800b6ba <tcp_close_shutdown_fin+0x32>
 800b6b4:	2b04      	cmp	r3, #4
 800b6b6:	d00d      	beq.n	800b6d4 <tcp_close_shutdown_fin+0x4c>
 800b6b8:	e026      	b.n	800b708 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f004 fde4 	bl	8010288 <tcp_send_fin>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b6c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d11f      	bne.n	800b70c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2205      	movs	r2, #5
 800b6d0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b6d2:	e01b      	b.n	800b70c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f004 fdd7 	bl	8010288 <tcp_send_fin>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b6de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d114      	bne.n	800b710 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2205      	movs	r2, #5
 800b6ea:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b6ec:	e010      	b.n	800b710 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f004 fdca 	bl	8010288 <tcp_send_fin>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b6f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d109      	bne.n	800b714 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2209      	movs	r2, #9
 800b704:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b706:	e005      	b.n	800b714 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b708:	2300      	movs	r3, #0
 800b70a:	e01c      	b.n	800b746 <tcp_close_shutdown_fin+0xbe>
      break;
 800b70c:	bf00      	nop
 800b70e:	e002      	b.n	800b716 <tcp_close_shutdown_fin+0x8e>
      break;
 800b710:	bf00      	nop
 800b712:	e000      	b.n	800b716 <tcp_close_shutdown_fin+0x8e>
      break;
 800b714:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d103      	bne.n	800b726 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f004 fef0 	bl	8010504 <tcp_output>
 800b724:	e00d      	b.n	800b742 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b72e:	d108      	bne.n	800b742 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	8b5b      	ldrh	r3, [r3, #26]
 800b734:	f043 0308 	orr.w	r3, r3, #8
 800b738:	b29a      	uxth	r2, r3
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b73e:	2300      	movs	r3, #0
 800b740:	e001      	b.n	800b746 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b742:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b746:	4618      	mov	r0, r3
 800b748:	3710      	adds	r7, #16
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	08015e4c 	.word	0x08015e4c
 800b754:	08015efc 	.word	0x08015efc
 800b758:	08015e90 	.word	0x08015e90

0800b75c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d109      	bne.n	800b77e <tcp_close+0x22>
 800b76a:	4b0f      	ldr	r3, [pc, #60]	; (800b7a8 <tcp_close+0x4c>)
 800b76c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b770:	490e      	ldr	r1, [pc, #56]	; (800b7ac <tcp_close+0x50>)
 800b772:	480f      	ldr	r0, [pc, #60]	; (800b7b0 <tcp_close+0x54>)
 800b774:	f008 fc76 	bl	8014064 <iprintf>
 800b778:	f06f 030f 	mvn.w	r3, #15
 800b77c:	e00f      	b.n	800b79e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	7d1b      	ldrb	r3, [r3, #20]
 800b782:	2b01      	cmp	r3, #1
 800b784:	d006      	beq.n	800b794 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	8b5b      	ldrh	r3, [r3, #26]
 800b78a:	f043 0310 	orr.w	r3, r3, #16
 800b78e:	b29a      	uxth	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b794:	2101      	movs	r1, #1
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f7ff fe94 	bl	800b4c4 <tcp_close_shutdown>
 800b79c:	4603      	mov	r3, r0
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3708      	adds	r7, #8
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	08015e4c 	.word	0x08015e4c
 800b7ac:	08015f5c 	.word	0x08015f5c
 800b7b0:	08015e90 	.word	0x08015e90

0800b7b4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b08e      	sub	sp, #56	; 0x38
 800b7b8:	af04      	add	r7, sp, #16
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d107      	bne.n	800b7d4 <tcp_abandon+0x20>
 800b7c4:	4b52      	ldr	r3, [pc, #328]	; (800b910 <tcp_abandon+0x15c>)
 800b7c6:	f240 223d 	movw	r2, #573	; 0x23d
 800b7ca:	4952      	ldr	r1, [pc, #328]	; (800b914 <tcp_abandon+0x160>)
 800b7cc:	4852      	ldr	r0, [pc, #328]	; (800b918 <tcp_abandon+0x164>)
 800b7ce:	f008 fc49 	bl	8014064 <iprintf>
 800b7d2:	e099      	b.n	800b908 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	7d1b      	ldrb	r3, [r3, #20]
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d106      	bne.n	800b7ea <tcp_abandon+0x36>
 800b7dc:	4b4c      	ldr	r3, [pc, #304]	; (800b910 <tcp_abandon+0x15c>)
 800b7de:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b7e2:	494e      	ldr	r1, [pc, #312]	; (800b91c <tcp_abandon+0x168>)
 800b7e4:	484c      	ldr	r0, [pc, #304]	; (800b918 <tcp_abandon+0x164>)
 800b7e6:	f008 fc3d 	bl	8014064 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	7d1b      	ldrb	r3, [r3, #20]
 800b7ee:	2b0a      	cmp	r3, #10
 800b7f0:	d107      	bne.n	800b802 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b7f2:	6879      	ldr	r1, [r7, #4]
 800b7f4:	484a      	ldr	r0, [pc, #296]	; (800b920 <tcp_abandon+0x16c>)
 800b7f6:	f001 fa69 	bl	800cccc <tcp_pcb_remove>
    tcp_free(pcb);
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f7ff fdb0 	bl	800b360 <tcp_free>
 800b800:	e082      	b.n	800b908 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b802:	2300      	movs	r3, #0
 800b804:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b806:	2300      	movs	r3, #0
 800b808:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b80e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b814:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b81c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	7d1b      	ldrb	r3, [r3, #20]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d126      	bne.n	800b87a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	8adb      	ldrh	r3, [r3, #22]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d02e      	beq.n	800b892 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b834:	4b3b      	ldr	r3, [pc, #236]	; (800b924 <tcp_abandon+0x170>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d105      	bne.n	800b84a <tcp_abandon+0x96>
 800b83e:	4b39      	ldr	r3, [pc, #228]	; (800b924 <tcp_abandon+0x170>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	4a37      	ldr	r2, [pc, #220]	; (800b924 <tcp_abandon+0x170>)
 800b846:	6013      	str	r3, [r2, #0]
 800b848:	e013      	b.n	800b872 <tcp_abandon+0xbe>
 800b84a:	4b36      	ldr	r3, [pc, #216]	; (800b924 <tcp_abandon+0x170>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	61fb      	str	r3, [r7, #28]
 800b850:	e00c      	b.n	800b86c <tcp_abandon+0xb8>
 800b852:	69fb      	ldr	r3, [r7, #28]
 800b854:	68db      	ldr	r3, [r3, #12]
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d104      	bne.n	800b866 <tcp_abandon+0xb2>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	68da      	ldr	r2, [r3, #12]
 800b860:	69fb      	ldr	r3, [r7, #28]
 800b862:	60da      	str	r2, [r3, #12]
 800b864:	e005      	b.n	800b872 <tcp_abandon+0xbe>
 800b866:	69fb      	ldr	r3, [r7, #28]
 800b868:	68db      	ldr	r3, [r3, #12]
 800b86a:	61fb      	str	r3, [r7, #28]
 800b86c:	69fb      	ldr	r3, [r7, #28]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d1ef      	bne.n	800b852 <tcp_abandon+0x9e>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2200      	movs	r2, #0
 800b876:	60da      	str	r2, [r3, #12]
 800b878:	e00b      	b.n	800b892 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	8adb      	ldrh	r3, [r3, #22]
 800b882:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b884:	6879      	ldr	r1, [r7, #4]
 800b886:	4828      	ldr	r0, [pc, #160]	; (800b928 <tcp_abandon+0x174>)
 800b888:	f001 fa20 	bl	800cccc <tcp_pcb_remove>
 800b88c:	4b27      	ldr	r3, [pc, #156]	; (800b92c <tcp_abandon+0x178>)
 800b88e:	2201      	movs	r2, #1
 800b890:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b896:	2b00      	cmp	r3, #0
 800b898:	d004      	beq.n	800b8a4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f000 fed6 	bl	800c650 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d004      	beq.n	800b8b6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f000 fecd 	bl	800c650 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d004      	beq.n	800b8c8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f000 fec4 	bl	800c650 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00e      	beq.n	800b8ec <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b8ce:	6879      	ldr	r1, [r7, #4]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	3304      	adds	r3, #4
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	8b12      	ldrh	r2, [r2, #24]
 800b8d8:	9202      	str	r2, [sp, #8]
 800b8da:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b8dc:	9201      	str	r2, [sp, #4]
 800b8de:	9300      	str	r3, [sp, #0]
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	697a      	ldr	r2, [r7, #20]
 800b8e4:	69b9      	ldr	r1, [r7, #24]
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f005 fbc0 	bl	801106c <tcp_rst>
    }
    last_state = pcb->state;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	7d1b      	ldrb	r3, [r3, #20]
 800b8f0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f7ff fd34 	bl	800b360 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d004      	beq.n	800b908 <tcp_abandon+0x154>
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	f06f 010c 	mvn.w	r1, #12
 800b904:	68f8      	ldr	r0, [r7, #12]
 800b906:	4798      	blx	r3
  }
}
 800b908:	3728      	adds	r7, #40	; 0x28
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop
 800b910:	08015e4c 	.word	0x08015e4c
 800b914:	08015f90 	.word	0x08015f90
 800b918:	08015e90 	.word	0x08015e90
 800b91c:	08015fac 	.word	0x08015fac
 800b920:	240035e8 	.word	0x240035e8
 800b924:	240035dc 	.word	0x240035dc
 800b928:	240035e4 	.word	0x240035e4
 800b92c:	240035ec 	.word	0x240035ec

0800b930 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b938:	2101      	movs	r1, #1
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f7ff ff3a 	bl	800b7b4 <tcp_abandon>
}
 800b940:	bf00      	nop
 800b942:	3708      	adds	r7, #8
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b088      	sub	sp, #32
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	60f8      	str	r0, [r7, #12]
 800b950:	60b9      	str	r1, [r7, #8]
 800b952:	4613      	mov	r3, r2
 800b954:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800b956:	2304      	movs	r3, #4
 800b958:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d101      	bne.n	800b964 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800b960:	4b3e      	ldr	r3, [pc, #248]	; (800ba5c <tcp_bind+0x114>)
 800b962:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d109      	bne.n	800b97e <tcp_bind+0x36>
 800b96a:	4b3d      	ldr	r3, [pc, #244]	; (800ba60 <tcp_bind+0x118>)
 800b96c:	f240 22a9 	movw	r2, #681	; 0x2a9
 800b970:	493c      	ldr	r1, [pc, #240]	; (800ba64 <tcp_bind+0x11c>)
 800b972:	483d      	ldr	r0, [pc, #244]	; (800ba68 <tcp_bind+0x120>)
 800b974:	f008 fb76 	bl	8014064 <iprintf>
 800b978:	f06f 030f 	mvn.w	r3, #15
 800b97c:	e06a      	b.n	800ba54 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	7d1b      	ldrb	r3, [r3, #20]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d009      	beq.n	800b99a <tcp_bind+0x52>
 800b986:	4b36      	ldr	r3, [pc, #216]	; (800ba60 <tcp_bind+0x118>)
 800b988:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b98c:	4937      	ldr	r1, [pc, #220]	; (800ba6c <tcp_bind+0x124>)
 800b98e:	4836      	ldr	r0, [pc, #216]	; (800ba68 <tcp_bind+0x120>)
 800b990:	f008 fb68 	bl	8014064 <iprintf>
 800b994:	f06f 0305 	mvn.w	r3, #5
 800b998:	e05c      	b.n	800ba54 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800b99a:	88fb      	ldrh	r3, [r7, #6]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d109      	bne.n	800b9b4 <tcp_bind+0x6c>
    port = tcp_new_port();
 800b9a0:	f000 f9f0 	bl	800bd84 <tcp_new_port>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b9a8:	88fb      	ldrh	r3, [r7, #6]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d135      	bne.n	800ba1a <tcp_bind+0xd2>
      return ERR_BUF;
 800b9ae:	f06f 0301 	mvn.w	r3, #1
 800b9b2:	e04f      	b.n	800ba54 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	61fb      	str	r3, [r7, #28]
 800b9b8:	e02b      	b.n	800ba12 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800b9ba:	4a2d      	ldr	r2, [pc, #180]	; (800ba70 <tcp_bind+0x128>)
 800b9bc:	69fb      	ldr	r3, [r7, #28]
 800b9be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	61bb      	str	r3, [r7, #24]
 800b9c6:	e01e      	b.n	800ba06 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800b9c8:	69bb      	ldr	r3, [r7, #24]
 800b9ca:	8adb      	ldrh	r3, [r3, #22]
 800b9cc:	88fa      	ldrh	r2, [r7, #6]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d116      	bne.n	800ba00 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800b9d2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d010      	beq.n	800b9fa <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800b9d8:	69bb      	ldr	r3, [r7, #24]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d00c      	beq.n	800b9fa <tcp_bind+0xb2>
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d009      	beq.n	800b9fa <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d005      	beq.n	800b9fa <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800b9ee:	69bb      	ldr	r3, [r7, #24]
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d102      	bne.n	800ba00 <tcp_bind+0xb8>
              return ERR_USE;
 800b9fa:	f06f 0307 	mvn.w	r3, #7
 800b9fe:	e029      	b.n	800ba54 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	61bb      	str	r3, [r7, #24]
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d1dd      	bne.n	800b9c8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800ba0c:	69fb      	ldr	r3, [r7, #28]
 800ba0e:	3301      	adds	r3, #1
 800ba10:	61fb      	str	r3, [r7, #28]
 800ba12:	69fa      	ldr	r2, [r7, #28]
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	dbcf      	blt.n	800b9ba <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d00c      	beq.n	800ba3a <tcp_bind+0xf2>
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d008      	beq.n	800ba3a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d002      	beq.n	800ba34 <tcp_bind+0xec>
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	e000      	b.n	800ba36 <tcp_bind+0xee>
 800ba34:	2300      	movs	r3, #0
 800ba36:	68fa      	ldr	r2, [r7, #12]
 800ba38:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	88fa      	ldrh	r2, [r7, #6]
 800ba3e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800ba40:	4b0c      	ldr	r3, [pc, #48]	; (800ba74 <tcp_bind+0x12c>)
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	60da      	str	r2, [r3, #12]
 800ba48:	4a0a      	ldr	r2, [pc, #40]	; (800ba74 <tcp_bind+0x12c>)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	6013      	str	r3, [r2, #0]
 800ba4e:	f005 fccf 	bl	80113f0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800ba52:	2300      	movs	r3, #0
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3720      	adds	r7, #32
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	08018c48 	.word	0x08018c48
 800ba60:	08015e4c 	.word	0x08015e4c
 800ba64:	08015fe0 	.word	0x08015fe0
 800ba68:	08015e90 	.word	0x08015e90
 800ba6c:	08015ff8 	.word	0x08015ff8
 800ba70:	08018c20 	.word	0x08018c20
 800ba74:	240035dc 	.word	0x240035dc

0800ba78 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	4613      	mov	r3, r2
 800ba84:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d106      	bne.n	800ba9a <tcp_accept_null+0x22>
 800ba8c:	4b07      	ldr	r3, [pc, #28]	; (800baac <tcp_accept_null+0x34>)
 800ba8e:	f240 320f 	movw	r2, #783	; 0x30f
 800ba92:	4907      	ldr	r1, [pc, #28]	; (800bab0 <tcp_accept_null+0x38>)
 800ba94:	4807      	ldr	r0, [pc, #28]	; (800bab4 <tcp_accept_null+0x3c>)
 800ba96:	f008 fae5 	bl	8014064 <iprintf>

  tcp_abort(pcb);
 800ba9a:	68b8      	ldr	r0, [r7, #8]
 800ba9c:	f7ff ff48 	bl	800b930 <tcp_abort>

  return ERR_ABRT;
 800baa0:	f06f 030c 	mvn.w	r3, #12
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3710      	adds	r7, #16
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	08015e4c 	.word	0x08015e4c
 800bab0:	08016020 	.word	0x08016020
 800bab4:	08015e90 	.word	0x08015e90

0800bab8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	460b      	mov	r3, r1
 800bac2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800bac4:	78fb      	ldrb	r3, [r7, #3]
 800bac6:	2200      	movs	r2, #0
 800bac8:	4619      	mov	r1, r3
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 f806 	bl	800badc <tcp_listen_with_backlog_and_err>
 800bad0:	4603      	mov	r3, r0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3708      	adds	r7, #8
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
	...

0800badc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b088      	sub	sp, #32
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	460b      	mov	r3, r1
 800bae6:	607a      	str	r2, [r7, #4]
 800bae8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800baea:	2300      	movs	r3, #0
 800baec:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d109      	bne.n	800bb08 <tcp_listen_with_backlog_and_err+0x2c>
 800baf4:	4b47      	ldr	r3, [pc, #284]	; (800bc14 <tcp_listen_with_backlog_and_err+0x138>)
 800baf6:	f240 3259 	movw	r2, #857	; 0x359
 800bafa:	4947      	ldr	r1, [pc, #284]	; (800bc18 <tcp_listen_with_backlog_and_err+0x13c>)
 800bafc:	4847      	ldr	r0, [pc, #284]	; (800bc1c <tcp_listen_with_backlog_and_err+0x140>)
 800bafe:	f008 fab1 	bl	8014064 <iprintf>
 800bb02:	23f0      	movs	r3, #240	; 0xf0
 800bb04:	76fb      	strb	r3, [r7, #27]
 800bb06:	e079      	b.n	800bbfc <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	7d1b      	ldrb	r3, [r3, #20]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d009      	beq.n	800bb24 <tcp_listen_with_backlog_and_err+0x48>
 800bb10:	4b40      	ldr	r3, [pc, #256]	; (800bc14 <tcp_listen_with_backlog_and_err+0x138>)
 800bb12:	f240 325a 	movw	r2, #858	; 0x35a
 800bb16:	4942      	ldr	r1, [pc, #264]	; (800bc20 <tcp_listen_with_backlog_and_err+0x144>)
 800bb18:	4840      	ldr	r0, [pc, #256]	; (800bc1c <tcp_listen_with_backlog_and_err+0x140>)
 800bb1a:	f008 faa3 	bl	8014064 <iprintf>
 800bb1e:	23f1      	movs	r3, #241	; 0xf1
 800bb20:	76fb      	strb	r3, [r7, #27]
 800bb22:	e06b      	b.n	800bbfc <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	7d1b      	ldrb	r3, [r3, #20]
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d104      	bne.n	800bb36 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800bb30:	23f7      	movs	r3, #247	; 0xf7
 800bb32:	76fb      	strb	r3, [r7, #27]
    goto done;
 800bb34:	e062      	b.n	800bbfc <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800bb36:	2002      	movs	r0, #2
 800bb38:	f7fe fa8e 	bl	800a058 <memp_malloc>
 800bb3c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d102      	bne.n	800bb4a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800bb44:	23ff      	movs	r3, #255	; 0xff
 800bb46:	76fb      	strb	r3, [r7, #27]
    goto done;
 800bb48:	e058      	b.n	800bbfc <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	691a      	ldr	r2, [r3, #16]
 800bb4e:	69fb      	ldr	r3, [r7, #28]
 800bb50:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	8ada      	ldrh	r2, [r3, #22]
 800bb56:	69fb      	ldr	r3, [r7, #28]
 800bb58:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800bb5a:	69fb      	ldr	r3, [r7, #28]
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	7d5a      	ldrb	r2, [r3, #21]
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	7a5a      	ldrb	r2, [r3, #9]
 800bb6c:	69fb      	ldr	r3, [r7, #28]
 800bb6e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	2200      	movs	r2, #0
 800bb74:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	7ada      	ldrb	r2, [r3, #11]
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	7a9a      	ldrb	r2, [r3, #10]
 800bb82:	69fb      	ldr	r3, [r7, #28]
 800bb84:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	69fb      	ldr	r3, [r7, #28]
 800bb8c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	8adb      	ldrh	r3, [r3, #22]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d021      	beq.n	800bbda <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800bb96:	4b23      	ldr	r3, [pc, #140]	; (800bc24 <tcp_listen_with_backlog_and_err+0x148>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d105      	bne.n	800bbac <tcp_listen_with_backlog_and_err+0xd0>
 800bba0:	4b20      	ldr	r3, [pc, #128]	; (800bc24 <tcp_listen_with_backlog_and_err+0x148>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	68db      	ldr	r3, [r3, #12]
 800bba6:	4a1f      	ldr	r2, [pc, #124]	; (800bc24 <tcp_listen_with_backlog_and_err+0x148>)
 800bba8:	6013      	str	r3, [r2, #0]
 800bbaa:	e013      	b.n	800bbd4 <tcp_listen_with_backlog_and_err+0xf8>
 800bbac:	4b1d      	ldr	r3, [pc, #116]	; (800bc24 <tcp_listen_with_backlog_and_err+0x148>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	617b      	str	r3, [r7, #20]
 800bbb2:	e00c      	b.n	800bbce <tcp_listen_with_backlog_and_err+0xf2>
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	68fa      	ldr	r2, [r7, #12]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d104      	bne.n	800bbc8 <tcp_listen_with_backlog_and_err+0xec>
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	68da      	ldr	r2, [r3, #12]
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	60da      	str	r2, [r3, #12]
 800bbc6:	e005      	b.n	800bbd4 <tcp_listen_with_backlog_and_err+0xf8>
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	68db      	ldr	r3, [r3, #12]
 800bbcc:	617b      	str	r3, [r7, #20]
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d1ef      	bne.n	800bbb4 <tcp_listen_with_backlog_and_err+0xd8>
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800bbda:	68f8      	ldr	r0, [r7, #12]
 800bbdc:	f7ff fbc0 	bl	800b360 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800bbe0:	69fb      	ldr	r3, [r7, #28]
 800bbe2:	4a11      	ldr	r2, [pc, #68]	; (800bc28 <tcp_listen_with_backlog_and_err+0x14c>)
 800bbe4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800bbe6:	4b11      	ldr	r3, [pc, #68]	; (800bc2c <tcp_listen_with_backlog_and_err+0x150>)
 800bbe8:	681a      	ldr	r2, [r3, #0]
 800bbea:	69fb      	ldr	r3, [r7, #28]
 800bbec:	60da      	str	r2, [r3, #12]
 800bbee:	4a0f      	ldr	r2, [pc, #60]	; (800bc2c <tcp_listen_with_backlog_and_err+0x150>)
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	6013      	str	r3, [r2, #0]
 800bbf4:	f005 fbfc 	bl	80113f0 <tcp_timer_needed>
  res = ERR_OK;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d002      	beq.n	800bc08 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	7efa      	ldrb	r2, [r7, #27]
 800bc06:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800bc08:	69fb      	ldr	r3, [r7, #28]
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3720      	adds	r7, #32
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	08015e4c 	.word	0x08015e4c
 800bc18:	08016040 	.word	0x08016040
 800bc1c:	08015e90 	.word	0x08015e90
 800bc20:	08016070 	.word	0x08016070
 800bc24:	240035dc 	.word	0x240035dc
 800bc28:	0800ba79 	.word	0x0800ba79
 800bc2c:	240035e0 	.word	0x240035e0

0800bc30 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b084      	sub	sp, #16
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d106      	bne.n	800bc4c <tcp_update_rcv_ann_wnd+0x1c>
 800bc3e:	4b25      	ldr	r3, [pc, #148]	; (800bcd4 <tcp_update_rcv_ann_wnd+0xa4>)
 800bc40:	f240 32a6 	movw	r2, #934	; 0x3a6
 800bc44:	4924      	ldr	r1, [pc, #144]	; (800bcd8 <tcp_update_rcv_ann_wnd+0xa8>)
 800bc46:	4825      	ldr	r0, [pc, #148]	; (800bcdc <tcp_update_rcv_ann_wnd+0xac>)
 800bc48:	f008 fa0c 	bl	8014064 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800bc54:	4413      	add	r3, r2
 800bc56:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc5c:	687a      	ldr	r2, [r7, #4]
 800bc5e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800bc60:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800bc64:	bf28      	it	cs
 800bc66:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800bc6a:	b292      	uxth	r2, r2
 800bc6c:	4413      	add	r3, r2
 800bc6e:	68fa      	ldr	r2, [r7, #12]
 800bc70:	1ad3      	subs	r3, r2, r3
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	db08      	blt.n	800bc88 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc82:	68fa      	ldr	r2, [r7, #12]
 800bc84:	1ad3      	subs	r3, r2, r3
 800bc86:	e020      	b.n	800bcca <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc90:	1ad3      	subs	r3, r2, r3
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	dd03      	ble.n	800bc9e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bc9c:	e014      	b.n	800bcc8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca6:	1ad3      	subs	r3, r2, r3
 800bca8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcb0:	d306      	bcc.n	800bcc0 <tcp_update_rcv_ann_wnd+0x90>
 800bcb2:	4b08      	ldr	r3, [pc, #32]	; (800bcd4 <tcp_update_rcv_ann_wnd+0xa4>)
 800bcb4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800bcb8:	4909      	ldr	r1, [pc, #36]	; (800bce0 <tcp_update_rcv_ann_wnd+0xb0>)
 800bcba:	4808      	ldr	r0, [pc, #32]	; (800bcdc <tcp_update_rcv_ann_wnd+0xac>)
 800bcbc:	f008 f9d2 	bl	8014064 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	b29a      	uxth	r2, r3
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800bcc8:	2300      	movs	r3, #0
  }
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3710      	adds	r7, #16
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	08015e4c 	.word	0x08015e4c
 800bcd8:	080160a8 	.word	0x080160a8
 800bcdc:	08015e90 	.word	0x08015e90
 800bce0:	080160cc 	.word	0x080160cc

0800bce4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	460b      	mov	r3, r1
 800bcee:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d107      	bne.n	800bd06 <tcp_recved+0x22>
 800bcf6:	4b1f      	ldr	r3, [pc, #124]	; (800bd74 <tcp_recved+0x90>)
 800bcf8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800bcfc:	491e      	ldr	r1, [pc, #120]	; (800bd78 <tcp_recved+0x94>)
 800bcfe:	481f      	ldr	r0, [pc, #124]	; (800bd7c <tcp_recved+0x98>)
 800bd00:	f008 f9b0 	bl	8014064 <iprintf>
 800bd04:	e032      	b.n	800bd6c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	7d1b      	ldrb	r3, [r3, #20]
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	d106      	bne.n	800bd1c <tcp_recved+0x38>
 800bd0e:	4b19      	ldr	r3, [pc, #100]	; (800bd74 <tcp_recved+0x90>)
 800bd10:	f240 32d2 	movw	r2, #978	; 0x3d2
 800bd14:	491a      	ldr	r1, [pc, #104]	; (800bd80 <tcp_recved+0x9c>)
 800bd16:	4819      	ldr	r0, [pc, #100]	; (800bd7c <tcp_recved+0x98>)
 800bd18:	f008 f9a4 	bl	8014064 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bd20:	887b      	ldrh	r3, [r7, #2]
 800bd22:	4413      	add	r3, r2
 800bd24:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800bd26:	89fb      	ldrh	r3, [r7, #14]
 800bd28:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bd2c:	d804      	bhi.n	800bd38 <tcp_recved+0x54>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd32:	89fa      	ldrh	r2, [r7, #14]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d204      	bcs.n	800bd42 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bd3e:	851a      	strh	r2, [r3, #40]	; 0x28
 800bd40:	e002      	b.n	800bd48 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	89fa      	ldrh	r2, [r7, #14]
 800bd46:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f7ff ff71 	bl	800bc30 <tcp_update_rcv_ann_wnd>
 800bd4e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800bd56:	d309      	bcc.n	800bd6c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	8b5b      	ldrh	r3, [r3, #26]
 800bd5c:	f043 0302 	orr.w	r3, r3, #2
 800bd60:	b29a      	uxth	r2, r3
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f004 fbcc 	bl	8010504 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800bd6c:	3710      	adds	r7, #16
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	08015e4c 	.word	0x08015e4c
 800bd78:	080160e8 	.word	0x080160e8
 800bd7c:	08015e90 	.word	0x08015e90
 800bd80:	08016100 	.word	0x08016100

0800bd84 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800bd8e:	4b1e      	ldr	r3, [pc, #120]	; (800be08 <tcp_new_port+0x84>)
 800bd90:	881b      	ldrh	r3, [r3, #0]
 800bd92:	3301      	adds	r3, #1
 800bd94:	b29a      	uxth	r2, r3
 800bd96:	4b1c      	ldr	r3, [pc, #112]	; (800be08 <tcp_new_port+0x84>)
 800bd98:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800bd9a:	4b1b      	ldr	r3, [pc, #108]	; (800be08 <tcp_new_port+0x84>)
 800bd9c:	881b      	ldrh	r3, [r3, #0]
 800bd9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d103      	bne.n	800bdae <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800bda6:	4b18      	ldr	r3, [pc, #96]	; (800be08 <tcp_new_port+0x84>)
 800bda8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800bdac:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800bdae:	2300      	movs	r3, #0
 800bdb0:	71fb      	strb	r3, [r7, #7]
 800bdb2:	e01e      	b.n	800bdf2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800bdb4:	79fb      	ldrb	r3, [r7, #7]
 800bdb6:	4a15      	ldr	r2, [pc, #84]	; (800be0c <tcp_new_port+0x88>)
 800bdb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	603b      	str	r3, [r7, #0]
 800bdc0:	e011      	b.n	800bde6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	8ada      	ldrh	r2, [r3, #22]
 800bdc6:	4b10      	ldr	r3, [pc, #64]	; (800be08 <tcp_new_port+0x84>)
 800bdc8:	881b      	ldrh	r3, [r3, #0]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d108      	bne.n	800bde0 <tcp_new_port+0x5c>
        n++;
 800bdce:	88bb      	ldrh	r3, [r7, #4]
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800bdd4:	88bb      	ldrh	r3, [r7, #4]
 800bdd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdda:	d3d8      	bcc.n	800bd8e <tcp_new_port+0xa>
          return 0;
 800bddc:	2300      	movs	r3, #0
 800bdde:	e00d      	b.n	800bdfc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	68db      	ldr	r3, [r3, #12]
 800bde4:	603b      	str	r3, [r7, #0]
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d1ea      	bne.n	800bdc2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800bdec:	79fb      	ldrb	r3, [r7, #7]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	71fb      	strb	r3, [r7, #7]
 800bdf2:	79fb      	ldrb	r3, [r7, #7]
 800bdf4:	2b03      	cmp	r3, #3
 800bdf6:	d9dd      	bls.n	800bdb4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800bdf8:	4b03      	ldr	r3, [pc, #12]	; (800be08 <tcp_new_port+0x84>)
 800bdfa:	881b      	ldrh	r3, [r3, #0]
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	370c      	adds	r7, #12
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr
 800be08:	24000024 	.word	0x24000024
 800be0c:	08018c20 	.word	0x08018c20

0800be10 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800be10:	b5b0      	push	{r4, r5, r7, lr}
 800be12:	b090      	sub	sp, #64	; 0x40
 800be14:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800be16:	2300      	movs	r3, #0
 800be18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800be1c:	4b94      	ldr	r3, [pc, #592]	; (800c070 <tcp_slowtmr+0x260>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	3301      	adds	r3, #1
 800be22:	4a93      	ldr	r2, [pc, #588]	; (800c070 <tcp_slowtmr+0x260>)
 800be24:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800be26:	4b93      	ldr	r3, [pc, #588]	; (800c074 <tcp_slowtmr+0x264>)
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	3301      	adds	r3, #1
 800be2c:	b2da      	uxtb	r2, r3
 800be2e:	4b91      	ldr	r3, [pc, #580]	; (800c074 <tcp_slowtmr+0x264>)
 800be30:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800be32:	2300      	movs	r3, #0
 800be34:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800be36:	4b90      	ldr	r3, [pc, #576]	; (800c078 <tcp_slowtmr+0x268>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800be3c:	e29d      	b.n	800c37a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800be3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be40:	7d1b      	ldrb	r3, [r3, #20]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d106      	bne.n	800be54 <tcp_slowtmr+0x44>
 800be46:	4b8d      	ldr	r3, [pc, #564]	; (800c07c <tcp_slowtmr+0x26c>)
 800be48:	f240 42be 	movw	r2, #1214	; 0x4be
 800be4c:	498c      	ldr	r1, [pc, #560]	; (800c080 <tcp_slowtmr+0x270>)
 800be4e:	488d      	ldr	r0, [pc, #564]	; (800c084 <tcp_slowtmr+0x274>)
 800be50:	f008 f908 	bl	8014064 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800be54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be56:	7d1b      	ldrb	r3, [r3, #20]
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d106      	bne.n	800be6a <tcp_slowtmr+0x5a>
 800be5c:	4b87      	ldr	r3, [pc, #540]	; (800c07c <tcp_slowtmr+0x26c>)
 800be5e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800be62:	4989      	ldr	r1, [pc, #548]	; (800c088 <tcp_slowtmr+0x278>)
 800be64:	4887      	ldr	r0, [pc, #540]	; (800c084 <tcp_slowtmr+0x274>)
 800be66:	f008 f8fd 	bl	8014064 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800be6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be6c:	7d1b      	ldrb	r3, [r3, #20]
 800be6e:	2b0a      	cmp	r3, #10
 800be70:	d106      	bne.n	800be80 <tcp_slowtmr+0x70>
 800be72:	4b82      	ldr	r3, [pc, #520]	; (800c07c <tcp_slowtmr+0x26c>)
 800be74:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800be78:	4984      	ldr	r1, [pc, #528]	; (800c08c <tcp_slowtmr+0x27c>)
 800be7a:	4882      	ldr	r0, [pc, #520]	; (800c084 <tcp_slowtmr+0x274>)
 800be7c:	f008 f8f2 	bl	8014064 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800be80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be82:	7f9a      	ldrb	r2, [r3, #30]
 800be84:	4b7b      	ldr	r3, [pc, #492]	; (800c074 <tcp_slowtmr+0x264>)
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	429a      	cmp	r2, r3
 800be8a:	d105      	bne.n	800be98 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800be8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be8e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800be90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be92:	68db      	ldr	r3, [r3, #12]
 800be94:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800be96:	e270      	b.n	800c37a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800be98:	4b76      	ldr	r3, [pc, #472]	; (800c074 <tcp_slowtmr+0x264>)
 800be9a:	781a      	ldrb	r2, [r3, #0]
 800be9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be9e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800bea0:	2300      	movs	r3, #0
 800bea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800bea6:	2300      	movs	r3, #0
 800bea8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800beac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beae:	7d1b      	ldrb	r3, [r3, #20]
 800beb0:	2b02      	cmp	r3, #2
 800beb2:	d10a      	bne.n	800beca <tcp_slowtmr+0xba>
 800beb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800beba:	2b05      	cmp	r3, #5
 800bebc:	d905      	bls.n	800beca <tcp_slowtmr+0xba>
      ++pcb_remove;
 800bebe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bec2:	3301      	adds	r3, #1
 800bec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bec8:	e11e      	b.n	800c108 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800beca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800becc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bed0:	2b0b      	cmp	r3, #11
 800bed2:	d905      	bls.n	800bee0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800bed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bed8:	3301      	adds	r3, #1
 800beda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bede:	e113      	b.n	800c108 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800bee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d075      	beq.n	800bfd6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800beea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d006      	beq.n	800bf00 <tcp_slowtmr+0xf0>
 800bef2:	4b62      	ldr	r3, [pc, #392]	; (800c07c <tcp_slowtmr+0x26c>)
 800bef4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800bef8:	4965      	ldr	r1, [pc, #404]	; (800c090 <tcp_slowtmr+0x280>)
 800befa:	4862      	ldr	r0, [pc, #392]	; (800c084 <tcp_slowtmr+0x274>)
 800befc:	f008 f8b2 	bl	8014064 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800bf00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d106      	bne.n	800bf16 <tcp_slowtmr+0x106>
 800bf08:	4b5c      	ldr	r3, [pc, #368]	; (800c07c <tcp_slowtmr+0x26c>)
 800bf0a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800bf0e:	4961      	ldr	r1, [pc, #388]	; (800c094 <tcp_slowtmr+0x284>)
 800bf10:	485c      	ldr	r0, [pc, #368]	; (800c084 <tcp_slowtmr+0x274>)
 800bf12:	f008 f8a7 	bl	8014064 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800bf16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf18:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bf1c:	2b0b      	cmp	r3, #11
 800bf1e:	d905      	bls.n	800bf2c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800bf20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf24:	3301      	adds	r3, #1
 800bf26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf2a:	e0ed      	b.n	800c108 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800bf2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bf32:	3b01      	subs	r3, #1
 800bf34:	4a58      	ldr	r2, [pc, #352]	; (800c098 <tcp_slowtmr+0x288>)
 800bf36:	5cd3      	ldrb	r3, [r2, r3]
 800bf38:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800bf3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bf40:	7c7a      	ldrb	r2, [r7, #17]
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d907      	bls.n	800bf56 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800bf46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf48:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	b2da      	uxtb	r2, r3
 800bf50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf52:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800bf56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf58:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bf5c:	7c7a      	ldrb	r2, [r7, #17]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	f200 80d2 	bhi.w	800c108 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800bf64:	2301      	movs	r3, #1
 800bf66:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800bf68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d108      	bne.n	800bf84 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800bf72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf74:	f005 f96e 	bl	8011254 <tcp_zero_window_probe>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d014      	beq.n	800bfa8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800bf7e:	2300      	movs	r3, #0
 800bf80:	623b      	str	r3, [r7, #32]
 800bf82:	e011      	b.n	800bfa8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800bf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf8e:	f004 f833 	bl	800fff8 <tcp_split_unsent_seg>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d107      	bne.n	800bfa8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800bf98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf9a:	f004 fab3 	bl	8010504 <tcp_output>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d101      	bne.n	800bfa8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800bfa8:	6a3b      	ldr	r3, [r7, #32]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	f000 80ac 	beq.w	800c108 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800bfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800bfb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bfbe:	2b06      	cmp	r3, #6
 800bfc0:	f200 80a2 	bhi.w	800c108 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800bfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bfca:	3301      	adds	r3, #1
 800bfcc:	b2da      	uxtb	r2, r3
 800bfce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800bfd4:	e098      	b.n	800c108 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800bfd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	db0f      	blt.n	800c000 <tcp_slowtmr+0x1f0>
 800bfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bfe6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d008      	beq.n	800c000 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800bfee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	3301      	adds	r3, #1
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	b21a      	sxth	r2, r3
 800bffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffe:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c002:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c008:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c00c:	429a      	cmp	r2, r3
 800c00e:	db7b      	blt.n	800c108 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c010:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c012:	f004 fd69 	bl	8010ae8 <tcp_rexmit_rto_prepare>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d007      	beq.n	800c02c <tcp_slowtmr+0x21c>
 800c01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c01e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c020:	2b00      	cmp	r3, #0
 800c022:	d171      	bne.n	800c108 <tcp_slowtmr+0x2f8>
 800c024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d06d      	beq.n	800c108 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02e:	7d1b      	ldrb	r3, [r3, #20]
 800c030:	2b02      	cmp	r3, #2
 800c032:	d03a      	beq.n	800c0aa <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c036:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c03a:	2b0c      	cmp	r3, #12
 800c03c:	bf28      	it	cs
 800c03e:	230c      	movcs	r3, #12
 800c040:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c044:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c048:	10db      	asrs	r3, r3, #3
 800c04a:	b21b      	sxth	r3, r3
 800c04c:	461a      	mov	r2, r3
 800c04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c050:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c054:	4413      	add	r3, r2
 800c056:	7efa      	ldrb	r2, [r7, #27]
 800c058:	4910      	ldr	r1, [pc, #64]	; (800c09c <tcp_slowtmr+0x28c>)
 800c05a:	5c8a      	ldrb	r2, [r1, r2]
 800c05c:	4093      	lsls	r3, r2
 800c05e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c066:	4293      	cmp	r3, r2
 800c068:	dc1a      	bgt.n	800c0a0 <tcp_slowtmr+0x290>
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	b21a      	sxth	r2, r3
 800c06e:	e019      	b.n	800c0a4 <tcp_slowtmr+0x294>
 800c070:	240035d8 	.word	0x240035d8
 800c074:	240035ee 	.word	0x240035ee
 800c078:	240035e4 	.word	0x240035e4
 800c07c:	08015e4c 	.word	0x08015e4c
 800c080:	08016190 	.word	0x08016190
 800c084:	08015e90 	.word	0x08015e90
 800c088:	080161bc 	.word	0x080161bc
 800c08c:	080161e8 	.word	0x080161e8
 800c090:	08016218 	.word	0x08016218
 800c094:	0801624c 	.word	0x0801624c
 800c098:	08018c18 	.word	0x08018c18
 800c09c:	08018c08 	.word	0x08018c08
 800c0a0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	bf28      	it	cs
 800c0c0:	4613      	movcs	r3, r2
 800c0c2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c0c4:	8a7b      	ldrh	r3, [r7, #18]
 800c0c6:	085b      	lsrs	r3, r3, #1
 800c0c8:	b29a      	uxth	r2, r3
 800c0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0da:	005b      	lsls	r3, r3, #1
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d206      	bcs.n	800c0f0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0e6:	005b      	lsls	r3, r3, #1
 800c0e8:	b29a      	uxth	r2, r3
 800c0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c102:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c104:	f004 fd60 	bl	8010bc8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c10a:	7d1b      	ldrb	r3, [r3, #20]
 800c10c:	2b06      	cmp	r3, #6
 800c10e:	d111      	bne.n	800c134 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c112:	8b5b      	ldrh	r3, [r3, #26]
 800c114:	f003 0310 	and.w	r3, r3, #16
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d00b      	beq.n	800c134 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c11c:	4b9c      	ldr	r3, [pc, #624]	; (800c390 <tcp_slowtmr+0x580>)
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c122:	6a1b      	ldr	r3, [r3, #32]
 800c124:	1ad3      	subs	r3, r2, r3
 800c126:	2b28      	cmp	r3, #40	; 0x28
 800c128:	d904      	bls.n	800c134 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c12a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c12e:	3301      	adds	r3, #1
 800c130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c136:	7a5b      	ldrb	r3, [r3, #9]
 800c138:	f003 0308 	and.w	r3, r3, #8
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d04a      	beq.n	800c1d6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800c140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c142:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c144:	2b04      	cmp	r3, #4
 800c146:	d003      	beq.n	800c150 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c14a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c14c:	2b07      	cmp	r3, #7
 800c14e:	d142      	bne.n	800c1d6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c150:	4b8f      	ldr	r3, [pc, #572]	; (800c390 <tcp_slowtmr+0x580>)
 800c152:	681a      	ldr	r2, [r3, #0]
 800c154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c156:	6a1b      	ldr	r3, [r3, #32]
 800c158:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c15c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c160:	4b8c      	ldr	r3, [pc, #560]	; (800c394 <tcp_slowtmr+0x584>)
 800c162:	440b      	add	r3, r1
 800c164:	498c      	ldr	r1, [pc, #560]	; (800c398 <tcp_slowtmr+0x588>)
 800c166:	fba1 1303 	umull	r1, r3, r1, r3
 800c16a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d90a      	bls.n	800c186 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c174:	3301      	adds	r3, #1
 800c176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c17a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c17e:	3301      	adds	r3, #1
 800c180:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c184:	e027      	b.n	800c1d6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c186:	4b82      	ldr	r3, [pc, #520]	; (800c390 <tcp_slowtmr+0x580>)
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c18c:	6a1b      	ldr	r3, [r3, #32]
 800c18e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c192:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c198:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c19c:	4618      	mov	r0, r3
 800c19e:	4b7f      	ldr	r3, [pc, #508]	; (800c39c <tcp_slowtmr+0x58c>)
 800c1a0:	fb00 f303 	mul.w	r3, r0, r3
 800c1a4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c1a6:	497c      	ldr	r1, [pc, #496]	; (800c398 <tcp_slowtmr+0x588>)
 800c1a8:	fba1 1303 	umull	r1, r3, r1, r3
 800c1ac:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d911      	bls.n	800c1d6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800c1b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1b4:	f005 f80e 	bl	80111d4 <tcp_keepalive>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c1be:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d107      	bne.n	800c1d6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800c1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	b2da      	uxtb	r2, r3
 800c1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d011      	beq.n	800c202 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c1de:	4b6c      	ldr	r3, [pc, #432]	; (800c390 <tcp_slowtmr+0x580>)
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e4:	6a1b      	ldr	r3, [r3, #32]
 800c1e6:	1ad2      	subs	r2, r2, r3
 800c1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ea:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	005b      	lsls	r3, r3, #1
 800c1f4:	440b      	add	r3, r1
 800c1f6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d302      	bcc.n	800c202 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c1fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1fe:	f000 fec9 	bl	800cf94 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c204:	7d1b      	ldrb	r3, [r3, #20]
 800c206:	2b03      	cmp	r3, #3
 800c208:	d10b      	bne.n	800c222 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c20a:	4b61      	ldr	r3, [pc, #388]	; (800c390 <tcp_slowtmr+0x580>)
 800c20c:	681a      	ldr	r2, [r3, #0]
 800c20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c210:	6a1b      	ldr	r3, [r3, #32]
 800c212:	1ad3      	subs	r3, r2, r3
 800c214:	2b28      	cmp	r3, #40	; 0x28
 800c216:	d904      	bls.n	800c222 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c21c:	3301      	adds	r3, #1
 800c21e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c224:	7d1b      	ldrb	r3, [r3, #20]
 800c226:	2b09      	cmp	r3, #9
 800c228:	d10b      	bne.n	800c242 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c22a:	4b59      	ldr	r3, [pc, #356]	; (800c390 <tcp_slowtmr+0x580>)
 800c22c:	681a      	ldr	r2, [r3, #0]
 800c22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c230:	6a1b      	ldr	r3, [r3, #32]
 800c232:	1ad3      	subs	r3, r2, r3
 800c234:	2bf0      	cmp	r3, #240	; 0xf0
 800c236:	d904      	bls.n	800c242 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800c238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c23c:	3301      	adds	r3, #1
 800c23e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c242:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c246:	2b00      	cmp	r3, #0
 800c248:	d060      	beq.n	800c30c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c250:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c252:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c254:	f000 fcea 	bl	800cc2c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d010      	beq.n	800c280 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c25e:	4b50      	ldr	r3, [pc, #320]	; (800c3a0 <tcp_slowtmr+0x590>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c264:	429a      	cmp	r2, r3
 800c266:	d106      	bne.n	800c276 <tcp_slowtmr+0x466>
 800c268:	4b4e      	ldr	r3, [pc, #312]	; (800c3a4 <tcp_slowtmr+0x594>)
 800c26a:	f240 526d 	movw	r2, #1389	; 0x56d
 800c26e:	494e      	ldr	r1, [pc, #312]	; (800c3a8 <tcp_slowtmr+0x598>)
 800c270:	484e      	ldr	r0, [pc, #312]	; (800c3ac <tcp_slowtmr+0x59c>)
 800c272:	f007 fef7 	bl	8014064 <iprintf>
        prev->next = pcb->next;
 800c276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c278:	68da      	ldr	r2, [r3, #12]
 800c27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27c:	60da      	str	r2, [r3, #12]
 800c27e:	e00f      	b.n	800c2a0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c280:	4b47      	ldr	r3, [pc, #284]	; (800c3a0 <tcp_slowtmr+0x590>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c286:	429a      	cmp	r2, r3
 800c288:	d006      	beq.n	800c298 <tcp_slowtmr+0x488>
 800c28a:	4b46      	ldr	r3, [pc, #280]	; (800c3a4 <tcp_slowtmr+0x594>)
 800c28c:	f240 5271 	movw	r2, #1393	; 0x571
 800c290:	4947      	ldr	r1, [pc, #284]	; (800c3b0 <tcp_slowtmr+0x5a0>)
 800c292:	4846      	ldr	r0, [pc, #280]	; (800c3ac <tcp_slowtmr+0x59c>)
 800c294:	f007 fee6 	bl	8014064 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c29a:	68db      	ldr	r3, [r3, #12]
 800c29c:	4a40      	ldr	r2, [pc, #256]	; (800c3a0 <tcp_slowtmr+0x590>)
 800c29e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c2a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d013      	beq.n	800c2d0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2aa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c2b0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b4:	3304      	adds	r3, #4
 800c2b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2b8:	8ad2      	ldrh	r2, [r2, #22]
 800c2ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2bc:	8b09      	ldrh	r1, [r1, #24]
 800c2be:	9102      	str	r1, [sp, #8]
 800c2c0:	9201      	str	r2, [sp, #4]
 800c2c2:	9300      	str	r3, [sp, #0]
 800c2c4:	462b      	mov	r3, r5
 800c2c6:	4622      	mov	r2, r4
 800c2c8:	4601      	mov	r1, r0
 800c2ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2cc:	f004 fece 	bl	801106c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d2:	691b      	ldr	r3, [r3, #16]
 800c2d4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d8:	7d1b      	ldrb	r3, [r3, #20]
 800c2da:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2de:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c2e6:	6838      	ldr	r0, [r7, #0]
 800c2e8:	f7ff f83a 	bl	800b360 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c2ec:	4b31      	ldr	r3, [pc, #196]	; (800c3b4 <tcp_slowtmr+0x5a4>)
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d004      	beq.n	800c302 <tcp_slowtmr+0x4f2>
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f06f 010c 	mvn.w	r1, #12
 800c2fe:	68b8      	ldr	r0, [r7, #8]
 800c300:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c302:	4b2c      	ldr	r3, [pc, #176]	; (800c3b4 <tcp_slowtmr+0x5a4>)
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d037      	beq.n	800c37a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800c30a:	e592      	b.n	800be32 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c312:	68db      	ldr	r3, [r3, #12]
 800c314:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c318:	7f1b      	ldrb	r3, [r3, #28]
 800c31a:	3301      	adds	r3, #1
 800c31c:	b2da      	uxtb	r2, r3
 800c31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c320:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c324:	7f1a      	ldrb	r2, [r3, #28]
 800c326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c328:	7f5b      	ldrb	r3, [r3, #29]
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d325      	bcc.n	800c37a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800c32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c330:	2200      	movs	r2, #0
 800c332:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c334:	4b1f      	ldr	r3, [pc, #124]	; (800c3b4 <tcp_slowtmr+0x5a4>)
 800c336:	2200      	movs	r2, #0
 800c338:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00b      	beq.n	800c35c <tcp_slowtmr+0x54c>
 800c344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c34a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c34c:	6912      	ldr	r2, [r2, #16]
 800c34e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c350:	4610      	mov	r0, r2
 800c352:	4798      	blx	r3
 800c354:	4603      	mov	r3, r0
 800c356:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c35a:	e002      	b.n	800c362 <tcp_slowtmr+0x552>
 800c35c:	2300      	movs	r3, #0
 800c35e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c362:	4b14      	ldr	r3, [pc, #80]	; (800c3b4 <tcp_slowtmr+0x5a4>)
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d000      	beq.n	800c36c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800c36a:	e562      	b.n	800be32 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c36c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c370:	2b00      	cmp	r3, #0
 800c372:	d102      	bne.n	800c37a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800c374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c376:	f004 f8c5 	bl	8010504 <tcp_output>
  while (pcb != NULL) {
 800c37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	f47f ad5e 	bne.w	800be3e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c382:	2300      	movs	r3, #0
 800c384:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800c386:	4b0c      	ldr	r3, [pc, #48]	; (800c3b8 <tcp_slowtmr+0x5a8>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c38c:	e069      	b.n	800c462 <tcp_slowtmr+0x652>
 800c38e:	bf00      	nop
 800c390:	240035d8 	.word	0x240035d8
 800c394:	000a4cb8 	.word	0x000a4cb8
 800c398:	10624dd3 	.word	0x10624dd3
 800c39c:	000124f8 	.word	0x000124f8
 800c3a0:	240035e4 	.word	0x240035e4
 800c3a4:	08015e4c 	.word	0x08015e4c
 800c3a8:	08016284 	.word	0x08016284
 800c3ac:	08015e90 	.word	0x08015e90
 800c3b0:	080162b0 	.word	0x080162b0
 800c3b4:	240035ec 	.word	0x240035ec
 800c3b8:	240035e8 	.word	0x240035e8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3be:	7d1b      	ldrb	r3, [r3, #20]
 800c3c0:	2b0a      	cmp	r3, #10
 800c3c2:	d006      	beq.n	800c3d2 <tcp_slowtmr+0x5c2>
 800c3c4:	4b2b      	ldr	r3, [pc, #172]	; (800c474 <tcp_slowtmr+0x664>)
 800c3c6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800c3ca:	492b      	ldr	r1, [pc, #172]	; (800c478 <tcp_slowtmr+0x668>)
 800c3cc:	482b      	ldr	r0, [pc, #172]	; (800c47c <tcp_slowtmr+0x66c>)
 800c3ce:	f007 fe49 	bl	8014064 <iprintf>
    pcb_remove = 0;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c3d8:	4b29      	ldr	r3, [pc, #164]	; (800c480 <tcp_slowtmr+0x670>)
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3de:	6a1b      	ldr	r3, [r3, #32]
 800c3e0:	1ad3      	subs	r3, r2, r3
 800c3e2:	2bf0      	cmp	r3, #240	; 0xf0
 800c3e4:	d904      	bls.n	800c3f0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c3e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c3f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d02f      	beq.n	800c458 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c3f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3fa:	f000 fc17 	bl	800cc2c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c400:	2b00      	cmp	r3, #0
 800c402:	d010      	beq.n	800c426 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c404:	4b1f      	ldr	r3, [pc, #124]	; (800c484 <tcp_slowtmr+0x674>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d106      	bne.n	800c41c <tcp_slowtmr+0x60c>
 800c40e:	4b19      	ldr	r3, [pc, #100]	; (800c474 <tcp_slowtmr+0x664>)
 800c410:	f240 52af 	movw	r2, #1455	; 0x5af
 800c414:	491c      	ldr	r1, [pc, #112]	; (800c488 <tcp_slowtmr+0x678>)
 800c416:	4819      	ldr	r0, [pc, #100]	; (800c47c <tcp_slowtmr+0x66c>)
 800c418:	f007 fe24 	bl	8014064 <iprintf>
        prev->next = pcb->next;
 800c41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c41e:	68da      	ldr	r2, [r3, #12]
 800c420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c422:	60da      	str	r2, [r3, #12]
 800c424:	e00f      	b.n	800c446 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c426:	4b17      	ldr	r3, [pc, #92]	; (800c484 <tcp_slowtmr+0x674>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d006      	beq.n	800c43e <tcp_slowtmr+0x62e>
 800c430:	4b10      	ldr	r3, [pc, #64]	; (800c474 <tcp_slowtmr+0x664>)
 800c432:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c436:	4915      	ldr	r1, [pc, #84]	; (800c48c <tcp_slowtmr+0x67c>)
 800c438:	4810      	ldr	r0, [pc, #64]	; (800c47c <tcp_slowtmr+0x66c>)
 800c43a:	f007 fe13 	bl	8014064 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c440:	68db      	ldr	r3, [r3, #12]
 800c442:	4a10      	ldr	r2, [pc, #64]	; (800c484 <tcp_slowtmr+0x674>)
 800c444:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c448:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c44c:	68db      	ldr	r3, [r3, #12]
 800c44e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c450:	69f8      	ldr	r0, [r7, #28]
 800c452:	f7fe ff85 	bl	800b360 <tcp_free>
 800c456:	e004      	b.n	800c462 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45e:	68db      	ldr	r3, [r3, #12]
 800c460:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c464:	2b00      	cmp	r3, #0
 800c466:	d1a9      	bne.n	800c3bc <tcp_slowtmr+0x5ac>
    }
  }
}
 800c468:	bf00      	nop
 800c46a:	bf00      	nop
 800c46c:	3730      	adds	r7, #48	; 0x30
 800c46e:	46bd      	mov	sp, r7
 800c470:	bdb0      	pop	{r4, r5, r7, pc}
 800c472:	bf00      	nop
 800c474:	08015e4c 	.word	0x08015e4c
 800c478:	080162dc 	.word	0x080162dc
 800c47c:	08015e90 	.word	0x08015e90
 800c480:	240035d8 	.word	0x240035d8
 800c484:	240035e8 	.word	0x240035e8
 800c488:	0801630c 	.word	0x0801630c
 800c48c:	08016334 	.word	0x08016334

0800c490 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b082      	sub	sp, #8
 800c494:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c496:	4b2d      	ldr	r3, [pc, #180]	; (800c54c <tcp_fasttmr+0xbc>)
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	3301      	adds	r3, #1
 800c49c:	b2da      	uxtb	r2, r3
 800c49e:	4b2b      	ldr	r3, [pc, #172]	; (800c54c <tcp_fasttmr+0xbc>)
 800c4a0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c4a2:	4b2b      	ldr	r3, [pc, #172]	; (800c550 <tcp_fasttmr+0xc0>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c4a8:	e048      	b.n	800c53c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	7f9a      	ldrb	r2, [r3, #30]
 800c4ae:	4b27      	ldr	r3, [pc, #156]	; (800c54c <tcp_fasttmr+0xbc>)
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d03f      	beq.n	800c536 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c4b6:	4b25      	ldr	r3, [pc, #148]	; (800c54c <tcp_fasttmr+0xbc>)
 800c4b8:	781a      	ldrb	r2, [r3, #0]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	8b5b      	ldrh	r3, [r3, #26]
 800c4c2:	f003 0301 	and.w	r3, r3, #1
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d010      	beq.n	800c4ec <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	8b5b      	ldrh	r3, [r3, #26]
 800c4ce:	f043 0302 	orr.w	r3, r3, #2
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f004 f813 	bl	8010504 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	8b5b      	ldrh	r3, [r3, #26]
 800c4e2:	f023 0303 	bic.w	r3, r3, #3
 800c4e6:	b29a      	uxth	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	8b5b      	ldrh	r3, [r3, #26]
 800c4f0:	f003 0308 	and.w	r3, r3, #8
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d009      	beq.n	800c50c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	8b5b      	ldrh	r3, [r3, #26]
 800c4fc:	f023 0308 	bic.w	r3, r3, #8
 800c500:	b29a      	uxth	r2, r3
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f7ff f8be 	bl	800b688 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c516:	2b00      	cmp	r3, #0
 800c518:	d00a      	beq.n	800c530 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c51a:	4b0e      	ldr	r3, [pc, #56]	; (800c554 <tcp_fasttmr+0xc4>)
 800c51c:	2200      	movs	r2, #0
 800c51e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 f819 	bl	800c558 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c526:	4b0b      	ldr	r3, [pc, #44]	; (800c554 <tcp_fasttmr+0xc4>)
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d000      	beq.n	800c530 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c52e:	e7b8      	b.n	800c4a2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	607b      	str	r3, [r7, #4]
 800c534:	e002      	b.n	800c53c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	68db      	ldr	r3, [r3, #12]
 800c53a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d1b3      	bne.n	800c4aa <tcp_fasttmr+0x1a>
    }
  }
}
 800c542:	bf00      	nop
 800c544:	bf00      	nop
 800c546:	3708      	adds	r7, #8
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}
 800c54c:	240035ee 	.word	0x240035ee
 800c550:	240035e4 	.word	0x240035e4
 800c554:	240035ec 	.word	0x240035ec

0800c558 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c558:	b590      	push	{r4, r7, lr}
 800c55a:	b085      	sub	sp, #20
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d109      	bne.n	800c57a <tcp_process_refused_data+0x22>
 800c566:	4b37      	ldr	r3, [pc, #220]	; (800c644 <tcp_process_refused_data+0xec>)
 800c568:	f240 6209 	movw	r2, #1545	; 0x609
 800c56c:	4936      	ldr	r1, [pc, #216]	; (800c648 <tcp_process_refused_data+0xf0>)
 800c56e:	4837      	ldr	r0, [pc, #220]	; (800c64c <tcp_process_refused_data+0xf4>)
 800c570:	f007 fd78 	bl	8014064 <iprintf>
 800c574:	f06f 030f 	mvn.w	r3, #15
 800c578:	e060      	b.n	800c63c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c57e:	7b5b      	ldrb	r3, [r3, #13]
 800c580:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c586:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2200      	movs	r2, #0
 800c58c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c594:	2b00      	cmp	r3, #0
 800c596:	d00b      	beq.n	800c5b0 <tcp_process_refused_data+0x58>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6918      	ldr	r0, [r3, #16]
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	68ba      	ldr	r2, [r7, #8]
 800c5a6:	6879      	ldr	r1, [r7, #4]
 800c5a8:	47a0      	blx	r4
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	73fb      	strb	r3, [r7, #15]
 800c5ae:	e007      	b.n	800c5c0 <tcp_process_refused_data+0x68>
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	68ba      	ldr	r2, [r7, #8]
 800c5b4:	6879      	ldr	r1, [r7, #4]
 800c5b6:	2000      	movs	r0, #0
 800c5b8:	f000 f8c2 	bl	800c740 <tcp_recv_null>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c5c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d12a      	bne.n	800c61e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c5c8:	7bbb      	ldrb	r3, [r7, #14]
 800c5ca:	f003 0320 	and.w	r3, r3, #32
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d033      	beq.n	800c63a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5d6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c5da:	d005      	beq.n	800c5e8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	b29a      	uxth	r2, r3
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d00b      	beq.n	800c60a <tcp_process_refused_data+0xb2>
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6918      	ldr	r0, [r3, #16]
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	2200      	movs	r2, #0
 800c600:	6879      	ldr	r1, [r7, #4]
 800c602:	47a0      	blx	r4
 800c604:	4603      	mov	r3, r0
 800c606:	73fb      	strb	r3, [r7, #15]
 800c608:	e001      	b.n	800c60e <tcp_process_refused_data+0xb6>
 800c60a:	2300      	movs	r3, #0
 800c60c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c60e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c612:	f113 0f0d 	cmn.w	r3, #13
 800c616:	d110      	bne.n	800c63a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c618:	f06f 030c 	mvn.w	r3, #12
 800c61c:	e00e      	b.n	800c63c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c61e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c622:	f113 0f0d 	cmn.w	r3, #13
 800c626:	d102      	bne.n	800c62e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c628:	f06f 030c 	mvn.w	r3, #12
 800c62c:	e006      	b.n	800c63c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	68ba      	ldr	r2, [r7, #8]
 800c632:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800c634:	f06f 0304 	mvn.w	r3, #4
 800c638:	e000      	b.n	800c63c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c63a:	2300      	movs	r3, #0
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3714      	adds	r7, #20
 800c640:	46bd      	mov	sp, r7
 800c642:	bd90      	pop	{r4, r7, pc}
 800c644:	08015e4c 	.word	0x08015e4c
 800c648:	0801635c 	.word	0x0801635c
 800c64c:	08015e90 	.word	0x08015e90

0800c650 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c658:	e007      	b.n	800c66a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 f80a 	bl	800c67a <tcp_seg_free>
    seg = next;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d1f4      	bne.n	800c65a <tcp_segs_free+0xa>
  }
}
 800c670:	bf00      	nop
 800c672:	bf00      	nop
 800c674:	3710      	adds	r7, #16
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}

0800c67a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c67a:	b580      	push	{r7, lr}
 800c67c:	b082      	sub	sp, #8
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d00c      	beq.n	800c6a2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d004      	beq.n	800c69a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	4618      	mov	r0, r3
 800c696:	f7fe fbc3 	bl	800ae20 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c69a:	6879      	ldr	r1, [r7, #4]
 800c69c:	2003      	movs	r0, #3
 800c69e:	f7fd fd4b 	bl	800a138 <memp_free>
  }
}
 800c6a2:	bf00      	nop
 800c6a4:	3708      	adds	r7, #8
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
	...

0800c6ac <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d107      	bne.n	800c6ce <tcp_setprio+0x22>
 800c6be:	4b07      	ldr	r3, [pc, #28]	; (800c6dc <tcp_setprio+0x30>)
 800c6c0:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800c6c4:	4906      	ldr	r1, [pc, #24]	; (800c6e0 <tcp_setprio+0x34>)
 800c6c6:	4807      	ldr	r0, [pc, #28]	; (800c6e4 <tcp_setprio+0x38>)
 800c6c8:	f007 fccc 	bl	8014064 <iprintf>
 800c6cc:	e002      	b.n	800c6d4 <tcp_setprio+0x28>

  pcb->prio = prio;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	78fa      	ldrb	r2, [r7, #3]
 800c6d2:	755a      	strb	r2, [r3, #21]
}
 800c6d4:	3708      	adds	r7, #8
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	08015e4c 	.word	0x08015e4c
 800c6e0:	08016384 	.word	0x08016384
 800c6e4:	08015e90 	.word	0x08015e90

0800c6e8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b084      	sub	sp, #16
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d106      	bne.n	800c704 <tcp_seg_copy+0x1c>
 800c6f6:	4b0f      	ldr	r3, [pc, #60]	; (800c734 <tcp_seg_copy+0x4c>)
 800c6f8:	f240 6282 	movw	r2, #1666	; 0x682
 800c6fc:	490e      	ldr	r1, [pc, #56]	; (800c738 <tcp_seg_copy+0x50>)
 800c6fe:	480f      	ldr	r0, [pc, #60]	; (800c73c <tcp_seg_copy+0x54>)
 800c700:	f007 fcb0 	bl	8014064 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c704:	2003      	movs	r0, #3
 800c706:	f7fd fca7 	bl	800a058 <memp_malloc>
 800c70a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d101      	bne.n	800c716 <tcp_seg_copy+0x2e>
    return NULL;
 800c712:	2300      	movs	r3, #0
 800c714:	e00a      	b.n	800c72c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c716:	2210      	movs	r2, #16
 800c718:	6879      	ldr	r1, [r7, #4]
 800c71a:	68f8      	ldr	r0, [r7, #12]
 800c71c:	f007 fc8c 	bl	8014038 <memcpy>
  pbuf_ref(cseg->p);
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	4618      	mov	r0, r3
 800c726:	f7fe fc1b 	bl	800af60 <pbuf_ref>
  return cseg;
 800c72a:	68fb      	ldr	r3, [r7, #12]
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}
 800c734:	08015e4c 	.word	0x08015e4c
 800c738:	080163a0 	.word	0x080163a0
 800c73c:	08015e90 	.word	0x08015e90

0800c740 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b084      	sub	sp, #16
 800c744:	af00      	add	r7, sp, #0
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	607a      	str	r2, [r7, #4]
 800c74c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d109      	bne.n	800c768 <tcp_recv_null+0x28>
 800c754:	4b12      	ldr	r3, [pc, #72]	; (800c7a0 <tcp_recv_null+0x60>)
 800c756:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c75a:	4912      	ldr	r1, [pc, #72]	; (800c7a4 <tcp_recv_null+0x64>)
 800c75c:	4812      	ldr	r0, [pc, #72]	; (800c7a8 <tcp_recv_null+0x68>)
 800c75e:	f007 fc81 	bl	8014064 <iprintf>
 800c762:	f06f 030f 	mvn.w	r3, #15
 800c766:	e016      	b.n	800c796 <tcp_recv_null+0x56>

  if (p != NULL) {
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d009      	beq.n	800c782 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	891b      	ldrh	r3, [r3, #8]
 800c772:	4619      	mov	r1, r3
 800c774:	68b8      	ldr	r0, [r7, #8]
 800c776:	f7ff fab5 	bl	800bce4 <tcp_recved>
    pbuf_free(p);
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f7fe fb50 	bl	800ae20 <pbuf_free>
 800c780:	e008      	b.n	800c794 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c782:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d104      	bne.n	800c794 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c78a:	68b8      	ldr	r0, [r7, #8]
 800c78c:	f7fe ffe6 	bl	800b75c <tcp_close>
 800c790:	4603      	mov	r3, r0
 800c792:	e000      	b.n	800c796 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c794:	2300      	movs	r3, #0
}
 800c796:	4618      	mov	r0, r3
 800c798:	3710      	adds	r7, #16
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	08015e4c 	.word	0x08015e4c
 800c7a4:	080163bc 	.word	0x080163bc
 800c7a8:	08015e90 	.word	0x08015e90

0800c7ac <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b086      	sub	sp, #24
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c7b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	db01      	blt.n	800c7c2 <tcp_kill_prio+0x16>
 800c7be:	79fb      	ldrb	r3, [r7, #7]
 800c7c0:	e000      	b.n	800c7c4 <tcp_kill_prio+0x18>
 800c7c2:	237f      	movs	r3, #127	; 0x7f
 800c7c4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c7c6:	7afb      	ldrb	r3, [r7, #11]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d034      	beq.n	800c836 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c7cc:	7afb      	ldrb	r3, [r7, #11]
 800c7ce:	3b01      	subs	r3, #1
 800c7d0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c7da:	4b19      	ldr	r3, [pc, #100]	; (800c840 <tcp_kill_prio+0x94>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	617b      	str	r3, [r7, #20]
 800c7e0:	e01f      	b.n	800c822 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	7d5b      	ldrb	r3, [r3, #21]
 800c7e6:	7afa      	ldrb	r2, [r7, #11]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d80c      	bhi.n	800c806 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c7f0:	7afa      	ldrb	r2, [r7, #11]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d112      	bne.n	800c81c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c7f6:	4b13      	ldr	r3, [pc, #76]	; (800c844 <tcp_kill_prio+0x98>)
 800c7f8:	681a      	ldr	r2, [r3, #0]
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	6a1b      	ldr	r3, [r3, #32]
 800c7fe:	1ad3      	subs	r3, r2, r3
 800c800:	68fa      	ldr	r2, [r7, #12]
 800c802:	429a      	cmp	r2, r3
 800c804:	d80a      	bhi.n	800c81c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c806:	4b0f      	ldr	r3, [pc, #60]	; (800c844 <tcp_kill_prio+0x98>)
 800c808:	681a      	ldr	r2, [r3, #0]
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	6a1b      	ldr	r3, [r3, #32]
 800c80e:	1ad3      	subs	r3, r2, r3
 800c810:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	7d5b      	ldrb	r3, [r3, #21]
 800c81a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	68db      	ldr	r3, [r3, #12]
 800c820:	617b      	str	r3, [r7, #20]
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d1dc      	bne.n	800c7e2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d004      	beq.n	800c838 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c82e:	6938      	ldr	r0, [r7, #16]
 800c830:	f7ff f87e 	bl	800b930 <tcp_abort>
 800c834:	e000      	b.n	800c838 <tcp_kill_prio+0x8c>
    return;
 800c836:	bf00      	nop
  }
}
 800c838:	3718      	adds	r7, #24
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	240035e4 	.word	0x240035e4
 800c844:	240035d8 	.word	0x240035d8

0800c848 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b086      	sub	sp, #24
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	4603      	mov	r3, r0
 800c850:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c852:	79fb      	ldrb	r3, [r7, #7]
 800c854:	2b08      	cmp	r3, #8
 800c856:	d009      	beq.n	800c86c <tcp_kill_state+0x24>
 800c858:	79fb      	ldrb	r3, [r7, #7]
 800c85a:	2b09      	cmp	r3, #9
 800c85c:	d006      	beq.n	800c86c <tcp_kill_state+0x24>
 800c85e:	4b1a      	ldr	r3, [pc, #104]	; (800c8c8 <tcp_kill_state+0x80>)
 800c860:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800c864:	4919      	ldr	r1, [pc, #100]	; (800c8cc <tcp_kill_state+0x84>)
 800c866:	481a      	ldr	r0, [pc, #104]	; (800c8d0 <tcp_kill_state+0x88>)
 800c868:	f007 fbfc 	bl	8014064 <iprintf>

  inactivity = 0;
 800c86c:	2300      	movs	r3, #0
 800c86e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c870:	2300      	movs	r3, #0
 800c872:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c874:	4b17      	ldr	r3, [pc, #92]	; (800c8d4 <tcp_kill_state+0x8c>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	617b      	str	r3, [r7, #20]
 800c87a:	e017      	b.n	800c8ac <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	7d1b      	ldrb	r3, [r3, #20]
 800c880:	79fa      	ldrb	r2, [r7, #7]
 800c882:	429a      	cmp	r2, r3
 800c884:	d10f      	bne.n	800c8a6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c886:	4b14      	ldr	r3, [pc, #80]	; (800c8d8 <tcp_kill_state+0x90>)
 800c888:	681a      	ldr	r2, [r3, #0]
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	6a1b      	ldr	r3, [r3, #32]
 800c88e:	1ad3      	subs	r3, r2, r3
 800c890:	68fa      	ldr	r2, [r7, #12]
 800c892:	429a      	cmp	r2, r3
 800c894:	d807      	bhi.n	800c8a6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c896:	4b10      	ldr	r3, [pc, #64]	; (800c8d8 <tcp_kill_state+0x90>)
 800c898:	681a      	ldr	r2, [r3, #0]
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	6a1b      	ldr	r3, [r3, #32]
 800c89e:	1ad3      	subs	r3, r2, r3
 800c8a0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	68db      	ldr	r3, [r3, #12]
 800c8aa:	617b      	str	r3, [r7, #20]
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d1e4      	bne.n	800c87c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d003      	beq.n	800c8c0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c8b8:	2100      	movs	r1, #0
 800c8ba:	6938      	ldr	r0, [r7, #16]
 800c8bc:	f7fe ff7a 	bl	800b7b4 <tcp_abandon>
  }
}
 800c8c0:	bf00      	nop
 800c8c2:	3718      	adds	r7, #24
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}
 800c8c8:	08015e4c 	.word	0x08015e4c
 800c8cc:	080163d8 	.word	0x080163d8
 800c8d0:	08015e90 	.word	0x08015e90
 800c8d4:	240035e4 	.word	0x240035e4
 800c8d8:	240035d8 	.word	0x240035d8

0800c8dc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b084      	sub	sp, #16
 800c8e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c8ea:	4b12      	ldr	r3, [pc, #72]	; (800c934 <tcp_kill_timewait+0x58>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	60fb      	str	r3, [r7, #12]
 800c8f0:	e012      	b.n	800c918 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c8f2:	4b11      	ldr	r3, [pc, #68]	; (800c938 <tcp_kill_timewait+0x5c>)
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	6a1b      	ldr	r3, [r3, #32]
 800c8fa:	1ad3      	subs	r3, r2, r3
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d807      	bhi.n	800c912 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c902:	4b0d      	ldr	r3, [pc, #52]	; (800c938 <tcp_kill_timewait+0x5c>)
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	6a1b      	ldr	r3, [r3, #32]
 800c90a:	1ad3      	subs	r3, r2, r3
 800c90c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	68db      	ldr	r3, [r3, #12]
 800c916:	60fb      	str	r3, [r7, #12]
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d1e9      	bne.n	800c8f2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d002      	beq.n	800c92a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c924:	68b8      	ldr	r0, [r7, #8]
 800c926:	f7ff f803 	bl	800b930 <tcp_abort>
  }
}
 800c92a:	bf00      	nop
 800c92c:	3710      	adds	r7, #16
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	240035e8 	.word	0x240035e8
 800c938:	240035d8 	.word	0x240035d8

0800c93c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c942:	4b10      	ldr	r3, [pc, #64]	; (800c984 <tcp_handle_closepend+0x48>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c948:	e014      	b.n	800c974 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	68db      	ldr	r3, [r3, #12]
 800c94e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	8b5b      	ldrh	r3, [r3, #26]
 800c954:	f003 0308 	and.w	r3, r3, #8
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d009      	beq.n	800c970 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	8b5b      	ldrh	r3, [r3, #26]
 800c960:	f023 0308 	bic.w	r3, r3, #8
 800c964:	b29a      	uxth	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f7fe fe8c 	bl	800b688 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d1e7      	bne.n	800c94a <tcp_handle_closepend+0xe>
  }
}
 800c97a:	bf00      	nop
 800c97c:	bf00      	nop
 800c97e:	3708      	adds	r7, #8
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	240035e4 	.word	0x240035e4

0800c988 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	4603      	mov	r3, r0
 800c990:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c992:	2001      	movs	r0, #1
 800c994:	f7fd fb60 	bl	800a058 <memp_malloc>
 800c998:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d126      	bne.n	800c9ee <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c9a0:	f7ff ffcc 	bl	800c93c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c9a4:	f7ff ff9a 	bl	800c8dc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c9a8:	2001      	movs	r0, #1
 800c9aa:	f7fd fb55 	bl	800a058 <memp_malloc>
 800c9ae:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d11b      	bne.n	800c9ee <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c9b6:	2009      	movs	r0, #9
 800c9b8:	f7ff ff46 	bl	800c848 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c9bc:	2001      	movs	r0, #1
 800c9be:	f7fd fb4b 	bl	800a058 <memp_malloc>
 800c9c2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d111      	bne.n	800c9ee <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c9ca:	2008      	movs	r0, #8
 800c9cc:	f7ff ff3c 	bl	800c848 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c9d0:	2001      	movs	r0, #1
 800c9d2:	f7fd fb41 	bl	800a058 <memp_malloc>
 800c9d6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d107      	bne.n	800c9ee <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c9de:	79fb      	ldrb	r3, [r7, #7]
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7ff fee3 	bl	800c7ac <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c9e6:	2001      	movs	r0, #1
 800c9e8:	f7fd fb36 	bl	800a058 <memp_malloc>
 800c9ec:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d03f      	beq.n	800ca74 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c9f4:	229c      	movs	r2, #156	; 0x9c
 800c9f6:	2100      	movs	r1, #0
 800c9f8:	68f8      	ldr	r0, [r7, #12]
 800c9fa:	f007 fb2b 	bl	8014054 <memset>
    pcb->prio = prio;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	79fa      	ldrb	r2, [r7, #7]
 800ca02:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ca0a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ca14:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	22ff      	movs	r2, #255	; 0xff
 800ca22:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ca2a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2206      	movs	r2, #6
 800ca30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2206      	movs	r2, #6
 800ca38:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca40:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2201      	movs	r2, #1
 800ca46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ca4a:	4b0d      	ldr	r3, [pc, #52]	; (800ca80 <tcp_alloc+0xf8>)
 800ca4c:	681a      	ldr	r2, [r3, #0]
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ca52:	4b0c      	ldr	r3, [pc, #48]	; (800ca84 <tcp_alloc+0xfc>)
 800ca54:	781a      	ldrb	r2, [r3, #0]
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ca60:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	4a08      	ldr	r2, [pc, #32]	; (800ca88 <tcp_alloc+0x100>)
 800ca68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	4a07      	ldr	r2, [pc, #28]	; (800ca8c <tcp_alloc+0x104>)
 800ca70:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ca74:	68fb      	ldr	r3, [r7, #12]
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3710      	adds	r7, #16
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}
 800ca7e:	bf00      	nop
 800ca80:	240035d8 	.word	0x240035d8
 800ca84:	240035ee 	.word	0x240035ee
 800ca88:	0800c741 	.word	0x0800c741
 800ca8c:	006ddd00 	.word	0x006ddd00

0800ca90 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	4603      	mov	r3, r0
 800ca98:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800ca9a:	2040      	movs	r0, #64	; 0x40
 800ca9c:	f7ff ff74 	bl	800c988 <tcp_alloc>
 800caa0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800caa2:	68fb      	ldr	r3, [r7, #12]
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3710      	adds	r7, #16
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800caac:	b480      	push	{r7}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d002      	beq.n	800cac2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	683a      	ldr	r2, [r7, #0]
 800cac0:	611a      	str	r2, [r3, #16]
  }
}
 800cac2:	bf00      	nop
 800cac4:	370c      	adds	r7, #12
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr
	...

0800cad0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d00e      	beq.n	800cafe <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	7d1b      	ldrb	r3, [r3, #20]
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d106      	bne.n	800caf6 <tcp_recv+0x26>
 800cae8:	4b07      	ldr	r3, [pc, #28]	; (800cb08 <tcp_recv+0x38>)
 800caea:	f240 72df 	movw	r2, #2015	; 0x7df
 800caee:	4907      	ldr	r1, [pc, #28]	; (800cb0c <tcp_recv+0x3c>)
 800caf0:	4807      	ldr	r0, [pc, #28]	; (800cb10 <tcp_recv+0x40>)
 800caf2:	f007 fab7 	bl	8014064 <iprintf>
    pcb->recv = recv;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	683a      	ldr	r2, [r7, #0]
 800cafa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800cafe:	bf00      	nop
 800cb00:	3708      	adds	r7, #8
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
 800cb06:	bf00      	nop
 800cb08:	08015e4c 	.word	0x08015e4c
 800cb0c:	080163e8 	.word	0x080163e8
 800cb10:	08015e90 	.word	0x08015e90

0800cb14 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d00e      	beq.n	800cb42 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	7d1b      	ldrb	r3, [r3, #20]
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	d106      	bne.n	800cb3a <tcp_sent+0x26>
 800cb2c:	4b07      	ldr	r3, [pc, #28]	; (800cb4c <tcp_sent+0x38>)
 800cb2e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800cb32:	4907      	ldr	r1, [pc, #28]	; (800cb50 <tcp_sent+0x3c>)
 800cb34:	4807      	ldr	r0, [pc, #28]	; (800cb54 <tcp_sent+0x40>)
 800cb36:	f007 fa95 	bl	8014064 <iprintf>
    pcb->sent = sent;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	683a      	ldr	r2, [r7, #0]
 800cb3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800cb42:	bf00      	nop
 800cb44:	3708      	adds	r7, #8
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
 800cb4a:	bf00      	nop
 800cb4c:	08015e4c 	.word	0x08015e4c
 800cb50:	08016410 	.word	0x08016410
 800cb54:	08015e90 	.word	0x08015e90

0800cb58 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d00e      	beq.n	800cb86 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	7d1b      	ldrb	r3, [r3, #20]
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	d106      	bne.n	800cb7e <tcp_err+0x26>
 800cb70:	4b07      	ldr	r3, [pc, #28]	; (800cb90 <tcp_err+0x38>)
 800cb72:	f640 020d 	movw	r2, #2061	; 0x80d
 800cb76:	4907      	ldr	r1, [pc, #28]	; (800cb94 <tcp_err+0x3c>)
 800cb78:	4807      	ldr	r0, [pc, #28]	; (800cb98 <tcp_err+0x40>)
 800cb7a:	f007 fa73 	bl	8014064 <iprintf>
    pcb->errf = err;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	683a      	ldr	r2, [r7, #0]
 800cb82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800cb86:	bf00      	nop
 800cb88:	3708      	adds	r7, #8
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	08015e4c 	.word	0x08015e4c
 800cb94:	08016438 	.word	0x08016438
 800cb98:	08015e90 	.word	0x08015e90

0800cb9c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b085      	sub	sp, #20
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d008      	beq.n	800cbbe <tcp_accept+0x22>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	7d1b      	ldrb	r3, [r3, #20]
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	d104      	bne.n	800cbbe <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	683a      	ldr	r2, [r7, #0]
 800cbbc:	619a      	str	r2, [r3, #24]
  }
}
 800cbbe:	bf00      	nop
 800cbc0:	3714      	adds	r7, #20
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr
	...

0800cbcc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b084      	sub	sp, #16
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	60b9      	str	r1, [r7, #8]
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d107      	bne.n	800cbf0 <tcp_poll+0x24>
 800cbe0:	4b0e      	ldr	r3, [pc, #56]	; (800cc1c <tcp_poll+0x50>)
 800cbe2:	f640 023d 	movw	r2, #2109	; 0x83d
 800cbe6:	490e      	ldr	r1, [pc, #56]	; (800cc20 <tcp_poll+0x54>)
 800cbe8:	480e      	ldr	r0, [pc, #56]	; (800cc24 <tcp_poll+0x58>)
 800cbea:	f007 fa3b 	bl	8014064 <iprintf>
 800cbee:	e011      	b.n	800cc14 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	7d1b      	ldrb	r3, [r3, #20]
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	d106      	bne.n	800cc06 <tcp_poll+0x3a>
 800cbf8:	4b08      	ldr	r3, [pc, #32]	; (800cc1c <tcp_poll+0x50>)
 800cbfa:	f640 023e 	movw	r2, #2110	; 0x83e
 800cbfe:	490a      	ldr	r1, [pc, #40]	; (800cc28 <tcp_poll+0x5c>)
 800cc00:	4808      	ldr	r0, [pc, #32]	; (800cc24 <tcp_poll+0x58>)
 800cc02:	f007 fa2f 	bl	8014064 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	68ba      	ldr	r2, [r7, #8]
 800cc0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	79fa      	ldrb	r2, [r7, #7]
 800cc12:	775a      	strb	r2, [r3, #29]
}
 800cc14:	3710      	adds	r7, #16
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	08015e4c 	.word	0x08015e4c
 800cc20:	08016460 	.word	0x08016460
 800cc24:	08015e90 	.word	0x08015e90
 800cc28:	08016478 	.word	0x08016478

0800cc2c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d107      	bne.n	800cc4a <tcp_pcb_purge+0x1e>
 800cc3a:	4b21      	ldr	r3, [pc, #132]	; (800ccc0 <tcp_pcb_purge+0x94>)
 800cc3c:	f640 0251 	movw	r2, #2129	; 0x851
 800cc40:	4920      	ldr	r1, [pc, #128]	; (800ccc4 <tcp_pcb_purge+0x98>)
 800cc42:	4821      	ldr	r0, [pc, #132]	; (800ccc8 <tcp_pcb_purge+0x9c>)
 800cc44:	f007 fa0e 	bl	8014064 <iprintf>
 800cc48:	e037      	b.n	800ccba <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	7d1b      	ldrb	r3, [r3, #20]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d033      	beq.n	800ccba <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800cc56:	2b0a      	cmp	r3, #10
 800cc58:	d02f      	beq.n	800ccba <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800cc5e:	2b01      	cmp	r3, #1
 800cc60:	d02b      	beq.n	800ccba <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d007      	beq.n	800cc7a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7fe f8d6 	bl	800ae20 <pbuf_free>
      pcb->refused_data = NULL;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2200      	movs	r2, #0
 800cc78:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d002      	beq.n	800cc88 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 f986 	bl	800cf94 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc8e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7ff fcdb 	bl	800c650 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7ff fcd6 	bl	800c650 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2200      	movs	r2, #0
 800cca8:	66da      	str	r2, [r3, #108]	; 0x6c
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ccba:	3708      	adds	r7, #8
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}
 800ccc0:	08015e4c 	.word	0x08015e4c
 800ccc4:	08016498 	.word	0x08016498
 800ccc8:	08015e90 	.word	0x08015e90

0800cccc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
 800ccd4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d106      	bne.n	800ccea <tcp_pcb_remove+0x1e>
 800ccdc:	4b3e      	ldr	r3, [pc, #248]	; (800cdd8 <tcp_pcb_remove+0x10c>)
 800ccde:	f640 0283 	movw	r2, #2179	; 0x883
 800cce2:	493e      	ldr	r1, [pc, #248]	; (800cddc <tcp_pcb_remove+0x110>)
 800cce4:	483e      	ldr	r0, [pc, #248]	; (800cde0 <tcp_pcb_remove+0x114>)
 800cce6:	f007 f9bd 	bl	8014064 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d106      	bne.n	800ccfe <tcp_pcb_remove+0x32>
 800ccf0:	4b39      	ldr	r3, [pc, #228]	; (800cdd8 <tcp_pcb_remove+0x10c>)
 800ccf2:	f640 0284 	movw	r2, #2180	; 0x884
 800ccf6:	493b      	ldr	r1, [pc, #236]	; (800cde4 <tcp_pcb_remove+0x118>)
 800ccf8:	4839      	ldr	r0, [pc, #228]	; (800cde0 <tcp_pcb_remove+0x114>)
 800ccfa:	f007 f9b3 	bl	8014064 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	683a      	ldr	r2, [r7, #0]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d105      	bne.n	800cd14 <tcp_pcb_remove+0x48>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	68da      	ldr	r2, [r3, #12]
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	601a      	str	r2, [r3, #0]
 800cd12:	e013      	b.n	800cd3c <tcp_pcb_remove+0x70>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	60fb      	str	r3, [r7, #12]
 800cd1a:	e00c      	b.n	800cd36 <tcp_pcb_remove+0x6a>
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	68db      	ldr	r3, [r3, #12]
 800cd20:	683a      	ldr	r2, [r7, #0]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d104      	bne.n	800cd30 <tcp_pcb_remove+0x64>
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	68da      	ldr	r2, [r3, #12]
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	60da      	str	r2, [r3, #12]
 800cd2e:	e005      	b.n	800cd3c <tcp_pcb_remove+0x70>
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	60fb      	str	r3, [r7, #12]
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d1ef      	bne.n	800cd1c <tcp_pcb_remove+0x50>
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800cd42:	6838      	ldr	r0, [r7, #0]
 800cd44:	f7ff ff72 	bl	800cc2c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	7d1b      	ldrb	r3, [r3, #20]
 800cd4c:	2b0a      	cmp	r3, #10
 800cd4e:	d013      	beq.n	800cd78 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	d00f      	beq.n	800cd78 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	8b5b      	ldrh	r3, [r3, #26]
 800cd5c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d009      	beq.n	800cd78 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	8b5b      	ldrh	r3, [r3, #26]
 800cd68:	f043 0302 	orr.w	r3, r3, #2
 800cd6c:	b29a      	uxth	r2, r3
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cd72:	6838      	ldr	r0, [r7, #0]
 800cd74:	f003 fbc6 	bl	8010504 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	7d1b      	ldrb	r3, [r3, #20]
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	d020      	beq.n	800cdc2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d006      	beq.n	800cd96 <tcp_pcb_remove+0xca>
 800cd88:	4b13      	ldr	r3, [pc, #76]	; (800cdd8 <tcp_pcb_remove+0x10c>)
 800cd8a:	f640 0293 	movw	r2, #2195	; 0x893
 800cd8e:	4916      	ldr	r1, [pc, #88]	; (800cde8 <tcp_pcb_remove+0x11c>)
 800cd90:	4813      	ldr	r0, [pc, #76]	; (800cde0 <tcp_pcb_remove+0x114>)
 800cd92:	f007 f967 	bl	8014064 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d006      	beq.n	800cdac <tcp_pcb_remove+0xe0>
 800cd9e:	4b0e      	ldr	r3, [pc, #56]	; (800cdd8 <tcp_pcb_remove+0x10c>)
 800cda0:	f640 0294 	movw	r2, #2196	; 0x894
 800cda4:	4911      	ldr	r1, [pc, #68]	; (800cdec <tcp_pcb_remove+0x120>)
 800cda6:	480e      	ldr	r0, [pc, #56]	; (800cde0 <tcp_pcb_remove+0x114>)
 800cda8:	f007 f95c 	bl	8014064 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d006      	beq.n	800cdc2 <tcp_pcb_remove+0xf6>
 800cdb4:	4b08      	ldr	r3, [pc, #32]	; (800cdd8 <tcp_pcb_remove+0x10c>)
 800cdb6:	f640 0296 	movw	r2, #2198	; 0x896
 800cdba:	490d      	ldr	r1, [pc, #52]	; (800cdf0 <tcp_pcb_remove+0x124>)
 800cdbc:	4808      	ldr	r0, [pc, #32]	; (800cde0 <tcp_pcb_remove+0x114>)
 800cdbe:	f007 f951 	bl	8014064 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800cdce:	bf00      	nop
 800cdd0:	3710      	adds	r7, #16
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	08015e4c 	.word	0x08015e4c
 800cddc:	080164b4 	.word	0x080164b4
 800cde0:	08015e90 	.word	0x08015e90
 800cde4:	080164d0 	.word	0x080164d0
 800cde8:	080164f0 	.word	0x080164f0
 800cdec:	08016508 	.word	0x08016508
 800cdf0:	08016524 	.word	0x08016524

0800cdf4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d106      	bne.n	800ce10 <tcp_next_iss+0x1c>
 800ce02:	4b0a      	ldr	r3, [pc, #40]	; (800ce2c <tcp_next_iss+0x38>)
 800ce04:	f640 02af 	movw	r2, #2223	; 0x8af
 800ce08:	4909      	ldr	r1, [pc, #36]	; (800ce30 <tcp_next_iss+0x3c>)
 800ce0a:	480a      	ldr	r0, [pc, #40]	; (800ce34 <tcp_next_iss+0x40>)
 800ce0c:	f007 f92a 	bl	8014064 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ce10:	4b09      	ldr	r3, [pc, #36]	; (800ce38 <tcp_next_iss+0x44>)
 800ce12:	681a      	ldr	r2, [r3, #0]
 800ce14:	4b09      	ldr	r3, [pc, #36]	; (800ce3c <tcp_next_iss+0x48>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	4413      	add	r3, r2
 800ce1a:	4a07      	ldr	r2, [pc, #28]	; (800ce38 <tcp_next_iss+0x44>)
 800ce1c:	6013      	str	r3, [r2, #0]
  return iss;
 800ce1e:	4b06      	ldr	r3, [pc, #24]	; (800ce38 <tcp_next_iss+0x44>)
 800ce20:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3708      	adds	r7, #8
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	08015e4c 	.word	0x08015e4c
 800ce30:	0801653c 	.word	0x0801653c
 800ce34:	08015e90 	.word	0x08015e90
 800ce38:	24000028 	.word	0x24000028
 800ce3c:	240035d8 	.word	0x240035d8

0800ce40 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b086      	sub	sp, #24
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	4603      	mov	r3, r0
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	607a      	str	r2, [r7, #4]
 800ce4c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d106      	bne.n	800ce62 <tcp_eff_send_mss_netif+0x22>
 800ce54:	4b14      	ldr	r3, [pc, #80]	; (800cea8 <tcp_eff_send_mss_netif+0x68>)
 800ce56:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ce5a:	4914      	ldr	r1, [pc, #80]	; (800ceac <tcp_eff_send_mss_netif+0x6c>)
 800ce5c:	4814      	ldr	r0, [pc, #80]	; (800ceb0 <tcp_eff_send_mss_netif+0x70>)
 800ce5e:	f007 f901 	bl	8014064 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d101      	bne.n	800ce6c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ce68:	89fb      	ldrh	r3, [r7, #14]
 800ce6a:	e019      	b.n	800cea0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ce70:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ce72:	8afb      	ldrh	r3, [r7, #22]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d012      	beq.n	800ce9e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ce78:	2328      	movs	r3, #40	; 0x28
 800ce7a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ce7c:	8afa      	ldrh	r2, [r7, #22]
 800ce7e:	8abb      	ldrh	r3, [r7, #20]
 800ce80:	429a      	cmp	r2, r3
 800ce82:	d904      	bls.n	800ce8e <tcp_eff_send_mss_netif+0x4e>
 800ce84:	8afa      	ldrh	r2, [r7, #22]
 800ce86:	8abb      	ldrh	r3, [r7, #20]
 800ce88:	1ad3      	subs	r3, r2, r3
 800ce8a:	b29b      	uxth	r3, r3
 800ce8c:	e000      	b.n	800ce90 <tcp_eff_send_mss_netif+0x50>
 800ce8e:	2300      	movs	r3, #0
 800ce90:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ce92:	8a7a      	ldrh	r2, [r7, #18]
 800ce94:	89fb      	ldrh	r3, [r7, #14]
 800ce96:	4293      	cmp	r3, r2
 800ce98:	bf28      	it	cs
 800ce9a:	4613      	movcs	r3, r2
 800ce9c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ce9e:	89fb      	ldrh	r3, [r7, #14]
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3718      	adds	r7, #24
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}
 800cea8:	08015e4c 	.word	0x08015e4c
 800ceac:	08016558 	.word	0x08016558
 800ceb0:	08015e90 	.word	0x08015e90

0800ceb4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
 800cebc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d119      	bne.n	800cefc <tcp_netif_ip_addr_changed_pcblist+0x48>
 800cec8:	4b10      	ldr	r3, [pc, #64]	; (800cf0c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ceca:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800cece:	4910      	ldr	r1, [pc, #64]	; (800cf10 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ced0:	4810      	ldr	r0, [pc, #64]	; (800cf14 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ced2:	f007 f8c7 	bl	8014064 <iprintf>

  while (pcb != NULL) {
 800ced6:	e011      	b.n	800cefc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	681a      	ldr	r2, [r3, #0]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d108      	bne.n	800cef6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	68db      	ldr	r3, [r3, #12]
 800cee8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ceea:	68f8      	ldr	r0, [r7, #12]
 800ceec:	f7fe fd20 	bl	800b930 <tcp_abort>
      pcb = next;
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	60fb      	str	r3, [r7, #12]
 800cef4:	e002      	b.n	800cefc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	68db      	ldr	r3, [r3, #12]
 800cefa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d1ea      	bne.n	800ced8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800cf02:	bf00      	nop
 800cf04:	bf00      	nop
 800cf06:	3710      	adds	r7, #16
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}
 800cf0c:	08015e4c 	.word	0x08015e4c
 800cf10:	08016580 	.word	0x08016580
 800cf14:	08015e90 	.word	0x08015e90

0800cf18 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b084      	sub	sp, #16
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d02a      	beq.n	800cf7e <tcp_netif_ip_addr_changed+0x66>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d026      	beq.n	800cf7e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800cf30:	4b15      	ldr	r3, [pc, #84]	; (800cf88 <tcp_netif_ip_addr_changed+0x70>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4619      	mov	r1, r3
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f7ff ffbc 	bl	800ceb4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800cf3c:	4b13      	ldr	r3, [pc, #76]	; (800cf8c <tcp_netif_ip_addr_changed+0x74>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4619      	mov	r1, r3
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f7ff ffb6 	bl	800ceb4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d017      	beq.n	800cf7e <tcp_netif_ip_addr_changed+0x66>
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d013      	beq.n	800cf7e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cf56:	4b0e      	ldr	r3, [pc, #56]	; (800cf90 <tcp_netif_ip_addr_changed+0x78>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	60fb      	str	r3, [r7, #12]
 800cf5c:	e00c      	b.n	800cf78 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681a      	ldr	r2, [r3, #0]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d103      	bne.n	800cf72 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	681a      	ldr	r2, [r3, #0]
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	68db      	ldr	r3, [r3, #12]
 800cf76:	60fb      	str	r3, [r7, #12]
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d1ef      	bne.n	800cf5e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800cf7e:	bf00      	nop
 800cf80:	3710      	adds	r7, #16
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	bf00      	nop
 800cf88:	240035e4 	.word	0x240035e4
 800cf8c:	240035dc 	.word	0x240035dc
 800cf90:	240035e0 	.word	0x240035e0

0800cf94 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b082      	sub	sp, #8
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d007      	beq.n	800cfb4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f7ff fb51 	bl	800c650 <tcp_segs_free>
    pcb->ooseq = NULL;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800cfb4:	bf00      	nop
 800cfb6:	3708      	adds	r7, #8
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800cfbc:	b590      	push	{r4, r7, lr}
 800cfbe:	b08d      	sub	sp, #52	; 0x34
 800cfc0:	af04      	add	r7, sp, #16
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d105      	bne.n	800cfd8 <tcp_input+0x1c>
 800cfcc:	4b9b      	ldr	r3, [pc, #620]	; (800d23c <tcp_input+0x280>)
 800cfce:	2283      	movs	r2, #131	; 0x83
 800cfd0:	499b      	ldr	r1, [pc, #620]	; (800d240 <tcp_input+0x284>)
 800cfd2:	489c      	ldr	r0, [pc, #624]	; (800d244 <tcp_input+0x288>)
 800cfd4:	f007 f846 	bl	8014064 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	4a9a      	ldr	r2, [pc, #616]	; (800d248 <tcp_input+0x28c>)
 800cfde:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	895b      	ldrh	r3, [r3, #10]
 800cfe4:	2b13      	cmp	r3, #19
 800cfe6:	f240 83d1 	bls.w	800d78c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cfea:	4b98      	ldr	r3, [pc, #608]	; (800d24c <tcp_input+0x290>)
 800cfec:	695b      	ldr	r3, [r3, #20]
 800cfee:	4a97      	ldr	r2, [pc, #604]	; (800d24c <tcp_input+0x290>)
 800cff0:	6812      	ldr	r2, [r2, #0]
 800cff2:	4611      	mov	r1, r2
 800cff4:	4618      	mov	r0, r3
 800cff6:	f006 f895 	bl	8013124 <ip4_addr_isbroadcast_u32>
 800cffa:	4603      	mov	r3, r0
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	f040 83c7 	bne.w	800d790 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d002:	4b92      	ldr	r3, [pc, #584]	; (800d24c <tcp_input+0x290>)
 800d004:	695b      	ldr	r3, [r3, #20]
 800d006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d00a:	2be0      	cmp	r3, #224	; 0xe0
 800d00c:	f000 83c0 	beq.w	800d790 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d010:	4b8d      	ldr	r3, [pc, #564]	; (800d248 <tcp_input+0x28c>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	899b      	ldrh	r3, [r3, #12]
 800d016:	b29b      	uxth	r3, r3
 800d018:	4618      	mov	r0, r3
 800d01a:	f7fc fac9 	bl	80095b0 <lwip_htons>
 800d01e:	4603      	mov	r3, r0
 800d020:	0b1b      	lsrs	r3, r3, #12
 800d022:	b29b      	uxth	r3, r3
 800d024:	b2db      	uxtb	r3, r3
 800d026:	009b      	lsls	r3, r3, #2
 800d028:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d02a:	7cbb      	ldrb	r3, [r7, #18]
 800d02c:	2b13      	cmp	r3, #19
 800d02e:	f240 83b1 	bls.w	800d794 <tcp_input+0x7d8>
 800d032:	7cbb      	ldrb	r3, [r7, #18]
 800d034:	b29a      	uxth	r2, r3
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	891b      	ldrh	r3, [r3, #8]
 800d03a:	429a      	cmp	r2, r3
 800d03c:	f200 83aa 	bhi.w	800d794 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d040:	7cbb      	ldrb	r3, [r7, #18]
 800d042:	b29b      	uxth	r3, r3
 800d044:	3b14      	subs	r3, #20
 800d046:	b29a      	uxth	r2, r3
 800d048:	4b81      	ldr	r3, [pc, #516]	; (800d250 <tcp_input+0x294>)
 800d04a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d04c:	4b81      	ldr	r3, [pc, #516]	; (800d254 <tcp_input+0x298>)
 800d04e:	2200      	movs	r2, #0
 800d050:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	895a      	ldrh	r2, [r3, #10]
 800d056:	7cbb      	ldrb	r3, [r7, #18]
 800d058:	b29b      	uxth	r3, r3
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d309      	bcc.n	800d072 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d05e:	4b7c      	ldr	r3, [pc, #496]	; (800d250 <tcp_input+0x294>)
 800d060:	881a      	ldrh	r2, [r3, #0]
 800d062:	4b7d      	ldr	r3, [pc, #500]	; (800d258 <tcp_input+0x29c>)
 800d064:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d066:	7cbb      	ldrb	r3, [r7, #18]
 800d068:	4619      	mov	r1, r3
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f7fd fe52 	bl	800ad14 <pbuf_remove_header>
 800d070:	e04e      	b.n	800d110 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d105      	bne.n	800d086 <tcp_input+0xca>
 800d07a:	4b70      	ldr	r3, [pc, #448]	; (800d23c <tcp_input+0x280>)
 800d07c:	22c2      	movs	r2, #194	; 0xc2
 800d07e:	4977      	ldr	r1, [pc, #476]	; (800d25c <tcp_input+0x2a0>)
 800d080:	4870      	ldr	r0, [pc, #448]	; (800d244 <tcp_input+0x288>)
 800d082:	f006 ffef 	bl	8014064 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d086:	2114      	movs	r1, #20
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f7fd fe43 	bl	800ad14 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	895a      	ldrh	r2, [r3, #10]
 800d092:	4b71      	ldr	r3, [pc, #452]	; (800d258 <tcp_input+0x29c>)
 800d094:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d096:	4b6e      	ldr	r3, [pc, #440]	; (800d250 <tcp_input+0x294>)
 800d098:	881a      	ldrh	r2, [r3, #0]
 800d09a:	4b6f      	ldr	r3, [pc, #444]	; (800d258 <tcp_input+0x29c>)
 800d09c:	881b      	ldrh	r3, [r3, #0]
 800d09e:	1ad3      	subs	r3, r2, r3
 800d0a0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d0a2:	4b6d      	ldr	r3, [pc, #436]	; (800d258 <tcp_input+0x29c>)
 800d0a4:	881b      	ldrh	r3, [r3, #0]
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f7fd fe33 	bl	800ad14 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	895b      	ldrh	r3, [r3, #10]
 800d0b4:	8a3a      	ldrh	r2, [r7, #16]
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	f200 836e 	bhi.w	800d798 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	685b      	ldr	r3, [r3, #4]
 800d0c2:	4a64      	ldr	r2, [pc, #400]	; (800d254 <tcp_input+0x298>)
 800d0c4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	8a3a      	ldrh	r2, [r7, #16]
 800d0cc:	4611      	mov	r1, r2
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f7fd fe20 	bl	800ad14 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	891a      	ldrh	r2, [r3, #8]
 800d0d8:	8a3b      	ldrh	r3, [r7, #16]
 800d0da:	1ad3      	subs	r3, r2, r3
 800d0dc:	b29a      	uxth	r2, r3
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	895b      	ldrh	r3, [r3, #10]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d005      	beq.n	800d0f6 <tcp_input+0x13a>
 800d0ea:	4b54      	ldr	r3, [pc, #336]	; (800d23c <tcp_input+0x280>)
 800d0ec:	22df      	movs	r2, #223	; 0xdf
 800d0ee:	495c      	ldr	r1, [pc, #368]	; (800d260 <tcp_input+0x2a4>)
 800d0f0:	4854      	ldr	r0, [pc, #336]	; (800d244 <tcp_input+0x288>)
 800d0f2:	f006 ffb7 	bl	8014064 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	891a      	ldrh	r2, [r3, #8]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	891b      	ldrh	r3, [r3, #8]
 800d100:	429a      	cmp	r2, r3
 800d102:	d005      	beq.n	800d110 <tcp_input+0x154>
 800d104:	4b4d      	ldr	r3, [pc, #308]	; (800d23c <tcp_input+0x280>)
 800d106:	22e0      	movs	r2, #224	; 0xe0
 800d108:	4956      	ldr	r1, [pc, #344]	; (800d264 <tcp_input+0x2a8>)
 800d10a:	484e      	ldr	r0, [pc, #312]	; (800d244 <tcp_input+0x288>)
 800d10c:	f006 ffaa 	bl	8014064 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d110:	4b4d      	ldr	r3, [pc, #308]	; (800d248 <tcp_input+0x28c>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	881b      	ldrh	r3, [r3, #0]
 800d116:	b29b      	uxth	r3, r3
 800d118:	4a4b      	ldr	r2, [pc, #300]	; (800d248 <tcp_input+0x28c>)
 800d11a:	6814      	ldr	r4, [r2, #0]
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7fc fa47 	bl	80095b0 <lwip_htons>
 800d122:	4603      	mov	r3, r0
 800d124:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d126:	4b48      	ldr	r3, [pc, #288]	; (800d248 <tcp_input+0x28c>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	885b      	ldrh	r3, [r3, #2]
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	4a46      	ldr	r2, [pc, #280]	; (800d248 <tcp_input+0x28c>)
 800d130:	6814      	ldr	r4, [r2, #0]
 800d132:	4618      	mov	r0, r3
 800d134:	f7fc fa3c 	bl	80095b0 <lwip_htons>
 800d138:	4603      	mov	r3, r0
 800d13a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d13c:	4b42      	ldr	r3, [pc, #264]	; (800d248 <tcp_input+0x28c>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	685b      	ldr	r3, [r3, #4]
 800d142:	4a41      	ldr	r2, [pc, #260]	; (800d248 <tcp_input+0x28c>)
 800d144:	6814      	ldr	r4, [r2, #0]
 800d146:	4618      	mov	r0, r3
 800d148:	f7fc fa47 	bl	80095da <lwip_htonl>
 800d14c:	4603      	mov	r3, r0
 800d14e:	6063      	str	r3, [r4, #4]
 800d150:	6863      	ldr	r3, [r4, #4]
 800d152:	4a45      	ldr	r2, [pc, #276]	; (800d268 <tcp_input+0x2ac>)
 800d154:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d156:	4b3c      	ldr	r3, [pc, #240]	; (800d248 <tcp_input+0x28c>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	689b      	ldr	r3, [r3, #8]
 800d15c:	4a3a      	ldr	r2, [pc, #232]	; (800d248 <tcp_input+0x28c>)
 800d15e:	6814      	ldr	r4, [r2, #0]
 800d160:	4618      	mov	r0, r3
 800d162:	f7fc fa3a 	bl	80095da <lwip_htonl>
 800d166:	4603      	mov	r3, r0
 800d168:	60a3      	str	r3, [r4, #8]
 800d16a:	68a3      	ldr	r3, [r4, #8]
 800d16c:	4a3f      	ldr	r2, [pc, #252]	; (800d26c <tcp_input+0x2b0>)
 800d16e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d170:	4b35      	ldr	r3, [pc, #212]	; (800d248 <tcp_input+0x28c>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	89db      	ldrh	r3, [r3, #14]
 800d176:	b29b      	uxth	r3, r3
 800d178:	4a33      	ldr	r2, [pc, #204]	; (800d248 <tcp_input+0x28c>)
 800d17a:	6814      	ldr	r4, [r2, #0]
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7fc fa17 	bl	80095b0 <lwip_htons>
 800d182:	4603      	mov	r3, r0
 800d184:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d186:	4b30      	ldr	r3, [pc, #192]	; (800d248 <tcp_input+0x28c>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	899b      	ldrh	r3, [r3, #12]
 800d18c:	b29b      	uxth	r3, r3
 800d18e:	4618      	mov	r0, r3
 800d190:	f7fc fa0e 	bl	80095b0 <lwip_htons>
 800d194:	4603      	mov	r3, r0
 800d196:	b2db      	uxtb	r3, r3
 800d198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d19c:	b2da      	uxtb	r2, r3
 800d19e:	4b34      	ldr	r3, [pc, #208]	; (800d270 <tcp_input+0x2b4>)
 800d1a0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	891a      	ldrh	r2, [r3, #8]
 800d1a6:	4b33      	ldr	r3, [pc, #204]	; (800d274 <tcp_input+0x2b8>)
 800d1a8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d1aa:	4b31      	ldr	r3, [pc, #196]	; (800d270 <tcp_input+0x2b4>)
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	f003 0303 	and.w	r3, r3, #3
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d00c      	beq.n	800d1d0 <tcp_input+0x214>
    tcplen++;
 800d1b6:	4b2f      	ldr	r3, [pc, #188]	; (800d274 <tcp_input+0x2b8>)
 800d1b8:	881b      	ldrh	r3, [r3, #0]
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	b29a      	uxth	r2, r3
 800d1be:	4b2d      	ldr	r3, [pc, #180]	; (800d274 <tcp_input+0x2b8>)
 800d1c0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	891a      	ldrh	r2, [r3, #8]
 800d1c6:	4b2b      	ldr	r3, [pc, #172]	; (800d274 <tcp_input+0x2b8>)
 800d1c8:	881b      	ldrh	r3, [r3, #0]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	f200 82e6 	bhi.w	800d79c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1d4:	4b28      	ldr	r3, [pc, #160]	; (800d278 <tcp_input+0x2bc>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	61fb      	str	r3, [r7, #28]
 800d1da:	e09d      	b.n	800d318 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d1dc:	69fb      	ldr	r3, [r7, #28]
 800d1de:	7d1b      	ldrb	r3, [r3, #20]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d105      	bne.n	800d1f0 <tcp_input+0x234>
 800d1e4:	4b15      	ldr	r3, [pc, #84]	; (800d23c <tcp_input+0x280>)
 800d1e6:	22fb      	movs	r2, #251	; 0xfb
 800d1e8:	4924      	ldr	r1, [pc, #144]	; (800d27c <tcp_input+0x2c0>)
 800d1ea:	4816      	ldr	r0, [pc, #88]	; (800d244 <tcp_input+0x288>)
 800d1ec:	f006 ff3a 	bl	8014064 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d1f0:	69fb      	ldr	r3, [r7, #28]
 800d1f2:	7d1b      	ldrb	r3, [r3, #20]
 800d1f4:	2b0a      	cmp	r3, #10
 800d1f6:	d105      	bne.n	800d204 <tcp_input+0x248>
 800d1f8:	4b10      	ldr	r3, [pc, #64]	; (800d23c <tcp_input+0x280>)
 800d1fa:	22fc      	movs	r2, #252	; 0xfc
 800d1fc:	4920      	ldr	r1, [pc, #128]	; (800d280 <tcp_input+0x2c4>)
 800d1fe:	4811      	ldr	r0, [pc, #68]	; (800d244 <tcp_input+0x288>)
 800d200:	f006 ff30 	bl	8014064 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d204:	69fb      	ldr	r3, [r7, #28]
 800d206:	7d1b      	ldrb	r3, [r3, #20]
 800d208:	2b01      	cmp	r3, #1
 800d20a:	d105      	bne.n	800d218 <tcp_input+0x25c>
 800d20c:	4b0b      	ldr	r3, [pc, #44]	; (800d23c <tcp_input+0x280>)
 800d20e:	22fd      	movs	r2, #253	; 0xfd
 800d210:	491c      	ldr	r1, [pc, #112]	; (800d284 <tcp_input+0x2c8>)
 800d212:	480c      	ldr	r0, [pc, #48]	; (800d244 <tcp_input+0x288>)
 800d214:	f006 ff26 	bl	8014064 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	7a1b      	ldrb	r3, [r3, #8]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d033      	beq.n	800d288 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d220:	69fb      	ldr	r3, [r7, #28]
 800d222:	7a1a      	ldrb	r2, [r3, #8]
 800d224:	4b09      	ldr	r3, [pc, #36]	; (800d24c <tcp_input+0x290>)
 800d226:	685b      	ldr	r3, [r3, #4]
 800d228:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d22c:	3301      	adds	r3, #1
 800d22e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d230:	429a      	cmp	r2, r3
 800d232:	d029      	beq.n	800d288 <tcp_input+0x2cc>
      prev = pcb;
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	61bb      	str	r3, [r7, #24]
      continue;
 800d238:	e06b      	b.n	800d312 <tcp_input+0x356>
 800d23a:	bf00      	nop
 800d23c:	080165b4 	.word	0x080165b4
 800d240:	080165e8 	.word	0x080165e8
 800d244:	08016600 	.word	0x08016600
 800d248:	24003600 	.word	0x24003600
 800d24c:	240006bc 	.word	0x240006bc
 800d250:	24003604 	.word	0x24003604
 800d254:	24003608 	.word	0x24003608
 800d258:	24003606 	.word	0x24003606
 800d25c:	08016628 	.word	0x08016628
 800d260:	08016638 	.word	0x08016638
 800d264:	08016644 	.word	0x08016644
 800d268:	24003610 	.word	0x24003610
 800d26c:	24003614 	.word	0x24003614
 800d270:	2400361c 	.word	0x2400361c
 800d274:	2400361a 	.word	0x2400361a
 800d278:	240035e4 	.word	0x240035e4
 800d27c:	08016664 	.word	0x08016664
 800d280:	0801668c 	.word	0x0801668c
 800d284:	080166b8 	.word	0x080166b8
    }

    if (pcb->remote_port == tcphdr->src &&
 800d288:	69fb      	ldr	r3, [r7, #28]
 800d28a:	8b1a      	ldrh	r2, [r3, #24]
 800d28c:	4b72      	ldr	r3, [pc, #456]	; (800d458 <tcp_input+0x49c>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	881b      	ldrh	r3, [r3, #0]
 800d292:	b29b      	uxth	r3, r3
 800d294:	429a      	cmp	r2, r3
 800d296:	d13a      	bne.n	800d30e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d298:	69fb      	ldr	r3, [r7, #28]
 800d29a:	8ada      	ldrh	r2, [r3, #22]
 800d29c:	4b6e      	ldr	r3, [pc, #440]	; (800d458 <tcp_input+0x49c>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	885b      	ldrh	r3, [r3, #2]
 800d2a2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d132      	bne.n	800d30e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d2a8:	69fb      	ldr	r3, [r7, #28]
 800d2aa:	685a      	ldr	r2, [r3, #4]
 800d2ac:	4b6b      	ldr	r3, [pc, #428]	; (800d45c <tcp_input+0x4a0>)
 800d2ae:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d12c      	bne.n	800d30e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d2b4:	69fb      	ldr	r3, [r7, #28]
 800d2b6:	681a      	ldr	r2, [r3, #0]
 800d2b8:	4b68      	ldr	r3, [pc, #416]	; (800d45c <tcp_input+0x4a0>)
 800d2ba:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d126      	bne.n	800d30e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d2c0:	69fb      	ldr	r3, [r7, #28]
 800d2c2:	68db      	ldr	r3, [r3, #12]
 800d2c4:	69fa      	ldr	r2, [r7, #28]
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d106      	bne.n	800d2d8 <tcp_input+0x31c>
 800d2ca:	4b65      	ldr	r3, [pc, #404]	; (800d460 <tcp_input+0x4a4>)
 800d2cc:	f240 120d 	movw	r2, #269	; 0x10d
 800d2d0:	4964      	ldr	r1, [pc, #400]	; (800d464 <tcp_input+0x4a8>)
 800d2d2:	4865      	ldr	r0, [pc, #404]	; (800d468 <tcp_input+0x4ac>)
 800d2d4:	f006 fec6 	bl	8014064 <iprintf>
      if (prev != NULL) {
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d00a      	beq.n	800d2f4 <tcp_input+0x338>
        prev->next = pcb->next;
 800d2de:	69fb      	ldr	r3, [r7, #28]
 800d2e0:	68da      	ldr	r2, [r3, #12]
 800d2e2:	69bb      	ldr	r3, [r7, #24]
 800d2e4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d2e6:	4b61      	ldr	r3, [pc, #388]	; (800d46c <tcp_input+0x4b0>)
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	69fb      	ldr	r3, [r7, #28]
 800d2ec:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d2ee:	4a5f      	ldr	r2, [pc, #380]	; (800d46c <tcp_input+0x4b0>)
 800d2f0:	69fb      	ldr	r3, [r7, #28]
 800d2f2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d2f4:	69fb      	ldr	r3, [r7, #28]
 800d2f6:	68db      	ldr	r3, [r3, #12]
 800d2f8:	69fa      	ldr	r2, [r7, #28]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d111      	bne.n	800d322 <tcp_input+0x366>
 800d2fe:	4b58      	ldr	r3, [pc, #352]	; (800d460 <tcp_input+0x4a4>)
 800d300:	f240 1215 	movw	r2, #277	; 0x115
 800d304:	495a      	ldr	r1, [pc, #360]	; (800d470 <tcp_input+0x4b4>)
 800d306:	4858      	ldr	r0, [pc, #352]	; (800d468 <tcp_input+0x4ac>)
 800d308:	f006 feac 	bl	8014064 <iprintf>
      break;
 800d30c:	e009      	b.n	800d322 <tcp_input+0x366>
    }
    prev = pcb;
 800d30e:	69fb      	ldr	r3, [r7, #28]
 800d310:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d312:	69fb      	ldr	r3, [r7, #28]
 800d314:	68db      	ldr	r3, [r3, #12]
 800d316:	61fb      	str	r3, [r7, #28]
 800d318:	69fb      	ldr	r3, [r7, #28]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	f47f af5e 	bne.w	800d1dc <tcp_input+0x220>
 800d320:	e000      	b.n	800d324 <tcp_input+0x368>
      break;
 800d322:	bf00      	nop
  }

  if (pcb == NULL) {
 800d324:	69fb      	ldr	r3, [r7, #28]
 800d326:	2b00      	cmp	r3, #0
 800d328:	f040 80aa 	bne.w	800d480 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d32c:	4b51      	ldr	r3, [pc, #324]	; (800d474 <tcp_input+0x4b8>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	61fb      	str	r3, [r7, #28]
 800d332:	e03f      	b.n	800d3b4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d334:	69fb      	ldr	r3, [r7, #28]
 800d336:	7d1b      	ldrb	r3, [r3, #20]
 800d338:	2b0a      	cmp	r3, #10
 800d33a:	d006      	beq.n	800d34a <tcp_input+0x38e>
 800d33c:	4b48      	ldr	r3, [pc, #288]	; (800d460 <tcp_input+0x4a4>)
 800d33e:	f240 121f 	movw	r2, #287	; 0x11f
 800d342:	494d      	ldr	r1, [pc, #308]	; (800d478 <tcp_input+0x4bc>)
 800d344:	4848      	ldr	r0, [pc, #288]	; (800d468 <tcp_input+0x4ac>)
 800d346:	f006 fe8d 	bl	8014064 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d34a:	69fb      	ldr	r3, [r7, #28]
 800d34c:	7a1b      	ldrb	r3, [r3, #8]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d009      	beq.n	800d366 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d352:	69fb      	ldr	r3, [r7, #28]
 800d354:	7a1a      	ldrb	r2, [r3, #8]
 800d356:	4b41      	ldr	r3, [pc, #260]	; (800d45c <tcp_input+0x4a0>)
 800d358:	685b      	ldr	r3, [r3, #4]
 800d35a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d35e:	3301      	adds	r3, #1
 800d360:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d362:	429a      	cmp	r2, r3
 800d364:	d122      	bne.n	800d3ac <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d366:	69fb      	ldr	r3, [r7, #28]
 800d368:	8b1a      	ldrh	r2, [r3, #24]
 800d36a:	4b3b      	ldr	r3, [pc, #236]	; (800d458 <tcp_input+0x49c>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	881b      	ldrh	r3, [r3, #0]
 800d370:	b29b      	uxth	r3, r3
 800d372:	429a      	cmp	r2, r3
 800d374:	d11b      	bne.n	800d3ae <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d376:	69fb      	ldr	r3, [r7, #28]
 800d378:	8ada      	ldrh	r2, [r3, #22]
 800d37a:	4b37      	ldr	r3, [pc, #220]	; (800d458 <tcp_input+0x49c>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	885b      	ldrh	r3, [r3, #2]
 800d380:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d382:	429a      	cmp	r2, r3
 800d384:	d113      	bne.n	800d3ae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d386:	69fb      	ldr	r3, [r7, #28]
 800d388:	685a      	ldr	r2, [r3, #4]
 800d38a:	4b34      	ldr	r3, [pc, #208]	; (800d45c <tcp_input+0x4a0>)
 800d38c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d38e:	429a      	cmp	r2, r3
 800d390:	d10d      	bne.n	800d3ae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d392:	69fb      	ldr	r3, [r7, #28]
 800d394:	681a      	ldr	r2, [r3, #0]
 800d396:	4b31      	ldr	r3, [pc, #196]	; (800d45c <tcp_input+0x4a0>)
 800d398:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d39a:	429a      	cmp	r2, r3
 800d39c:	d107      	bne.n	800d3ae <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d39e:	69f8      	ldr	r0, [r7, #28]
 800d3a0:	f000 fb56 	bl	800da50 <tcp_timewait_input>
        }
        pbuf_free(p);
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f7fd fd3b 	bl	800ae20 <pbuf_free>
        return;
 800d3aa:	e1fd      	b.n	800d7a8 <tcp_input+0x7ec>
        continue;
 800d3ac:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d3ae:	69fb      	ldr	r3, [r7, #28]
 800d3b0:	68db      	ldr	r3, [r3, #12]
 800d3b2:	61fb      	str	r3, [r7, #28]
 800d3b4:	69fb      	ldr	r3, [r7, #28]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d1bc      	bne.n	800d334 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d3be:	4b2f      	ldr	r3, [pc, #188]	; (800d47c <tcp_input+0x4c0>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	617b      	str	r3, [r7, #20]
 800d3c4:	e02a      	b.n	800d41c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	7a1b      	ldrb	r3, [r3, #8]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d00c      	beq.n	800d3e8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	7a1a      	ldrb	r2, [r3, #8]
 800d3d2:	4b22      	ldr	r3, [pc, #136]	; (800d45c <tcp_input+0x4a0>)
 800d3d4:	685b      	ldr	r3, [r3, #4]
 800d3d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d3da:	3301      	adds	r3, #1
 800d3dc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d002      	beq.n	800d3e8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	61bb      	str	r3, [r7, #24]
        continue;
 800d3e6:	e016      	b.n	800d416 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	8ada      	ldrh	r2, [r3, #22]
 800d3ec:	4b1a      	ldr	r3, [pc, #104]	; (800d458 <tcp_input+0x49c>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	885b      	ldrh	r3, [r3, #2]
 800d3f2:	b29b      	uxth	r3, r3
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d10c      	bne.n	800d412 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	4b17      	ldr	r3, [pc, #92]	; (800d45c <tcp_input+0x4a0>)
 800d3fe:	695b      	ldr	r3, [r3, #20]
 800d400:	429a      	cmp	r2, r3
 800d402:	d00f      	beq.n	800d424 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d00d      	beq.n	800d426 <tcp_input+0x46a>
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d009      	beq.n	800d426 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	68db      	ldr	r3, [r3, #12]
 800d41a:	617b      	str	r3, [r7, #20]
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d1d1      	bne.n	800d3c6 <tcp_input+0x40a>
 800d422:	e000      	b.n	800d426 <tcp_input+0x46a>
            break;
 800d424:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d029      	beq.n	800d480 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d42c:	69bb      	ldr	r3, [r7, #24]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d00a      	beq.n	800d448 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	68da      	ldr	r2, [r3, #12]
 800d436:	69bb      	ldr	r3, [r7, #24]
 800d438:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d43a:	4b10      	ldr	r3, [pc, #64]	; (800d47c <tcp_input+0x4c0>)
 800d43c:	681a      	ldr	r2, [r3, #0]
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d442:	4a0e      	ldr	r2, [pc, #56]	; (800d47c <tcp_input+0x4c0>)
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d448:	6978      	ldr	r0, [r7, #20]
 800d44a:	f000 fa03 	bl	800d854 <tcp_listen_input>
      }
      pbuf_free(p);
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f7fd fce6 	bl	800ae20 <pbuf_free>
      return;
 800d454:	e1a8      	b.n	800d7a8 <tcp_input+0x7ec>
 800d456:	bf00      	nop
 800d458:	24003600 	.word	0x24003600
 800d45c:	240006bc 	.word	0x240006bc
 800d460:	080165b4 	.word	0x080165b4
 800d464:	080166e0 	.word	0x080166e0
 800d468:	08016600 	.word	0x08016600
 800d46c:	240035e4 	.word	0x240035e4
 800d470:	0801670c 	.word	0x0801670c
 800d474:	240035e8 	.word	0x240035e8
 800d478:	08016738 	.word	0x08016738
 800d47c:	240035e0 	.word	0x240035e0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d480:	69fb      	ldr	r3, [r7, #28]
 800d482:	2b00      	cmp	r3, #0
 800d484:	f000 8158 	beq.w	800d738 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d488:	4b95      	ldr	r3, [pc, #596]	; (800d6e0 <tcp_input+0x724>)
 800d48a:	2200      	movs	r2, #0
 800d48c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	891a      	ldrh	r2, [r3, #8]
 800d492:	4b93      	ldr	r3, [pc, #588]	; (800d6e0 <tcp_input+0x724>)
 800d494:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d496:	4a92      	ldr	r2, [pc, #584]	; (800d6e0 <tcp_input+0x724>)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d49c:	4b91      	ldr	r3, [pc, #580]	; (800d6e4 <tcp_input+0x728>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4a8f      	ldr	r2, [pc, #572]	; (800d6e0 <tcp_input+0x724>)
 800d4a2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d4a4:	4b90      	ldr	r3, [pc, #576]	; (800d6e8 <tcp_input+0x72c>)
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d4aa:	4b90      	ldr	r3, [pc, #576]	; (800d6ec <tcp_input+0x730>)
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d4b0:	4b8f      	ldr	r3, [pc, #572]	; (800d6f0 <tcp_input+0x734>)
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d4b6:	4b8f      	ldr	r3, [pc, #572]	; (800d6f4 <tcp_input+0x738>)
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	f003 0308 	and.w	r3, r3, #8
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d006      	beq.n	800d4d0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	7b5b      	ldrb	r3, [r3, #13]
 800d4c6:	f043 0301 	orr.w	r3, r3, #1
 800d4ca:	b2da      	uxtb	r2, r3
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d4d0:	69fb      	ldr	r3, [r7, #28]
 800d4d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d017      	beq.n	800d508 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d4d8:	69f8      	ldr	r0, [r7, #28]
 800d4da:	f7ff f83d 	bl	800c558 <tcp_process_refused_data>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	f113 0f0d 	cmn.w	r3, #13
 800d4e4:	d007      	beq.n	800d4f6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d4e6:	69fb      	ldr	r3, [r7, #28]
 800d4e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d00c      	beq.n	800d508 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d4ee:	4b82      	ldr	r3, [pc, #520]	; (800d6f8 <tcp_input+0x73c>)
 800d4f0:	881b      	ldrh	r3, [r3, #0]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d008      	beq.n	800d508 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d4f6:	69fb      	ldr	r3, [r7, #28]
 800d4f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	f040 80e3 	bne.w	800d6c6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d500:	69f8      	ldr	r0, [r7, #28]
 800d502:	f003 fe05 	bl	8011110 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d506:	e0de      	b.n	800d6c6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800d508:	4a7c      	ldr	r2, [pc, #496]	; (800d6fc <tcp_input+0x740>)
 800d50a:	69fb      	ldr	r3, [r7, #28]
 800d50c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d50e:	69f8      	ldr	r0, [r7, #28]
 800d510:	f000 fb18 	bl	800db44 <tcp_process>
 800d514:	4603      	mov	r3, r0
 800d516:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d518:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d51c:	f113 0f0d 	cmn.w	r3, #13
 800d520:	f000 80d3 	beq.w	800d6ca <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800d524:	4b71      	ldr	r3, [pc, #452]	; (800d6ec <tcp_input+0x730>)
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	f003 0308 	and.w	r3, r3, #8
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d015      	beq.n	800d55c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d530:	69fb      	ldr	r3, [r7, #28]
 800d532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d536:	2b00      	cmp	r3, #0
 800d538:	d008      	beq.n	800d54c <tcp_input+0x590>
 800d53a:	69fb      	ldr	r3, [r7, #28]
 800d53c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d540:	69fa      	ldr	r2, [r7, #28]
 800d542:	6912      	ldr	r2, [r2, #16]
 800d544:	f06f 010d 	mvn.w	r1, #13
 800d548:	4610      	mov	r0, r2
 800d54a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d54c:	69f9      	ldr	r1, [r7, #28]
 800d54e:	486c      	ldr	r0, [pc, #432]	; (800d700 <tcp_input+0x744>)
 800d550:	f7ff fbbc 	bl	800cccc <tcp_pcb_remove>
        tcp_free(pcb);
 800d554:	69f8      	ldr	r0, [r7, #28]
 800d556:	f7fd ff03 	bl	800b360 <tcp_free>
 800d55a:	e0da      	b.n	800d712 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800d55c:	2300      	movs	r3, #0
 800d55e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d560:	4b63      	ldr	r3, [pc, #396]	; (800d6f0 <tcp_input+0x734>)
 800d562:	881b      	ldrh	r3, [r3, #0]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d01d      	beq.n	800d5a4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d568:	4b61      	ldr	r3, [pc, #388]	; (800d6f0 <tcp_input+0x734>)
 800d56a:	881b      	ldrh	r3, [r3, #0]
 800d56c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d56e:	69fb      	ldr	r3, [r7, #28]
 800d570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d574:	2b00      	cmp	r3, #0
 800d576:	d00a      	beq.n	800d58e <tcp_input+0x5d2>
 800d578:	69fb      	ldr	r3, [r7, #28]
 800d57a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d57e:	69fa      	ldr	r2, [r7, #28]
 800d580:	6910      	ldr	r0, [r2, #16]
 800d582:	89fa      	ldrh	r2, [r7, #14]
 800d584:	69f9      	ldr	r1, [r7, #28]
 800d586:	4798      	blx	r3
 800d588:	4603      	mov	r3, r0
 800d58a:	74fb      	strb	r3, [r7, #19]
 800d58c:	e001      	b.n	800d592 <tcp_input+0x5d6>
 800d58e:	2300      	movs	r3, #0
 800d590:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d592:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d596:	f113 0f0d 	cmn.w	r3, #13
 800d59a:	f000 8098 	beq.w	800d6ce <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d59e:	4b54      	ldr	r3, [pc, #336]	; (800d6f0 <tcp_input+0x734>)
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d5a4:	69f8      	ldr	r0, [r7, #28]
 800d5a6:	f000 f915 	bl	800d7d4 <tcp_input_delayed_close>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	f040 8090 	bne.w	800d6d2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d5b2:	4b4d      	ldr	r3, [pc, #308]	; (800d6e8 <tcp_input+0x72c>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d041      	beq.n	800d63e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d5ba:	69fb      	ldr	r3, [r7, #28]
 800d5bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d006      	beq.n	800d5d0 <tcp_input+0x614>
 800d5c2:	4b50      	ldr	r3, [pc, #320]	; (800d704 <tcp_input+0x748>)
 800d5c4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d5c8:	494f      	ldr	r1, [pc, #316]	; (800d708 <tcp_input+0x74c>)
 800d5ca:	4850      	ldr	r0, [pc, #320]	; (800d70c <tcp_input+0x750>)
 800d5cc:	f006 fd4a 	bl	8014064 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d5d0:	69fb      	ldr	r3, [r7, #28]
 800d5d2:	8b5b      	ldrh	r3, [r3, #26]
 800d5d4:	f003 0310 	and.w	r3, r3, #16
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d008      	beq.n	800d5ee <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d5dc:	4b42      	ldr	r3, [pc, #264]	; (800d6e8 <tcp_input+0x72c>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7fd fc1d 	bl	800ae20 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d5e6:	69f8      	ldr	r0, [r7, #28]
 800d5e8:	f7fe f9a2 	bl	800b930 <tcp_abort>
            goto aborted;
 800d5ec:	e091      	b.n	800d712 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d5ee:	69fb      	ldr	r3, [r7, #28]
 800d5f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d00c      	beq.n	800d612 <tcp_input+0x656>
 800d5f8:	69fb      	ldr	r3, [r7, #28]
 800d5fa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d5fe:	69fb      	ldr	r3, [r7, #28]
 800d600:	6918      	ldr	r0, [r3, #16]
 800d602:	4b39      	ldr	r3, [pc, #228]	; (800d6e8 <tcp_input+0x72c>)
 800d604:	681a      	ldr	r2, [r3, #0]
 800d606:	2300      	movs	r3, #0
 800d608:	69f9      	ldr	r1, [r7, #28]
 800d60a:	47a0      	blx	r4
 800d60c:	4603      	mov	r3, r0
 800d60e:	74fb      	strb	r3, [r7, #19]
 800d610:	e008      	b.n	800d624 <tcp_input+0x668>
 800d612:	4b35      	ldr	r3, [pc, #212]	; (800d6e8 <tcp_input+0x72c>)
 800d614:	681a      	ldr	r2, [r3, #0]
 800d616:	2300      	movs	r3, #0
 800d618:	69f9      	ldr	r1, [r7, #28]
 800d61a:	2000      	movs	r0, #0
 800d61c:	f7ff f890 	bl	800c740 <tcp_recv_null>
 800d620:	4603      	mov	r3, r0
 800d622:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d624:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d628:	f113 0f0d 	cmn.w	r3, #13
 800d62c:	d053      	beq.n	800d6d6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d62e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d003      	beq.n	800d63e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d636:	4b2c      	ldr	r3, [pc, #176]	; (800d6e8 <tcp_input+0x72c>)
 800d638:	681a      	ldr	r2, [r3, #0]
 800d63a:	69fb      	ldr	r3, [r7, #28]
 800d63c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d63e:	4b2b      	ldr	r3, [pc, #172]	; (800d6ec <tcp_input+0x730>)
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	f003 0320 	and.w	r3, r3, #32
 800d646:	2b00      	cmp	r3, #0
 800d648:	d030      	beq.n	800d6ac <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800d64a:	69fb      	ldr	r3, [r7, #28]
 800d64c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d009      	beq.n	800d666 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d652:	69fb      	ldr	r3, [r7, #28]
 800d654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d656:	7b5a      	ldrb	r2, [r3, #13]
 800d658:	69fb      	ldr	r3, [r7, #28]
 800d65a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d65c:	f042 0220 	orr.w	r2, r2, #32
 800d660:	b2d2      	uxtb	r2, r2
 800d662:	735a      	strb	r2, [r3, #13]
 800d664:	e022      	b.n	800d6ac <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d666:	69fb      	ldr	r3, [r7, #28]
 800d668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d66a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d66e:	d005      	beq.n	800d67c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d674:	3301      	adds	r3, #1
 800d676:	b29a      	uxth	r2, r3
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d67c:	69fb      	ldr	r3, [r7, #28]
 800d67e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d682:	2b00      	cmp	r3, #0
 800d684:	d00b      	beq.n	800d69e <tcp_input+0x6e2>
 800d686:	69fb      	ldr	r3, [r7, #28]
 800d688:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d68c:	69fb      	ldr	r3, [r7, #28]
 800d68e:	6918      	ldr	r0, [r3, #16]
 800d690:	2300      	movs	r3, #0
 800d692:	2200      	movs	r2, #0
 800d694:	69f9      	ldr	r1, [r7, #28]
 800d696:	47a0      	blx	r4
 800d698:	4603      	mov	r3, r0
 800d69a:	74fb      	strb	r3, [r7, #19]
 800d69c:	e001      	b.n	800d6a2 <tcp_input+0x6e6>
 800d69e:	2300      	movs	r3, #0
 800d6a0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d6a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d6a6:	f113 0f0d 	cmn.w	r3, #13
 800d6aa:	d016      	beq.n	800d6da <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d6ac:	4b13      	ldr	r3, [pc, #76]	; (800d6fc <tcp_input+0x740>)
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d6b2:	69f8      	ldr	r0, [r7, #28]
 800d6b4:	f000 f88e 	bl	800d7d4 <tcp_input_delayed_close>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d128      	bne.n	800d710 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d6be:	69f8      	ldr	r0, [r7, #28]
 800d6c0:	f002 ff20 	bl	8010504 <tcp_output>
 800d6c4:	e025      	b.n	800d712 <tcp_input+0x756>
        goto aborted;
 800d6c6:	bf00      	nop
 800d6c8:	e023      	b.n	800d712 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d6ca:	bf00      	nop
 800d6cc:	e021      	b.n	800d712 <tcp_input+0x756>
              goto aborted;
 800d6ce:	bf00      	nop
 800d6d0:	e01f      	b.n	800d712 <tcp_input+0x756>
          goto aborted;
 800d6d2:	bf00      	nop
 800d6d4:	e01d      	b.n	800d712 <tcp_input+0x756>
            goto aborted;
 800d6d6:	bf00      	nop
 800d6d8:	e01b      	b.n	800d712 <tcp_input+0x756>
              goto aborted;
 800d6da:	bf00      	nop
 800d6dc:	e019      	b.n	800d712 <tcp_input+0x756>
 800d6de:	bf00      	nop
 800d6e0:	240035f0 	.word	0x240035f0
 800d6e4:	24003600 	.word	0x24003600
 800d6e8:	24003620 	.word	0x24003620
 800d6ec:	2400361d 	.word	0x2400361d
 800d6f0:	24003618 	.word	0x24003618
 800d6f4:	2400361c 	.word	0x2400361c
 800d6f8:	2400361a 	.word	0x2400361a
 800d6fc:	24003624 	.word	0x24003624
 800d700:	240035e4 	.word	0x240035e4
 800d704:	080165b4 	.word	0x080165b4
 800d708:	08016768 	.word	0x08016768
 800d70c:	08016600 	.word	0x08016600
          goto aborted;
 800d710:	bf00      	nop
    tcp_input_pcb = NULL;
 800d712:	4b27      	ldr	r3, [pc, #156]	; (800d7b0 <tcp_input+0x7f4>)
 800d714:	2200      	movs	r2, #0
 800d716:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d718:	4b26      	ldr	r3, [pc, #152]	; (800d7b4 <tcp_input+0x7f8>)
 800d71a:	2200      	movs	r2, #0
 800d71c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d71e:	4b26      	ldr	r3, [pc, #152]	; (800d7b8 <tcp_input+0x7fc>)
 800d720:	685b      	ldr	r3, [r3, #4]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d03f      	beq.n	800d7a6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800d726:	4b24      	ldr	r3, [pc, #144]	; (800d7b8 <tcp_input+0x7fc>)
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7fd fb78 	bl	800ae20 <pbuf_free>
      inseg.p = NULL;
 800d730:	4b21      	ldr	r3, [pc, #132]	; (800d7b8 <tcp_input+0x7fc>)
 800d732:	2200      	movs	r2, #0
 800d734:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d736:	e036      	b.n	800d7a6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d738:	4b20      	ldr	r3, [pc, #128]	; (800d7bc <tcp_input+0x800>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	899b      	ldrh	r3, [r3, #12]
 800d73e:	b29b      	uxth	r3, r3
 800d740:	4618      	mov	r0, r3
 800d742:	f7fb ff35 	bl	80095b0 <lwip_htons>
 800d746:	4603      	mov	r3, r0
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	f003 0304 	and.w	r3, r3, #4
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d118      	bne.n	800d784 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d752:	4b1b      	ldr	r3, [pc, #108]	; (800d7c0 <tcp_input+0x804>)
 800d754:	6819      	ldr	r1, [r3, #0]
 800d756:	4b1b      	ldr	r3, [pc, #108]	; (800d7c4 <tcp_input+0x808>)
 800d758:	881b      	ldrh	r3, [r3, #0]
 800d75a:	461a      	mov	r2, r3
 800d75c:	4b1a      	ldr	r3, [pc, #104]	; (800d7c8 <tcp_input+0x80c>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d762:	4b16      	ldr	r3, [pc, #88]	; (800d7bc <tcp_input+0x800>)
 800d764:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d766:	885b      	ldrh	r3, [r3, #2]
 800d768:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d76a:	4a14      	ldr	r2, [pc, #80]	; (800d7bc <tcp_input+0x800>)
 800d76c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d76e:	8812      	ldrh	r2, [r2, #0]
 800d770:	b292      	uxth	r2, r2
 800d772:	9202      	str	r2, [sp, #8]
 800d774:	9301      	str	r3, [sp, #4]
 800d776:	4b15      	ldr	r3, [pc, #84]	; (800d7cc <tcp_input+0x810>)
 800d778:	9300      	str	r3, [sp, #0]
 800d77a:	4b15      	ldr	r3, [pc, #84]	; (800d7d0 <tcp_input+0x814>)
 800d77c:	4602      	mov	r2, r0
 800d77e:	2000      	movs	r0, #0
 800d780:	f003 fc74 	bl	801106c <tcp_rst>
    pbuf_free(p);
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f7fd fb4b 	bl	800ae20 <pbuf_free>
  return;
 800d78a:	e00c      	b.n	800d7a6 <tcp_input+0x7ea>
    goto dropped;
 800d78c:	bf00      	nop
 800d78e:	e006      	b.n	800d79e <tcp_input+0x7e2>
    goto dropped;
 800d790:	bf00      	nop
 800d792:	e004      	b.n	800d79e <tcp_input+0x7e2>
    goto dropped;
 800d794:	bf00      	nop
 800d796:	e002      	b.n	800d79e <tcp_input+0x7e2>
      goto dropped;
 800d798:	bf00      	nop
 800d79a:	e000      	b.n	800d79e <tcp_input+0x7e2>
      goto dropped;
 800d79c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f7fd fb3e 	bl	800ae20 <pbuf_free>
 800d7a4:	e000      	b.n	800d7a8 <tcp_input+0x7ec>
  return;
 800d7a6:	bf00      	nop
}
 800d7a8:	3724      	adds	r7, #36	; 0x24
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd90      	pop	{r4, r7, pc}
 800d7ae:	bf00      	nop
 800d7b0:	24003624 	.word	0x24003624
 800d7b4:	24003620 	.word	0x24003620
 800d7b8:	240035f0 	.word	0x240035f0
 800d7bc:	24003600 	.word	0x24003600
 800d7c0:	24003614 	.word	0x24003614
 800d7c4:	2400361a 	.word	0x2400361a
 800d7c8:	24003610 	.word	0x24003610
 800d7cc:	240006cc 	.word	0x240006cc
 800d7d0:	240006d0 	.word	0x240006d0

0800d7d4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b082      	sub	sp, #8
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d106      	bne.n	800d7f0 <tcp_input_delayed_close+0x1c>
 800d7e2:	4b17      	ldr	r3, [pc, #92]	; (800d840 <tcp_input_delayed_close+0x6c>)
 800d7e4:	f240 225a 	movw	r2, #602	; 0x25a
 800d7e8:	4916      	ldr	r1, [pc, #88]	; (800d844 <tcp_input_delayed_close+0x70>)
 800d7ea:	4817      	ldr	r0, [pc, #92]	; (800d848 <tcp_input_delayed_close+0x74>)
 800d7ec:	f006 fc3a 	bl	8014064 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d7f0:	4b16      	ldr	r3, [pc, #88]	; (800d84c <tcp_input_delayed_close+0x78>)
 800d7f2:	781b      	ldrb	r3, [r3, #0]
 800d7f4:	f003 0310 	and.w	r3, r3, #16
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d01c      	beq.n	800d836 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	8b5b      	ldrh	r3, [r3, #26]
 800d800:	f003 0310 	and.w	r3, r3, #16
 800d804:	2b00      	cmp	r3, #0
 800d806:	d10d      	bne.n	800d824 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d008      	beq.n	800d824 <tcp_input_delayed_close+0x50>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d818:	687a      	ldr	r2, [r7, #4]
 800d81a:	6912      	ldr	r2, [r2, #16]
 800d81c:	f06f 010e 	mvn.w	r1, #14
 800d820:	4610      	mov	r0, r2
 800d822:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d824:	6879      	ldr	r1, [r7, #4]
 800d826:	480a      	ldr	r0, [pc, #40]	; (800d850 <tcp_input_delayed_close+0x7c>)
 800d828:	f7ff fa50 	bl	800cccc <tcp_pcb_remove>
    tcp_free(pcb);
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f7fd fd97 	bl	800b360 <tcp_free>
    return 1;
 800d832:	2301      	movs	r3, #1
 800d834:	e000      	b.n	800d838 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d836:	2300      	movs	r3, #0
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3708      	adds	r7, #8
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}
 800d840:	080165b4 	.word	0x080165b4
 800d844:	08016784 	.word	0x08016784
 800d848:	08016600 	.word	0x08016600
 800d84c:	2400361d 	.word	0x2400361d
 800d850:	240035e4 	.word	0x240035e4

0800d854 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d854:	b590      	push	{r4, r7, lr}
 800d856:	b08b      	sub	sp, #44	; 0x2c
 800d858:	af04      	add	r7, sp, #16
 800d85a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d85c:	4b6f      	ldr	r3, [pc, #444]	; (800da1c <tcp_listen_input+0x1c8>)
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	f003 0304 	and.w	r3, r3, #4
 800d864:	2b00      	cmp	r3, #0
 800d866:	f040 80d2 	bne.w	800da0e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d106      	bne.n	800d87e <tcp_listen_input+0x2a>
 800d870:	4b6b      	ldr	r3, [pc, #428]	; (800da20 <tcp_listen_input+0x1cc>)
 800d872:	f240 2281 	movw	r2, #641	; 0x281
 800d876:	496b      	ldr	r1, [pc, #428]	; (800da24 <tcp_listen_input+0x1d0>)
 800d878:	486b      	ldr	r0, [pc, #428]	; (800da28 <tcp_listen_input+0x1d4>)
 800d87a:	f006 fbf3 	bl	8014064 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d87e:	4b67      	ldr	r3, [pc, #412]	; (800da1c <tcp_listen_input+0x1c8>)
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	f003 0310 	and.w	r3, r3, #16
 800d886:	2b00      	cmp	r3, #0
 800d888:	d019      	beq.n	800d8be <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d88a:	4b68      	ldr	r3, [pc, #416]	; (800da2c <tcp_listen_input+0x1d8>)
 800d88c:	6819      	ldr	r1, [r3, #0]
 800d88e:	4b68      	ldr	r3, [pc, #416]	; (800da30 <tcp_listen_input+0x1dc>)
 800d890:	881b      	ldrh	r3, [r3, #0]
 800d892:	461a      	mov	r2, r3
 800d894:	4b67      	ldr	r3, [pc, #412]	; (800da34 <tcp_listen_input+0x1e0>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d89a:	4b67      	ldr	r3, [pc, #412]	; (800da38 <tcp_listen_input+0x1e4>)
 800d89c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d89e:	885b      	ldrh	r3, [r3, #2]
 800d8a0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d8a2:	4a65      	ldr	r2, [pc, #404]	; (800da38 <tcp_listen_input+0x1e4>)
 800d8a4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d8a6:	8812      	ldrh	r2, [r2, #0]
 800d8a8:	b292      	uxth	r2, r2
 800d8aa:	9202      	str	r2, [sp, #8]
 800d8ac:	9301      	str	r3, [sp, #4]
 800d8ae:	4b63      	ldr	r3, [pc, #396]	; (800da3c <tcp_listen_input+0x1e8>)
 800d8b0:	9300      	str	r3, [sp, #0]
 800d8b2:	4b63      	ldr	r3, [pc, #396]	; (800da40 <tcp_listen_input+0x1ec>)
 800d8b4:	4602      	mov	r2, r0
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f003 fbd8 	bl	801106c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d8bc:	e0a9      	b.n	800da12 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800d8be:	4b57      	ldr	r3, [pc, #348]	; (800da1c <tcp_listen_input+0x1c8>)
 800d8c0:	781b      	ldrb	r3, [r3, #0]
 800d8c2:	f003 0302 	and.w	r3, r3, #2
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	f000 80a3 	beq.w	800da12 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	7d5b      	ldrb	r3, [r3, #21]
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7ff f859 	bl	800c988 <tcp_alloc>
 800d8d6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d111      	bne.n	800d902 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	699b      	ldr	r3, [r3, #24]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d00a      	beq.n	800d8fc <tcp_listen_input+0xa8>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	699b      	ldr	r3, [r3, #24]
 800d8ea:	687a      	ldr	r2, [r7, #4]
 800d8ec:	6910      	ldr	r0, [r2, #16]
 800d8ee:	f04f 32ff 	mov.w	r2, #4294967295
 800d8f2:	2100      	movs	r1, #0
 800d8f4:	4798      	blx	r3
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	73bb      	strb	r3, [r7, #14]
      return;
 800d8fa:	e08b      	b.n	800da14 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d8fc:	23f0      	movs	r3, #240	; 0xf0
 800d8fe:	73bb      	strb	r3, [r7, #14]
      return;
 800d900:	e088      	b.n	800da14 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d902:	4b50      	ldr	r3, [pc, #320]	; (800da44 <tcp_listen_input+0x1f0>)
 800d904:	695a      	ldr	r2, [r3, #20]
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d90a:	4b4e      	ldr	r3, [pc, #312]	; (800da44 <tcp_listen_input+0x1f0>)
 800d90c:	691a      	ldr	r2, [r3, #16]
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	8ada      	ldrh	r2, [r3, #22]
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d91a:	4b47      	ldr	r3, [pc, #284]	; (800da38 <tcp_listen_input+0x1e4>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	881b      	ldrh	r3, [r3, #0]
 800d920:	b29a      	uxth	r2, r3
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	2203      	movs	r2, #3
 800d92a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d92c:	4b41      	ldr	r3, [pc, #260]	; (800da34 <tcp_listen_input+0x1e0>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	1c5a      	adds	r2, r3, #1
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800d93e:	6978      	ldr	r0, [r7, #20]
 800d940:	f7ff fa58 	bl	800cdf4 <tcp_next_iss>
 800d944:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	693a      	ldr	r2, [r7, #16]
 800d94a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	693a      	ldr	r2, [r7, #16]
 800d950:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	693a      	ldr	r2, [r7, #16]
 800d956:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	693a      	ldr	r2, [r7, #16]
 800d95c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d95e:	4b35      	ldr	r3, [pc, #212]	; (800da34 <tcp_listen_input+0x1e0>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	1e5a      	subs	r2, r3, #1
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	691a      	ldr	r2, [r3, #16]
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	687a      	ldr	r2, [r7, #4]
 800d974:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	7a5b      	ldrb	r3, [r3, #9]
 800d97a:	f003 030c 	and.w	r3, r3, #12
 800d97e:	b2da      	uxtb	r2, r3
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	7a1a      	ldrb	r2, [r3, #8]
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d98c:	4b2e      	ldr	r3, [pc, #184]	; (800da48 <tcp_listen_input+0x1f4>)
 800d98e:	681a      	ldr	r2, [r3, #0]
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	60da      	str	r2, [r3, #12]
 800d994:	4a2c      	ldr	r2, [pc, #176]	; (800da48 <tcp_listen_input+0x1f4>)
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	6013      	str	r3, [r2, #0]
 800d99a:	f003 fd29 	bl	80113f0 <tcp_timer_needed>
 800d99e:	4b2b      	ldr	r3, [pc, #172]	; (800da4c <tcp_listen_input+0x1f8>)
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d9a4:	6978      	ldr	r0, [r7, #20]
 800d9a6:	f001 fd8f 	bl	800f4c8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d9aa:	4b23      	ldr	r3, [pc, #140]	; (800da38 <tcp_listen_input+0x1e4>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	89db      	ldrh	r3, [r3, #14]
 800d9b0:	b29a      	uxth	r2, r3
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	3304      	adds	r3, #4
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f005 f913 	bl	8012bf8 <ip4_route>
 800d9d2:	4601      	mov	r1, r0
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	3304      	adds	r3, #4
 800d9d8:	461a      	mov	r2, r3
 800d9da:	4620      	mov	r0, r4
 800d9dc:	f7ff fa30 	bl	800ce40 <tcp_eff_send_mss_netif>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d9e8:	2112      	movs	r1, #18
 800d9ea:	6978      	ldr	r0, [r7, #20]
 800d9ec:	f002 fc9c 	bl	8010328 <tcp_enqueue_flags>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d9f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d004      	beq.n	800da06 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d9fc:	2100      	movs	r1, #0
 800d9fe:	6978      	ldr	r0, [r7, #20]
 800da00:	f7fd fed8 	bl	800b7b4 <tcp_abandon>
      return;
 800da04:	e006      	b.n	800da14 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800da06:	6978      	ldr	r0, [r7, #20]
 800da08:	f002 fd7c 	bl	8010504 <tcp_output>
  return;
 800da0c:	e001      	b.n	800da12 <tcp_listen_input+0x1be>
    return;
 800da0e:	bf00      	nop
 800da10:	e000      	b.n	800da14 <tcp_listen_input+0x1c0>
  return;
 800da12:	bf00      	nop
}
 800da14:	371c      	adds	r7, #28
 800da16:	46bd      	mov	sp, r7
 800da18:	bd90      	pop	{r4, r7, pc}
 800da1a:	bf00      	nop
 800da1c:	2400361c 	.word	0x2400361c
 800da20:	080165b4 	.word	0x080165b4
 800da24:	080167ac 	.word	0x080167ac
 800da28:	08016600 	.word	0x08016600
 800da2c:	24003614 	.word	0x24003614
 800da30:	2400361a 	.word	0x2400361a
 800da34:	24003610 	.word	0x24003610
 800da38:	24003600 	.word	0x24003600
 800da3c:	240006cc 	.word	0x240006cc
 800da40:	240006d0 	.word	0x240006d0
 800da44:	240006bc 	.word	0x240006bc
 800da48:	240035e4 	.word	0x240035e4
 800da4c:	240035ec 	.word	0x240035ec

0800da50 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b086      	sub	sp, #24
 800da54:	af04      	add	r7, sp, #16
 800da56:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800da58:	4b2f      	ldr	r3, [pc, #188]	; (800db18 <tcp_timewait_input+0xc8>)
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	f003 0304 	and.w	r3, r3, #4
 800da60:	2b00      	cmp	r3, #0
 800da62:	d153      	bne.n	800db0c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d106      	bne.n	800da78 <tcp_timewait_input+0x28>
 800da6a:	4b2c      	ldr	r3, [pc, #176]	; (800db1c <tcp_timewait_input+0xcc>)
 800da6c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800da70:	492b      	ldr	r1, [pc, #172]	; (800db20 <tcp_timewait_input+0xd0>)
 800da72:	482c      	ldr	r0, [pc, #176]	; (800db24 <tcp_timewait_input+0xd4>)
 800da74:	f006 faf6 	bl	8014064 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800da78:	4b27      	ldr	r3, [pc, #156]	; (800db18 <tcp_timewait_input+0xc8>)
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	f003 0302 	and.w	r3, r3, #2
 800da80:	2b00      	cmp	r3, #0
 800da82:	d02a      	beq.n	800dada <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800da84:	4b28      	ldr	r3, [pc, #160]	; (800db28 <tcp_timewait_input+0xd8>)
 800da86:	681a      	ldr	r2, [r3, #0]
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da8c:	1ad3      	subs	r3, r2, r3
 800da8e:	2b00      	cmp	r3, #0
 800da90:	db2d      	blt.n	800daee <tcp_timewait_input+0x9e>
 800da92:	4b25      	ldr	r3, [pc, #148]	; (800db28 <tcp_timewait_input+0xd8>)
 800da94:	681a      	ldr	r2, [r3, #0]
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da9a:	6879      	ldr	r1, [r7, #4]
 800da9c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800da9e:	440b      	add	r3, r1
 800daa0:	1ad3      	subs	r3, r2, r3
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	dc23      	bgt.n	800daee <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800daa6:	4b21      	ldr	r3, [pc, #132]	; (800db2c <tcp_timewait_input+0xdc>)
 800daa8:	6819      	ldr	r1, [r3, #0]
 800daaa:	4b21      	ldr	r3, [pc, #132]	; (800db30 <tcp_timewait_input+0xe0>)
 800daac:	881b      	ldrh	r3, [r3, #0]
 800daae:	461a      	mov	r2, r3
 800dab0:	4b1d      	ldr	r3, [pc, #116]	; (800db28 <tcp_timewait_input+0xd8>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dab6:	4b1f      	ldr	r3, [pc, #124]	; (800db34 <tcp_timewait_input+0xe4>)
 800dab8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800daba:	885b      	ldrh	r3, [r3, #2]
 800dabc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dabe:	4a1d      	ldr	r2, [pc, #116]	; (800db34 <tcp_timewait_input+0xe4>)
 800dac0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dac2:	8812      	ldrh	r2, [r2, #0]
 800dac4:	b292      	uxth	r2, r2
 800dac6:	9202      	str	r2, [sp, #8]
 800dac8:	9301      	str	r3, [sp, #4]
 800daca:	4b1b      	ldr	r3, [pc, #108]	; (800db38 <tcp_timewait_input+0xe8>)
 800dacc:	9300      	str	r3, [sp, #0]
 800dace:	4b1b      	ldr	r3, [pc, #108]	; (800db3c <tcp_timewait_input+0xec>)
 800dad0:	4602      	mov	r2, r0
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f003 faca 	bl	801106c <tcp_rst>
      return;
 800dad8:	e01b      	b.n	800db12 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800dada:	4b0f      	ldr	r3, [pc, #60]	; (800db18 <tcp_timewait_input+0xc8>)
 800dadc:	781b      	ldrb	r3, [r3, #0]
 800dade:	f003 0301 	and.w	r3, r3, #1
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d003      	beq.n	800daee <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800dae6:	4b16      	ldr	r3, [pc, #88]	; (800db40 <tcp_timewait_input+0xf0>)
 800dae8:	681a      	ldr	r2, [r3, #0]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800daee:	4b10      	ldr	r3, [pc, #64]	; (800db30 <tcp_timewait_input+0xe0>)
 800daf0:	881b      	ldrh	r3, [r3, #0]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d00c      	beq.n	800db10 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	8b5b      	ldrh	r3, [r3, #26]
 800dafa:	f043 0302 	orr.w	r3, r3, #2
 800dafe:	b29a      	uxth	r2, r3
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f002 fcfd 	bl	8010504 <tcp_output>
  }
  return;
 800db0a:	e001      	b.n	800db10 <tcp_timewait_input+0xc0>
    return;
 800db0c:	bf00      	nop
 800db0e:	e000      	b.n	800db12 <tcp_timewait_input+0xc2>
  return;
 800db10:	bf00      	nop
}
 800db12:	3708      	adds	r7, #8
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	2400361c 	.word	0x2400361c
 800db1c:	080165b4 	.word	0x080165b4
 800db20:	080167cc 	.word	0x080167cc
 800db24:	08016600 	.word	0x08016600
 800db28:	24003610 	.word	0x24003610
 800db2c:	24003614 	.word	0x24003614
 800db30:	2400361a 	.word	0x2400361a
 800db34:	24003600 	.word	0x24003600
 800db38:	240006cc 	.word	0x240006cc
 800db3c:	240006d0 	.word	0x240006d0
 800db40:	240035d8 	.word	0x240035d8

0800db44 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800db44:	b590      	push	{r4, r7, lr}
 800db46:	b08d      	sub	sp, #52	; 0x34
 800db48:	af04      	add	r7, sp, #16
 800db4a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800db4c:	2300      	movs	r3, #0
 800db4e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800db50:	2300      	movs	r3, #0
 800db52:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d106      	bne.n	800db68 <tcp_process+0x24>
 800db5a:	4b9d      	ldr	r3, [pc, #628]	; (800ddd0 <tcp_process+0x28c>)
 800db5c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800db60:	499c      	ldr	r1, [pc, #624]	; (800ddd4 <tcp_process+0x290>)
 800db62:	489d      	ldr	r0, [pc, #628]	; (800ddd8 <tcp_process+0x294>)
 800db64:	f006 fa7e 	bl	8014064 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800db68:	4b9c      	ldr	r3, [pc, #624]	; (800dddc <tcp_process+0x298>)
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	f003 0304 	and.w	r3, r3, #4
 800db70:	2b00      	cmp	r3, #0
 800db72:	d04e      	beq.n	800dc12 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	7d1b      	ldrb	r3, [r3, #20]
 800db78:	2b02      	cmp	r3, #2
 800db7a:	d108      	bne.n	800db8e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800db80:	4b97      	ldr	r3, [pc, #604]	; (800dde0 <tcp_process+0x29c>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	429a      	cmp	r2, r3
 800db86:	d123      	bne.n	800dbd0 <tcp_process+0x8c>
        acceptable = 1;
 800db88:	2301      	movs	r3, #1
 800db8a:	76fb      	strb	r3, [r7, #27]
 800db8c:	e020      	b.n	800dbd0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db92:	4b94      	ldr	r3, [pc, #592]	; (800dde4 <tcp_process+0x2a0>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	429a      	cmp	r2, r3
 800db98:	d102      	bne.n	800dba0 <tcp_process+0x5c>
        acceptable = 1;
 800db9a:	2301      	movs	r3, #1
 800db9c:	76fb      	strb	r3, [r7, #27]
 800db9e:	e017      	b.n	800dbd0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dba0:	4b90      	ldr	r3, [pc, #576]	; (800dde4 <tcp_process+0x2a0>)
 800dba2:	681a      	ldr	r2, [r3, #0]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba8:	1ad3      	subs	r3, r2, r3
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	db10      	blt.n	800dbd0 <tcp_process+0x8c>
 800dbae:	4b8d      	ldr	r3, [pc, #564]	; (800dde4 <tcp_process+0x2a0>)
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbb6:	6879      	ldr	r1, [r7, #4]
 800dbb8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dbba:	440b      	add	r3, r1
 800dbbc:	1ad3      	subs	r3, r2, r3
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	dc06      	bgt.n	800dbd0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	8b5b      	ldrh	r3, [r3, #26]
 800dbc6:	f043 0302 	orr.w	r3, r3, #2
 800dbca:	b29a      	uxth	r2, r3
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800dbd0:	7efb      	ldrb	r3, [r7, #27]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d01b      	beq.n	800dc0e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	7d1b      	ldrb	r3, [r3, #20]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d106      	bne.n	800dbec <tcp_process+0xa8>
 800dbde:	4b7c      	ldr	r3, [pc, #496]	; (800ddd0 <tcp_process+0x28c>)
 800dbe0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800dbe4:	4980      	ldr	r1, [pc, #512]	; (800dde8 <tcp_process+0x2a4>)
 800dbe6:	487c      	ldr	r0, [pc, #496]	; (800ddd8 <tcp_process+0x294>)
 800dbe8:	f006 fa3c 	bl	8014064 <iprintf>
      recv_flags |= TF_RESET;
 800dbec:	4b7f      	ldr	r3, [pc, #508]	; (800ddec <tcp_process+0x2a8>)
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	f043 0308 	orr.w	r3, r3, #8
 800dbf4:	b2da      	uxtb	r2, r3
 800dbf6:	4b7d      	ldr	r3, [pc, #500]	; (800ddec <tcp_process+0x2a8>)
 800dbf8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	8b5b      	ldrh	r3, [r3, #26]
 800dbfe:	f023 0301 	bic.w	r3, r3, #1
 800dc02:	b29a      	uxth	r2, r3
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800dc08:	f06f 030d 	mvn.w	r3, #13
 800dc0c:	e37a      	b.n	800e304 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	e378      	b.n	800e304 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800dc12:	4b72      	ldr	r3, [pc, #456]	; (800dddc <tcp_process+0x298>)
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	f003 0302 	and.w	r3, r3, #2
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d010      	beq.n	800dc40 <tcp_process+0xfc>
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	7d1b      	ldrb	r3, [r3, #20]
 800dc22:	2b02      	cmp	r3, #2
 800dc24:	d00c      	beq.n	800dc40 <tcp_process+0xfc>
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	7d1b      	ldrb	r3, [r3, #20]
 800dc2a:	2b03      	cmp	r3, #3
 800dc2c:	d008      	beq.n	800dc40 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	8b5b      	ldrh	r3, [r3, #26]
 800dc32:	f043 0302 	orr.w	r3, r3, #2
 800dc36:	b29a      	uxth	r2, r3
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	e361      	b.n	800e304 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	8b5b      	ldrh	r3, [r3, #26]
 800dc44:	f003 0310 	and.w	r3, r3, #16
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d103      	bne.n	800dc54 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800dc4c:	4b68      	ldr	r3, [pc, #416]	; (800ddf0 <tcp_process+0x2ac>)
 800dc4e:	681a      	ldr	r2, [r3, #0]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2200      	movs	r2, #0
 800dc58:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2200      	movs	r2, #0
 800dc60:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f001 fc2f 	bl	800f4c8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	7d1b      	ldrb	r3, [r3, #20]
 800dc6e:	3b02      	subs	r3, #2
 800dc70:	2b07      	cmp	r3, #7
 800dc72:	f200 8337 	bhi.w	800e2e4 <tcp_process+0x7a0>
 800dc76:	a201      	add	r2, pc, #4	; (adr r2, 800dc7c <tcp_process+0x138>)
 800dc78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc7c:	0800dc9d 	.word	0x0800dc9d
 800dc80:	0800decd 	.word	0x0800decd
 800dc84:	0800e045 	.word	0x0800e045
 800dc88:	0800e06f 	.word	0x0800e06f
 800dc8c:	0800e193 	.word	0x0800e193
 800dc90:	0800e045 	.word	0x0800e045
 800dc94:	0800e21f 	.word	0x0800e21f
 800dc98:	0800e2af 	.word	0x0800e2af
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800dc9c:	4b4f      	ldr	r3, [pc, #316]	; (800dddc <tcp_process+0x298>)
 800dc9e:	781b      	ldrb	r3, [r3, #0]
 800dca0:	f003 0310 	and.w	r3, r3, #16
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	f000 80e4 	beq.w	800de72 <tcp_process+0x32e>
 800dcaa:	4b4c      	ldr	r3, [pc, #304]	; (800dddc <tcp_process+0x298>)
 800dcac:	781b      	ldrb	r3, [r3, #0]
 800dcae:	f003 0302 	and.w	r3, r3, #2
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	f000 80dd 	beq.w	800de72 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcbc:	1c5a      	adds	r2, r3, #1
 800dcbe:	4b48      	ldr	r3, [pc, #288]	; (800dde0 <tcp_process+0x29c>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	f040 80d5 	bne.w	800de72 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800dcc8:	4b46      	ldr	r3, [pc, #280]	; (800dde4 <tcp_process+0x2a0>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	1c5a      	adds	r2, r3, #1
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800dcda:	4b41      	ldr	r3, [pc, #260]	; (800dde0 <tcp_process+0x29c>)
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800dce2:	4b44      	ldr	r3, [pc, #272]	; (800ddf4 <tcp_process+0x2b0>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	89db      	ldrh	r3, [r3, #14]
 800dce8:	b29a      	uxth	r2, r3
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800dcfc:	4b39      	ldr	r3, [pc, #228]	; (800dde4 <tcp_process+0x2a0>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	1e5a      	subs	r2, r3, #1
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2204      	movs	r2, #4
 800dd0a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	3304      	adds	r3, #4
 800dd14:	4618      	mov	r0, r3
 800dd16:	f004 ff6f 	bl	8012bf8 <ip4_route>
 800dd1a:	4601      	mov	r1, r0
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	3304      	adds	r3, #4
 800dd20:	461a      	mov	r2, r3
 800dd22:	4620      	mov	r0, r4
 800dd24:	f7ff f88c 	bl	800ce40 <tcp_eff_send_mss_netif>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	461a      	mov	r2, r3
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd34:	009a      	lsls	r2, r3, #2
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd3a:	005b      	lsls	r3, r3, #1
 800dd3c:	f241 111c 	movw	r1, #4380	; 0x111c
 800dd40:	428b      	cmp	r3, r1
 800dd42:	bf38      	it	cc
 800dd44:	460b      	movcc	r3, r1
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d204      	bcs.n	800dd54 <tcp_process+0x210>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd4e:	009b      	lsls	r3, r3, #2
 800dd50:	b29b      	uxth	r3, r3
 800dd52:	e00d      	b.n	800dd70 <tcp_process+0x22c>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd58:	005b      	lsls	r3, r3, #1
 800dd5a:	f241 121c 	movw	r2, #4380	; 0x111c
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	d904      	bls.n	800dd6c <tcp_process+0x228>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd66:	005b      	lsls	r3, r3, #1
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	e001      	b.n	800dd70 <tcp_process+0x22c>
 800dd6c:	f241 131c 	movw	r3, #4380	; 0x111c
 800dd70:	687a      	ldr	r2, [r7, #4]
 800dd72:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d106      	bne.n	800dd8e <tcp_process+0x24a>
 800dd80:	4b13      	ldr	r3, [pc, #76]	; (800ddd0 <tcp_process+0x28c>)
 800dd82:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800dd86:	491c      	ldr	r1, [pc, #112]	; (800ddf8 <tcp_process+0x2b4>)
 800dd88:	4813      	ldr	r0, [pc, #76]	; (800ddd8 <tcp_process+0x294>)
 800dd8a:	f006 f96b 	bl	8014064 <iprintf>
        --pcb->snd_queuelen;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dd94:	3b01      	subs	r3, #1
 800dd96:	b29a      	uxth	r2, r3
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dda2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800dda4:	69fb      	ldr	r3, [r7, #28]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d12a      	bne.n	800de00 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddae:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ddb0:	69fb      	ldr	r3, [r7, #28]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d106      	bne.n	800ddc4 <tcp_process+0x280>
 800ddb6:	4b06      	ldr	r3, [pc, #24]	; (800ddd0 <tcp_process+0x28c>)
 800ddb8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800ddbc:	490f      	ldr	r1, [pc, #60]	; (800ddfc <tcp_process+0x2b8>)
 800ddbe:	4806      	ldr	r0, [pc, #24]	; (800ddd8 <tcp_process+0x294>)
 800ddc0:	f006 f950 	bl	8014064 <iprintf>
          pcb->unsent = rseg->next;
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	681a      	ldr	r2, [r3, #0]
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	66da      	str	r2, [r3, #108]	; 0x6c
 800ddcc:	e01c      	b.n	800de08 <tcp_process+0x2c4>
 800ddce:	bf00      	nop
 800ddd0:	080165b4 	.word	0x080165b4
 800ddd4:	080167ec 	.word	0x080167ec
 800ddd8:	08016600 	.word	0x08016600
 800dddc:	2400361c 	.word	0x2400361c
 800dde0:	24003614 	.word	0x24003614
 800dde4:	24003610 	.word	0x24003610
 800dde8:	08016808 	.word	0x08016808
 800ddec:	2400361d 	.word	0x2400361d
 800ddf0:	240035d8 	.word	0x240035d8
 800ddf4:	24003600 	.word	0x24003600
 800ddf8:	08016828 	.word	0x08016828
 800ddfc:	08016840 	.word	0x08016840
        } else {
          pcb->unacked = rseg->next;
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800de08:	69f8      	ldr	r0, [r7, #28]
 800de0a:	f7fe fc36 	bl	800c67a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de12:	2b00      	cmp	r3, #0
 800de14:	d104      	bne.n	800de20 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de1c:	861a      	strh	r2, [r3, #48]	; 0x30
 800de1e:	e006      	b.n	800de2e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2200      	movs	r2, #0
 800de24:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2200      	movs	r2, #0
 800de2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de34:	2b00      	cmp	r3, #0
 800de36:	d00a      	beq.n	800de4e <tcp_process+0x30a>
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	6910      	ldr	r0, [r2, #16]
 800de42:	2200      	movs	r2, #0
 800de44:	6879      	ldr	r1, [r7, #4]
 800de46:	4798      	blx	r3
 800de48:	4603      	mov	r3, r0
 800de4a:	76bb      	strb	r3, [r7, #26]
 800de4c:	e001      	b.n	800de52 <tcp_process+0x30e>
 800de4e:	2300      	movs	r3, #0
 800de50:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800de52:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800de56:	f113 0f0d 	cmn.w	r3, #13
 800de5a:	d102      	bne.n	800de62 <tcp_process+0x31e>
          return ERR_ABRT;
 800de5c:	f06f 030c 	mvn.w	r3, #12
 800de60:	e250      	b.n	800e304 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	8b5b      	ldrh	r3, [r3, #26]
 800de66:	f043 0302 	orr.w	r3, r3, #2
 800de6a:	b29a      	uxth	r2, r3
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800de70:	e23a      	b.n	800e2e8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800de72:	4b98      	ldr	r3, [pc, #608]	; (800e0d4 <tcp_process+0x590>)
 800de74:	781b      	ldrb	r3, [r3, #0]
 800de76:	f003 0310 	and.w	r3, r3, #16
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	f000 8234 	beq.w	800e2e8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de80:	4b95      	ldr	r3, [pc, #596]	; (800e0d8 <tcp_process+0x594>)
 800de82:	6819      	ldr	r1, [r3, #0]
 800de84:	4b95      	ldr	r3, [pc, #596]	; (800e0dc <tcp_process+0x598>)
 800de86:	881b      	ldrh	r3, [r3, #0]
 800de88:	461a      	mov	r2, r3
 800de8a:	4b95      	ldr	r3, [pc, #596]	; (800e0e0 <tcp_process+0x59c>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800de90:	4b94      	ldr	r3, [pc, #592]	; (800e0e4 <tcp_process+0x5a0>)
 800de92:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de94:	885b      	ldrh	r3, [r3, #2]
 800de96:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800de98:	4a92      	ldr	r2, [pc, #584]	; (800e0e4 <tcp_process+0x5a0>)
 800de9a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de9c:	8812      	ldrh	r2, [r2, #0]
 800de9e:	b292      	uxth	r2, r2
 800dea0:	9202      	str	r2, [sp, #8]
 800dea2:	9301      	str	r3, [sp, #4]
 800dea4:	4b90      	ldr	r3, [pc, #576]	; (800e0e8 <tcp_process+0x5a4>)
 800dea6:	9300      	str	r3, [sp, #0]
 800dea8:	4b90      	ldr	r3, [pc, #576]	; (800e0ec <tcp_process+0x5a8>)
 800deaa:	4602      	mov	r2, r0
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f003 f8dd 	bl	801106c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800deb8:	2b05      	cmp	r3, #5
 800deba:	f200 8215 	bhi.w	800e2e8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2200      	movs	r2, #0
 800dec2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	f002 fea7 	bl	8010c18 <tcp_rexmit_rto>
      break;
 800deca:	e20d      	b.n	800e2e8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800decc:	4b81      	ldr	r3, [pc, #516]	; (800e0d4 <tcp_process+0x590>)
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	f003 0310 	and.w	r3, r3, #16
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	f000 80a1 	beq.w	800e01c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800deda:	4b7f      	ldr	r3, [pc, #508]	; (800e0d8 <tcp_process+0x594>)
 800dedc:	681a      	ldr	r2, [r3, #0]
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dee2:	1ad3      	subs	r3, r2, r3
 800dee4:	3b01      	subs	r3, #1
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	db7e      	blt.n	800dfe8 <tcp_process+0x4a4>
 800deea:	4b7b      	ldr	r3, [pc, #492]	; (800e0d8 <tcp_process+0x594>)
 800deec:	681a      	ldr	r2, [r3, #0]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800def2:	1ad3      	subs	r3, r2, r3
 800def4:	2b00      	cmp	r3, #0
 800def6:	dc77      	bgt.n	800dfe8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2204      	movs	r2, #4
 800defc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df02:	2b00      	cmp	r3, #0
 800df04:	d102      	bne.n	800df0c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800df06:	23fa      	movs	r3, #250	; 0xfa
 800df08:	76bb      	strb	r3, [r7, #26]
 800df0a:	e01d      	b.n	800df48 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df10:	699b      	ldr	r3, [r3, #24]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d106      	bne.n	800df24 <tcp_process+0x3e0>
 800df16:	4b76      	ldr	r3, [pc, #472]	; (800e0f0 <tcp_process+0x5ac>)
 800df18:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800df1c:	4975      	ldr	r1, [pc, #468]	; (800e0f4 <tcp_process+0x5b0>)
 800df1e:	4876      	ldr	r0, [pc, #472]	; (800e0f8 <tcp_process+0x5b4>)
 800df20:	f006 f8a0 	bl	8014064 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df28:	699b      	ldr	r3, [r3, #24]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d00a      	beq.n	800df44 <tcp_process+0x400>
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df32:	699b      	ldr	r3, [r3, #24]
 800df34:	687a      	ldr	r2, [r7, #4]
 800df36:	6910      	ldr	r0, [r2, #16]
 800df38:	2200      	movs	r2, #0
 800df3a:	6879      	ldr	r1, [r7, #4]
 800df3c:	4798      	blx	r3
 800df3e:	4603      	mov	r3, r0
 800df40:	76bb      	strb	r3, [r7, #26]
 800df42:	e001      	b.n	800df48 <tcp_process+0x404>
 800df44:	23f0      	movs	r3, #240	; 0xf0
 800df46:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800df48:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d00a      	beq.n	800df66 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800df50:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800df54:	f113 0f0d 	cmn.w	r3, #13
 800df58:	d002      	beq.n	800df60 <tcp_process+0x41c>
              tcp_abort(pcb);
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f7fd fce8 	bl	800b930 <tcp_abort>
            }
            return ERR_ABRT;
 800df60:	f06f 030c 	mvn.w	r3, #12
 800df64:	e1ce      	b.n	800e304 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f000 fae0 	bl	800e52c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800df6c:	4b63      	ldr	r3, [pc, #396]	; (800e0fc <tcp_process+0x5b8>)
 800df6e:	881b      	ldrh	r3, [r3, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d005      	beq.n	800df80 <tcp_process+0x43c>
            recv_acked--;
 800df74:	4b61      	ldr	r3, [pc, #388]	; (800e0fc <tcp_process+0x5b8>)
 800df76:	881b      	ldrh	r3, [r3, #0]
 800df78:	3b01      	subs	r3, #1
 800df7a:	b29a      	uxth	r2, r3
 800df7c:	4b5f      	ldr	r3, [pc, #380]	; (800e0fc <tcp_process+0x5b8>)
 800df7e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df84:	009a      	lsls	r2, r3, #2
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df8a:	005b      	lsls	r3, r3, #1
 800df8c:	f241 111c 	movw	r1, #4380	; 0x111c
 800df90:	428b      	cmp	r3, r1
 800df92:	bf38      	it	cc
 800df94:	460b      	movcc	r3, r1
 800df96:	429a      	cmp	r2, r3
 800df98:	d204      	bcs.n	800dfa4 <tcp_process+0x460>
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df9e:	009b      	lsls	r3, r3, #2
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	e00d      	b.n	800dfc0 <tcp_process+0x47c>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfa8:	005b      	lsls	r3, r3, #1
 800dfaa:	f241 121c 	movw	r2, #4380	; 0x111c
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	d904      	bls.n	800dfbc <tcp_process+0x478>
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfb6:	005b      	lsls	r3, r3, #1
 800dfb8:	b29b      	uxth	r3, r3
 800dfba:	e001      	b.n	800dfc0 <tcp_process+0x47c>
 800dfbc:	f241 131c 	movw	r3, #4380	; 0x111c
 800dfc0:	687a      	ldr	r2, [r7, #4]
 800dfc2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800dfc6:	4b4e      	ldr	r3, [pc, #312]	; (800e100 <tcp_process+0x5bc>)
 800dfc8:	781b      	ldrb	r3, [r3, #0]
 800dfca:	f003 0320 	and.w	r3, r3, #32
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d037      	beq.n	800e042 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	8b5b      	ldrh	r3, [r3, #26]
 800dfd6:	f043 0302 	orr.w	r3, r3, #2
 800dfda:	b29a      	uxth	r2, r3
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2207      	movs	r2, #7
 800dfe4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800dfe6:	e02c      	b.n	800e042 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfe8:	4b3b      	ldr	r3, [pc, #236]	; (800e0d8 <tcp_process+0x594>)
 800dfea:	6819      	ldr	r1, [r3, #0]
 800dfec:	4b3b      	ldr	r3, [pc, #236]	; (800e0dc <tcp_process+0x598>)
 800dfee:	881b      	ldrh	r3, [r3, #0]
 800dff0:	461a      	mov	r2, r3
 800dff2:	4b3b      	ldr	r3, [pc, #236]	; (800e0e0 <tcp_process+0x59c>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dff8:	4b3a      	ldr	r3, [pc, #232]	; (800e0e4 <tcp_process+0x5a0>)
 800dffa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dffc:	885b      	ldrh	r3, [r3, #2]
 800dffe:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e000:	4a38      	ldr	r2, [pc, #224]	; (800e0e4 <tcp_process+0x5a0>)
 800e002:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e004:	8812      	ldrh	r2, [r2, #0]
 800e006:	b292      	uxth	r2, r2
 800e008:	9202      	str	r2, [sp, #8]
 800e00a:	9301      	str	r3, [sp, #4]
 800e00c:	4b36      	ldr	r3, [pc, #216]	; (800e0e8 <tcp_process+0x5a4>)
 800e00e:	9300      	str	r3, [sp, #0]
 800e010:	4b36      	ldr	r3, [pc, #216]	; (800e0ec <tcp_process+0x5a8>)
 800e012:	4602      	mov	r2, r0
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f003 f829 	bl	801106c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e01a:	e167      	b.n	800e2ec <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e01c:	4b2d      	ldr	r3, [pc, #180]	; (800e0d4 <tcp_process+0x590>)
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	f003 0302 	and.w	r3, r3, #2
 800e024:	2b00      	cmp	r3, #0
 800e026:	f000 8161 	beq.w	800e2ec <tcp_process+0x7a8>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e02e:	1e5a      	subs	r2, r3, #1
 800e030:	4b2b      	ldr	r3, [pc, #172]	; (800e0e0 <tcp_process+0x59c>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	429a      	cmp	r2, r3
 800e036:	f040 8159 	bne.w	800e2ec <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f002 fe0e 	bl	8010c5c <tcp_rexmit>
      break;
 800e040:	e154      	b.n	800e2ec <tcp_process+0x7a8>
 800e042:	e153      	b.n	800e2ec <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f000 fa71 	bl	800e52c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e04a:	4b2d      	ldr	r3, [pc, #180]	; (800e100 <tcp_process+0x5bc>)
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	f003 0320 	and.w	r3, r3, #32
 800e052:	2b00      	cmp	r3, #0
 800e054:	f000 814c 	beq.w	800e2f0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	8b5b      	ldrh	r3, [r3, #26]
 800e05c:	f043 0302 	orr.w	r3, r3, #2
 800e060:	b29a      	uxth	r2, r3
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2207      	movs	r2, #7
 800e06a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e06c:	e140      	b.n	800e2f0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f000 fa5c 	bl	800e52c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e074:	4b22      	ldr	r3, [pc, #136]	; (800e100 <tcp_process+0x5bc>)
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	f003 0320 	and.w	r3, r3, #32
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d071      	beq.n	800e164 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e080:	4b14      	ldr	r3, [pc, #80]	; (800e0d4 <tcp_process+0x590>)
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	f003 0310 	and.w	r3, r3, #16
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d060      	beq.n	800e14e <tcp_process+0x60a>
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e090:	4b11      	ldr	r3, [pc, #68]	; (800e0d8 <tcp_process+0x594>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	429a      	cmp	r2, r3
 800e096:	d15a      	bne.n	800e14e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d156      	bne.n	800e14e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	8b5b      	ldrh	r3, [r3, #26]
 800e0a4:	f043 0302 	orr.w	r3, r3, #2
 800e0a8:	b29a      	uxth	r2, r3
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f7fe fdbc 	bl	800cc2c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e0b4:	4b13      	ldr	r3, [pc, #76]	; (800e104 <tcp_process+0x5c0>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	687a      	ldr	r2, [r7, #4]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d105      	bne.n	800e0ca <tcp_process+0x586>
 800e0be:	4b11      	ldr	r3, [pc, #68]	; (800e104 <tcp_process+0x5c0>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	68db      	ldr	r3, [r3, #12]
 800e0c4:	4a0f      	ldr	r2, [pc, #60]	; (800e104 <tcp_process+0x5c0>)
 800e0c6:	6013      	str	r3, [r2, #0]
 800e0c8:	e02e      	b.n	800e128 <tcp_process+0x5e4>
 800e0ca:	4b0e      	ldr	r3, [pc, #56]	; (800e104 <tcp_process+0x5c0>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	617b      	str	r3, [r7, #20]
 800e0d0:	e027      	b.n	800e122 <tcp_process+0x5de>
 800e0d2:	bf00      	nop
 800e0d4:	2400361c 	.word	0x2400361c
 800e0d8:	24003614 	.word	0x24003614
 800e0dc:	2400361a 	.word	0x2400361a
 800e0e0:	24003610 	.word	0x24003610
 800e0e4:	24003600 	.word	0x24003600
 800e0e8:	240006cc 	.word	0x240006cc
 800e0ec:	240006d0 	.word	0x240006d0
 800e0f0:	080165b4 	.word	0x080165b4
 800e0f4:	08016854 	.word	0x08016854
 800e0f8:	08016600 	.word	0x08016600
 800e0fc:	24003618 	.word	0x24003618
 800e100:	2400361d 	.word	0x2400361d
 800e104:	240035e4 	.word	0x240035e4
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	68db      	ldr	r3, [r3, #12]
 800e10c:	687a      	ldr	r2, [r7, #4]
 800e10e:	429a      	cmp	r2, r3
 800e110:	d104      	bne.n	800e11c <tcp_process+0x5d8>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	68da      	ldr	r2, [r3, #12]
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	60da      	str	r2, [r3, #12]
 800e11a:	e005      	b.n	800e128 <tcp_process+0x5e4>
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	68db      	ldr	r3, [r3, #12]
 800e120:	617b      	str	r3, [r7, #20]
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d1ef      	bne.n	800e108 <tcp_process+0x5c4>
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2200      	movs	r2, #0
 800e12c:	60da      	str	r2, [r3, #12]
 800e12e:	4b77      	ldr	r3, [pc, #476]	; (800e30c <tcp_process+0x7c8>)
 800e130:	2201      	movs	r2, #1
 800e132:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	220a      	movs	r2, #10
 800e138:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e13a:	4b75      	ldr	r3, [pc, #468]	; (800e310 <tcp_process+0x7cc>)
 800e13c:	681a      	ldr	r2, [r3, #0]
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	60da      	str	r2, [r3, #12]
 800e142:	4a73      	ldr	r2, [pc, #460]	; (800e310 <tcp_process+0x7cc>)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6013      	str	r3, [r2, #0]
 800e148:	f003 f952 	bl	80113f0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e14c:	e0d2      	b.n	800e2f4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	8b5b      	ldrh	r3, [r3, #26]
 800e152:	f043 0302 	orr.w	r3, r3, #2
 800e156:	b29a      	uxth	r2, r3
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2208      	movs	r2, #8
 800e160:	751a      	strb	r2, [r3, #20]
      break;
 800e162:	e0c7      	b.n	800e2f4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e164:	4b6b      	ldr	r3, [pc, #428]	; (800e314 <tcp_process+0x7d0>)
 800e166:	781b      	ldrb	r3, [r3, #0]
 800e168:	f003 0310 	and.w	r3, r3, #16
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	f000 80c1 	beq.w	800e2f4 <tcp_process+0x7b0>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e176:	4b68      	ldr	r3, [pc, #416]	; (800e318 <tcp_process+0x7d4>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	429a      	cmp	r2, r3
 800e17c:	f040 80ba 	bne.w	800e2f4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e184:	2b00      	cmp	r3, #0
 800e186:	f040 80b5 	bne.w	800e2f4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2206      	movs	r2, #6
 800e18e:	751a      	strb	r2, [r3, #20]
      break;
 800e190:	e0b0      	b.n	800e2f4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f000 f9ca 	bl	800e52c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e198:	4b60      	ldr	r3, [pc, #384]	; (800e31c <tcp_process+0x7d8>)
 800e19a:	781b      	ldrb	r3, [r3, #0]
 800e19c:	f003 0320 	and.w	r3, r3, #32
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	f000 80a9 	beq.w	800e2f8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	8b5b      	ldrh	r3, [r3, #26]
 800e1aa:	f043 0302 	orr.w	r3, r3, #2
 800e1ae:	b29a      	uxth	r2, r3
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f7fe fd39 	bl	800cc2c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e1ba:	4b59      	ldr	r3, [pc, #356]	; (800e320 <tcp_process+0x7dc>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	687a      	ldr	r2, [r7, #4]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d105      	bne.n	800e1d0 <tcp_process+0x68c>
 800e1c4:	4b56      	ldr	r3, [pc, #344]	; (800e320 <tcp_process+0x7dc>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	68db      	ldr	r3, [r3, #12]
 800e1ca:	4a55      	ldr	r2, [pc, #340]	; (800e320 <tcp_process+0x7dc>)
 800e1cc:	6013      	str	r3, [r2, #0]
 800e1ce:	e013      	b.n	800e1f8 <tcp_process+0x6b4>
 800e1d0:	4b53      	ldr	r3, [pc, #332]	; (800e320 <tcp_process+0x7dc>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	613b      	str	r3, [r7, #16]
 800e1d6:	e00c      	b.n	800e1f2 <tcp_process+0x6ae>
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	687a      	ldr	r2, [r7, #4]
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d104      	bne.n	800e1ec <tcp_process+0x6a8>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	68da      	ldr	r2, [r3, #12]
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	60da      	str	r2, [r3, #12]
 800e1ea:	e005      	b.n	800e1f8 <tcp_process+0x6b4>
 800e1ec:	693b      	ldr	r3, [r7, #16]
 800e1ee:	68db      	ldr	r3, [r3, #12]
 800e1f0:	613b      	str	r3, [r7, #16]
 800e1f2:	693b      	ldr	r3, [r7, #16]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d1ef      	bne.n	800e1d8 <tcp_process+0x694>
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	60da      	str	r2, [r3, #12]
 800e1fe:	4b43      	ldr	r3, [pc, #268]	; (800e30c <tcp_process+0x7c8>)
 800e200:	2201      	movs	r2, #1
 800e202:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	220a      	movs	r2, #10
 800e208:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e20a:	4b41      	ldr	r3, [pc, #260]	; (800e310 <tcp_process+0x7cc>)
 800e20c:	681a      	ldr	r2, [r3, #0]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	60da      	str	r2, [r3, #12]
 800e212:	4a3f      	ldr	r2, [pc, #252]	; (800e310 <tcp_process+0x7cc>)
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6013      	str	r3, [r2, #0]
 800e218:	f003 f8ea 	bl	80113f0 <tcp_timer_needed>
      }
      break;
 800e21c:	e06c      	b.n	800e2f8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f000 f984 	bl	800e52c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e224:	4b3b      	ldr	r3, [pc, #236]	; (800e314 <tcp_process+0x7d0>)
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	f003 0310 	and.w	r3, r3, #16
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d065      	beq.n	800e2fc <tcp_process+0x7b8>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e234:	4b38      	ldr	r3, [pc, #224]	; (800e318 <tcp_process+0x7d4>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	429a      	cmp	r2, r3
 800e23a:	d15f      	bne.n	800e2fc <tcp_process+0x7b8>
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e240:	2b00      	cmp	r3, #0
 800e242:	d15b      	bne.n	800e2fc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f7fe fcf1 	bl	800cc2c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e24a:	4b35      	ldr	r3, [pc, #212]	; (800e320 <tcp_process+0x7dc>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	687a      	ldr	r2, [r7, #4]
 800e250:	429a      	cmp	r2, r3
 800e252:	d105      	bne.n	800e260 <tcp_process+0x71c>
 800e254:	4b32      	ldr	r3, [pc, #200]	; (800e320 <tcp_process+0x7dc>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	68db      	ldr	r3, [r3, #12]
 800e25a:	4a31      	ldr	r2, [pc, #196]	; (800e320 <tcp_process+0x7dc>)
 800e25c:	6013      	str	r3, [r2, #0]
 800e25e:	e013      	b.n	800e288 <tcp_process+0x744>
 800e260:	4b2f      	ldr	r3, [pc, #188]	; (800e320 <tcp_process+0x7dc>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	60fb      	str	r3, [r7, #12]
 800e266:	e00c      	b.n	800e282 <tcp_process+0x73e>
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	68db      	ldr	r3, [r3, #12]
 800e26c:	687a      	ldr	r2, [r7, #4]
 800e26e:	429a      	cmp	r2, r3
 800e270:	d104      	bne.n	800e27c <tcp_process+0x738>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	68da      	ldr	r2, [r3, #12]
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	60da      	str	r2, [r3, #12]
 800e27a:	e005      	b.n	800e288 <tcp_process+0x744>
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	68db      	ldr	r3, [r3, #12]
 800e280:	60fb      	str	r3, [r7, #12]
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d1ef      	bne.n	800e268 <tcp_process+0x724>
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2200      	movs	r2, #0
 800e28c:	60da      	str	r2, [r3, #12]
 800e28e:	4b1f      	ldr	r3, [pc, #124]	; (800e30c <tcp_process+0x7c8>)
 800e290:	2201      	movs	r2, #1
 800e292:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	220a      	movs	r2, #10
 800e298:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e29a:	4b1d      	ldr	r3, [pc, #116]	; (800e310 <tcp_process+0x7cc>)
 800e29c:	681a      	ldr	r2, [r3, #0]
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	60da      	str	r2, [r3, #12]
 800e2a2:	4a1b      	ldr	r2, [pc, #108]	; (800e310 <tcp_process+0x7cc>)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6013      	str	r3, [r2, #0]
 800e2a8:	f003 f8a2 	bl	80113f0 <tcp_timer_needed>
      }
      break;
 800e2ac:	e026      	b.n	800e2fc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f000 f93c 	bl	800e52c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e2b4:	4b17      	ldr	r3, [pc, #92]	; (800e314 <tcp_process+0x7d0>)
 800e2b6:	781b      	ldrb	r3, [r3, #0]
 800e2b8:	f003 0310 	and.w	r3, r3, #16
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d01f      	beq.n	800e300 <tcp_process+0x7bc>
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e2c4:	4b14      	ldr	r3, [pc, #80]	; (800e318 <tcp_process+0x7d4>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d119      	bne.n	800e300 <tcp_process+0x7bc>
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d115      	bne.n	800e300 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e2d4:	4b11      	ldr	r3, [pc, #68]	; (800e31c <tcp_process+0x7d8>)
 800e2d6:	781b      	ldrb	r3, [r3, #0]
 800e2d8:	f043 0310 	orr.w	r3, r3, #16
 800e2dc:	b2da      	uxtb	r2, r3
 800e2de:	4b0f      	ldr	r3, [pc, #60]	; (800e31c <tcp_process+0x7d8>)
 800e2e0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e2e2:	e00d      	b.n	800e300 <tcp_process+0x7bc>
    default:
      break;
 800e2e4:	bf00      	nop
 800e2e6:	e00c      	b.n	800e302 <tcp_process+0x7be>
      break;
 800e2e8:	bf00      	nop
 800e2ea:	e00a      	b.n	800e302 <tcp_process+0x7be>
      break;
 800e2ec:	bf00      	nop
 800e2ee:	e008      	b.n	800e302 <tcp_process+0x7be>
      break;
 800e2f0:	bf00      	nop
 800e2f2:	e006      	b.n	800e302 <tcp_process+0x7be>
      break;
 800e2f4:	bf00      	nop
 800e2f6:	e004      	b.n	800e302 <tcp_process+0x7be>
      break;
 800e2f8:	bf00      	nop
 800e2fa:	e002      	b.n	800e302 <tcp_process+0x7be>
      break;
 800e2fc:	bf00      	nop
 800e2fe:	e000      	b.n	800e302 <tcp_process+0x7be>
      break;
 800e300:	bf00      	nop
  }
  return ERR_OK;
 800e302:	2300      	movs	r3, #0
}
 800e304:	4618      	mov	r0, r3
 800e306:	3724      	adds	r7, #36	; 0x24
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd90      	pop	{r4, r7, pc}
 800e30c:	240035ec 	.word	0x240035ec
 800e310:	240035e8 	.word	0x240035e8
 800e314:	2400361c 	.word	0x2400361c
 800e318:	24003614 	.word	0x24003614
 800e31c:	2400361d 	.word	0x2400361d
 800e320:	240035e4 	.word	0x240035e4

0800e324 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e324:	b590      	push	{r4, r7, lr}
 800e326:	b085      	sub	sp, #20
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d106      	bne.n	800e342 <tcp_oos_insert_segment+0x1e>
 800e334:	4b3b      	ldr	r3, [pc, #236]	; (800e424 <tcp_oos_insert_segment+0x100>)
 800e336:	f240 421f 	movw	r2, #1055	; 0x41f
 800e33a:	493b      	ldr	r1, [pc, #236]	; (800e428 <tcp_oos_insert_segment+0x104>)
 800e33c:	483b      	ldr	r0, [pc, #236]	; (800e42c <tcp_oos_insert_segment+0x108>)
 800e33e:	f005 fe91 	bl	8014064 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	68db      	ldr	r3, [r3, #12]
 800e346:	899b      	ldrh	r3, [r3, #12]
 800e348:	b29b      	uxth	r3, r3
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fb f930 	bl	80095b0 <lwip_htons>
 800e350:	4603      	mov	r3, r0
 800e352:	b2db      	uxtb	r3, r3
 800e354:	f003 0301 	and.w	r3, r3, #1
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d028      	beq.n	800e3ae <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e35c:	6838      	ldr	r0, [r7, #0]
 800e35e:	f7fe f977 	bl	800c650 <tcp_segs_free>
    next = NULL;
 800e362:	2300      	movs	r3, #0
 800e364:	603b      	str	r3, [r7, #0]
 800e366:	e056      	b.n	800e416 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	68db      	ldr	r3, [r3, #12]
 800e36c:	899b      	ldrh	r3, [r3, #12]
 800e36e:	b29b      	uxth	r3, r3
 800e370:	4618      	mov	r0, r3
 800e372:	f7fb f91d 	bl	80095b0 <lwip_htons>
 800e376:	4603      	mov	r3, r0
 800e378:	b2db      	uxtb	r3, r3
 800e37a:	f003 0301 	and.w	r3, r3, #1
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d00d      	beq.n	800e39e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	68db      	ldr	r3, [r3, #12]
 800e386:	899b      	ldrh	r3, [r3, #12]
 800e388:	b29c      	uxth	r4, r3
 800e38a:	2001      	movs	r0, #1
 800e38c:	f7fb f910 	bl	80095b0 <lwip_htons>
 800e390:	4603      	mov	r3, r0
 800e392:	461a      	mov	r2, r3
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	68db      	ldr	r3, [r3, #12]
 800e398:	4322      	orrs	r2, r4
 800e39a:	b292      	uxth	r2, r2
 800e39c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e3a8:	68f8      	ldr	r0, [r7, #12]
 800e3aa:	f7fe f966 	bl	800c67a <tcp_seg_free>
    while (next &&
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d00e      	beq.n	800e3d2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	891b      	ldrh	r3, [r3, #8]
 800e3b8:	461a      	mov	r2, r3
 800e3ba:	4b1d      	ldr	r3, [pc, #116]	; (800e430 <tcp_oos_insert_segment+0x10c>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	441a      	add	r2, r3
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	68db      	ldr	r3, [r3, #12]
 800e3c4:	685b      	ldr	r3, [r3, #4]
 800e3c6:	6839      	ldr	r1, [r7, #0]
 800e3c8:	8909      	ldrh	r1, [r1, #8]
 800e3ca:	440b      	add	r3, r1
 800e3cc:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	daca      	bge.n	800e368 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d01e      	beq.n	800e416 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	891b      	ldrh	r3, [r3, #8]
 800e3dc:	461a      	mov	r2, r3
 800e3de:	4b14      	ldr	r3, [pc, #80]	; (800e430 <tcp_oos_insert_segment+0x10c>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	441a      	add	r2, r3
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	68db      	ldr	r3, [r3, #12]
 800e3e8:	685b      	ldr	r3, [r3, #4]
 800e3ea:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	dd12      	ble.n	800e416 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	68db      	ldr	r3, [r3, #12]
 800e3f4:	685b      	ldr	r3, [r3, #4]
 800e3f6:	b29a      	uxth	r2, r3
 800e3f8:	4b0d      	ldr	r3, [pc, #52]	; (800e430 <tcp_oos_insert_segment+0x10c>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	b29b      	uxth	r3, r3
 800e3fe:	1ad3      	subs	r3, r2, r3
 800e400:	b29a      	uxth	r2, r3
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	685a      	ldr	r2, [r3, #4]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	891b      	ldrh	r3, [r3, #8]
 800e40e:	4619      	mov	r1, r3
 800e410:	4610      	mov	r0, r2
 800e412:	f7fc fb81 	bl	800ab18 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	683a      	ldr	r2, [r7, #0]
 800e41a:	601a      	str	r2, [r3, #0]
}
 800e41c:	bf00      	nop
 800e41e:	3714      	adds	r7, #20
 800e420:	46bd      	mov	sp, r7
 800e422:	bd90      	pop	{r4, r7, pc}
 800e424:	080165b4 	.word	0x080165b4
 800e428:	08016874 	.word	0x08016874
 800e42c:	08016600 	.word	0x08016600
 800e430:	24003610 	.word	0x24003610

0800e434 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e434:	b5b0      	push	{r4, r5, r7, lr}
 800e436:	b086      	sub	sp, #24
 800e438:	af00      	add	r7, sp, #0
 800e43a:	60f8      	str	r0, [r7, #12]
 800e43c:	60b9      	str	r1, [r7, #8]
 800e43e:	607a      	str	r2, [r7, #4]
 800e440:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e442:	e03e      	b.n	800e4c2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e44e:	697b      	ldr	r3, [r7, #20]
 800e450:	685b      	ldr	r3, [r3, #4]
 800e452:	4618      	mov	r0, r3
 800e454:	f7fc fd6c 	bl	800af30 <pbuf_clen>
 800e458:	4603      	mov	r3, r0
 800e45a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e462:	8a7a      	ldrh	r2, [r7, #18]
 800e464:	429a      	cmp	r2, r3
 800e466:	d906      	bls.n	800e476 <tcp_free_acked_segments+0x42>
 800e468:	4b2a      	ldr	r3, [pc, #168]	; (800e514 <tcp_free_acked_segments+0xe0>)
 800e46a:	f240 4257 	movw	r2, #1111	; 0x457
 800e46e:	492a      	ldr	r1, [pc, #168]	; (800e518 <tcp_free_acked_segments+0xe4>)
 800e470:	482a      	ldr	r0, [pc, #168]	; (800e51c <tcp_free_acked_segments+0xe8>)
 800e472:	f005 fdf7 	bl	8014064 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e47c:	8a7b      	ldrh	r3, [r7, #18]
 800e47e:	1ad3      	subs	r3, r2, r3
 800e480:	b29a      	uxth	r2, r3
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	891a      	ldrh	r2, [r3, #8]
 800e48c:	4b24      	ldr	r3, [pc, #144]	; (800e520 <tcp_free_acked_segments+0xec>)
 800e48e:	881b      	ldrh	r3, [r3, #0]
 800e490:	4413      	add	r3, r2
 800e492:	b29a      	uxth	r2, r3
 800e494:	4b22      	ldr	r3, [pc, #136]	; (800e520 <tcp_free_acked_segments+0xec>)
 800e496:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e498:	6978      	ldr	r0, [r7, #20]
 800e49a:	f7fe f8ee 	bl	800c67a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d00c      	beq.n	800e4c2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d109      	bne.n	800e4c2 <tcp_free_acked_segments+0x8e>
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d106      	bne.n	800e4c2 <tcp_free_acked_segments+0x8e>
 800e4b4:	4b17      	ldr	r3, [pc, #92]	; (800e514 <tcp_free_acked_segments+0xe0>)
 800e4b6:	f240 4261 	movw	r2, #1121	; 0x461
 800e4ba:	491a      	ldr	r1, [pc, #104]	; (800e524 <tcp_free_acked_segments+0xf0>)
 800e4bc:	4817      	ldr	r0, [pc, #92]	; (800e51c <tcp_free_acked_segments+0xe8>)
 800e4be:	f005 fdd1 	bl	8014064 <iprintf>
  while (seg_list != NULL &&
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d020      	beq.n	800e50a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	68db      	ldr	r3, [r3, #12]
 800e4cc:	685b      	ldr	r3, [r3, #4]
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f7fb f883 	bl	80095da <lwip_htonl>
 800e4d4:	4604      	mov	r4, r0
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	891b      	ldrh	r3, [r3, #8]
 800e4da:	461d      	mov	r5, r3
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	68db      	ldr	r3, [r3, #12]
 800e4e0:	899b      	ldrh	r3, [r3, #12]
 800e4e2:	b29b      	uxth	r3, r3
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f7fb f863 	bl	80095b0 <lwip_htons>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	b2db      	uxtb	r3, r3
 800e4ee:	f003 0303 	and.w	r3, r3, #3
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d001      	beq.n	800e4fa <tcp_free_acked_segments+0xc6>
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	e000      	b.n	800e4fc <tcp_free_acked_segments+0xc8>
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	442b      	add	r3, r5
 800e4fe:	18e2      	adds	r2, r4, r3
 800e500:	4b09      	ldr	r3, [pc, #36]	; (800e528 <tcp_free_acked_segments+0xf4>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e506:	2b00      	cmp	r3, #0
 800e508:	dd9c      	ble.n	800e444 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e50a:	68bb      	ldr	r3, [r7, #8]
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3718      	adds	r7, #24
 800e510:	46bd      	mov	sp, r7
 800e512:	bdb0      	pop	{r4, r5, r7, pc}
 800e514:	080165b4 	.word	0x080165b4
 800e518:	0801689c 	.word	0x0801689c
 800e51c:	08016600 	.word	0x08016600
 800e520:	24003618 	.word	0x24003618
 800e524:	080168c4 	.word	0x080168c4
 800e528:	24003614 	.word	0x24003614

0800e52c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e52c:	b5b0      	push	{r4, r5, r7, lr}
 800e52e:	b094      	sub	sp, #80	; 0x50
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e534:	2300      	movs	r3, #0
 800e536:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d106      	bne.n	800e54c <tcp_receive+0x20>
 800e53e:	4b91      	ldr	r3, [pc, #580]	; (800e784 <tcp_receive+0x258>)
 800e540:	f240 427b 	movw	r2, #1147	; 0x47b
 800e544:	4990      	ldr	r1, [pc, #576]	; (800e788 <tcp_receive+0x25c>)
 800e546:	4891      	ldr	r0, [pc, #580]	; (800e78c <tcp_receive+0x260>)
 800e548:	f005 fd8c 	bl	8014064 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	7d1b      	ldrb	r3, [r3, #20]
 800e550:	2b03      	cmp	r3, #3
 800e552:	d806      	bhi.n	800e562 <tcp_receive+0x36>
 800e554:	4b8b      	ldr	r3, [pc, #556]	; (800e784 <tcp_receive+0x258>)
 800e556:	f240 427c 	movw	r2, #1148	; 0x47c
 800e55a:	498d      	ldr	r1, [pc, #564]	; (800e790 <tcp_receive+0x264>)
 800e55c:	488b      	ldr	r0, [pc, #556]	; (800e78c <tcp_receive+0x260>)
 800e55e:	f005 fd81 	bl	8014064 <iprintf>

  if (flags & TCP_ACK) {
 800e562:	4b8c      	ldr	r3, [pc, #560]	; (800e794 <tcp_receive+0x268>)
 800e564:	781b      	ldrb	r3, [r3, #0]
 800e566:	f003 0310 	and.w	r3, r3, #16
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	f000 8264 	beq.w	800ea38 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e576:	461a      	mov	r2, r3
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e57c:	4413      	add	r3, r2
 800e57e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e584:	4b84      	ldr	r3, [pc, #528]	; (800e798 <tcp_receive+0x26c>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	1ad3      	subs	r3, r2, r3
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	db1b      	blt.n	800e5c6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e592:	4b81      	ldr	r3, [pc, #516]	; (800e798 <tcp_receive+0x26c>)
 800e594:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e596:	429a      	cmp	r2, r3
 800e598:	d106      	bne.n	800e5a8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e59e:	4b7f      	ldr	r3, [pc, #508]	; (800e79c <tcp_receive+0x270>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	1ad3      	subs	r3, r2, r3
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	db0e      	blt.n	800e5c6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e5ac:	4b7b      	ldr	r3, [pc, #492]	; (800e79c <tcp_receive+0x270>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d125      	bne.n	800e600 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e5b4:	4b7a      	ldr	r3, [pc, #488]	; (800e7a0 <tcp_receive+0x274>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	89db      	ldrh	r3, [r3, #14]
 800e5ba:	b29a      	uxth	r2, r3
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d91c      	bls.n	800e600 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e5c6:	4b76      	ldr	r3, [pc, #472]	; (800e7a0 <tcp_receive+0x274>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	89db      	ldrh	r3, [r3, #14]
 800e5cc:	b29a      	uxth	r2, r3
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d205      	bcs.n	800e5f0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800e5f0:	4b69      	ldr	r3, [pc, #420]	; (800e798 <tcp_receive+0x26c>)
 800e5f2:	681a      	ldr	r2, [r3, #0]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800e5f8:	4b68      	ldr	r3, [pc, #416]	; (800e79c <tcp_receive+0x270>)
 800e5fa:	681a      	ldr	r2, [r3, #0]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e600:	4b66      	ldr	r3, [pc, #408]	; (800e79c <tcp_receive+0x270>)
 800e602:	681a      	ldr	r2, [r3, #0]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e608:	1ad3      	subs	r3, r2, r3
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	dc58      	bgt.n	800e6c0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e60e:	4b65      	ldr	r3, [pc, #404]	; (800e7a4 <tcp_receive+0x278>)
 800e610:	881b      	ldrh	r3, [r3, #0]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d14b      	bne.n	800e6ae <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e61a:	687a      	ldr	r2, [r7, #4]
 800e61c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e620:	4413      	add	r3, r2
 800e622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e624:	429a      	cmp	r2, r3
 800e626:	d142      	bne.n	800e6ae <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e62e:	2b00      	cmp	r3, #0
 800e630:	db3d      	blt.n	800e6ae <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e636:	4b59      	ldr	r3, [pc, #356]	; (800e79c <tcp_receive+0x270>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	429a      	cmp	r2, r3
 800e63c:	d137      	bne.n	800e6ae <tcp_receive+0x182>
              found_dupack = 1;
 800e63e:	2301      	movs	r3, #1
 800e640:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e648:	2bff      	cmp	r3, #255	; 0xff
 800e64a:	d007      	beq.n	800e65c <tcp_receive+0x130>
                ++pcb->dupacks;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e652:	3301      	adds	r3, #1
 800e654:	b2da      	uxtb	r2, r3
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e662:	2b03      	cmp	r3, #3
 800e664:	d91b      	bls.n	800e69e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e670:	4413      	add	r3, r2
 800e672:	b29a      	uxth	r2, r3
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d30a      	bcc.n	800e694 <tcp_receive+0x168>
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e688:	4413      	add	r3, r2
 800e68a:	b29a      	uxth	r2, r3
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e692:	e004      	b.n	800e69e <tcp_receive+0x172>
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e69a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e6a4:	2b02      	cmp	r3, #2
 800e6a6:	d902      	bls.n	800e6ae <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f002 fb43 	bl	8010d34 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e6ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	f040 8161 	bne.w	800e978 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e6be:	e15b      	b.n	800e978 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e6c0:	4b36      	ldr	r3, [pc, #216]	; (800e79c <tcp_receive+0x270>)
 800e6c2:	681a      	ldr	r2, [r3, #0]
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6c8:	1ad3      	subs	r3, r2, r3
 800e6ca:	3b01      	subs	r3, #1
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	f2c0 814e 	blt.w	800e96e <tcp_receive+0x442>
 800e6d2:	4b32      	ldr	r3, [pc, #200]	; (800e79c <tcp_receive+0x270>)
 800e6d4:	681a      	ldr	r2, [r3, #0]
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6da:	1ad3      	subs	r3, r2, r3
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	f300 8146 	bgt.w	800e96e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	8b5b      	ldrh	r3, [r3, #26]
 800e6e6:	f003 0304 	and.w	r3, r3, #4
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d010      	beq.n	800e710 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	8b5b      	ldrh	r3, [r3, #26]
 800e6f2:	f023 0304 	bic.w	r3, r3, #4
 800e6f6:	b29a      	uxth	r2, r3
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2200      	movs	r2, #0
 800e70c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2200      	movs	r2, #0
 800e714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e71e:	10db      	asrs	r3, r3, #3
 800e720:	b21b      	sxth	r3, r3
 800e722:	b29a      	uxth	r2, r3
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	4413      	add	r3, r2
 800e72e:	b29b      	uxth	r3, r3
 800e730:	b21a      	sxth	r2, r3
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e738:	4b18      	ldr	r3, [pc, #96]	; (800e79c <tcp_receive+0x270>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	b29a      	uxth	r2, r3
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e742:	b29b      	uxth	r3, r3
 800e744:	1ad3      	subs	r3, r2, r3
 800e746:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2200      	movs	r2, #0
 800e74c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e750:	4b12      	ldr	r3, [pc, #72]	; (800e79c <tcp_receive+0x270>)
 800e752:	681a      	ldr	r2, [r3, #0]
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	7d1b      	ldrb	r3, [r3, #20]
 800e75c:	2b03      	cmp	r3, #3
 800e75e:	f240 8097 	bls.w	800e890 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e76e:	429a      	cmp	r2, r3
 800e770:	d245      	bcs.n	800e7fe <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	8b5b      	ldrh	r3, [r3, #26]
 800e776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d014      	beq.n	800e7a8 <tcp_receive+0x27c>
 800e77e:	2301      	movs	r3, #1
 800e780:	e013      	b.n	800e7aa <tcp_receive+0x27e>
 800e782:	bf00      	nop
 800e784:	080165b4 	.word	0x080165b4
 800e788:	080168e4 	.word	0x080168e4
 800e78c:	08016600 	.word	0x08016600
 800e790:	08016900 	.word	0x08016900
 800e794:	2400361c 	.word	0x2400361c
 800e798:	24003610 	.word	0x24003610
 800e79c:	24003614 	.word	0x24003614
 800e7a0:	24003600 	.word	0x24003600
 800e7a4:	2400361a 	.word	0x2400361a
 800e7a8:	2302      	movs	r3, #2
 800e7aa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e7ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e7b2:	b29a      	uxth	r2, r3
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e7b8:	fb12 f303 	smulbb	r3, r2, r3
 800e7bc:	b29b      	uxth	r3, r3
 800e7be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e7c0:	4293      	cmp	r3, r2
 800e7c2:	bf28      	it	cs
 800e7c4:	4613      	movcs	r3, r2
 800e7c6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e7ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e7d0:	4413      	add	r3, r2
 800e7d2:	b29a      	uxth	r2, r3
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d309      	bcc.n	800e7f2 <tcp_receive+0x2c6>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e7e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e7e6:	4413      	add	r3, r2
 800e7e8:	b29a      	uxth	r2, r3
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e7f0:	e04e      	b.n	800e890 <tcp_receive+0x364>
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e7fc:	e048      	b.n	800e890 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e804:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e806:	4413      	add	r3, r2
 800e808:	b29a      	uxth	r2, r3
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e810:	429a      	cmp	r2, r3
 800e812:	d309      	bcc.n	800e828 <tcp_receive+0x2fc>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e81a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e81c:	4413      	add	r3, r2
 800e81e:	b29a      	uxth	r2, r3
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e826:	e004      	b.n	800e832 <tcp_receive+0x306>
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e82e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e83e:	429a      	cmp	r2, r3
 800e840:	d326      	bcc.n	800e890 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e84e:	1ad3      	subs	r3, r2, r3
 800e850:	b29a      	uxth	r2, r3
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e862:	4413      	add	r3, r2
 800e864:	b29a      	uxth	r2, r3
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d30a      	bcc.n	800e886 <tcp_receive+0x35a>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e87a:	4413      	add	r3, r2
 800e87c:	b29a      	uxth	r2, r3
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e884:	e004      	b.n	800e890 <tcp_receive+0x364>
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e88c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e898:	4a98      	ldr	r2, [pc, #608]	; (800eafc <tcp_receive+0x5d0>)
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f7ff fdca 	bl	800e434 <tcp_free_acked_segments>
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8ae:	4a94      	ldr	r2, [pc, #592]	; (800eb00 <tcp_receive+0x5d4>)
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f7ff fdbf 	bl	800e434 <tcp_free_acked_segments>
 800e8b6:	4602      	mov	r2, r0
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d104      	bne.n	800e8ce <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e8ca:	861a      	strh	r2, [r3, #48]	; 0x30
 800e8cc:	e002      	b.n	800e8d4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d103      	bne.n	800e8ea <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e8f0:	4b84      	ldr	r3, [pc, #528]	; (800eb04 <tcp_receive+0x5d8>)
 800e8f2:	881b      	ldrh	r3, [r3, #0]
 800e8f4:	4413      	add	r3, r2
 800e8f6:	b29a      	uxth	r2, r3
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	8b5b      	ldrh	r3, [r3, #26]
 800e902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e906:	2b00      	cmp	r3, #0
 800e908:	d035      	beq.n	800e976 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d118      	bne.n	800e944 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e916:	2b00      	cmp	r3, #0
 800e918:	d00c      	beq.n	800e934 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e922:	68db      	ldr	r3, [r3, #12]
 800e924:	685b      	ldr	r3, [r3, #4]
 800e926:	4618      	mov	r0, r3
 800e928:	f7fa fe57 	bl	80095da <lwip_htonl>
 800e92c:	4603      	mov	r3, r0
 800e92e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e930:	2b00      	cmp	r3, #0
 800e932:	dc20      	bgt.n	800e976 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	8b5b      	ldrh	r3, [r3, #26]
 800e938:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e93c:	b29a      	uxth	r2, r3
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e942:	e018      	b.n	800e976 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e94c:	68db      	ldr	r3, [r3, #12]
 800e94e:	685b      	ldr	r3, [r3, #4]
 800e950:	4618      	mov	r0, r3
 800e952:	f7fa fe42 	bl	80095da <lwip_htonl>
 800e956:	4603      	mov	r3, r0
 800e958:	1ae3      	subs	r3, r4, r3
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	dc0b      	bgt.n	800e976 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	8b5b      	ldrh	r3, [r3, #26]
 800e962:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e966:	b29a      	uxth	r2, r3
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e96c:	e003      	b.n	800e976 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f002 fbce 	bl	8011110 <tcp_send_empty_ack>
 800e974:	e000      	b.n	800e978 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e976:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d05b      	beq.n	800ea38 <tcp_receive+0x50c>
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e984:	4b60      	ldr	r3, [pc, #384]	; (800eb08 <tcp_receive+0x5dc>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	1ad3      	subs	r3, r2, r3
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	da54      	bge.n	800ea38 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e98e:	4b5f      	ldr	r3, [pc, #380]	; (800eb0c <tcp_receive+0x5e0>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	b29a      	uxth	r2, r3
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e998:	b29b      	uxth	r3, r3
 800e99a:	1ad3      	subs	r3, r2, r3
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e9a2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e9ac:	10db      	asrs	r3, r3, #3
 800e9ae:	b21b      	sxth	r3, r3
 800e9b0:	b29b      	uxth	r3, r3
 800e9b2:	1ad3      	subs	r3, r2, r3
 800e9b4:	b29b      	uxth	r3, r3
 800e9b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e9c0:	b29a      	uxth	r2, r3
 800e9c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e9c6:	4413      	add	r3, r2
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	b21a      	sxth	r2, r3
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800e9d0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	da05      	bge.n	800e9e4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800e9d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e9dc:	425b      	negs	r3, r3
 800e9de:	b29b      	uxth	r3, r3
 800e9e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e9e4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e9ee:	109b      	asrs	r3, r3, #2
 800e9f0:	b21b      	sxth	r3, r3
 800e9f2:	b29b      	uxth	r3, r3
 800e9f4:	1ad3      	subs	r3, r2, r3
 800e9f6:	b29b      	uxth	r3, r3
 800e9f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ea02:	b29a      	uxth	r2, r3
 800ea04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ea08:	4413      	add	r3, r2
 800ea0a:	b29b      	uxth	r3, r3
 800ea0c:	b21a      	sxth	r2, r3
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ea18:	10db      	asrs	r3, r3, #3
 800ea1a:	b21b      	sxth	r3, r3
 800ea1c:	b29a      	uxth	r2, r3
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ea24:	b29b      	uxth	r3, r3
 800ea26:	4413      	add	r3, r2
 800ea28:	b29b      	uxth	r3, r3
 800ea2a:	b21a      	sxth	r2, r3
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2200      	movs	r2, #0
 800ea36:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ea38:	4b35      	ldr	r3, [pc, #212]	; (800eb10 <tcp_receive+0x5e4>)
 800ea3a:	881b      	ldrh	r3, [r3, #0]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	f000 84e2 	beq.w	800f406 <tcp_receive+0xeda>
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	7d1b      	ldrb	r3, [r3, #20]
 800ea46:	2b06      	cmp	r3, #6
 800ea48:	f200 84dd 	bhi.w	800f406 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea50:	4b30      	ldr	r3, [pc, #192]	; (800eb14 <tcp_receive+0x5e8>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	1ad3      	subs	r3, r2, r3
 800ea56:	3b01      	subs	r3, #1
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	f2c0 808f 	blt.w	800eb7c <tcp_receive+0x650>
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea62:	4b2b      	ldr	r3, [pc, #172]	; (800eb10 <tcp_receive+0x5e4>)
 800ea64:	881b      	ldrh	r3, [r3, #0]
 800ea66:	4619      	mov	r1, r3
 800ea68:	4b2a      	ldr	r3, [pc, #168]	; (800eb14 <tcp_receive+0x5e8>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	440b      	add	r3, r1
 800ea6e:	1ad3      	subs	r3, r2, r3
 800ea70:	3301      	adds	r3, #1
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	f300 8082 	bgt.w	800eb7c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ea78:	4b27      	ldr	r3, [pc, #156]	; (800eb18 <tcp_receive+0x5ec>)
 800ea7a:	685b      	ldr	r3, [r3, #4]
 800ea7c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea82:	4b24      	ldr	r3, [pc, #144]	; (800eb14 <tcp_receive+0x5e8>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	1ad3      	subs	r3, r2, r3
 800ea88:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ea8a:	4b23      	ldr	r3, [pc, #140]	; (800eb18 <tcp_receive+0x5ec>)
 800ea8c:	685b      	ldr	r3, [r3, #4]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d106      	bne.n	800eaa0 <tcp_receive+0x574>
 800ea92:	4b22      	ldr	r3, [pc, #136]	; (800eb1c <tcp_receive+0x5f0>)
 800ea94:	f240 5294 	movw	r2, #1428	; 0x594
 800ea98:	4921      	ldr	r1, [pc, #132]	; (800eb20 <tcp_receive+0x5f4>)
 800ea9a:	4822      	ldr	r0, [pc, #136]	; (800eb24 <tcp_receive+0x5f8>)
 800ea9c:	f005 fae2 	bl	8014064 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800eaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	d906      	bls.n	800eab8 <tcp_receive+0x58c>
 800eaaa:	4b1c      	ldr	r3, [pc, #112]	; (800eb1c <tcp_receive+0x5f0>)
 800eaac:	f240 5295 	movw	r2, #1429	; 0x595
 800eab0:	491d      	ldr	r1, [pc, #116]	; (800eb28 <tcp_receive+0x5fc>)
 800eab2:	481c      	ldr	r0, [pc, #112]	; (800eb24 <tcp_receive+0x5f8>)
 800eab4:	f005 fad6 	bl	8014064 <iprintf>
      off = (u16_t)off32;
 800eab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800eabe:	4b16      	ldr	r3, [pc, #88]	; (800eb18 <tcp_receive+0x5ec>)
 800eac0:	685b      	ldr	r3, [r3, #4]
 800eac2:	891b      	ldrh	r3, [r3, #8]
 800eac4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eac8:	429a      	cmp	r2, r3
 800eaca:	d906      	bls.n	800eada <tcp_receive+0x5ae>
 800eacc:	4b13      	ldr	r3, [pc, #76]	; (800eb1c <tcp_receive+0x5f0>)
 800eace:	f240 5297 	movw	r2, #1431	; 0x597
 800ead2:	4916      	ldr	r1, [pc, #88]	; (800eb2c <tcp_receive+0x600>)
 800ead4:	4813      	ldr	r0, [pc, #76]	; (800eb24 <tcp_receive+0x5f8>)
 800ead6:	f005 fac5 	bl	8014064 <iprintf>
      inseg.len -= off;
 800eada:	4b0f      	ldr	r3, [pc, #60]	; (800eb18 <tcp_receive+0x5ec>)
 800eadc:	891a      	ldrh	r2, [r3, #8]
 800eade:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eae2:	1ad3      	subs	r3, r2, r3
 800eae4:	b29a      	uxth	r2, r3
 800eae6:	4b0c      	ldr	r3, [pc, #48]	; (800eb18 <tcp_receive+0x5ec>)
 800eae8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800eaea:	4b0b      	ldr	r3, [pc, #44]	; (800eb18 <tcp_receive+0x5ec>)
 800eaec:	685b      	ldr	r3, [r3, #4]
 800eaee:	891a      	ldrh	r2, [r3, #8]
 800eaf0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eaf4:	1ad3      	subs	r3, r2, r3
 800eaf6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800eaf8:	e02a      	b.n	800eb50 <tcp_receive+0x624>
 800eafa:	bf00      	nop
 800eafc:	0801691c 	.word	0x0801691c
 800eb00:	08016924 	.word	0x08016924
 800eb04:	24003618 	.word	0x24003618
 800eb08:	24003614 	.word	0x24003614
 800eb0c:	240035d8 	.word	0x240035d8
 800eb10:	2400361a 	.word	0x2400361a
 800eb14:	24003610 	.word	0x24003610
 800eb18:	240035f0 	.word	0x240035f0
 800eb1c:	080165b4 	.word	0x080165b4
 800eb20:	0801692c 	.word	0x0801692c
 800eb24:	08016600 	.word	0x08016600
 800eb28:	0801693c 	.word	0x0801693c
 800eb2c:	0801694c 	.word	0x0801694c
        off -= p->len;
 800eb30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb32:	895b      	ldrh	r3, [r3, #10]
 800eb34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eb38:	1ad3      	subs	r3, r2, r3
 800eb3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800eb3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb40:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800eb42:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800eb44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb46:	2200      	movs	r2, #0
 800eb48:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800eb4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800eb50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb52:	895b      	ldrh	r3, [r3, #10]
 800eb54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d8e9      	bhi.n	800eb30 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800eb5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eb60:	4619      	mov	r1, r3
 800eb62:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800eb64:	f7fc f8d6 	bl	800ad14 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb6c:	4a91      	ldr	r2, [pc, #580]	; (800edb4 <tcp_receive+0x888>)
 800eb6e:	6013      	str	r3, [r2, #0]
 800eb70:	4b91      	ldr	r3, [pc, #580]	; (800edb8 <tcp_receive+0x88c>)
 800eb72:	68db      	ldr	r3, [r3, #12]
 800eb74:	4a8f      	ldr	r2, [pc, #572]	; (800edb4 <tcp_receive+0x888>)
 800eb76:	6812      	ldr	r2, [r2, #0]
 800eb78:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800eb7a:	e00d      	b.n	800eb98 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800eb7c:	4b8d      	ldr	r3, [pc, #564]	; (800edb4 <tcp_receive+0x888>)
 800eb7e:	681a      	ldr	r2, [r3, #0]
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb84:	1ad3      	subs	r3, r2, r3
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	da06      	bge.n	800eb98 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	8b5b      	ldrh	r3, [r3, #26]
 800eb8e:	f043 0302 	orr.w	r3, r3, #2
 800eb92:	b29a      	uxth	r2, r3
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800eb98:	4b86      	ldr	r3, [pc, #536]	; (800edb4 <tcp_receive+0x888>)
 800eb9a:	681a      	ldr	r2, [r3, #0]
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eba0:	1ad3      	subs	r3, r2, r3
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	f2c0 842a 	blt.w	800f3fc <tcp_receive+0xed0>
 800eba8:	4b82      	ldr	r3, [pc, #520]	; (800edb4 <tcp_receive+0x888>)
 800ebaa:	681a      	ldr	r2, [r3, #0]
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebb0:	6879      	ldr	r1, [r7, #4]
 800ebb2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ebb4:	440b      	add	r3, r1
 800ebb6:	1ad3      	subs	r3, r2, r3
 800ebb8:	3301      	adds	r3, #1
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	f300 841e 	bgt.w	800f3fc <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ebc4:	4b7b      	ldr	r3, [pc, #492]	; (800edb4 <tcp_receive+0x888>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	f040 829a 	bne.w	800f102 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ebce:	4b7a      	ldr	r3, [pc, #488]	; (800edb8 <tcp_receive+0x88c>)
 800ebd0:	891c      	ldrh	r4, [r3, #8]
 800ebd2:	4b79      	ldr	r3, [pc, #484]	; (800edb8 <tcp_receive+0x88c>)
 800ebd4:	68db      	ldr	r3, [r3, #12]
 800ebd6:	899b      	ldrh	r3, [r3, #12]
 800ebd8:	b29b      	uxth	r3, r3
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7fa fce8 	bl	80095b0 <lwip_htons>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	b2db      	uxtb	r3, r3
 800ebe4:	f003 0303 	and.w	r3, r3, #3
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d001      	beq.n	800ebf0 <tcp_receive+0x6c4>
 800ebec:	2301      	movs	r3, #1
 800ebee:	e000      	b.n	800ebf2 <tcp_receive+0x6c6>
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	4423      	add	r3, r4
 800ebf4:	b29a      	uxth	r2, r3
 800ebf6:	4b71      	ldr	r3, [pc, #452]	; (800edbc <tcp_receive+0x890>)
 800ebf8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ebfe:	4b6f      	ldr	r3, [pc, #444]	; (800edbc <tcp_receive+0x890>)
 800ec00:	881b      	ldrh	r3, [r3, #0]
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d275      	bcs.n	800ecf2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ec06:	4b6c      	ldr	r3, [pc, #432]	; (800edb8 <tcp_receive+0x88c>)
 800ec08:	68db      	ldr	r3, [r3, #12]
 800ec0a:	899b      	ldrh	r3, [r3, #12]
 800ec0c:	b29b      	uxth	r3, r3
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7fa fcce 	bl	80095b0 <lwip_htons>
 800ec14:	4603      	mov	r3, r0
 800ec16:	b2db      	uxtb	r3, r3
 800ec18:	f003 0301 	and.w	r3, r3, #1
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d01f      	beq.n	800ec60 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ec20:	4b65      	ldr	r3, [pc, #404]	; (800edb8 <tcp_receive+0x88c>)
 800ec22:	68db      	ldr	r3, [r3, #12]
 800ec24:	899b      	ldrh	r3, [r3, #12]
 800ec26:	b29b      	uxth	r3, r3
 800ec28:	b21b      	sxth	r3, r3
 800ec2a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ec2e:	b21c      	sxth	r4, r3
 800ec30:	4b61      	ldr	r3, [pc, #388]	; (800edb8 <tcp_receive+0x88c>)
 800ec32:	68db      	ldr	r3, [r3, #12]
 800ec34:	899b      	ldrh	r3, [r3, #12]
 800ec36:	b29b      	uxth	r3, r3
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f7fa fcb9 	bl	80095b0 <lwip_htons>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	b2db      	uxtb	r3, r3
 800ec42:	b29b      	uxth	r3, r3
 800ec44:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ec48:	b29b      	uxth	r3, r3
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f7fa fcb0 	bl	80095b0 <lwip_htons>
 800ec50:	4603      	mov	r3, r0
 800ec52:	b21b      	sxth	r3, r3
 800ec54:	4323      	orrs	r3, r4
 800ec56:	b21a      	sxth	r2, r3
 800ec58:	4b57      	ldr	r3, [pc, #348]	; (800edb8 <tcp_receive+0x88c>)
 800ec5a:	68db      	ldr	r3, [r3, #12]
 800ec5c:	b292      	uxth	r2, r2
 800ec5e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ec64:	4b54      	ldr	r3, [pc, #336]	; (800edb8 <tcp_receive+0x88c>)
 800ec66:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ec68:	4b53      	ldr	r3, [pc, #332]	; (800edb8 <tcp_receive+0x88c>)
 800ec6a:	68db      	ldr	r3, [r3, #12]
 800ec6c:	899b      	ldrh	r3, [r3, #12]
 800ec6e:	b29b      	uxth	r3, r3
 800ec70:	4618      	mov	r0, r3
 800ec72:	f7fa fc9d 	bl	80095b0 <lwip_htons>
 800ec76:	4603      	mov	r3, r0
 800ec78:	b2db      	uxtb	r3, r3
 800ec7a:	f003 0302 	and.w	r3, r3, #2
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d005      	beq.n	800ec8e <tcp_receive+0x762>
            inseg.len -= 1;
 800ec82:	4b4d      	ldr	r3, [pc, #308]	; (800edb8 <tcp_receive+0x88c>)
 800ec84:	891b      	ldrh	r3, [r3, #8]
 800ec86:	3b01      	subs	r3, #1
 800ec88:	b29a      	uxth	r2, r3
 800ec8a:	4b4b      	ldr	r3, [pc, #300]	; (800edb8 <tcp_receive+0x88c>)
 800ec8c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ec8e:	4b4a      	ldr	r3, [pc, #296]	; (800edb8 <tcp_receive+0x88c>)
 800ec90:	685b      	ldr	r3, [r3, #4]
 800ec92:	4a49      	ldr	r2, [pc, #292]	; (800edb8 <tcp_receive+0x88c>)
 800ec94:	8912      	ldrh	r2, [r2, #8]
 800ec96:	4611      	mov	r1, r2
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f7fb ff3d 	bl	800ab18 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ec9e:	4b46      	ldr	r3, [pc, #280]	; (800edb8 <tcp_receive+0x88c>)
 800eca0:	891c      	ldrh	r4, [r3, #8]
 800eca2:	4b45      	ldr	r3, [pc, #276]	; (800edb8 <tcp_receive+0x88c>)
 800eca4:	68db      	ldr	r3, [r3, #12]
 800eca6:	899b      	ldrh	r3, [r3, #12]
 800eca8:	b29b      	uxth	r3, r3
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7fa fc80 	bl	80095b0 <lwip_htons>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	b2db      	uxtb	r3, r3
 800ecb4:	f003 0303 	and.w	r3, r3, #3
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d001      	beq.n	800ecc0 <tcp_receive+0x794>
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	e000      	b.n	800ecc2 <tcp_receive+0x796>
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	4423      	add	r3, r4
 800ecc4:	b29a      	uxth	r2, r3
 800ecc6:	4b3d      	ldr	r3, [pc, #244]	; (800edbc <tcp_receive+0x890>)
 800ecc8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ecca:	4b3c      	ldr	r3, [pc, #240]	; (800edbc <tcp_receive+0x890>)
 800eccc:	881b      	ldrh	r3, [r3, #0]
 800ecce:	461a      	mov	r2, r3
 800ecd0:	4b38      	ldr	r3, [pc, #224]	; (800edb4 <tcp_receive+0x888>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	441a      	add	r2, r3
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecda:	6879      	ldr	r1, [r7, #4]
 800ecdc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ecde:	440b      	add	r3, r1
 800ece0:	429a      	cmp	r2, r3
 800ece2:	d006      	beq.n	800ecf2 <tcp_receive+0x7c6>
 800ece4:	4b36      	ldr	r3, [pc, #216]	; (800edc0 <tcp_receive+0x894>)
 800ece6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800ecea:	4936      	ldr	r1, [pc, #216]	; (800edc4 <tcp_receive+0x898>)
 800ecec:	4836      	ldr	r0, [pc, #216]	; (800edc8 <tcp_receive+0x89c>)
 800ecee:	f005 f9b9 	bl	8014064 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	f000 80e7 	beq.w	800eeca <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ecfc:	4b2e      	ldr	r3, [pc, #184]	; (800edb8 <tcp_receive+0x88c>)
 800ecfe:	68db      	ldr	r3, [r3, #12]
 800ed00:	899b      	ldrh	r3, [r3, #12]
 800ed02:	b29b      	uxth	r3, r3
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7fa fc53 	bl	80095b0 <lwip_htons>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	b2db      	uxtb	r3, r3
 800ed0e:	f003 0301 	and.w	r3, r3, #1
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d010      	beq.n	800ed38 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ed16:	e00a      	b.n	800ed2e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed1c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed22:	681a      	ldr	r2, [r3, #0]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800ed28:	68f8      	ldr	r0, [r7, #12]
 800ed2a:	f7fd fca6 	bl	800c67a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d1f0      	bne.n	800ed18 <tcp_receive+0x7ec>
 800ed36:	e0c8      	b.n	800eeca <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed3c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ed3e:	e052      	b.n	800ede6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ed40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed42:	68db      	ldr	r3, [r3, #12]
 800ed44:	899b      	ldrh	r3, [r3, #12]
 800ed46:	b29b      	uxth	r3, r3
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7fa fc31 	bl	80095b0 <lwip_htons>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	b2db      	uxtb	r3, r3
 800ed52:	f003 0301 	and.w	r3, r3, #1
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d03d      	beq.n	800edd6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ed5a:	4b17      	ldr	r3, [pc, #92]	; (800edb8 <tcp_receive+0x88c>)
 800ed5c:	68db      	ldr	r3, [r3, #12]
 800ed5e:	899b      	ldrh	r3, [r3, #12]
 800ed60:	b29b      	uxth	r3, r3
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7fa fc24 	bl	80095b0 <lwip_htons>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	b2db      	uxtb	r3, r3
 800ed6c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d130      	bne.n	800edd6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ed74:	4b10      	ldr	r3, [pc, #64]	; (800edb8 <tcp_receive+0x88c>)
 800ed76:	68db      	ldr	r3, [r3, #12]
 800ed78:	899b      	ldrh	r3, [r3, #12]
 800ed7a:	b29c      	uxth	r4, r3
 800ed7c:	2001      	movs	r0, #1
 800ed7e:	f7fa fc17 	bl	80095b0 <lwip_htons>
 800ed82:	4603      	mov	r3, r0
 800ed84:	461a      	mov	r2, r3
 800ed86:	4b0c      	ldr	r3, [pc, #48]	; (800edb8 <tcp_receive+0x88c>)
 800ed88:	68db      	ldr	r3, [r3, #12]
 800ed8a:	4322      	orrs	r2, r4
 800ed8c:	b292      	uxth	r2, r2
 800ed8e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ed90:	4b09      	ldr	r3, [pc, #36]	; (800edb8 <tcp_receive+0x88c>)
 800ed92:	891c      	ldrh	r4, [r3, #8]
 800ed94:	4b08      	ldr	r3, [pc, #32]	; (800edb8 <tcp_receive+0x88c>)
 800ed96:	68db      	ldr	r3, [r3, #12]
 800ed98:	899b      	ldrh	r3, [r3, #12]
 800ed9a:	b29b      	uxth	r3, r3
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f7fa fc07 	bl	80095b0 <lwip_htons>
 800eda2:	4603      	mov	r3, r0
 800eda4:	b2db      	uxtb	r3, r3
 800eda6:	f003 0303 	and.w	r3, r3, #3
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d00e      	beq.n	800edcc <tcp_receive+0x8a0>
 800edae:	2301      	movs	r3, #1
 800edb0:	e00d      	b.n	800edce <tcp_receive+0x8a2>
 800edb2:	bf00      	nop
 800edb4:	24003610 	.word	0x24003610
 800edb8:	240035f0 	.word	0x240035f0
 800edbc:	2400361a 	.word	0x2400361a
 800edc0:	080165b4 	.word	0x080165b4
 800edc4:	0801695c 	.word	0x0801695c
 800edc8:	08016600 	.word	0x08016600
 800edcc:	2300      	movs	r3, #0
 800edce:	4423      	add	r3, r4
 800edd0:	b29a      	uxth	r2, r3
 800edd2:	4b98      	ldr	r3, [pc, #608]	; (800f034 <tcp_receive+0xb08>)
 800edd4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800edd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edd8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800edda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800ede0:	6938      	ldr	r0, [r7, #16]
 800ede2:	f7fd fc4a 	bl	800c67a <tcp_seg_free>
            while (next &&
 800ede6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d00e      	beq.n	800ee0a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800edec:	4b91      	ldr	r3, [pc, #580]	; (800f034 <tcp_receive+0xb08>)
 800edee:	881b      	ldrh	r3, [r3, #0]
 800edf0:	461a      	mov	r2, r3
 800edf2:	4b91      	ldr	r3, [pc, #580]	; (800f038 <tcp_receive+0xb0c>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	441a      	add	r2, r3
 800edf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edfa:	68db      	ldr	r3, [r3, #12]
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ee00:	8909      	ldrh	r1, [r1, #8]
 800ee02:	440b      	add	r3, r1
 800ee04:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	da9a      	bge.n	800ed40 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ee0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d059      	beq.n	800eec4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800ee10:	4b88      	ldr	r3, [pc, #544]	; (800f034 <tcp_receive+0xb08>)
 800ee12:	881b      	ldrh	r3, [r3, #0]
 800ee14:	461a      	mov	r2, r3
 800ee16:	4b88      	ldr	r3, [pc, #544]	; (800f038 <tcp_receive+0xb0c>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	441a      	add	r2, r3
 800ee1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee1e:	68db      	ldr	r3, [r3, #12]
 800ee20:	685b      	ldr	r3, [r3, #4]
 800ee22:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	dd4d      	ble.n	800eec4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ee28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee2a:	68db      	ldr	r3, [r3, #12]
 800ee2c:	685b      	ldr	r3, [r3, #4]
 800ee2e:	b29a      	uxth	r2, r3
 800ee30:	4b81      	ldr	r3, [pc, #516]	; (800f038 <tcp_receive+0xb0c>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	b29b      	uxth	r3, r3
 800ee36:	1ad3      	subs	r3, r2, r3
 800ee38:	b29a      	uxth	r2, r3
 800ee3a:	4b80      	ldr	r3, [pc, #512]	; (800f03c <tcp_receive+0xb10>)
 800ee3c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ee3e:	4b7f      	ldr	r3, [pc, #508]	; (800f03c <tcp_receive+0xb10>)
 800ee40:	68db      	ldr	r3, [r3, #12]
 800ee42:	899b      	ldrh	r3, [r3, #12]
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7fa fbb2 	bl	80095b0 <lwip_htons>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	b2db      	uxtb	r3, r3
 800ee50:	f003 0302 	and.w	r3, r3, #2
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d005      	beq.n	800ee64 <tcp_receive+0x938>
                inseg.len -= 1;
 800ee58:	4b78      	ldr	r3, [pc, #480]	; (800f03c <tcp_receive+0xb10>)
 800ee5a:	891b      	ldrh	r3, [r3, #8]
 800ee5c:	3b01      	subs	r3, #1
 800ee5e:	b29a      	uxth	r2, r3
 800ee60:	4b76      	ldr	r3, [pc, #472]	; (800f03c <tcp_receive+0xb10>)
 800ee62:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ee64:	4b75      	ldr	r3, [pc, #468]	; (800f03c <tcp_receive+0xb10>)
 800ee66:	685b      	ldr	r3, [r3, #4]
 800ee68:	4a74      	ldr	r2, [pc, #464]	; (800f03c <tcp_receive+0xb10>)
 800ee6a:	8912      	ldrh	r2, [r2, #8]
 800ee6c:	4611      	mov	r1, r2
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7fb fe52 	bl	800ab18 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ee74:	4b71      	ldr	r3, [pc, #452]	; (800f03c <tcp_receive+0xb10>)
 800ee76:	891c      	ldrh	r4, [r3, #8]
 800ee78:	4b70      	ldr	r3, [pc, #448]	; (800f03c <tcp_receive+0xb10>)
 800ee7a:	68db      	ldr	r3, [r3, #12]
 800ee7c:	899b      	ldrh	r3, [r3, #12]
 800ee7e:	b29b      	uxth	r3, r3
 800ee80:	4618      	mov	r0, r3
 800ee82:	f7fa fb95 	bl	80095b0 <lwip_htons>
 800ee86:	4603      	mov	r3, r0
 800ee88:	b2db      	uxtb	r3, r3
 800ee8a:	f003 0303 	and.w	r3, r3, #3
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d001      	beq.n	800ee96 <tcp_receive+0x96a>
 800ee92:	2301      	movs	r3, #1
 800ee94:	e000      	b.n	800ee98 <tcp_receive+0x96c>
 800ee96:	2300      	movs	r3, #0
 800ee98:	4423      	add	r3, r4
 800ee9a:	b29a      	uxth	r2, r3
 800ee9c:	4b65      	ldr	r3, [pc, #404]	; (800f034 <tcp_receive+0xb08>)
 800ee9e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800eea0:	4b64      	ldr	r3, [pc, #400]	; (800f034 <tcp_receive+0xb08>)
 800eea2:	881b      	ldrh	r3, [r3, #0]
 800eea4:	461a      	mov	r2, r3
 800eea6:	4b64      	ldr	r3, [pc, #400]	; (800f038 <tcp_receive+0xb0c>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	441a      	add	r2, r3
 800eeac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeae:	68db      	ldr	r3, [r3, #12]
 800eeb0:	685b      	ldr	r3, [r3, #4]
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d006      	beq.n	800eec4 <tcp_receive+0x998>
 800eeb6:	4b62      	ldr	r3, [pc, #392]	; (800f040 <tcp_receive+0xb14>)
 800eeb8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800eebc:	4961      	ldr	r1, [pc, #388]	; (800f044 <tcp_receive+0xb18>)
 800eebe:	4862      	ldr	r0, [pc, #392]	; (800f048 <tcp_receive+0xb1c>)
 800eec0:	f005 f8d0 	bl	8014064 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eec8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800eeca:	4b5a      	ldr	r3, [pc, #360]	; (800f034 <tcp_receive+0xb08>)
 800eecc:	881b      	ldrh	r3, [r3, #0]
 800eece:	461a      	mov	r2, r3
 800eed0:	4b59      	ldr	r3, [pc, #356]	; (800f038 <tcp_receive+0xb0c>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	441a      	add	r2, r3
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eede:	4b55      	ldr	r3, [pc, #340]	; (800f034 <tcp_receive+0xb08>)
 800eee0:	881b      	ldrh	r3, [r3, #0]
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d206      	bcs.n	800eef4 <tcp_receive+0x9c8>
 800eee6:	4b56      	ldr	r3, [pc, #344]	; (800f040 <tcp_receive+0xb14>)
 800eee8:	f240 6207 	movw	r2, #1543	; 0x607
 800eeec:	4957      	ldr	r1, [pc, #348]	; (800f04c <tcp_receive+0xb20>)
 800eeee:	4856      	ldr	r0, [pc, #344]	; (800f048 <tcp_receive+0xb1c>)
 800eef0:	f005 f8b8 	bl	8014064 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eef8:	4b4e      	ldr	r3, [pc, #312]	; (800f034 <tcp_receive+0xb08>)
 800eefa:	881b      	ldrh	r3, [r3, #0]
 800eefc:	1ad3      	subs	r3, r2, r3
 800eefe:	b29a      	uxth	r2, r3
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f7fc fe93 	bl	800bc30 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ef0a:	4b4c      	ldr	r3, [pc, #304]	; (800f03c <tcp_receive+0xb10>)
 800ef0c:	685b      	ldr	r3, [r3, #4]
 800ef0e:	891b      	ldrh	r3, [r3, #8]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d006      	beq.n	800ef22 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800ef14:	4b49      	ldr	r3, [pc, #292]	; (800f03c <tcp_receive+0xb10>)
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	4a4d      	ldr	r2, [pc, #308]	; (800f050 <tcp_receive+0xb24>)
 800ef1a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ef1c:	4b47      	ldr	r3, [pc, #284]	; (800f03c <tcp_receive+0xb10>)
 800ef1e:	2200      	movs	r2, #0
 800ef20:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ef22:	4b46      	ldr	r3, [pc, #280]	; (800f03c <tcp_receive+0xb10>)
 800ef24:	68db      	ldr	r3, [r3, #12]
 800ef26:	899b      	ldrh	r3, [r3, #12]
 800ef28:	b29b      	uxth	r3, r3
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f7fa fb40 	bl	80095b0 <lwip_htons>
 800ef30:	4603      	mov	r3, r0
 800ef32:	b2db      	uxtb	r3, r3
 800ef34:	f003 0301 	and.w	r3, r3, #1
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	f000 80b8 	beq.w	800f0ae <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ef3e:	4b45      	ldr	r3, [pc, #276]	; (800f054 <tcp_receive+0xb28>)
 800ef40:	781b      	ldrb	r3, [r3, #0]
 800ef42:	f043 0320 	orr.w	r3, r3, #32
 800ef46:	b2da      	uxtb	r2, r3
 800ef48:	4b42      	ldr	r3, [pc, #264]	; (800f054 <tcp_receive+0xb28>)
 800ef4a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ef4c:	e0af      	b.n	800f0ae <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef52:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef58:	68db      	ldr	r3, [r3, #12]
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	4a36      	ldr	r2, [pc, #216]	; (800f038 <tcp_receive+0xb0c>)
 800ef5e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	891b      	ldrh	r3, [r3, #8]
 800ef64:	461c      	mov	r4, r3
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	68db      	ldr	r3, [r3, #12]
 800ef6a:	899b      	ldrh	r3, [r3, #12]
 800ef6c:	b29b      	uxth	r3, r3
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7fa fb1e 	bl	80095b0 <lwip_htons>
 800ef74:	4603      	mov	r3, r0
 800ef76:	b2db      	uxtb	r3, r3
 800ef78:	f003 0303 	and.w	r3, r3, #3
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d001      	beq.n	800ef84 <tcp_receive+0xa58>
 800ef80:	2301      	movs	r3, #1
 800ef82:	e000      	b.n	800ef86 <tcp_receive+0xa5a>
 800ef84:	2300      	movs	r3, #0
 800ef86:	191a      	adds	r2, r3, r4
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef8c:	441a      	add	r2, r3
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ef96:	461c      	mov	r4, r3
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	891b      	ldrh	r3, [r3, #8]
 800ef9c:	461d      	mov	r5, r3
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	68db      	ldr	r3, [r3, #12]
 800efa2:	899b      	ldrh	r3, [r3, #12]
 800efa4:	b29b      	uxth	r3, r3
 800efa6:	4618      	mov	r0, r3
 800efa8:	f7fa fb02 	bl	80095b0 <lwip_htons>
 800efac:	4603      	mov	r3, r0
 800efae:	b2db      	uxtb	r3, r3
 800efb0:	f003 0303 	and.w	r3, r3, #3
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d001      	beq.n	800efbc <tcp_receive+0xa90>
 800efb8:	2301      	movs	r3, #1
 800efba:	e000      	b.n	800efbe <tcp_receive+0xa92>
 800efbc:	2300      	movs	r3, #0
 800efbe:	442b      	add	r3, r5
 800efc0:	429c      	cmp	r4, r3
 800efc2:	d206      	bcs.n	800efd2 <tcp_receive+0xaa6>
 800efc4:	4b1e      	ldr	r3, [pc, #120]	; (800f040 <tcp_receive+0xb14>)
 800efc6:	f240 622b 	movw	r2, #1579	; 0x62b
 800efca:	4923      	ldr	r1, [pc, #140]	; (800f058 <tcp_receive+0xb2c>)
 800efcc:	481e      	ldr	r0, [pc, #120]	; (800f048 <tcp_receive+0xb1c>)
 800efce:	f005 f849 	bl	8014064 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	891b      	ldrh	r3, [r3, #8]
 800efd6:	461c      	mov	r4, r3
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	68db      	ldr	r3, [r3, #12]
 800efdc:	899b      	ldrh	r3, [r3, #12]
 800efde:	b29b      	uxth	r3, r3
 800efe0:	4618      	mov	r0, r3
 800efe2:	f7fa fae5 	bl	80095b0 <lwip_htons>
 800efe6:	4603      	mov	r3, r0
 800efe8:	b2db      	uxtb	r3, r3
 800efea:	f003 0303 	and.w	r3, r3, #3
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d001      	beq.n	800eff6 <tcp_receive+0xaca>
 800eff2:	2301      	movs	r3, #1
 800eff4:	e000      	b.n	800eff8 <tcp_receive+0xacc>
 800eff6:	2300      	movs	r3, #0
 800eff8:	1919      	adds	r1, r3, r4
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800effe:	b28b      	uxth	r3, r1
 800f000:	1ad3      	subs	r3, r2, r3
 800f002:	b29a      	uxth	r2, r3
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f7fc fe11 	bl	800bc30 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	891b      	ldrh	r3, [r3, #8]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d028      	beq.n	800f06a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f018:	4b0d      	ldr	r3, [pc, #52]	; (800f050 <tcp_receive+0xb24>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d01d      	beq.n	800f05c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800f020:	4b0b      	ldr	r3, [pc, #44]	; (800f050 <tcp_receive+0xb24>)
 800f022:	681a      	ldr	r2, [r3, #0]
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	685b      	ldr	r3, [r3, #4]
 800f028:	4619      	mov	r1, r3
 800f02a:	4610      	mov	r0, r2
 800f02c:	f7fb ffba 	bl	800afa4 <pbuf_cat>
 800f030:	e018      	b.n	800f064 <tcp_receive+0xb38>
 800f032:	bf00      	nop
 800f034:	2400361a 	.word	0x2400361a
 800f038:	24003610 	.word	0x24003610
 800f03c:	240035f0 	.word	0x240035f0
 800f040:	080165b4 	.word	0x080165b4
 800f044:	08016994 	.word	0x08016994
 800f048:	08016600 	.word	0x08016600
 800f04c:	080169d0 	.word	0x080169d0
 800f050:	24003620 	.word	0x24003620
 800f054:	2400361d 	.word	0x2400361d
 800f058:	080169f0 	.word	0x080169f0
            } else {
              recv_data = cseg->p;
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	685b      	ldr	r3, [r3, #4]
 800f060:	4a70      	ldr	r2, [pc, #448]	; (800f224 <tcp_receive+0xcf8>)
 800f062:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	2200      	movs	r2, #0
 800f068:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	68db      	ldr	r3, [r3, #12]
 800f06e:	899b      	ldrh	r3, [r3, #12]
 800f070:	b29b      	uxth	r3, r3
 800f072:	4618      	mov	r0, r3
 800f074:	f7fa fa9c 	bl	80095b0 <lwip_htons>
 800f078:	4603      	mov	r3, r0
 800f07a:	b2db      	uxtb	r3, r3
 800f07c:	f003 0301 	and.w	r3, r3, #1
 800f080:	2b00      	cmp	r3, #0
 800f082:	d00d      	beq.n	800f0a0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f084:	4b68      	ldr	r3, [pc, #416]	; (800f228 <tcp_receive+0xcfc>)
 800f086:	781b      	ldrb	r3, [r3, #0]
 800f088:	f043 0320 	orr.w	r3, r3, #32
 800f08c:	b2da      	uxtb	r2, r3
 800f08e:	4b66      	ldr	r3, [pc, #408]	; (800f228 <tcp_receive+0xcfc>)
 800f090:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	7d1b      	ldrb	r3, [r3, #20]
 800f096:	2b04      	cmp	r3, #4
 800f098:	d102      	bne.n	800f0a0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2207      	movs	r2, #7
 800f09e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	681a      	ldr	r2, [r3, #0]
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f0a8:	68b8      	ldr	r0, [r7, #8]
 800f0aa:	f7fd fae6 	bl	800c67a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d008      	beq.n	800f0c8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0ba:	68db      	ldr	r3, [r3, #12]
 800f0bc:	685a      	ldr	r2, [r3, #4]
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	f43f af43 	beq.w	800ef4e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	8b5b      	ldrh	r3, [r3, #26]
 800f0cc:	f003 0301 	and.w	r3, r3, #1
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d00e      	beq.n	800f0f2 <tcp_receive+0xbc6>
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	8b5b      	ldrh	r3, [r3, #26]
 800f0d8:	f023 0301 	bic.w	r3, r3, #1
 800f0dc:	b29a      	uxth	r2, r3
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	835a      	strh	r2, [r3, #26]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	8b5b      	ldrh	r3, [r3, #26]
 800f0e6:	f043 0302 	orr.w	r3, r3, #2
 800f0ea:	b29a      	uxth	r2, r3
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f0f0:	e188      	b.n	800f404 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	8b5b      	ldrh	r3, [r3, #26]
 800f0f6:	f043 0301 	orr.w	r3, r3, #1
 800f0fa:	b29a      	uxth	r2, r3
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f100:	e180      	b.n	800f404 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f106:	2b00      	cmp	r3, #0
 800f108:	d106      	bne.n	800f118 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f10a:	4848      	ldr	r0, [pc, #288]	; (800f22c <tcp_receive+0xd00>)
 800f10c:	f7fd faec 	bl	800c6e8 <tcp_seg_copy>
 800f110:	4602      	mov	r2, r0
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	675a      	str	r2, [r3, #116]	; 0x74
 800f116:	e16d      	b.n	800f3f4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f118:	2300      	movs	r3, #0
 800f11a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f120:	63bb      	str	r3, [r7, #56]	; 0x38
 800f122:	e157      	b.n	800f3d4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800f124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f126:	68db      	ldr	r3, [r3, #12]
 800f128:	685a      	ldr	r2, [r3, #4]
 800f12a:	4b41      	ldr	r3, [pc, #260]	; (800f230 <tcp_receive+0xd04>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	429a      	cmp	r2, r3
 800f130:	d11d      	bne.n	800f16e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f132:	4b3e      	ldr	r3, [pc, #248]	; (800f22c <tcp_receive+0xd00>)
 800f134:	891a      	ldrh	r2, [r3, #8]
 800f136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f138:	891b      	ldrh	r3, [r3, #8]
 800f13a:	429a      	cmp	r2, r3
 800f13c:	f240 814f 	bls.w	800f3de <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f140:	483a      	ldr	r0, [pc, #232]	; (800f22c <tcp_receive+0xd00>)
 800f142:	f7fd fad1 	bl	800c6e8 <tcp_seg_copy>
 800f146:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	f000 8149 	beq.w	800f3e2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800f150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f152:	2b00      	cmp	r3, #0
 800f154:	d003      	beq.n	800f15e <tcp_receive+0xc32>
                    prev->next = cseg;
 800f156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f158:	697a      	ldr	r2, [r7, #20]
 800f15a:	601a      	str	r2, [r3, #0]
 800f15c:	e002      	b.n	800f164 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	697a      	ldr	r2, [r7, #20]
 800f162:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f164:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f166:	6978      	ldr	r0, [r7, #20]
 800f168:	f7ff f8dc 	bl	800e324 <tcp_oos_insert_segment>
                }
                break;
 800f16c:	e139      	b.n	800f3e2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f16e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f170:	2b00      	cmp	r3, #0
 800f172:	d117      	bne.n	800f1a4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f174:	4b2e      	ldr	r3, [pc, #184]	; (800f230 <tcp_receive+0xd04>)
 800f176:	681a      	ldr	r2, [r3, #0]
 800f178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f17a:	68db      	ldr	r3, [r3, #12]
 800f17c:	685b      	ldr	r3, [r3, #4]
 800f17e:	1ad3      	subs	r3, r2, r3
 800f180:	2b00      	cmp	r3, #0
 800f182:	da57      	bge.n	800f234 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f184:	4829      	ldr	r0, [pc, #164]	; (800f22c <tcp_receive+0xd00>)
 800f186:	f7fd faaf 	bl	800c6e8 <tcp_seg_copy>
 800f18a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f18c:	69bb      	ldr	r3, [r7, #24]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	f000 8129 	beq.w	800f3e6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	69ba      	ldr	r2, [r7, #24]
 800f198:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f19a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f19c:	69b8      	ldr	r0, [r7, #24]
 800f19e:	f7ff f8c1 	bl	800e324 <tcp_oos_insert_segment>
                  }
                  break;
 800f1a2:	e120      	b.n	800f3e6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f1a4:	4b22      	ldr	r3, [pc, #136]	; (800f230 <tcp_receive+0xd04>)
 800f1a6:	681a      	ldr	r2, [r3, #0]
 800f1a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1aa:	68db      	ldr	r3, [r3, #12]
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	1ad3      	subs	r3, r2, r3
 800f1b0:	3b01      	subs	r3, #1
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	db3e      	blt.n	800f234 <tcp_receive+0xd08>
 800f1b6:	4b1e      	ldr	r3, [pc, #120]	; (800f230 <tcp_receive+0xd04>)
 800f1b8:	681a      	ldr	r2, [r3, #0]
 800f1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1bc:	68db      	ldr	r3, [r3, #12]
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	1ad3      	subs	r3, r2, r3
 800f1c2:	3301      	adds	r3, #1
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	dc35      	bgt.n	800f234 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f1c8:	4818      	ldr	r0, [pc, #96]	; (800f22c <tcp_receive+0xd00>)
 800f1ca:	f7fd fa8d 	bl	800c6e8 <tcp_seg_copy>
 800f1ce:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f1d0:	69fb      	ldr	r3, [r7, #28]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	f000 8109 	beq.w	800f3ea <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1da:	68db      	ldr	r3, [r3, #12]
 800f1dc:	685b      	ldr	r3, [r3, #4]
 800f1de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1e0:	8912      	ldrh	r2, [r2, #8]
 800f1e2:	441a      	add	r2, r3
 800f1e4:	4b12      	ldr	r3, [pc, #72]	; (800f230 <tcp_receive+0xd04>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	1ad3      	subs	r3, r2, r3
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	dd12      	ble.n	800f214 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f1ee:	4b10      	ldr	r3, [pc, #64]	; (800f230 <tcp_receive+0xd04>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	b29a      	uxth	r2, r3
 800f1f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1f6:	68db      	ldr	r3, [r3, #12]
 800f1f8:	685b      	ldr	r3, [r3, #4]
 800f1fa:	b29b      	uxth	r3, r3
 800f1fc:	1ad3      	subs	r3, r2, r3
 800f1fe:	b29a      	uxth	r2, r3
 800f200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f202:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f206:	685a      	ldr	r2, [r3, #4]
 800f208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f20a:	891b      	ldrh	r3, [r3, #8]
 800f20c:	4619      	mov	r1, r3
 800f20e:	4610      	mov	r0, r2
 800f210:	f7fb fc82 	bl	800ab18 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f216:	69fa      	ldr	r2, [r7, #28]
 800f218:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f21a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f21c:	69f8      	ldr	r0, [r7, #28]
 800f21e:	f7ff f881 	bl	800e324 <tcp_oos_insert_segment>
                  }
                  break;
 800f222:	e0e2      	b.n	800f3ea <tcp_receive+0xebe>
 800f224:	24003620 	.word	0x24003620
 800f228:	2400361d 	.word	0x2400361d
 800f22c:	240035f0 	.word	0x240035f0
 800f230:	24003610 	.word	0x24003610
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f236:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	f040 80c6 	bne.w	800f3ce <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f242:	4b80      	ldr	r3, [pc, #512]	; (800f444 <tcp_receive+0xf18>)
 800f244:	681a      	ldr	r2, [r3, #0]
 800f246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f248:	68db      	ldr	r3, [r3, #12]
 800f24a:	685b      	ldr	r3, [r3, #4]
 800f24c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f24e:	2b00      	cmp	r3, #0
 800f250:	f340 80bd 	ble.w	800f3ce <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f256:	68db      	ldr	r3, [r3, #12]
 800f258:	899b      	ldrh	r3, [r3, #12]
 800f25a:	b29b      	uxth	r3, r3
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7fa f9a7 	bl	80095b0 <lwip_htons>
 800f262:	4603      	mov	r3, r0
 800f264:	b2db      	uxtb	r3, r3
 800f266:	f003 0301 	and.w	r3, r3, #1
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	f040 80bf 	bne.w	800f3ee <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f270:	4875      	ldr	r0, [pc, #468]	; (800f448 <tcp_receive+0xf1c>)
 800f272:	f7fd fa39 	bl	800c6e8 <tcp_seg_copy>
 800f276:	4602      	mov	r2, r0
 800f278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f27a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	2b00      	cmp	r3, #0
 800f282:	f000 80b6 	beq.w	800f3f2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f288:	68db      	ldr	r3, [r3, #12]
 800f28a:	685b      	ldr	r3, [r3, #4]
 800f28c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f28e:	8912      	ldrh	r2, [r2, #8]
 800f290:	441a      	add	r2, r3
 800f292:	4b6c      	ldr	r3, [pc, #432]	; (800f444 <tcp_receive+0xf18>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	1ad3      	subs	r3, r2, r3
 800f298:	2b00      	cmp	r3, #0
 800f29a:	dd12      	ble.n	800f2c2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f29c:	4b69      	ldr	r3, [pc, #420]	; (800f444 <tcp_receive+0xf18>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	b29a      	uxth	r2, r3
 800f2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a4:	68db      	ldr	r3, [r3, #12]
 800f2a6:	685b      	ldr	r3, [r3, #4]
 800f2a8:	b29b      	uxth	r3, r3
 800f2aa:	1ad3      	subs	r3, r2, r3
 800f2ac:	b29a      	uxth	r2, r3
 800f2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2b0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2b4:	685a      	ldr	r2, [r3, #4]
 800f2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2b8:	891b      	ldrh	r3, [r3, #8]
 800f2ba:	4619      	mov	r1, r3
 800f2bc:	4610      	mov	r0, r2
 800f2be:	f7fb fc2b 	bl	800ab18 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f2c2:	4b62      	ldr	r3, [pc, #392]	; (800f44c <tcp_receive+0xf20>)
 800f2c4:	881b      	ldrh	r3, [r3, #0]
 800f2c6:	461a      	mov	r2, r3
 800f2c8:	4b5e      	ldr	r3, [pc, #376]	; (800f444 <tcp_receive+0xf18>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	441a      	add	r2, r3
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2d2:	6879      	ldr	r1, [r7, #4]
 800f2d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f2d6:	440b      	add	r3, r1
 800f2d8:	1ad3      	subs	r3, r2, r3
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	f340 8089 	ble.w	800f3f2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	68db      	ldr	r3, [r3, #12]
 800f2e6:	899b      	ldrh	r3, [r3, #12]
 800f2e8:	b29b      	uxth	r3, r3
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7fa f960 	bl	80095b0 <lwip_htons>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	b2db      	uxtb	r3, r3
 800f2f4:	f003 0301 	and.w	r3, r3, #1
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d022      	beq.n	800f342 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	68db      	ldr	r3, [r3, #12]
 800f302:	899b      	ldrh	r3, [r3, #12]
 800f304:	b29b      	uxth	r3, r3
 800f306:	b21b      	sxth	r3, r3
 800f308:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f30c:	b21c      	sxth	r4, r3
 800f30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	68db      	ldr	r3, [r3, #12]
 800f314:	899b      	ldrh	r3, [r3, #12]
 800f316:	b29b      	uxth	r3, r3
 800f318:	4618      	mov	r0, r3
 800f31a:	f7fa f949 	bl	80095b0 <lwip_htons>
 800f31e:	4603      	mov	r3, r0
 800f320:	b2db      	uxtb	r3, r3
 800f322:	b29b      	uxth	r3, r3
 800f324:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f328:	b29b      	uxth	r3, r3
 800f32a:	4618      	mov	r0, r3
 800f32c:	f7fa f940 	bl	80095b0 <lwip_htons>
 800f330:	4603      	mov	r3, r0
 800f332:	b21b      	sxth	r3, r3
 800f334:	4323      	orrs	r3, r4
 800f336:	b21a      	sxth	r2, r3
 800f338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	68db      	ldr	r3, [r3, #12]
 800f33e:	b292      	uxth	r2, r2
 800f340:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f346:	b29a      	uxth	r2, r3
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f34c:	4413      	add	r3, r2
 800f34e:	b299      	uxth	r1, r3
 800f350:	4b3c      	ldr	r3, [pc, #240]	; (800f444 <tcp_receive+0xf18>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	b29a      	uxth	r2, r3
 800f356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	1a8a      	subs	r2, r1, r2
 800f35c:	b292      	uxth	r2, r2
 800f35e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	685a      	ldr	r2, [r3, #4]
 800f366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	891b      	ldrh	r3, [r3, #8]
 800f36c:	4619      	mov	r1, r3
 800f36e:	4610      	mov	r0, r2
 800f370:	f7fb fbd2 	bl	800ab18 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	891c      	ldrh	r4, [r3, #8]
 800f37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	68db      	ldr	r3, [r3, #12]
 800f380:	899b      	ldrh	r3, [r3, #12]
 800f382:	b29b      	uxth	r3, r3
 800f384:	4618      	mov	r0, r3
 800f386:	f7fa f913 	bl	80095b0 <lwip_htons>
 800f38a:	4603      	mov	r3, r0
 800f38c:	b2db      	uxtb	r3, r3
 800f38e:	f003 0303 	and.w	r3, r3, #3
 800f392:	2b00      	cmp	r3, #0
 800f394:	d001      	beq.n	800f39a <tcp_receive+0xe6e>
 800f396:	2301      	movs	r3, #1
 800f398:	e000      	b.n	800f39c <tcp_receive+0xe70>
 800f39a:	2300      	movs	r3, #0
 800f39c:	4423      	add	r3, r4
 800f39e:	b29a      	uxth	r2, r3
 800f3a0:	4b2a      	ldr	r3, [pc, #168]	; (800f44c <tcp_receive+0xf20>)
 800f3a2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f3a4:	4b29      	ldr	r3, [pc, #164]	; (800f44c <tcp_receive+0xf20>)
 800f3a6:	881b      	ldrh	r3, [r3, #0]
 800f3a8:	461a      	mov	r2, r3
 800f3aa:	4b26      	ldr	r3, [pc, #152]	; (800f444 <tcp_receive+0xf18>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	441a      	add	r2, r3
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3b4:	6879      	ldr	r1, [r7, #4]
 800f3b6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f3b8:	440b      	add	r3, r1
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d019      	beq.n	800f3f2 <tcp_receive+0xec6>
 800f3be:	4b24      	ldr	r3, [pc, #144]	; (800f450 <tcp_receive+0xf24>)
 800f3c0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800f3c4:	4923      	ldr	r1, [pc, #140]	; (800f454 <tcp_receive+0xf28>)
 800f3c6:	4824      	ldr	r0, [pc, #144]	; (800f458 <tcp_receive+0xf2c>)
 800f3c8:	f004 fe4c 	bl	8014064 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f3cc:	e011      	b.n	800f3f2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800f3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	f47f aea4 	bne.w	800f124 <tcp_receive+0xbf8>
 800f3dc:	e00a      	b.n	800f3f4 <tcp_receive+0xec8>
                break;
 800f3de:	bf00      	nop
 800f3e0:	e008      	b.n	800f3f4 <tcp_receive+0xec8>
                break;
 800f3e2:	bf00      	nop
 800f3e4:	e006      	b.n	800f3f4 <tcp_receive+0xec8>
                  break;
 800f3e6:	bf00      	nop
 800f3e8:	e004      	b.n	800f3f4 <tcp_receive+0xec8>
                  break;
 800f3ea:	bf00      	nop
 800f3ec:	e002      	b.n	800f3f4 <tcp_receive+0xec8>
                  break;
 800f3ee:	bf00      	nop
 800f3f0:	e000      	b.n	800f3f4 <tcp_receive+0xec8>
                break;
 800f3f2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f3f4:	6878      	ldr	r0, [r7, #4]
 800f3f6:	f001 fe8b 	bl	8011110 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f3fa:	e003      	b.n	800f404 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f001 fe87 	bl	8011110 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f402:	e01a      	b.n	800f43a <tcp_receive+0xf0e>
 800f404:	e019      	b.n	800f43a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f406:	4b0f      	ldr	r3, [pc, #60]	; (800f444 <tcp_receive+0xf18>)
 800f408:	681a      	ldr	r2, [r3, #0]
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f40e:	1ad3      	subs	r3, r2, r3
 800f410:	2b00      	cmp	r3, #0
 800f412:	db0a      	blt.n	800f42a <tcp_receive+0xefe>
 800f414:	4b0b      	ldr	r3, [pc, #44]	; (800f444 <tcp_receive+0xf18>)
 800f416:	681a      	ldr	r2, [r3, #0]
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f41c:	6879      	ldr	r1, [r7, #4]
 800f41e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f420:	440b      	add	r3, r1
 800f422:	1ad3      	subs	r3, r2, r3
 800f424:	3301      	adds	r3, #1
 800f426:	2b00      	cmp	r3, #0
 800f428:	dd07      	ble.n	800f43a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	8b5b      	ldrh	r3, [r3, #26]
 800f42e:	f043 0302 	orr.w	r3, r3, #2
 800f432:	b29a      	uxth	r2, r3
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f438:	e7ff      	b.n	800f43a <tcp_receive+0xf0e>
 800f43a:	bf00      	nop
 800f43c:	3750      	adds	r7, #80	; 0x50
 800f43e:	46bd      	mov	sp, r7
 800f440:	bdb0      	pop	{r4, r5, r7, pc}
 800f442:	bf00      	nop
 800f444:	24003610 	.word	0x24003610
 800f448:	240035f0 	.word	0x240035f0
 800f44c:	2400361a 	.word	0x2400361a
 800f450:	080165b4 	.word	0x080165b4
 800f454:	0801695c 	.word	0x0801695c
 800f458:	08016600 	.word	0x08016600

0800f45c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f45c:	b480      	push	{r7}
 800f45e:	b083      	sub	sp, #12
 800f460:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f462:	4b15      	ldr	r3, [pc, #84]	; (800f4b8 <tcp_get_next_optbyte+0x5c>)
 800f464:	881b      	ldrh	r3, [r3, #0]
 800f466:	1c5a      	adds	r2, r3, #1
 800f468:	b291      	uxth	r1, r2
 800f46a:	4a13      	ldr	r2, [pc, #76]	; (800f4b8 <tcp_get_next_optbyte+0x5c>)
 800f46c:	8011      	strh	r1, [r2, #0]
 800f46e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f470:	4b12      	ldr	r3, [pc, #72]	; (800f4bc <tcp_get_next_optbyte+0x60>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d004      	beq.n	800f482 <tcp_get_next_optbyte+0x26>
 800f478:	4b11      	ldr	r3, [pc, #68]	; (800f4c0 <tcp_get_next_optbyte+0x64>)
 800f47a:	881b      	ldrh	r3, [r3, #0]
 800f47c:	88fa      	ldrh	r2, [r7, #6]
 800f47e:	429a      	cmp	r2, r3
 800f480:	d208      	bcs.n	800f494 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f482:	4b10      	ldr	r3, [pc, #64]	; (800f4c4 <tcp_get_next_optbyte+0x68>)
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	3314      	adds	r3, #20
 800f488:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f48a:	88fb      	ldrh	r3, [r7, #6]
 800f48c:	683a      	ldr	r2, [r7, #0]
 800f48e:	4413      	add	r3, r2
 800f490:	781b      	ldrb	r3, [r3, #0]
 800f492:	e00b      	b.n	800f4ac <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f494:	88fb      	ldrh	r3, [r7, #6]
 800f496:	b2da      	uxtb	r2, r3
 800f498:	4b09      	ldr	r3, [pc, #36]	; (800f4c0 <tcp_get_next_optbyte+0x64>)
 800f49a:	881b      	ldrh	r3, [r3, #0]
 800f49c:	b2db      	uxtb	r3, r3
 800f49e:	1ad3      	subs	r3, r2, r3
 800f4a0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f4a2:	4b06      	ldr	r3, [pc, #24]	; (800f4bc <tcp_get_next_optbyte+0x60>)
 800f4a4:	681a      	ldr	r2, [r3, #0]
 800f4a6:	797b      	ldrb	r3, [r7, #5]
 800f4a8:	4413      	add	r3, r2
 800f4aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	370c      	adds	r7, #12
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b6:	4770      	bx	lr
 800f4b8:	2400360c 	.word	0x2400360c
 800f4bc:	24003608 	.word	0x24003608
 800f4c0:	24003606 	.word	0x24003606
 800f4c4:	24003600 	.word	0x24003600

0800f4c8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b084      	sub	sp, #16
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d106      	bne.n	800f4e4 <tcp_parseopt+0x1c>
 800f4d6:	4b32      	ldr	r3, [pc, #200]	; (800f5a0 <tcp_parseopt+0xd8>)
 800f4d8:	f240 727d 	movw	r2, #1917	; 0x77d
 800f4dc:	4931      	ldr	r1, [pc, #196]	; (800f5a4 <tcp_parseopt+0xdc>)
 800f4de:	4832      	ldr	r0, [pc, #200]	; (800f5a8 <tcp_parseopt+0xe0>)
 800f4e0:	f004 fdc0 	bl	8014064 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f4e4:	4b31      	ldr	r3, [pc, #196]	; (800f5ac <tcp_parseopt+0xe4>)
 800f4e6:	881b      	ldrh	r3, [r3, #0]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d055      	beq.n	800f598 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f4ec:	4b30      	ldr	r3, [pc, #192]	; (800f5b0 <tcp_parseopt+0xe8>)
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	801a      	strh	r2, [r3, #0]
 800f4f2:	e045      	b.n	800f580 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800f4f4:	f7ff ffb2 	bl	800f45c <tcp_get_next_optbyte>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f4fc:	7bfb      	ldrb	r3, [r7, #15]
 800f4fe:	2b02      	cmp	r3, #2
 800f500:	d006      	beq.n	800f510 <tcp_parseopt+0x48>
 800f502:	2b02      	cmp	r3, #2
 800f504:	dc2b      	bgt.n	800f55e <tcp_parseopt+0x96>
 800f506:	2b00      	cmp	r3, #0
 800f508:	d041      	beq.n	800f58e <tcp_parseopt+0xc6>
 800f50a:	2b01      	cmp	r3, #1
 800f50c:	d127      	bne.n	800f55e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800f50e:	e037      	b.n	800f580 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f510:	f7ff ffa4 	bl	800f45c <tcp_get_next_optbyte>
 800f514:	4603      	mov	r3, r0
 800f516:	2b04      	cmp	r3, #4
 800f518:	d13b      	bne.n	800f592 <tcp_parseopt+0xca>
 800f51a:	4b25      	ldr	r3, [pc, #148]	; (800f5b0 <tcp_parseopt+0xe8>)
 800f51c:	881b      	ldrh	r3, [r3, #0]
 800f51e:	3301      	adds	r3, #1
 800f520:	4a22      	ldr	r2, [pc, #136]	; (800f5ac <tcp_parseopt+0xe4>)
 800f522:	8812      	ldrh	r2, [r2, #0]
 800f524:	4293      	cmp	r3, r2
 800f526:	da34      	bge.n	800f592 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f528:	f7ff ff98 	bl	800f45c <tcp_get_next_optbyte>
 800f52c:	4603      	mov	r3, r0
 800f52e:	b29b      	uxth	r3, r3
 800f530:	021b      	lsls	r3, r3, #8
 800f532:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f534:	f7ff ff92 	bl	800f45c <tcp_get_next_optbyte>
 800f538:	4603      	mov	r3, r0
 800f53a:	b29a      	uxth	r2, r3
 800f53c:	89bb      	ldrh	r3, [r7, #12]
 800f53e:	4313      	orrs	r3, r2
 800f540:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f542:	89bb      	ldrh	r3, [r7, #12]
 800f544:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f548:	d804      	bhi.n	800f554 <tcp_parseopt+0x8c>
 800f54a:	89bb      	ldrh	r3, [r7, #12]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d001      	beq.n	800f554 <tcp_parseopt+0x8c>
 800f550:	89ba      	ldrh	r2, [r7, #12]
 800f552:	e001      	b.n	800f558 <tcp_parseopt+0x90>
 800f554:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800f55c:	e010      	b.n	800f580 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f55e:	f7ff ff7d 	bl	800f45c <tcp_get_next_optbyte>
 800f562:	4603      	mov	r3, r0
 800f564:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f566:	7afb      	ldrb	r3, [r7, #11]
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d914      	bls.n	800f596 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f56c:	7afb      	ldrb	r3, [r7, #11]
 800f56e:	b29a      	uxth	r2, r3
 800f570:	4b0f      	ldr	r3, [pc, #60]	; (800f5b0 <tcp_parseopt+0xe8>)
 800f572:	881b      	ldrh	r3, [r3, #0]
 800f574:	4413      	add	r3, r2
 800f576:	b29b      	uxth	r3, r3
 800f578:	3b02      	subs	r3, #2
 800f57a:	b29a      	uxth	r2, r3
 800f57c:	4b0c      	ldr	r3, [pc, #48]	; (800f5b0 <tcp_parseopt+0xe8>)
 800f57e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f580:	4b0b      	ldr	r3, [pc, #44]	; (800f5b0 <tcp_parseopt+0xe8>)
 800f582:	881a      	ldrh	r2, [r3, #0]
 800f584:	4b09      	ldr	r3, [pc, #36]	; (800f5ac <tcp_parseopt+0xe4>)
 800f586:	881b      	ldrh	r3, [r3, #0]
 800f588:	429a      	cmp	r2, r3
 800f58a:	d3b3      	bcc.n	800f4f4 <tcp_parseopt+0x2c>
 800f58c:	e004      	b.n	800f598 <tcp_parseopt+0xd0>
          return;
 800f58e:	bf00      	nop
 800f590:	e002      	b.n	800f598 <tcp_parseopt+0xd0>
            return;
 800f592:	bf00      	nop
 800f594:	e000      	b.n	800f598 <tcp_parseopt+0xd0>
            return;
 800f596:	bf00      	nop
      }
    }
  }
}
 800f598:	3710      	adds	r7, #16
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}
 800f59e:	bf00      	nop
 800f5a0:	080165b4 	.word	0x080165b4
 800f5a4:	08016a18 	.word	0x08016a18
 800f5a8:	08016600 	.word	0x08016600
 800f5ac:	24003604 	.word	0x24003604
 800f5b0:	2400360c 	.word	0x2400360c

0800f5b4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f5b4:	b480      	push	{r7}
 800f5b6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f5b8:	4b05      	ldr	r3, [pc, #20]	; (800f5d0 <tcp_trigger_input_pcb_close+0x1c>)
 800f5ba:	781b      	ldrb	r3, [r3, #0]
 800f5bc:	f043 0310 	orr.w	r3, r3, #16
 800f5c0:	b2da      	uxtb	r2, r3
 800f5c2:	4b03      	ldr	r3, [pc, #12]	; (800f5d0 <tcp_trigger_input_pcb_close+0x1c>)
 800f5c4:	701a      	strb	r2, [r3, #0]
}
 800f5c6:	bf00      	nop
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ce:	4770      	bx	lr
 800f5d0:	2400361d 	.word	0x2400361d

0800f5d4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b084      	sub	sp, #16
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	60f8      	str	r0, [r7, #12]
 800f5dc:	60b9      	str	r1, [r7, #8]
 800f5de:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d00a      	beq.n	800f5fc <tcp_route+0x28>
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	7a1b      	ldrb	r3, [r3, #8]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d006      	beq.n	800f5fc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	7a1b      	ldrb	r3, [r3, #8]
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f7fb f8b6 	bl	800a764 <netif_get_by_index>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	e003      	b.n	800f604 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f003 fafb 	bl	8012bf8 <ip4_route>
 800f602:	4603      	mov	r3, r0
  }
}
 800f604:	4618      	mov	r0, r3
 800f606:	3710      	adds	r7, #16
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}

0800f60c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f60c:	b590      	push	{r4, r7, lr}
 800f60e:	b087      	sub	sp, #28
 800f610:	af00      	add	r7, sp, #0
 800f612:	60f8      	str	r0, [r7, #12]
 800f614:	60b9      	str	r1, [r7, #8]
 800f616:	603b      	str	r3, [r7, #0]
 800f618:	4613      	mov	r3, r2
 800f61a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d105      	bne.n	800f62e <tcp_create_segment+0x22>
 800f622:	4b44      	ldr	r3, [pc, #272]	; (800f734 <tcp_create_segment+0x128>)
 800f624:	22a3      	movs	r2, #163	; 0xa3
 800f626:	4944      	ldr	r1, [pc, #272]	; (800f738 <tcp_create_segment+0x12c>)
 800f628:	4844      	ldr	r0, [pc, #272]	; (800f73c <tcp_create_segment+0x130>)
 800f62a:	f004 fd1b 	bl	8014064 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f62e:	68bb      	ldr	r3, [r7, #8]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d105      	bne.n	800f640 <tcp_create_segment+0x34>
 800f634:	4b3f      	ldr	r3, [pc, #252]	; (800f734 <tcp_create_segment+0x128>)
 800f636:	22a4      	movs	r2, #164	; 0xa4
 800f638:	4941      	ldr	r1, [pc, #260]	; (800f740 <tcp_create_segment+0x134>)
 800f63a:	4840      	ldr	r0, [pc, #256]	; (800f73c <tcp_create_segment+0x130>)
 800f63c:	f004 fd12 	bl	8014064 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f640:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f644:	009b      	lsls	r3, r3, #2
 800f646:	b2db      	uxtb	r3, r3
 800f648:	f003 0304 	and.w	r3, r3, #4
 800f64c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f64e:	2003      	movs	r0, #3
 800f650:	f7fa fd02 	bl	800a058 <memp_malloc>
 800f654:	6138      	str	r0, [r7, #16]
 800f656:	693b      	ldr	r3, [r7, #16]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d104      	bne.n	800f666 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f65c:	68b8      	ldr	r0, [r7, #8]
 800f65e:	f7fb fbdf 	bl	800ae20 <pbuf_free>
    return NULL;
 800f662:	2300      	movs	r3, #0
 800f664:	e061      	b.n	800f72a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f66c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	2200      	movs	r2, #0
 800f672:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	68ba      	ldr	r2, [r7, #8]
 800f678:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	891a      	ldrh	r2, [r3, #8]
 800f67e:	7dfb      	ldrb	r3, [r7, #23]
 800f680:	b29b      	uxth	r3, r3
 800f682:	429a      	cmp	r2, r3
 800f684:	d205      	bcs.n	800f692 <tcp_create_segment+0x86>
 800f686:	4b2b      	ldr	r3, [pc, #172]	; (800f734 <tcp_create_segment+0x128>)
 800f688:	22b0      	movs	r2, #176	; 0xb0
 800f68a:	492e      	ldr	r1, [pc, #184]	; (800f744 <tcp_create_segment+0x138>)
 800f68c:	482b      	ldr	r0, [pc, #172]	; (800f73c <tcp_create_segment+0x130>)
 800f68e:	f004 fce9 	bl	8014064 <iprintf>
  seg->len = p->tot_len - optlen;
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	891a      	ldrh	r2, [r3, #8]
 800f696:	7dfb      	ldrb	r3, [r7, #23]
 800f698:	b29b      	uxth	r3, r3
 800f69a:	1ad3      	subs	r3, r2, r3
 800f69c:	b29a      	uxth	r2, r3
 800f69e:	693b      	ldr	r3, [r7, #16]
 800f6a0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f6a2:	2114      	movs	r1, #20
 800f6a4:	68b8      	ldr	r0, [r7, #8]
 800f6a6:	f7fb fb25 	bl	800acf4 <pbuf_add_header>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d004      	beq.n	800f6ba <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f6b0:	6938      	ldr	r0, [r7, #16]
 800f6b2:	f7fc ffe2 	bl	800c67a <tcp_seg_free>
    return NULL;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	e037      	b.n	800f72a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	685b      	ldr	r3, [r3, #4]
 800f6be:	685a      	ldr	r2, [r3, #4]
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	8ada      	ldrh	r2, [r3, #22]
 800f6c8:	693b      	ldr	r3, [r7, #16]
 800f6ca:	68dc      	ldr	r4, [r3, #12]
 800f6cc:	4610      	mov	r0, r2
 800f6ce:	f7f9 ff6f 	bl	80095b0 <lwip_htons>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	8b1a      	ldrh	r2, [r3, #24]
 800f6da:	693b      	ldr	r3, [r7, #16]
 800f6dc:	68dc      	ldr	r4, [r3, #12]
 800f6de:	4610      	mov	r0, r2
 800f6e0:	f7f9 ff66 	bl	80095b0 <lwip_htons>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	68dc      	ldr	r4, [r3, #12]
 800f6ec:	6838      	ldr	r0, [r7, #0]
 800f6ee:	f7f9 ff74 	bl	80095da <lwip_htonl>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f6f6:	7dfb      	ldrb	r3, [r7, #23]
 800f6f8:	089b      	lsrs	r3, r3, #2
 800f6fa:	b2db      	uxtb	r3, r3
 800f6fc:	b29b      	uxth	r3, r3
 800f6fe:	3305      	adds	r3, #5
 800f700:	b29b      	uxth	r3, r3
 800f702:	031b      	lsls	r3, r3, #12
 800f704:	b29a      	uxth	r2, r3
 800f706:	79fb      	ldrb	r3, [r7, #7]
 800f708:	b29b      	uxth	r3, r3
 800f70a:	4313      	orrs	r3, r2
 800f70c:	b29a      	uxth	r2, r3
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	68dc      	ldr	r4, [r3, #12]
 800f712:	4610      	mov	r0, r2
 800f714:	f7f9 ff4c 	bl	80095b0 <lwip_htons>
 800f718:	4603      	mov	r3, r0
 800f71a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f71c:	693b      	ldr	r3, [r7, #16]
 800f71e:	68db      	ldr	r3, [r3, #12]
 800f720:	2200      	movs	r2, #0
 800f722:	749a      	strb	r2, [r3, #18]
 800f724:	2200      	movs	r2, #0
 800f726:	74da      	strb	r2, [r3, #19]
  return seg;
 800f728:	693b      	ldr	r3, [r7, #16]
}
 800f72a:	4618      	mov	r0, r3
 800f72c:	371c      	adds	r7, #28
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd90      	pop	{r4, r7, pc}
 800f732:	bf00      	nop
 800f734:	08016a34 	.word	0x08016a34
 800f738:	08016a68 	.word	0x08016a68
 800f73c:	08016a88 	.word	0x08016a88
 800f740:	08016ab0 	.word	0x08016ab0
 800f744:	08016ad4 	.word	0x08016ad4

0800f748 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b086      	sub	sp, #24
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	607b      	str	r3, [r7, #4]
 800f750:	4603      	mov	r3, r0
 800f752:	73fb      	strb	r3, [r7, #15]
 800f754:	460b      	mov	r3, r1
 800f756:	81bb      	strh	r3, [r7, #12]
 800f758:	4613      	mov	r3, r2
 800f75a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800f75c:	89bb      	ldrh	r3, [r7, #12]
 800f75e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d105      	bne.n	800f772 <tcp_pbuf_prealloc+0x2a>
 800f766:	4b30      	ldr	r3, [pc, #192]	; (800f828 <tcp_pbuf_prealloc+0xe0>)
 800f768:	22e8      	movs	r2, #232	; 0xe8
 800f76a:	4930      	ldr	r1, [pc, #192]	; (800f82c <tcp_pbuf_prealloc+0xe4>)
 800f76c:	4830      	ldr	r0, [pc, #192]	; (800f830 <tcp_pbuf_prealloc+0xe8>)
 800f76e:	f004 fc79 	bl	8014064 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800f772:	6a3b      	ldr	r3, [r7, #32]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d105      	bne.n	800f784 <tcp_pbuf_prealloc+0x3c>
 800f778:	4b2b      	ldr	r3, [pc, #172]	; (800f828 <tcp_pbuf_prealloc+0xe0>)
 800f77a:	22e9      	movs	r2, #233	; 0xe9
 800f77c:	492d      	ldr	r1, [pc, #180]	; (800f834 <tcp_pbuf_prealloc+0xec>)
 800f77e:	482c      	ldr	r0, [pc, #176]	; (800f830 <tcp_pbuf_prealloc+0xe8>)
 800f780:	f004 fc70 	bl	8014064 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800f784:	89ba      	ldrh	r2, [r7, #12]
 800f786:	897b      	ldrh	r3, [r7, #10]
 800f788:	429a      	cmp	r2, r3
 800f78a:	d221      	bcs.n	800f7d0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800f78c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f790:	f003 0302 	and.w	r3, r3, #2
 800f794:	2b00      	cmp	r3, #0
 800f796:	d111      	bne.n	800f7bc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800f798:	6a3b      	ldr	r3, [r7, #32]
 800f79a:	8b5b      	ldrh	r3, [r3, #26]
 800f79c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d115      	bne.n	800f7d0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800f7a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d007      	beq.n	800f7bc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800f7ac:	6a3b      	ldr	r3, [r7, #32]
 800f7ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d103      	bne.n	800f7bc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800f7b4:	6a3b      	ldr	r3, [r7, #32]
 800f7b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d009      	beq.n	800f7d0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800f7bc:	89bb      	ldrh	r3, [r7, #12]
 800f7be:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800f7c2:	f023 0203 	bic.w	r2, r3, #3
 800f7c6:	897b      	ldrh	r3, [r7, #10]
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	bf28      	it	cs
 800f7cc:	4613      	movcs	r3, r2
 800f7ce:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800f7d0:	8af9      	ldrh	r1, [r7, #22]
 800f7d2:	7bfb      	ldrb	r3, [r7, #15]
 800f7d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f7fb f83f 	bl	800a85c <pbuf_alloc>
 800f7de:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f7e0:	693b      	ldr	r3, [r7, #16]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d101      	bne.n	800f7ea <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	e019      	b.n	800f81e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800f7ea:	693b      	ldr	r3, [r7, #16]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d006      	beq.n	800f800 <tcp_pbuf_prealloc+0xb8>
 800f7f2:	4b0d      	ldr	r3, [pc, #52]	; (800f828 <tcp_pbuf_prealloc+0xe0>)
 800f7f4:	f240 120b 	movw	r2, #267	; 0x10b
 800f7f8:	490f      	ldr	r1, [pc, #60]	; (800f838 <tcp_pbuf_prealloc+0xf0>)
 800f7fa:	480d      	ldr	r0, [pc, #52]	; (800f830 <tcp_pbuf_prealloc+0xe8>)
 800f7fc:	f004 fc32 	bl	8014064 <iprintf>
  *oversize = p->len - length;
 800f800:	693b      	ldr	r3, [r7, #16]
 800f802:	895a      	ldrh	r2, [r3, #10]
 800f804:	89bb      	ldrh	r3, [r7, #12]
 800f806:	1ad3      	subs	r3, r2, r3
 800f808:	b29a      	uxth	r2, r3
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	89ba      	ldrh	r2, [r7, #12]
 800f812:	811a      	strh	r2, [r3, #8]
 800f814:	693b      	ldr	r3, [r7, #16]
 800f816:	891a      	ldrh	r2, [r3, #8]
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	815a      	strh	r2, [r3, #10]
  return p;
 800f81c:	693b      	ldr	r3, [r7, #16]
}
 800f81e:	4618      	mov	r0, r3
 800f820:	3718      	adds	r7, #24
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}
 800f826:	bf00      	nop
 800f828:	08016a34 	.word	0x08016a34
 800f82c:	08016aec 	.word	0x08016aec
 800f830:	08016a88 	.word	0x08016a88
 800f834:	08016b10 	.word	0x08016b10
 800f838:	08016b30 	.word	0x08016b30

0800f83c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b082      	sub	sp, #8
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
 800f844:	460b      	mov	r3, r1
 800f846:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d106      	bne.n	800f85c <tcp_write_checks+0x20>
 800f84e:	4b33      	ldr	r3, [pc, #204]	; (800f91c <tcp_write_checks+0xe0>)
 800f850:	f240 1233 	movw	r2, #307	; 0x133
 800f854:	4932      	ldr	r1, [pc, #200]	; (800f920 <tcp_write_checks+0xe4>)
 800f856:	4833      	ldr	r0, [pc, #204]	; (800f924 <tcp_write_checks+0xe8>)
 800f858:	f004 fc04 	bl	8014064 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	7d1b      	ldrb	r3, [r3, #20]
 800f860:	2b04      	cmp	r3, #4
 800f862:	d00e      	beq.n	800f882 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800f868:	2b07      	cmp	r3, #7
 800f86a:	d00a      	beq.n	800f882 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800f870:	2b02      	cmp	r3, #2
 800f872:	d006      	beq.n	800f882 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800f878:	2b03      	cmp	r3, #3
 800f87a:	d002      	beq.n	800f882 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800f87c:	f06f 030a 	mvn.w	r3, #10
 800f880:	e048      	b.n	800f914 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800f882:	887b      	ldrh	r3, [r7, #2]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d101      	bne.n	800f88c <tcp_write_checks+0x50>
    return ERR_OK;
 800f888:	2300      	movs	r3, #0
 800f88a:	e043      	b.n	800f914 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f892:	887a      	ldrh	r2, [r7, #2]
 800f894:	429a      	cmp	r2, r3
 800f896:	d909      	bls.n	800f8ac <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	8b5b      	ldrh	r3, [r3, #26]
 800f89c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8a0:	b29a      	uxth	r2, r3
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800f8a6:	f04f 33ff 	mov.w	r3, #4294967295
 800f8aa:	e033      	b.n	800f914 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f8b2:	2b08      	cmp	r3, #8
 800f8b4:	d909      	bls.n	800f8ca <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	8b5b      	ldrh	r3, [r3, #26]
 800f8ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8be:	b29a      	uxth	r2, r3
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800f8c4:	f04f 33ff 	mov.w	r3, #4294967295
 800f8c8:	e024      	b.n	800f914 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d00f      	beq.n	800f8f4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d11a      	bne.n	800f912 <tcp_write_checks+0xd6>
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d116      	bne.n	800f912 <tcp_write_checks+0xd6>
 800f8e4:	4b0d      	ldr	r3, [pc, #52]	; (800f91c <tcp_write_checks+0xe0>)
 800f8e6:	f240 1255 	movw	r2, #341	; 0x155
 800f8ea:	490f      	ldr	r1, [pc, #60]	; (800f928 <tcp_write_checks+0xec>)
 800f8ec:	480d      	ldr	r0, [pc, #52]	; (800f924 <tcp_write_checks+0xe8>)
 800f8ee:	f004 fbb9 	bl	8014064 <iprintf>
 800f8f2:	e00e      	b.n	800f912 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d103      	bne.n	800f904 <tcp_write_checks+0xc8>
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f900:	2b00      	cmp	r3, #0
 800f902:	d006      	beq.n	800f912 <tcp_write_checks+0xd6>
 800f904:	4b05      	ldr	r3, [pc, #20]	; (800f91c <tcp_write_checks+0xe0>)
 800f906:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800f90a:	4908      	ldr	r1, [pc, #32]	; (800f92c <tcp_write_checks+0xf0>)
 800f90c:	4805      	ldr	r0, [pc, #20]	; (800f924 <tcp_write_checks+0xe8>)
 800f90e:	f004 fba9 	bl	8014064 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800f912:	2300      	movs	r3, #0
}
 800f914:	4618      	mov	r0, r3
 800f916:	3708      	adds	r7, #8
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}
 800f91c:	08016a34 	.word	0x08016a34
 800f920:	08016b44 	.word	0x08016b44
 800f924:	08016a88 	.word	0x08016a88
 800f928:	08016b64 	.word	0x08016b64
 800f92c:	08016ba0 	.word	0x08016ba0

0800f930 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800f930:	b590      	push	{r4, r7, lr}
 800f932:	b09b      	sub	sp, #108	; 0x6c
 800f934:	af04      	add	r7, sp, #16
 800f936:	60f8      	str	r0, [r7, #12]
 800f938:	60b9      	str	r1, [r7, #8]
 800f93a:	4611      	mov	r1, r2
 800f93c:	461a      	mov	r2, r3
 800f93e:	460b      	mov	r3, r1
 800f940:	80fb      	strh	r3, [r7, #6]
 800f942:	4613      	mov	r3, r2
 800f944:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800f946:	2300      	movs	r3, #0
 800f948:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800f94a:	2300      	movs	r3, #0
 800f94c:	653b      	str	r3, [r7, #80]	; 0x50
 800f94e:	2300      	movs	r3, #0
 800f950:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f952:	2300      	movs	r3, #0
 800f954:	64bb      	str	r3, [r7, #72]	; 0x48
 800f956:	2300      	movs	r3, #0
 800f958:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800f95a:	2300      	movs	r3, #0
 800f95c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800f960:	2300      	movs	r3, #0
 800f962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800f966:	2300      	movs	r3, #0
 800f968:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800f96a:	2300      	movs	r3, #0
 800f96c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800f96e:	2300      	movs	r3, #0
 800f970:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d109      	bne.n	800f98c <tcp_write+0x5c>
 800f978:	4ba4      	ldr	r3, [pc, #656]	; (800fc0c <tcp_write+0x2dc>)
 800f97a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800f97e:	49a4      	ldr	r1, [pc, #656]	; (800fc10 <tcp_write+0x2e0>)
 800f980:	48a4      	ldr	r0, [pc, #656]	; (800fc14 <tcp_write+0x2e4>)
 800f982:	f004 fb6f 	bl	8014064 <iprintf>
 800f986:	f06f 030f 	mvn.w	r3, #15
 800f98a:	e32a      	b.n	800ffe2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f992:	085b      	lsrs	r3, r3, #1
 800f994:	b29a      	uxth	r2, r3
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f99a:	4293      	cmp	r3, r2
 800f99c:	bf28      	it	cs
 800f99e:	4613      	movcs	r3, r2
 800f9a0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800f9a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d102      	bne.n	800f9ae <tcp_write+0x7e>
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f9ac:	e000      	b.n	800f9b0 <tcp_write+0x80>
 800f9ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d109      	bne.n	800f9cc <tcp_write+0x9c>
 800f9b8:	4b94      	ldr	r3, [pc, #592]	; (800fc0c <tcp_write+0x2dc>)
 800f9ba:	f240 12ad 	movw	r2, #429	; 0x1ad
 800f9be:	4996      	ldr	r1, [pc, #600]	; (800fc18 <tcp_write+0x2e8>)
 800f9c0:	4894      	ldr	r0, [pc, #592]	; (800fc14 <tcp_write+0x2e4>)
 800f9c2:	f004 fb4f 	bl	8014064 <iprintf>
 800f9c6:	f06f 030f 	mvn.w	r3, #15
 800f9ca:	e30a      	b.n	800ffe2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800f9cc:	88fb      	ldrh	r3, [r7, #6]
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	68f8      	ldr	r0, [r7, #12]
 800f9d2:	f7ff ff33 	bl	800f83c <tcp_write_checks>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800f9dc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d002      	beq.n	800f9ea <tcp_write+0xba>
    return err;
 800f9e4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f9e8:	e2fb      	b.n	800ffe2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f9f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	f000 80f6 	beq.w	800fbf0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa08:	653b      	str	r3, [r7, #80]	; 0x50
 800fa0a:	e002      	b.n	800fa12 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800fa0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fa12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d1f8      	bne.n	800fa0c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800fa1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa1c:	7a9b      	ldrb	r3, [r3, #10]
 800fa1e:	009b      	lsls	r3, r3, #2
 800fa20:	b29b      	uxth	r3, r3
 800fa22:	f003 0304 	and.w	r3, r3, #4
 800fa26:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800fa28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fa2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa2c:	891b      	ldrh	r3, [r3, #8]
 800fa2e:	4619      	mov	r1, r3
 800fa30:	8c3b      	ldrh	r3, [r7, #32]
 800fa32:	440b      	add	r3, r1
 800fa34:	429a      	cmp	r2, r3
 800fa36:	da06      	bge.n	800fa46 <tcp_write+0x116>
 800fa38:	4b74      	ldr	r3, [pc, #464]	; (800fc0c <tcp_write+0x2dc>)
 800fa3a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fa3e:	4977      	ldr	r1, [pc, #476]	; (800fc1c <tcp_write+0x2ec>)
 800fa40:	4874      	ldr	r0, [pc, #464]	; (800fc14 <tcp_write+0x2e4>)
 800fa42:	f004 fb0f 	bl	8014064 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800fa46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa48:	891a      	ldrh	r2, [r3, #8]
 800fa4a:	8c3b      	ldrh	r3, [r7, #32]
 800fa4c:	4413      	add	r3, r2
 800fa4e:	b29b      	uxth	r3, r3
 800fa50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fa52:	1ad3      	subs	r3, r2, r3
 800fa54:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fa5c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800fa5e:	8a7b      	ldrh	r3, [r7, #18]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d026      	beq.n	800fab2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800fa64:	8a7b      	ldrh	r3, [r7, #18]
 800fa66:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	d206      	bcs.n	800fa7a <tcp_write+0x14a>
 800fa6c:	4b67      	ldr	r3, [pc, #412]	; (800fc0c <tcp_write+0x2dc>)
 800fa6e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800fa72:	496b      	ldr	r1, [pc, #428]	; (800fc20 <tcp_write+0x2f0>)
 800fa74:	4867      	ldr	r0, [pc, #412]	; (800fc14 <tcp_write+0x2e4>)
 800fa76:	f004 faf5 	bl	8014064 <iprintf>
      seg = last_unsent;
 800fa7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa7c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800fa7e:	8a7b      	ldrh	r3, [r7, #18]
 800fa80:	88fa      	ldrh	r2, [r7, #6]
 800fa82:	4293      	cmp	r3, r2
 800fa84:	bf28      	it	cs
 800fa86:	4613      	movcs	r3, r2
 800fa88:	b29b      	uxth	r3, r3
 800fa8a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	bf28      	it	cs
 800fa90:	4613      	movcs	r3, r2
 800fa92:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800fa94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fa98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fa9a:	4413      	add	r3, r2
 800fa9c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800faa0:	8a7a      	ldrh	r2, [r7, #18]
 800faa2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800faa4:	1ad3      	subs	r3, r2, r3
 800faa6:	b29b      	uxth	r3, r3
 800faa8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800faaa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800faac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800faae:	1ad3      	subs	r3, r2, r3
 800fab0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800fab2:	8a7b      	ldrh	r3, [r7, #18]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d00b      	beq.n	800fad0 <tcp_write+0x1a0>
 800fab8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fabc:	88fb      	ldrh	r3, [r7, #6]
 800fabe:	429a      	cmp	r2, r3
 800fac0:	d006      	beq.n	800fad0 <tcp_write+0x1a0>
 800fac2:	4b52      	ldr	r3, [pc, #328]	; (800fc0c <tcp_write+0x2dc>)
 800fac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fac8:	4956      	ldr	r1, [pc, #344]	; (800fc24 <tcp_write+0x2f4>)
 800faca:	4852      	ldr	r0, [pc, #328]	; (800fc14 <tcp_write+0x2e4>)
 800facc:	f004 faca 	bl	8014064 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800fad0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fad4:	88fb      	ldrh	r3, [r7, #6]
 800fad6:	429a      	cmp	r2, r3
 800fad8:	f080 8167 	bcs.w	800fdaa <tcp_write+0x47a>
 800fadc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fade:	2b00      	cmp	r3, #0
 800fae0:	f000 8163 	beq.w	800fdaa <tcp_write+0x47a>
 800fae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fae6:	891b      	ldrh	r3, [r3, #8]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	f000 815e 	beq.w	800fdaa <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800faee:	88fa      	ldrh	r2, [r7, #6]
 800faf0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800faf4:	1ad2      	subs	r2, r2, r3
 800faf6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800faf8:	4293      	cmp	r3, r2
 800fafa:	bfa8      	it	ge
 800fafc:	4613      	movge	r3, r2
 800fafe:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800fb00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb02:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800fb04:	797b      	ldrb	r3, [r7, #5]
 800fb06:	f003 0301 	and.w	r3, r3, #1
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d027      	beq.n	800fb5e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800fb0e:	f107 0012 	add.w	r0, r7, #18
 800fb12:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fb14:	8bf9      	ldrh	r1, [r7, #30]
 800fb16:	2301      	movs	r3, #1
 800fb18:	9302      	str	r3, [sp, #8]
 800fb1a:	797b      	ldrb	r3, [r7, #5]
 800fb1c:	9301      	str	r3, [sp, #4]
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	9300      	str	r3, [sp, #0]
 800fb22:	4603      	mov	r3, r0
 800fb24:	2000      	movs	r0, #0
 800fb26:	f7ff fe0f 	bl	800f748 <tcp_pbuf_prealloc>
 800fb2a:	6578      	str	r0, [r7, #84]	; 0x54
 800fb2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	f000 8225 	beq.w	800ff7e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800fb34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb36:	6858      	ldr	r0, [r3, #4]
 800fb38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fb3c:	68ba      	ldr	r2, [r7, #8]
 800fb3e:	4413      	add	r3, r2
 800fb40:	8bfa      	ldrh	r2, [r7, #30]
 800fb42:	4619      	mov	r1, r3
 800fb44:	f004 fa78 	bl	8014038 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800fb48:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fb4a:	f7fb f9f1 	bl	800af30 <pbuf_clen>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	461a      	mov	r2, r3
 800fb52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fb56:	4413      	add	r3, r2
 800fb58:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800fb5c:	e041      	b.n	800fbe2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800fb5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb60:	685b      	ldr	r3, [r3, #4]
 800fb62:	637b      	str	r3, [r7, #52]	; 0x34
 800fb64:	e002      	b.n	800fb6c <tcp_write+0x23c>
 800fb66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	637b      	str	r3, [r7, #52]	; 0x34
 800fb6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d1f8      	bne.n	800fb66 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800fb74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb76:	7b1b      	ldrb	r3, [r3, #12]
 800fb78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d115      	bne.n	800fbac <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800fb80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb82:	685b      	ldr	r3, [r3, #4]
 800fb84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb86:	8952      	ldrh	r2, [r2, #10]
 800fb88:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800fb8a:	68ba      	ldr	r2, [r7, #8]
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	d10d      	bne.n	800fbac <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800fb90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d006      	beq.n	800fba6 <tcp_write+0x276>
 800fb98:	4b1c      	ldr	r3, [pc, #112]	; (800fc0c <tcp_write+0x2dc>)
 800fb9a:	f240 2231 	movw	r2, #561	; 0x231
 800fb9e:	4922      	ldr	r1, [pc, #136]	; (800fc28 <tcp_write+0x2f8>)
 800fba0:	481c      	ldr	r0, [pc, #112]	; (800fc14 <tcp_write+0x2e4>)
 800fba2:	f004 fa5f 	bl	8014064 <iprintf>
          extendlen = seglen;
 800fba6:	8bfb      	ldrh	r3, [r7, #30]
 800fba8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800fbaa:	e01a      	b.n	800fbe2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800fbac:	8bfb      	ldrh	r3, [r7, #30]
 800fbae:	2201      	movs	r2, #1
 800fbb0:	4619      	mov	r1, r3
 800fbb2:	2000      	movs	r0, #0
 800fbb4:	f7fa fe52 	bl	800a85c <pbuf_alloc>
 800fbb8:	6578      	str	r0, [r7, #84]	; 0x54
 800fbba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	f000 81e0 	beq.w	800ff82 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800fbc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fbc6:	68ba      	ldr	r2, [r7, #8]
 800fbc8:	441a      	add	r2, r3
 800fbca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbcc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800fbce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fbd0:	f7fb f9ae 	bl	800af30 <pbuf_clen>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	461a      	mov	r2, r3
 800fbd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fbdc:	4413      	add	r3, r2
 800fbde:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800fbe2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fbe6:	8bfb      	ldrh	r3, [r7, #30]
 800fbe8:	4413      	add	r3, r2
 800fbea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800fbee:	e0dc      	b.n	800fdaa <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	f000 80d7 	beq.w	800fdaa <tcp_write+0x47a>
 800fbfc:	4b03      	ldr	r3, [pc, #12]	; (800fc0c <tcp_write+0x2dc>)
 800fbfe:	f240 224a 	movw	r2, #586	; 0x24a
 800fc02:	490a      	ldr	r1, [pc, #40]	; (800fc2c <tcp_write+0x2fc>)
 800fc04:	4803      	ldr	r0, [pc, #12]	; (800fc14 <tcp_write+0x2e4>)
 800fc06:	f004 fa2d 	bl	8014064 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800fc0a:	e0ce      	b.n	800fdaa <tcp_write+0x47a>
 800fc0c:	08016a34 	.word	0x08016a34
 800fc10:	08016bd4 	.word	0x08016bd4
 800fc14:	08016a88 	.word	0x08016a88
 800fc18:	08016bec 	.word	0x08016bec
 800fc1c:	08016c20 	.word	0x08016c20
 800fc20:	08016c38 	.word	0x08016c38
 800fc24:	08016c58 	.word	0x08016c58
 800fc28:	08016c78 	.word	0x08016c78
 800fc2c:	08016ca4 	.word	0x08016ca4
    struct pbuf *p;
    u16_t left = len - pos;
 800fc30:	88fa      	ldrh	r2, [r7, #6]
 800fc32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fc36:	1ad3      	subs	r3, r2, r3
 800fc38:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800fc3a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fc3e:	b29b      	uxth	r3, r3
 800fc40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fc42:	1ad3      	subs	r3, r2, r3
 800fc44:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800fc46:	8b7a      	ldrh	r2, [r7, #26]
 800fc48:	8bbb      	ldrh	r3, [r7, #28]
 800fc4a:	4293      	cmp	r3, r2
 800fc4c:	bf28      	it	cs
 800fc4e:	4613      	movcs	r3, r2
 800fc50:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800fc52:	797b      	ldrb	r3, [r7, #5]
 800fc54:	f003 0301 	and.w	r3, r3, #1
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d036      	beq.n	800fcca <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800fc5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fc60:	b29a      	uxth	r2, r3
 800fc62:	8b3b      	ldrh	r3, [r7, #24]
 800fc64:	4413      	add	r3, r2
 800fc66:	b299      	uxth	r1, r3
 800fc68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	bf0c      	ite	eq
 800fc6e:	2301      	moveq	r3, #1
 800fc70:	2300      	movne	r3, #0
 800fc72:	b2db      	uxtb	r3, r3
 800fc74:	f107 0012 	add.w	r0, r7, #18
 800fc78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fc7a:	9302      	str	r3, [sp, #8]
 800fc7c:	797b      	ldrb	r3, [r7, #5]
 800fc7e:	9301      	str	r3, [sp, #4]
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	9300      	str	r3, [sp, #0]
 800fc84:	4603      	mov	r3, r0
 800fc86:	2036      	movs	r0, #54	; 0x36
 800fc88:	f7ff fd5e 	bl	800f748 <tcp_pbuf_prealloc>
 800fc8c:	6338      	str	r0, [r7, #48]	; 0x30
 800fc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	f000 8178 	beq.w	800ff86 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800fc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc98:	895b      	ldrh	r3, [r3, #10]
 800fc9a:	8b3a      	ldrh	r2, [r7, #24]
 800fc9c:	429a      	cmp	r2, r3
 800fc9e:	d906      	bls.n	800fcae <tcp_write+0x37e>
 800fca0:	4b8c      	ldr	r3, [pc, #560]	; (800fed4 <tcp_write+0x5a4>)
 800fca2:	f240 2266 	movw	r2, #614	; 0x266
 800fca6:	498c      	ldr	r1, [pc, #560]	; (800fed8 <tcp_write+0x5a8>)
 800fca8:	488c      	ldr	r0, [pc, #560]	; (800fedc <tcp_write+0x5ac>)
 800fcaa:	f004 f9db 	bl	8014064 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800fcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb0:	685a      	ldr	r2, [r3, #4]
 800fcb2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fcb6:	18d0      	adds	r0, r2, r3
 800fcb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fcbc:	68ba      	ldr	r2, [r7, #8]
 800fcbe:	4413      	add	r3, r2
 800fcc0:	8b3a      	ldrh	r2, [r7, #24]
 800fcc2:	4619      	mov	r1, r3
 800fcc4:	f004 f9b8 	bl	8014038 <memcpy>
 800fcc8:	e02f      	b.n	800fd2a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800fcca:	8a7b      	ldrh	r3, [r7, #18]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d006      	beq.n	800fcde <tcp_write+0x3ae>
 800fcd0:	4b80      	ldr	r3, [pc, #512]	; (800fed4 <tcp_write+0x5a4>)
 800fcd2:	f240 2271 	movw	r2, #625	; 0x271
 800fcd6:	4982      	ldr	r1, [pc, #520]	; (800fee0 <tcp_write+0x5b0>)
 800fcd8:	4880      	ldr	r0, [pc, #512]	; (800fedc <tcp_write+0x5ac>)
 800fcda:	f004 f9c3 	bl	8014064 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800fcde:	8b3b      	ldrh	r3, [r7, #24]
 800fce0:	2201      	movs	r2, #1
 800fce2:	4619      	mov	r1, r3
 800fce4:	2036      	movs	r0, #54	; 0x36
 800fce6:	f7fa fdb9 	bl	800a85c <pbuf_alloc>
 800fcea:	6178      	str	r0, [r7, #20]
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	f000 814b 	beq.w	800ff8a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800fcf4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fcf8:	68ba      	ldr	r2, [r7, #8]
 800fcfa:	441a      	add	r2, r3
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800fd00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fd04:	b29b      	uxth	r3, r3
 800fd06:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fd0a:	4619      	mov	r1, r3
 800fd0c:	2036      	movs	r0, #54	; 0x36
 800fd0e:	f7fa fda5 	bl	800a85c <pbuf_alloc>
 800fd12:	6338      	str	r0, [r7, #48]	; 0x30
 800fd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d103      	bne.n	800fd22 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800fd1a:	6978      	ldr	r0, [r7, #20]
 800fd1c:	f7fb f880 	bl	800ae20 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800fd20:	e136      	b.n	800ff90 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800fd22:	6979      	ldr	r1, [r7, #20]
 800fd24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd26:	f7fb f93d 	bl	800afa4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800fd2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd2c:	f7fb f900 	bl	800af30 <pbuf_clen>
 800fd30:	4603      	mov	r3, r0
 800fd32:	461a      	mov	r2, r3
 800fd34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fd38:	4413      	add	r3, r2
 800fd3a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800fd3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fd42:	2b09      	cmp	r3, #9
 800fd44:	d903      	bls.n	800fd4e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800fd46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd48:	f7fb f86a 	bl	800ae20 <pbuf_free>
      goto memerr;
 800fd4c:	e120      	b.n	800ff90 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fd52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fd56:	441a      	add	r2, r3
 800fd58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd5c:	9300      	str	r3, [sp, #0]
 800fd5e:	4613      	mov	r3, r2
 800fd60:	2200      	movs	r2, #0
 800fd62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fd64:	68f8      	ldr	r0, [r7, #12]
 800fd66:	f7ff fc51 	bl	800f60c <tcp_create_segment>
 800fd6a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fd6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	f000 810d 	beq.w	800ff8e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800fd74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d102      	bne.n	800fd80 <tcp_write+0x450>
      queue = seg;
 800fd7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd7c:	647b      	str	r3, [r7, #68]	; 0x44
 800fd7e:	e00c      	b.n	800fd9a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800fd80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d106      	bne.n	800fd94 <tcp_write+0x464>
 800fd86:	4b53      	ldr	r3, [pc, #332]	; (800fed4 <tcp_write+0x5a4>)
 800fd88:	f240 22ab 	movw	r2, #683	; 0x2ab
 800fd8c:	4955      	ldr	r1, [pc, #340]	; (800fee4 <tcp_write+0x5b4>)
 800fd8e:	4853      	ldr	r0, [pc, #332]	; (800fedc <tcp_write+0x5ac>)
 800fd90:	f004 f968 	bl	8014064 <iprintf>
      prev_seg->next = seg;
 800fd94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fd98:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800fd9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd9c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800fd9e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fda2:	8b3b      	ldrh	r3, [r7, #24]
 800fda4:	4413      	add	r3, r2
 800fda6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800fdaa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fdae:	88fb      	ldrh	r3, [r7, #6]
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	f4ff af3d 	bcc.w	800fc30 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800fdb6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d02c      	beq.n	800fe16 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800fdbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdbe:	685b      	ldr	r3, [r3, #4]
 800fdc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fdc2:	e01e      	b.n	800fe02 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800fdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdc6:	891a      	ldrh	r2, [r3, #8]
 800fdc8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fdca:	4413      	add	r3, r2
 800fdcc:	b29a      	uxth	r2, r3
 800fdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800fdd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d110      	bne.n	800fdfc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800fdda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fddc:	685b      	ldr	r3, [r3, #4]
 800fdde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fde0:	8952      	ldrh	r2, [r2, #10]
 800fde2:	4413      	add	r3, r2
 800fde4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fde6:	68b9      	ldr	r1, [r7, #8]
 800fde8:	4618      	mov	r0, r3
 800fdea:	f004 f925 	bl	8014038 <memcpy>
        p->len += oversize_used;
 800fdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf0:	895a      	ldrh	r2, [r3, #10]
 800fdf2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fdf4:	4413      	add	r3, r2
 800fdf6:	b29a      	uxth	r2, r3
 800fdf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdfa:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800fdfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d1dd      	bne.n	800fdc4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800fe08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe0a:	891a      	ldrh	r2, [r3, #8]
 800fe0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fe0e:	4413      	add	r3, r2
 800fe10:	b29a      	uxth	r2, r3
 800fe12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe14:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800fe16:	8a7a      	ldrh	r2, [r7, #18]
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800fe1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d018      	beq.n	800fe56 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800fe24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d106      	bne.n	800fe38 <tcp_write+0x508>
 800fe2a:	4b2a      	ldr	r3, [pc, #168]	; (800fed4 <tcp_write+0x5a4>)
 800fe2c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800fe30:	492d      	ldr	r1, [pc, #180]	; (800fee8 <tcp_write+0x5b8>)
 800fe32:	482a      	ldr	r0, [pc, #168]	; (800fedc <tcp_write+0x5ac>)
 800fe34:	f004 f916 	bl	8014064 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800fe38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe3a:	685b      	ldr	r3, [r3, #4]
 800fe3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f7fb f8b0 	bl	800afa4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800fe44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe46:	891a      	ldrh	r2, [r3, #8]
 800fe48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe4a:	891b      	ldrh	r3, [r3, #8]
 800fe4c:	4413      	add	r3, r2
 800fe4e:	b29a      	uxth	r2, r3
 800fe50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe52:	811a      	strh	r2, [r3, #8]
 800fe54:	e037      	b.n	800fec6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800fe56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d034      	beq.n	800fec6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800fe5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d003      	beq.n	800fe6a <tcp_write+0x53a>
 800fe62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe64:	685b      	ldr	r3, [r3, #4]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d106      	bne.n	800fe78 <tcp_write+0x548>
 800fe6a:	4b1a      	ldr	r3, [pc, #104]	; (800fed4 <tcp_write+0x5a4>)
 800fe6c:	f240 22e6 	movw	r2, #742	; 0x2e6
 800fe70:	491e      	ldr	r1, [pc, #120]	; (800feec <tcp_write+0x5bc>)
 800fe72:	481a      	ldr	r0, [pc, #104]	; (800fedc <tcp_write+0x5ac>)
 800fe74:	f004 f8f6 	bl	8014064 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800fe78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe7a:	685b      	ldr	r3, [r3, #4]
 800fe7c:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe7e:	e009      	b.n	800fe94 <tcp_write+0x564>
      p->tot_len += extendlen;
 800fe80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe82:	891a      	ldrh	r2, [r3, #8]
 800fe84:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fe86:	4413      	add	r3, r2
 800fe88:	b29a      	uxth	r2, r3
 800fe8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe8c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800fe8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d1f1      	bne.n	800fe80 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800fe9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe9e:	891a      	ldrh	r2, [r3, #8]
 800fea0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fea2:	4413      	add	r3, r2
 800fea4:	b29a      	uxth	r2, r3
 800fea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fea8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800feaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feac:	895a      	ldrh	r2, [r3, #10]
 800feae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800feb0:	4413      	add	r3, r2
 800feb2:	b29a      	uxth	r2, r3
 800feb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800feb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800feba:	891a      	ldrh	r2, [r3, #8]
 800febc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800febe:	4413      	add	r3, r2
 800fec0:	b29a      	uxth	r2, r3
 800fec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fec4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800fec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d111      	bne.n	800fef0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fed0:	66da      	str	r2, [r3, #108]	; 0x6c
 800fed2:	e010      	b.n	800fef6 <tcp_write+0x5c6>
 800fed4:	08016a34 	.word	0x08016a34
 800fed8:	08016cd4 	.word	0x08016cd4
 800fedc:	08016a88 	.word	0x08016a88
 800fee0:	08016d14 	.word	0x08016d14
 800fee4:	08016d24 	.word	0x08016d24
 800fee8:	08016d38 	.word	0x08016d38
 800feec:	08016d70 	.word	0x08016d70
  } else {
    last_unsent->next = queue;
 800fef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fef2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fef4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fefa:	88fb      	ldrh	r3, [r7, #6]
 800fefc:	441a      	add	r2, r3
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ff08:	88fb      	ldrh	r3, [r7, #6]
 800ff0a:	1ad3      	subs	r3, r2, r3
 800ff0c:	b29a      	uxth	r2, r3
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ff1a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d00e      	beq.n	800ff46 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d10a      	bne.n	800ff46 <tcp_write+0x616>
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d106      	bne.n	800ff46 <tcp_write+0x616>
 800ff38:	4b2c      	ldr	r3, [pc, #176]	; (800ffec <tcp_write+0x6bc>)
 800ff3a:	f240 3212 	movw	r2, #786	; 0x312
 800ff3e:	492c      	ldr	r1, [pc, #176]	; (800fff0 <tcp_write+0x6c0>)
 800ff40:	482c      	ldr	r0, [pc, #176]	; (800fff4 <tcp_write+0x6c4>)
 800ff42:	f004 f88f 	bl	8014064 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800ff46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d016      	beq.n	800ff7a <tcp_write+0x64a>
 800ff4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff4e:	68db      	ldr	r3, [r3, #12]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d012      	beq.n	800ff7a <tcp_write+0x64a>
 800ff54:	797b      	ldrb	r3, [r7, #5]
 800ff56:	f003 0302 	and.w	r3, r3, #2
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d10d      	bne.n	800ff7a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800ff5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff60:	68db      	ldr	r3, [r3, #12]
 800ff62:	899b      	ldrh	r3, [r3, #12]
 800ff64:	b29c      	uxth	r4, r3
 800ff66:	2008      	movs	r0, #8
 800ff68:	f7f9 fb22 	bl	80095b0 <lwip_htons>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	461a      	mov	r2, r3
 800ff70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff72:	68db      	ldr	r3, [r3, #12]
 800ff74:	4322      	orrs	r2, r4
 800ff76:	b292      	uxth	r2, r2
 800ff78:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	e031      	b.n	800ffe2 <tcp_write+0x6b2>
          goto memerr;
 800ff7e:	bf00      	nop
 800ff80:	e006      	b.n	800ff90 <tcp_write+0x660>
            goto memerr;
 800ff82:	bf00      	nop
 800ff84:	e004      	b.n	800ff90 <tcp_write+0x660>
        goto memerr;
 800ff86:	bf00      	nop
 800ff88:	e002      	b.n	800ff90 <tcp_write+0x660>
        goto memerr;
 800ff8a:	bf00      	nop
 800ff8c:	e000      	b.n	800ff90 <tcp_write+0x660>
      goto memerr;
 800ff8e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	8b5b      	ldrh	r3, [r3, #26]
 800ff94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff98:	b29a      	uxth	r2, r3
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800ff9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d002      	beq.n	800ffaa <tcp_write+0x67a>
    pbuf_free(concat_p);
 800ffa4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ffa6:	f7fa ff3b 	bl	800ae20 <pbuf_free>
  }
  if (queue != NULL) {
 800ffaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d002      	beq.n	800ffb6 <tcp_write+0x686>
    tcp_segs_free(queue);
 800ffb0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ffb2:	f7fc fb4d 	bl	800c650 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d00e      	beq.n	800ffde <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d10a      	bne.n	800ffde <tcp_write+0x6ae>
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d106      	bne.n	800ffde <tcp_write+0x6ae>
 800ffd0:	4b06      	ldr	r3, [pc, #24]	; (800ffec <tcp_write+0x6bc>)
 800ffd2:	f240 3227 	movw	r2, #807	; 0x327
 800ffd6:	4906      	ldr	r1, [pc, #24]	; (800fff0 <tcp_write+0x6c0>)
 800ffd8:	4806      	ldr	r0, [pc, #24]	; (800fff4 <tcp_write+0x6c4>)
 800ffda:	f004 f843 	bl	8014064 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800ffde:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	375c      	adds	r7, #92	; 0x5c
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd90      	pop	{r4, r7, pc}
 800ffea:	bf00      	nop
 800ffec:	08016a34 	.word	0x08016a34
 800fff0:	08016da8 	.word	0x08016da8
 800fff4:	08016a88 	.word	0x08016a88

0800fff8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800fff8:	b590      	push	{r4, r7, lr}
 800fffa:	b08b      	sub	sp, #44	; 0x2c
 800fffc:	af02      	add	r7, sp, #8
 800fffe:	6078      	str	r0, [r7, #4]
 8010000:	460b      	mov	r3, r1
 8010002:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010004:	2300      	movs	r3, #0
 8010006:	61fb      	str	r3, [r7, #28]
 8010008:	2300      	movs	r3, #0
 801000a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801000c:	2300      	movs	r3, #0
 801000e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d106      	bne.n	8010024 <tcp_split_unsent_seg+0x2c>
 8010016:	4b95      	ldr	r3, [pc, #596]	; (801026c <tcp_split_unsent_seg+0x274>)
 8010018:	f240 324b 	movw	r2, #843	; 0x34b
 801001c:	4994      	ldr	r1, [pc, #592]	; (8010270 <tcp_split_unsent_seg+0x278>)
 801001e:	4895      	ldr	r0, [pc, #596]	; (8010274 <tcp_split_unsent_seg+0x27c>)
 8010020:	f004 f820 	bl	8014064 <iprintf>

  useg = pcb->unsent;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010028:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d102      	bne.n	8010036 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010030:	f04f 33ff 	mov.w	r3, #4294967295
 8010034:	e116      	b.n	8010264 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010036:	887b      	ldrh	r3, [r7, #2]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d109      	bne.n	8010050 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801003c:	4b8b      	ldr	r3, [pc, #556]	; (801026c <tcp_split_unsent_seg+0x274>)
 801003e:	f240 3253 	movw	r2, #851	; 0x353
 8010042:	498d      	ldr	r1, [pc, #564]	; (8010278 <tcp_split_unsent_seg+0x280>)
 8010044:	488b      	ldr	r0, [pc, #556]	; (8010274 <tcp_split_unsent_seg+0x27c>)
 8010046:	f004 f80d 	bl	8014064 <iprintf>
    return ERR_VAL;
 801004a:	f06f 0305 	mvn.w	r3, #5
 801004e:	e109      	b.n	8010264 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010050:	697b      	ldr	r3, [r7, #20]
 8010052:	891b      	ldrh	r3, [r3, #8]
 8010054:	887a      	ldrh	r2, [r7, #2]
 8010056:	429a      	cmp	r2, r3
 8010058:	d301      	bcc.n	801005e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801005a:	2300      	movs	r3, #0
 801005c:	e102      	b.n	8010264 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010062:	887a      	ldrh	r2, [r7, #2]
 8010064:	429a      	cmp	r2, r3
 8010066:	d906      	bls.n	8010076 <tcp_split_unsent_seg+0x7e>
 8010068:	4b80      	ldr	r3, [pc, #512]	; (801026c <tcp_split_unsent_seg+0x274>)
 801006a:	f240 325b 	movw	r2, #859	; 0x35b
 801006e:	4983      	ldr	r1, [pc, #524]	; (801027c <tcp_split_unsent_seg+0x284>)
 8010070:	4880      	ldr	r0, [pc, #512]	; (8010274 <tcp_split_unsent_seg+0x27c>)
 8010072:	f003 fff7 	bl	8014064 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	891b      	ldrh	r3, [r3, #8]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d106      	bne.n	801008c <tcp_split_unsent_seg+0x94>
 801007e:	4b7b      	ldr	r3, [pc, #492]	; (801026c <tcp_split_unsent_seg+0x274>)
 8010080:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010084:	497e      	ldr	r1, [pc, #504]	; (8010280 <tcp_split_unsent_seg+0x288>)
 8010086:	487b      	ldr	r0, [pc, #492]	; (8010274 <tcp_split_unsent_seg+0x27c>)
 8010088:	f003 ffec 	bl	8014064 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801008c:	697b      	ldr	r3, [r7, #20]
 801008e:	7a9b      	ldrb	r3, [r3, #10]
 8010090:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010092:	7bfb      	ldrb	r3, [r7, #15]
 8010094:	009b      	lsls	r3, r3, #2
 8010096:	b2db      	uxtb	r3, r3
 8010098:	f003 0304 	and.w	r3, r3, #4
 801009c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	891a      	ldrh	r2, [r3, #8]
 80100a2:	887b      	ldrh	r3, [r7, #2]
 80100a4:	1ad3      	subs	r3, r2, r3
 80100a6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80100a8:	7bbb      	ldrb	r3, [r7, #14]
 80100aa:	b29a      	uxth	r2, r3
 80100ac:	89bb      	ldrh	r3, [r7, #12]
 80100ae:	4413      	add	r3, r2
 80100b0:	b29b      	uxth	r3, r3
 80100b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80100b6:	4619      	mov	r1, r3
 80100b8:	2036      	movs	r0, #54	; 0x36
 80100ba:	f7fa fbcf 	bl	800a85c <pbuf_alloc>
 80100be:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	f000 80b7 	beq.w	8010236 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	685b      	ldr	r3, [r3, #4]
 80100cc:	891a      	ldrh	r2, [r3, #8]
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	891b      	ldrh	r3, [r3, #8]
 80100d2:	1ad3      	subs	r3, r2, r3
 80100d4:	b29a      	uxth	r2, r3
 80100d6:	887b      	ldrh	r3, [r7, #2]
 80100d8:	4413      	add	r3, r2
 80100da:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80100dc:	697b      	ldr	r3, [r7, #20]
 80100de:	6858      	ldr	r0, [r3, #4]
 80100e0:	693b      	ldr	r3, [r7, #16]
 80100e2:	685a      	ldr	r2, [r3, #4]
 80100e4:	7bbb      	ldrb	r3, [r7, #14]
 80100e6:	18d1      	adds	r1, r2, r3
 80100e8:	897b      	ldrh	r3, [r7, #10]
 80100ea:	89ba      	ldrh	r2, [r7, #12]
 80100ec:	f7fb f882 	bl	800b1f4 <pbuf_copy_partial>
 80100f0:	4603      	mov	r3, r0
 80100f2:	461a      	mov	r2, r3
 80100f4:	89bb      	ldrh	r3, [r7, #12]
 80100f6:	4293      	cmp	r3, r2
 80100f8:	f040 809f 	bne.w	801023a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80100fc:	697b      	ldr	r3, [r7, #20]
 80100fe:	68db      	ldr	r3, [r3, #12]
 8010100:	899b      	ldrh	r3, [r3, #12]
 8010102:	b29b      	uxth	r3, r3
 8010104:	4618      	mov	r0, r3
 8010106:	f7f9 fa53 	bl	80095b0 <lwip_htons>
 801010a:	4603      	mov	r3, r0
 801010c:	b2db      	uxtb	r3, r3
 801010e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010112:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010114:	2300      	movs	r3, #0
 8010116:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010118:	7efb      	ldrb	r3, [r7, #27]
 801011a:	f003 0308 	and.w	r3, r3, #8
 801011e:	2b00      	cmp	r3, #0
 8010120:	d007      	beq.n	8010132 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010122:	7efb      	ldrb	r3, [r7, #27]
 8010124:	f023 0308 	bic.w	r3, r3, #8
 8010128:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801012a:	7ebb      	ldrb	r3, [r7, #26]
 801012c:	f043 0308 	orr.w	r3, r3, #8
 8010130:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010132:	7efb      	ldrb	r3, [r7, #27]
 8010134:	f003 0301 	and.w	r3, r3, #1
 8010138:	2b00      	cmp	r3, #0
 801013a:	d007      	beq.n	801014c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801013c:	7efb      	ldrb	r3, [r7, #27]
 801013e:	f023 0301 	bic.w	r3, r3, #1
 8010142:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010144:	7ebb      	ldrb	r3, [r7, #26]
 8010146:	f043 0301 	orr.w	r3, r3, #1
 801014a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801014c:	697b      	ldr	r3, [r7, #20]
 801014e:	68db      	ldr	r3, [r3, #12]
 8010150:	685b      	ldr	r3, [r3, #4]
 8010152:	4618      	mov	r0, r3
 8010154:	f7f9 fa41 	bl	80095da <lwip_htonl>
 8010158:	4602      	mov	r2, r0
 801015a:	887b      	ldrh	r3, [r7, #2]
 801015c:	18d1      	adds	r1, r2, r3
 801015e:	7eba      	ldrb	r2, [r7, #26]
 8010160:	7bfb      	ldrb	r3, [r7, #15]
 8010162:	9300      	str	r3, [sp, #0]
 8010164:	460b      	mov	r3, r1
 8010166:	6939      	ldr	r1, [r7, #16]
 8010168:	6878      	ldr	r0, [r7, #4]
 801016a:	f7ff fa4f 	bl	800f60c <tcp_create_segment>
 801016e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010170:	69fb      	ldr	r3, [r7, #28]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d063      	beq.n	801023e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	685b      	ldr	r3, [r3, #4]
 801017a:	4618      	mov	r0, r3
 801017c:	f7fa fed8 	bl	800af30 <pbuf_clen>
 8010180:	4603      	mov	r3, r0
 8010182:	461a      	mov	r2, r3
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801018a:	1a9b      	subs	r3, r3, r2
 801018c:	b29a      	uxth	r2, r3
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010194:	697b      	ldr	r3, [r7, #20]
 8010196:	6858      	ldr	r0, [r3, #4]
 8010198:	697b      	ldr	r3, [r7, #20]
 801019a:	685b      	ldr	r3, [r3, #4]
 801019c:	891a      	ldrh	r2, [r3, #8]
 801019e:	89bb      	ldrh	r3, [r7, #12]
 80101a0:	1ad3      	subs	r3, r2, r3
 80101a2:	b29b      	uxth	r3, r3
 80101a4:	4619      	mov	r1, r3
 80101a6:	f7fa fcb7 	bl	800ab18 <pbuf_realloc>
  useg->len -= remainder;
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	891a      	ldrh	r2, [r3, #8]
 80101ae:	89bb      	ldrh	r3, [r7, #12]
 80101b0:	1ad3      	subs	r3, r2, r3
 80101b2:	b29a      	uxth	r2, r3
 80101b4:	697b      	ldr	r3, [r7, #20]
 80101b6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	68db      	ldr	r3, [r3, #12]
 80101bc:	899b      	ldrh	r3, [r3, #12]
 80101be:	b29c      	uxth	r4, r3
 80101c0:	7efb      	ldrb	r3, [r7, #27]
 80101c2:	b29b      	uxth	r3, r3
 80101c4:	4618      	mov	r0, r3
 80101c6:	f7f9 f9f3 	bl	80095b0 <lwip_htons>
 80101ca:	4603      	mov	r3, r0
 80101cc:	461a      	mov	r2, r3
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	68db      	ldr	r3, [r3, #12]
 80101d2:	4322      	orrs	r2, r4
 80101d4:	b292      	uxth	r2, r2
 80101d6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80101d8:	697b      	ldr	r3, [r7, #20]
 80101da:	685b      	ldr	r3, [r3, #4]
 80101dc:	4618      	mov	r0, r3
 80101de:	f7fa fea7 	bl	800af30 <pbuf_clen>
 80101e2:	4603      	mov	r3, r0
 80101e4:	461a      	mov	r2, r3
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80101ec:	4413      	add	r3, r2
 80101ee:	b29a      	uxth	r2, r3
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80101f6:	69fb      	ldr	r3, [r7, #28]
 80101f8:	685b      	ldr	r3, [r3, #4]
 80101fa:	4618      	mov	r0, r3
 80101fc:	f7fa fe98 	bl	800af30 <pbuf_clen>
 8010200:	4603      	mov	r3, r0
 8010202:	461a      	mov	r2, r3
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801020a:	4413      	add	r3, r2
 801020c:	b29a      	uxth	r2, r3
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010214:	697b      	ldr	r3, [r7, #20]
 8010216:	681a      	ldr	r2, [r3, #0]
 8010218:	69fb      	ldr	r3, [r7, #28]
 801021a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801021c:	697b      	ldr	r3, [r7, #20]
 801021e:	69fa      	ldr	r2, [r7, #28]
 8010220:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010222:	69fb      	ldr	r3, [r7, #28]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d103      	bne.n	8010232 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	2200      	movs	r2, #0
 801022e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010232:	2300      	movs	r3, #0
 8010234:	e016      	b.n	8010264 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010236:	bf00      	nop
 8010238:	e002      	b.n	8010240 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801023a:	bf00      	nop
 801023c:	e000      	b.n	8010240 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801023e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010240:	69fb      	ldr	r3, [r7, #28]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d006      	beq.n	8010254 <tcp_split_unsent_seg+0x25c>
 8010246:	4b09      	ldr	r3, [pc, #36]	; (801026c <tcp_split_unsent_seg+0x274>)
 8010248:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801024c:	490d      	ldr	r1, [pc, #52]	; (8010284 <tcp_split_unsent_seg+0x28c>)
 801024e:	4809      	ldr	r0, [pc, #36]	; (8010274 <tcp_split_unsent_seg+0x27c>)
 8010250:	f003 ff08 	bl	8014064 <iprintf>
  if (p != NULL) {
 8010254:	693b      	ldr	r3, [r7, #16]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d002      	beq.n	8010260 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801025a:	6938      	ldr	r0, [r7, #16]
 801025c:	f7fa fde0 	bl	800ae20 <pbuf_free>
  }

  return ERR_MEM;
 8010260:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010264:	4618      	mov	r0, r3
 8010266:	3724      	adds	r7, #36	; 0x24
 8010268:	46bd      	mov	sp, r7
 801026a:	bd90      	pop	{r4, r7, pc}
 801026c:	08016a34 	.word	0x08016a34
 8010270:	08016dc8 	.word	0x08016dc8
 8010274:	08016a88 	.word	0x08016a88
 8010278:	08016dec 	.word	0x08016dec
 801027c:	08016e10 	.word	0x08016e10
 8010280:	08016e20 	.word	0x08016e20
 8010284:	08016e30 	.word	0x08016e30

08010288 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010288:	b590      	push	{r4, r7, lr}
 801028a:	b085      	sub	sp, #20
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d106      	bne.n	80102a4 <tcp_send_fin+0x1c>
 8010296:	4b21      	ldr	r3, [pc, #132]	; (801031c <tcp_send_fin+0x94>)
 8010298:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801029c:	4920      	ldr	r1, [pc, #128]	; (8010320 <tcp_send_fin+0x98>)
 801029e:	4821      	ldr	r0, [pc, #132]	; (8010324 <tcp_send_fin+0x9c>)
 80102a0:	f003 fee0 	bl	8014064 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d02e      	beq.n	801030a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102b0:	60fb      	str	r3, [r7, #12]
 80102b2:	e002      	b.n	80102ba <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d1f8      	bne.n	80102b4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	68db      	ldr	r3, [r3, #12]
 80102c6:	899b      	ldrh	r3, [r3, #12]
 80102c8:	b29b      	uxth	r3, r3
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7f9 f970 	bl	80095b0 <lwip_htons>
 80102d0:	4603      	mov	r3, r0
 80102d2:	b2db      	uxtb	r3, r3
 80102d4:	f003 0307 	and.w	r3, r3, #7
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d116      	bne.n	801030a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	68db      	ldr	r3, [r3, #12]
 80102e0:	899b      	ldrh	r3, [r3, #12]
 80102e2:	b29c      	uxth	r4, r3
 80102e4:	2001      	movs	r0, #1
 80102e6:	f7f9 f963 	bl	80095b0 <lwip_htons>
 80102ea:	4603      	mov	r3, r0
 80102ec:	461a      	mov	r2, r3
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	68db      	ldr	r3, [r3, #12]
 80102f2:	4322      	orrs	r2, r4
 80102f4:	b292      	uxth	r2, r2
 80102f6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	8b5b      	ldrh	r3, [r3, #26]
 80102fc:	f043 0320 	orr.w	r3, r3, #32
 8010300:	b29a      	uxth	r2, r3
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010306:	2300      	movs	r3, #0
 8010308:	e004      	b.n	8010314 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801030a:	2101      	movs	r1, #1
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	f000 f80b 	bl	8010328 <tcp_enqueue_flags>
 8010312:	4603      	mov	r3, r0
}
 8010314:	4618      	mov	r0, r3
 8010316:	3714      	adds	r7, #20
 8010318:	46bd      	mov	sp, r7
 801031a:	bd90      	pop	{r4, r7, pc}
 801031c:	08016a34 	.word	0x08016a34
 8010320:	08016e3c 	.word	0x08016e3c
 8010324:	08016a88 	.word	0x08016a88

08010328 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b08a      	sub	sp, #40	; 0x28
 801032c:	af02      	add	r7, sp, #8
 801032e:	6078      	str	r0, [r7, #4]
 8010330:	460b      	mov	r3, r1
 8010332:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010334:	2300      	movs	r3, #0
 8010336:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010338:	2300      	movs	r3, #0
 801033a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801033c:	78fb      	ldrb	r3, [r7, #3]
 801033e:	f003 0303 	and.w	r3, r3, #3
 8010342:	2b00      	cmp	r3, #0
 8010344:	d106      	bne.n	8010354 <tcp_enqueue_flags+0x2c>
 8010346:	4b67      	ldr	r3, [pc, #412]	; (80104e4 <tcp_enqueue_flags+0x1bc>)
 8010348:	f240 4211 	movw	r2, #1041	; 0x411
 801034c:	4966      	ldr	r1, [pc, #408]	; (80104e8 <tcp_enqueue_flags+0x1c0>)
 801034e:	4867      	ldr	r0, [pc, #412]	; (80104ec <tcp_enqueue_flags+0x1c4>)
 8010350:	f003 fe88 	bl	8014064 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d106      	bne.n	8010368 <tcp_enqueue_flags+0x40>
 801035a:	4b62      	ldr	r3, [pc, #392]	; (80104e4 <tcp_enqueue_flags+0x1bc>)
 801035c:	f240 4213 	movw	r2, #1043	; 0x413
 8010360:	4963      	ldr	r1, [pc, #396]	; (80104f0 <tcp_enqueue_flags+0x1c8>)
 8010362:	4862      	ldr	r0, [pc, #392]	; (80104ec <tcp_enqueue_flags+0x1c4>)
 8010364:	f003 fe7e 	bl	8014064 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010368:	78fb      	ldrb	r3, [r7, #3]
 801036a:	f003 0302 	and.w	r3, r3, #2
 801036e:	2b00      	cmp	r3, #0
 8010370:	d001      	beq.n	8010376 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010372:	2301      	movs	r3, #1
 8010374:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010376:	7ffb      	ldrb	r3, [r7, #31]
 8010378:	009b      	lsls	r3, r3, #2
 801037a:	b2db      	uxtb	r3, r3
 801037c:	f003 0304 	and.w	r3, r3, #4
 8010380:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010382:	7dfb      	ldrb	r3, [r7, #23]
 8010384:	b29b      	uxth	r3, r3
 8010386:	f44f 7220 	mov.w	r2, #640	; 0x280
 801038a:	4619      	mov	r1, r3
 801038c:	2036      	movs	r0, #54	; 0x36
 801038e:	f7fa fa65 	bl	800a85c <pbuf_alloc>
 8010392:	6138      	str	r0, [r7, #16]
 8010394:	693b      	ldr	r3, [r7, #16]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d109      	bne.n	80103ae <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	8b5b      	ldrh	r3, [r3, #26]
 801039e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103a2:	b29a      	uxth	r2, r3
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80103a8:	f04f 33ff 	mov.w	r3, #4294967295
 80103ac:	e095      	b.n	80104da <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80103ae:	693b      	ldr	r3, [r7, #16]
 80103b0:	895a      	ldrh	r2, [r3, #10]
 80103b2:	7dfb      	ldrb	r3, [r7, #23]
 80103b4:	b29b      	uxth	r3, r3
 80103b6:	429a      	cmp	r2, r3
 80103b8:	d206      	bcs.n	80103c8 <tcp_enqueue_flags+0xa0>
 80103ba:	4b4a      	ldr	r3, [pc, #296]	; (80104e4 <tcp_enqueue_flags+0x1bc>)
 80103bc:	f240 4239 	movw	r2, #1081	; 0x439
 80103c0:	494c      	ldr	r1, [pc, #304]	; (80104f4 <tcp_enqueue_flags+0x1cc>)
 80103c2:	484a      	ldr	r0, [pc, #296]	; (80104ec <tcp_enqueue_flags+0x1c4>)
 80103c4:	f003 fe4e 	bl	8014064 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80103cc:	78fa      	ldrb	r2, [r7, #3]
 80103ce:	7ffb      	ldrb	r3, [r7, #31]
 80103d0:	9300      	str	r3, [sp, #0]
 80103d2:	460b      	mov	r3, r1
 80103d4:	6939      	ldr	r1, [r7, #16]
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f7ff f918 	bl	800f60c <tcp_create_segment>
 80103dc:	60f8      	str	r0, [r7, #12]
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d109      	bne.n	80103f8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	8b5b      	ldrh	r3, [r3, #26]
 80103e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103ec:	b29a      	uxth	r2, r3
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80103f2:	f04f 33ff 	mov.w	r3, #4294967295
 80103f6:	e070      	b.n	80104da <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	68db      	ldr	r3, [r3, #12]
 80103fc:	f003 0303 	and.w	r3, r3, #3
 8010400:	2b00      	cmp	r3, #0
 8010402:	d006      	beq.n	8010412 <tcp_enqueue_flags+0xea>
 8010404:	4b37      	ldr	r3, [pc, #220]	; (80104e4 <tcp_enqueue_flags+0x1bc>)
 8010406:	f240 4242 	movw	r2, #1090	; 0x442
 801040a:	493b      	ldr	r1, [pc, #236]	; (80104f8 <tcp_enqueue_flags+0x1d0>)
 801040c:	4837      	ldr	r0, [pc, #220]	; (80104ec <tcp_enqueue_flags+0x1c4>)
 801040e:	f003 fe29 	bl	8014064 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	891b      	ldrh	r3, [r3, #8]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d006      	beq.n	8010428 <tcp_enqueue_flags+0x100>
 801041a:	4b32      	ldr	r3, [pc, #200]	; (80104e4 <tcp_enqueue_flags+0x1bc>)
 801041c:	f240 4243 	movw	r2, #1091	; 0x443
 8010420:	4936      	ldr	r1, [pc, #216]	; (80104fc <tcp_enqueue_flags+0x1d4>)
 8010422:	4832      	ldr	r0, [pc, #200]	; (80104ec <tcp_enqueue_flags+0x1c4>)
 8010424:	f003 fe1e 	bl	8014064 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801042c:	2b00      	cmp	r3, #0
 801042e:	d103      	bne.n	8010438 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	68fa      	ldr	r2, [r7, #12]
 8010434:	66da      	str	r2, [r3, #108]	; 0x6c
 8010436:	e00d      	b.n	8010454 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801043c:	61bb      	str	r3, [r7, #24]
 801043e:	e002      	b.n	8010446 <tcp_enqueue_flags+0x11e>
 8010440:	69bb      	ldr	r3, [r7, #24]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	61bb      	str	r3, [r7, #24]
 8010446:	69bb      	ldr	r3, [r7, #24]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d1f8      	bne.n	8010440 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801044e:	69bb      	ldr	r3, [r7, #24]
 8010450:	68fa      	ldr	r2, [r7, #12]
 8010452:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2200      	movs	r2, #0
 8010458:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801045c:	78fb      	ldrb	r3, [r7, #3]
 801045e:	f003 0302 	and.w	r3, r3, #2
 8010462:	2b00      	cmp	r3, #0
 8010464:	d104      	bne.n	8010470 <tcp_enqueue_flags+0x148>
 8010466:	78fb      	ldrb	r3, [r7, #3]
 8010468:	f003 0301 	and.w	r3, r3, #1
 801046c:	2b00      	cmp	r3, #0
 801046e:	d004      	beq.n	801047a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010474:	1c5a      	adds	r2, r3, #1
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801047a:	78fb      	ldrb	r3, [r7, #3]
 801047c:	f003 0301 	and.w	r3, r3, #1
 8010480:	2b00      	cmp	r3, #0
 8010482:	d006      	beq.n	8010492 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	8b5b      	ldrh	r3, [r3, #26]
 8010488:	f043 0320 	orr.w	r3, r3, #32
 801048c:	b29a      	uxth	r2, r3
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	685b      	ldr	r3, [r3, #4]
 8010496:	4618      	mov	r0, r3
 8010498:	f7fa fd4a 	bl	800af30 <pbuf_clen>
 801049c:	4603      	mov	r3, r0
 801049e:	461a      	mov	r2, r3
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80104a6:	4413      	add	r3, r2
 80104a8:	b29a      	uxth	r2, r3
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d00e      	beq.n	80104d8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d10a      	bne.n	80104d8 <tcp_enqueue_flags+0x1b0>
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d106      	bne.n	80104d8 <tcp_enqueue_flags+0x1b0>
 80104ca:	4b06      	ldr	r3, [pc, #24]	; (80104e4 <tcp_enqueue_flags+0x1bc>)
 80104cc:	f240 4265 	movw	r2, #1125	; 0x465
 80104d0:	490b      	ldr	r1, [pc, #44]	; (8010500 <tcp_enqueue_flags+0x1d8>)
 80104d2:	4806      	ldr	r0, [pc, #24]	; (80104ec <tcp_enqueue_flags+0x1c4>)
 80104d4:	f003 fdc6 	bl	8014064 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80104d8:	2300      	movs	r3, #0
}
 80104da:	4618      	mov	r0, r3
 80104dc:	3720      	adds	r7, #32
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd80      	pop	{r7, pc}
 80104e2:	bf00      	nop
 80104e4:	08016a34 	.word	0x08016a34
 80104e8:	08016e58 	.word	0x08016e58
 80104ec:	08016a88 	.word	0x08016a88
 80104f0:	08016eb0 	.word	0x08016eb0
 80104f4:	08016ed0 	.word	0x08016ed0
 80104f8:	08016f0c 	.word	0x08016f0c
 80104fc:	08016f24 	.word	0x08016f24
 8010500:	08016f50 	.word	0x08016f50

08010504 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010504:	b5b0      	push	{r4, r5, r7, lr}
 8010506:	b08a      	sub	sp, #40	; 0x28
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d106      	bne.n	8010520 <tcp_output+0x1c>
 8010512:	4b8a      	ldr	r3, [pc, #552]	; (801073c <tcp_output+0x238>)
 8010514:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010518:	4989      	ldr	r1, [pc, #548]	; (8010740 <tcp_output+0x23c>)
 801051a:	488a      	ldr	r0, [pc, #552]	; (8010744 <tcp_output+0x240>)
 801051c:	f003 fda2 	bl	8014064 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	7d1b      	ldrb	r3, [r3, #20]
 8010524:	2b01      	cmp	r3, #1
 8010526:	d106      	bne.n	8010536 <tcp_output+0x32>
 8010528:	4b84      	ldr	r3, [pc, #528]	; (801073c <tcp_output+0x238>)
 801052a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801052e:	4986      	ldr	r1, [pc, #536]	; (8010748 <tcp_output+0x244>)
 8010530:	4884      	ldr	r0, [pc, #528]	; (8010744 <tcp_output+0x240>)
 8010532:	f003 fd97 	bl	8014064 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010536:	4b85      	ldr	r3, [pc, #532]	; (801074c <tcp_output+0x248>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	687a      	ldr	r2, [r7, #4]
 801053c:	429a      	cmp	r2, r3
 801053e:	d101      	bne.n	8010544 <tcp_output+0x40>
    return ERR_OK;
 8010540:	2300      	movs	r3, #0
 8010542:	e1ce      	b.n	80108e2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010550:	4293      	cmp	r3, r2
 8010552:	bf28      	it	cs
 8010554:	4613      	movcs	r3, r2
 8010556:	b29b      	uxth	r3, r3
 8010558:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801055e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010562:	2b00      	cmp	r3, #0
 8010564:	d10b      	bne.n	801057e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	8b5b      	ldrh	r3, [r3, #26]
 801056a:	f003 0302 	and.w	r3, r3, #2
 801056e:	2b00      	cmp	r3, #0
 8010570:	f000 81aa 	beq.w	80108c8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f000 fdcb 	bl	8011110 <tcp_send_empty_ack>
 801057a:	4603      	mov	r3, r0
 801057c:	e1b1      	b.n	80108e2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801057e:	6879      	ldr	r1, [r7, #4]
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	3304      	adds	r3, #4
 8010584:	461a      	mov	r2, r3
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	f7ff f824 	bl	800f5d4 <tcp_route>
 801058c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d102      	bne.n	801059a <tcp_output+0x96>
    return ERR_RTE;
 8010594:	f06f 0303 	mvn.w	r3, #3
 8010598:	e1a3      	b.n	80108e2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d003      	beq.n	80105a8 <tcp_output+0xa4>
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d111      	bne.n	80105cc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d002      	beq.n	80105b4 <tcp_output+0xb0>
 80105ae:	697b      	ldr	r3, [r7, #20]
 80105b0:	3304      	adds	r3, #4
 80105b2:	e000      	b.n	80105b6 <tcp_output+0xb2>
 80105b4:	2300      	movs	r3, #0
 80105b6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80105b8:	693b      	ldr	r3, [r7, #16]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d102      	bne.n	80105c4 <tcp_output+0xc0>
      return ERR_RTE;
 80105be:	f06f 0303 	mvn.w	r3, #3
 80105c2:	e18e      	b.n	80108e2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80105c4:	693b      	ldr	r3, [r7, #16]
 80105c6:	681a      	ldr	r2, [r3, #0]
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80105cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ce:	68db      	ldr	r3, [r3, #12]
 80105d0:	685b      	ldr	r3, [r3, #4]
 80105d2:	4618      	mov	r0, r3
 80105d4:	f7f9 f801 	bl	80095da <lwip_htonl>
 80105d8:	4602      	mov	r2, r0
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105de:	1ad3      	subs	r3, r2, r3
 80105e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105e2:	8912      	ldrh	r2, [r2, #8]
 80105e4:	4413      	add	r3, r2
 80105e6:	69ba      	ldr	r2, [r7, #24]
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d227      	bcs.n	801063c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80105f2:	461a      	mov	r2, r3
 80105f4:	69bb      	ldr	r3, [r7, #24]
 80105f6:	4293      	cmp	r3, r2
 80105f8:	d114      	bne.n	8010624 <tcp_output+0x120>
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d110      	bne.n	8010624 <tcp_output+0x120>
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010608:	2b00      	cmp	r3, #0
 801060a:	d10b      	bne.n	8010624 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2200      	movs	r2, #0
 8010610:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2201      	movs	r2, #1
 8010618:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2200      	movs	r2, #0
 8010620:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	8b5b      	ldrh	r3, [r3, #26]
 8010628:	f003 0302 	and.w	r3, r3, #2
 801062c:	2b00      	cmp	r3, #0
 801062e:	f000 814d 	beq.w	80108cc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f000 fd6c 	bl	8011110 <tcp_send_empty_ack>
 8010638:	4603      	mov	r3, r0
 801063a:	e152      	b.n	80108e2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	2200      	movs	r2, #0
 8010640:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010648:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801064a:	6a3b      	ldr	r3, [r7, #32]
 801064c:	2b00      	cmp	r3, #0
 801064e:	f000 811c 	beq.w	801088a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010652:	e002      	b.n	801065a <tcp_output+0x156>
 8010654:	6a3b      	ldr	r3, [r7, #32]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	623b      	str	r3, [r7, #32]
 801065a:	6a3b      	ldr	r3, [r7, #32]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d1f8      	bne.n	8010654 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010662:	e112      	b.n	801088a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010666:	68db      	ldr	r3, [r3, #12]
 8010668:	899b      	ldrh	r3, [r3, #12]
 801066a:	b29b      	uxth	r3, r3
 801066c:	4618      	mov	r0, r3
 801066e:	f7f8 ff9f 	bl	80095b0 <lwip_htons>
 8010672:	4603      	mov	r3, r0
 8010674:	b2db      	uxtb	r3, r3
 8010676:	f003 0304 	and.w	r3, r3, #4
 801067a:	2b00      	cmp	r3, #0
 801067c:	d006      	beq.n	801068c <tcp_output+0x188>
 801067e:	4b2f      	ldr	r3, [pc, #188]	; (801073c <tcp_output+0x238>)
 8010680:	f240 5236 	movw	r2, #1334	; 0x536
 8010684:	4932      	ldr	r1, [pc, #200]	; (8010750 <tcp_output+0x24c>)
 8010686:	482f      	ldr	r0, [pc, #188]	; (8010744 <tcp_output+0x240>)
 8010688:	f003 fcec 	bl	8014064 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010690:	2b00      	cmp	r3, #0
 8010692:	d01f      	beq.n	80106d4 <tcp_output+0x1d0>
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	8b5b      	ldrh	r3, [r3, #26]
 8010698:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801069c:	2b00      	cmp	r3, #0
 801069e:	d119      	bne.n	80106d4 <tcp_output+0x1d0>
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d00b      	beq.n	80106c0 <tcp_output+0x1bc>
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d110      	bne.n	80106d4 <tcp_output+0x1d0>
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106b6:	891a      	ldrh	r2, [r3, #8]
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106bc:	429a      	cmp	r2, r3
 80106be:	d209      	bcs.n	80106d4 <tcp_output+0x1d0>
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d004      	beq.n	80106d4 <tcp_output+0x1d0>
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80106d0:	2b08      	cmp	r3, #8
 80106d2:	d901      	bls.n	80106d8 <tcp_output+0x1d4>
 80106d4:	2301      	movs	r3, #1
 80106d6:	e000      	b.n	80106da <tcp_output+0x1d6>
 80106d8:	2300      	movs	r3, #0
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d106      	bne.n	80106ec <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	8b5b      	ldrh	r3, [r3, #26]
 80106e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	f000 80e4 	beq.w	80108b4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	7d1b      	ldrb	r3, [r3, #20]
 80106f0:	2b02      	cmp	r3, #2
 80106f2:	d00d      	beq.n	8010710 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80106f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106f6:	68db      	ldr	r3, [r3, #12]
 80106f8:	899b      	ldrh	r3, [r3, #12]
 80106fa:	b29c      	uxth	r4, r3
 80106fc:	2010      	movs	r0, #16
 80106fe:	f7f8 ff57 	bl	80095b0 <lwip_htons>
 8010702:	4603      	mov	r3, r0
 8010704:	461a      	mov	r2, r3
 8010706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010708:	68db      	ldr	r3, [r3, #12]
 801070a:	4322      	orrs	r2, r4
 801070c:	b292      	uxth	r2, r2
 801070e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010710:	697a      	ldr	r2, [r7, #20]
 8010712:	6879      	ldr	r1, [r7, #4]
 8010714:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010716:	f000 f909 	bl	801092c <tcp_output_segment>
 801071a:	4603      	mov	r3, r0
 801071c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801071e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d016      	beq.n	8010754 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	8b5b      	ldrh	r3, [r3, #26]
 801072a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801072e:	b29a      	uxth	r2, r3
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	835a      	strh	r2, [r3, #26]
      return err;
 8010734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010738:	e0d3      	b.n	80108e2 <tcp_output+0x3de>
 801073a:	bf00      	nop
 801073c:	08016a34 	.word	0x08016a34
 8010740:	08016f78 	.word	0x08016f78
 8010744:	08016a88 	.word	0x08016a88
 8010748:	08016f90 	.word	0x08016f90
 801074c:	24003624 	.word	0x24003624
 8010750:	08016fb8 	.word	0x08016fb8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010756:	681a      	ldr	r2, [r3, #0]
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	7d1b      	ldrb	r3, [r3, #20]
 8010760:	2b02      	cmp	r3, #2
 8010762:	d006      	beq.n	8010772 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	8b5b      	ldrh	r3, [r3, #26]
 8010768:	f023 0303 	bic.w	r3, r3, #3
 801076c:	b29a      	uxth	r2, r3
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010774:	68db      	ldr	r3, [r3, #12]
 8010776:	685b      	ldr	r3, [r3, #4]
 8010778:	4618      	mov	r0, r3
 801077a:	f7f8 ff2e 	bl	80095da <lwip_htonl>
 801077e:	4604      	mov	r4, r0
 8010780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010782:	891b      	ldrh	r3, [r3, #8]
 8010784:	461d      	mov	r5, r3
 8010786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010788:	68db      	ldr	r3, [r3, #12]
 801078a:	899b      	ldrh	r3, [r3, #12]
 801078c:	b29b      	uxth	r3, r3
 801078e:	4618      	mov	r0, r3
 8010790:	f7f8 ff0e 	bl	80095b0 <lwip_htons>
 8010794:	4603      	mov	r3, r0
 8010796:	b2db      	uxtb	r3, r3
 8010798:	f003 0303 	and.w	r3, r3, #3
 801079c:	2b00      	cmp	r3, #0
 801079e:	d001      	beq.n	80107a4 <tcp_output+0x2a0>
 80107a0:	2301      	movs	r3, #1
 80107a2:	e000      	b.n	80107a6 <tcp_output+0x2a2>
 80107a4:	2300      	movs	r3, #0
 80107a6:	442b      	add	r3, r5
 80107a8:	4423      	add	r3, r4
 80107aa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	1ad3      	subs	r3, r2, r3
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	da02      	bge.n	80107be <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	68ba      	ldr	r2, [r7, #8]
 80107bc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80107be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c0:	891b      	ldrh	r3, [r3, #8]
 80107c2:	461c      	mov	r4, r3
 80107c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c6:	68db      	ldr	r3, [r3, #12]
 80107c8:	899b      	ldrh	r3, [r3, #12]
 80107ca:	b29b      	uxth	r3, r3
 80107cc:	4618      	mov	r0, r3
 80107ce:	f7f8 feef 	bl	80095b0 <lwip_htons>
 80107d2:	4603      	mov	r3, r0
 80107d4:	b2db      	uxtb	r3, r3
 80107d6:	f003 0303 	and.w	r3, r3, #3
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d001      	beq.n	80107e2 <tcp_output+0x2de>
 80107de:	2301      	movs	r3, #1
 80107e0:	e000      	b.n	80107e4 <tcp_output+0x2e0>
 80107e2:	2300      	movs	r3, #0
 80107e4:	4423      	add	r3, r4
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d049      	beq.n	801087e <tcp_output+0x37a>
      seg->next = NULL;
 80107ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ec:	2200      	movs	r2, #0
 80107ee:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d105      	bne.n	8010804 <tcp_output+0x300>
        pcb->unacked = seg;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107fc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80107fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010800:	623b      	str	r3, [r7, #32]
 8010802:	e03f      	b.n	8010884 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010806:	68db      	ldr	r3, [r3, #12]
 8010808:	685b      	ldr	r3, [r3, #4]
 801080a:	4618      	mov	r0, r3
 801080c:	f7f8 fee5 	bl	80095da <lwip_htonl>
 8010810:	4604      	mov	r4, r0
 8010812:	6a3b      	ldr	r3, [r7, #32]
 8010814:	68db      	ldr	r3, [r3, #12]
 8010816:	685b      	ldr	r3, [r3, #4]
 8010818:	4618      	mov	r0, r3
 801081a:	f7f8 fede 	bl	80095da <lwip_htonl>
 801081e:	4603      	mov	r3, r0
 8010820:	1ae3      	subs	r3, r4, r3
 8010822:	2b00      	cmp	r3, #0
 8010824:	da24      	bge.n	8010870 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	3370      	adds	r3, #112	; 0x70
 801082a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801082c:	e002      	b.n	8010834 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801082e:	69fb      	ldr	r3, [r7, #28]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010834:	69fb      	ldr	r3, [r7, #28]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d011      	beq.n	8010860 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801083c:	69fb      	ldr	r3, [r7, #28]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	68db      	ldr	r3, [r3, #12]
 8010842:	685b      	ldr	r3, [r3, #4]
 8010844:	4618      	mov	r0, r3
 8010846:	f7f8 fec8 	bl	80095da <lwip_htonl>
 801084a:	4604      	mov	r4, r0
 801084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801084e:	68db      	ldr	r3, [r3, #12]
 8010850:	685b      	ldr	r3, [r3, #4]
 8010852:	4618      	mov	r0, r3
 8010854:	f7f8 fec1 	bl	80095da <lwip_htonl>
 8010858:	4603      	mov	r3, r0
 801085a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801085c:	2b00      	cmp	r3, #0
 801085e:	dbe6      	blt.n	801082e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010860:	69fb      	ldr	r3, [r7, #28]
 8010862:	681a      	ldr	r2, [r3, #0]
 8010864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010866:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010868:	69fb      	ldr	r3, [r7, #28]
 801086a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801086c:	601a      	str	r2, [r3, #0]
 801086e:	e009      	b.n	8010884 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010870:	6a3b      	ldr	r3, [r7, #32]
 8010872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010874:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010876:	6a3b      	ldr	r3, [r7, #32]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	623b      	str	r3, [r7, #32]
 801087c:	e002      	b.n	8010884 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801087e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010880:	f7fb fefb 	bl	800c67a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010888:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801088c:	2b00      	cmp	r3, #0
 801088e:	d012      	beq.n	80108b6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010892:	68db      	ldr	r3, [r3, #12]
 8010894:	685b      	ldr	r3, [r3, #4]
 8010896:	4618      	mov	r0, r3
 8010898:	f7f8 fe9f 	bl	80095da <lwip_htonl>
 801089c:	4602      	mov	r2, r0
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108a2:	1ad3      	subs	r3, r2, r3
 80108a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108a6:	8912      	ldrh	r2, [r2, #8]
 80108a8:	4413      	add	r3, r2
  while (seg != NULL &&
 80108aa:	69ba      	ldr	r2, [r7, #24]
 80108ac:	429a      	cmp	r2, r3
 80108ae:	f4bf aed9 	bcs.w	8010664 <tcp_output+0x160>
 80108b2:	e000      	b.n	80108b6 <tcp_output+0x3b2>
      break;
 80108b4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d108      	bne.n	80108d0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2200      	movs	r2, #0
 80108c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80108c6:	e004      	b.n	80108d2 <tcp_output+0x3ce>
    goto output_done;
 80108c8:	bf00      	nop
 80108ca:	e002      	b.n	80108d2 <tcp_output+0x3ce>
    goto output_done;
 80108cc:	bf00      	nop
 80108ce:	e000      	b.n	80108d2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80108d0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	8b5b      	ldrh	r3, [r3, #26]
 80108d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80108da:	b29a      	uxth	r2, r3
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80108e0:	2300      	movs	r3, #0
}
 80108e2:	4618      	mov	r0, r3
 80108e4:	3728      	adds	r7, #40	; 0x28
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bdb0      	pop	{r4, r5, r7, pc}
 80108ea:	bf00      	nop

080108ec <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b082      	sub	sp, #8
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d106      	bne.n	8010908 <tcp_output_segment_busy+0x1c>
 80108fa:	4b09      	ldr	r3, [pc, #36]	; (8010920 <tcp_output_segment_busy+0x34>)
 80108fc:	f240 529a 	movw	r2, #1434	; 0x59a
 8010900:	4908      	ldr	r1, [pc, #32]	; (8010924 <tcp_output_segment_busy+0x38>)
 8010902:	4809      	ldr	r0, [pc, #36]	; (8010928 <tcp_output_segment_busy+0x3c>)
 8010904:	f003 fbae 	bl	8014064 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	685b      	ldr	r3, [r3, #4]
 801090c:	7b9b      	ldrb	r3, [r3, #14]
 801090e:	2b01      	cmp	r3, #1
 8010910:	d001      	beq.n	8010916 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010912:	2301      	movs	r3, #1
 8010914:	e000      	b.n	8010918 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010916:	2300      	movs	r3, #0
}
 8010918:	4618      	mov	r0, r3
 801091a:	3708      	adds	r7, #8
 801091c:	46bd      	mov	sp, r7
 801091e:	bd80      	pop	{r7, pc}
 8010920:	08016a34 	.word	0x08016a34
 8010924:	08016fd0 	.word	0x08016fd0
 8010928:	08016a88 	.word	0x08016a88

0801092c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801092c:	b5b0      	push	{r4, r5, r7, lr}
 801092e:	b08c      	sub	sp, #48	; 0x30
 8010930:	af04      	add	r7, sp, #16
 8010932:	60f8      	str	r0, [r7, #12]
 8010934:	60b9      	str	r1, [r7, #8]
 8010936:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d106      	bne.n	801094c <tcp_output_segment+0x20>
 801093e:	4b63      	ldr	r3, [pc, #396]	; (8010acc <tcp_output_segment+0x1a0>)
 8010940:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010944:	4962      	ldr	r1, [pc, #392]	; (8010ad0 <tcp_output_segment+0x1a4>)
 8010946:	4863      	ldr	r0, [pc, #396]	; (8010ad4 <tcp_output_segment+0x1a8>)
 8010948:	f003 fb8c 	bl	8014064 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d106      	bne.n	8010960 <tcp_output_segment+0x34>
 8010952:	4b5e      	ldr	r3, [pc, #376]	; (8010acc <tcp_output_segment+0x1a0>)
 8010954:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010958:	495f      	ldr	r1, [pc, #380]	; (8010ad8 <tcp_output_segment+0x1ac>)
 801095a:	485e      	ldr	r0, [pc, #376]	; (8010ad4 <tcp_output_segment+0x1a8>)
 801095c:	f003 fb82 	bl	8014064 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d106      	bne.n	8010974 <tcp_output_segment+0x48>
 8010966:	4b59      	ldr	r3, [pc, #356]	; (8010acc <tcp_output_segment+0x1a0>)
 8010968:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801096c:	495b      	ldr	r1, [pc, #364]	; (8010adc <tcp_output_segment+0x1b0>)
 801096e:	4859      	ldr	r0, [pc, #356]	; (8010ad4 <tcp_output_segment+0x1a8>)
 8010970:	f003 fb78 	bl	8014064 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010974:	68f8      	ldr	r0, [r7, #12]
 8010976:	f7ff ffb9 	bl	80108ec <tcp_output_segment_busy>
 801097a:	4603      	mov	r3, r0
 801097c:	2b00      	cmp	r3, #0
 801097e:	d001      	beq.n	8010984 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010980:	2300      	movs	r3, #0
 8010982:	e09f      	b.n	8010ac4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	68dc      	ldr	r4, [r3, #12]
 801098c:	4610      	mov	r0, r2
 801098e:	f7f8 fe24 	bl	80095da <lwip_htonl>
 8010992:	4603      	mov	r3, r0
 8010994:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010996:	68bb      	ldr	r3, [r7, #8]
 8010998:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	68dc      	ldr	r4, [r3, #12]
 801099e:	4610      	mov	r0, r2
 80109a0:	f7f8 fe06 	bl	80095b0 <lwip_htons>
 80109a4:	4603      	mov	r3, r0
 80109a6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109ac:	68ba      	ldr	r2, [r7, #8]
 80109ae:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80109b0:	441a      	add	r2, r3
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	68db      	ldr	r3, [r3, #12]
 80109ba:	3314      	adds	r3, #20
 80109bc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	7a9b      	ldrb	r3, [r3, #10]
 80109c2:	f003 0301 	and.w	r3, r3, #1
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d015      	beq.n	80109f6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80109ca:	68bb      	ldr	r3, [r7, #8]
 80109cc:	3304      	adds	r3, #4
 80109ce:	461a      	mov	r2, r3
 80109d0:	6879      	ldr	r1, [r7, #4]
 80109d2:	f44f 7006 	mov.w	r0, #536	; 0x218
 80109d6:	f7fc fa33 	bl	800ce40 <tcp_eff_send_mss_netif>
 80109da:	4603      	mov	r3, r0
 80109dc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80109de:	8b7b      	ldrh	r3, [r7, #26]
 80109e0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80109e4:	4618      	mov	r0, r3
 80109e6:	f7f8 fdf8 	bl	80095da <lwip_htonl>
 80109ea:	4602      	mov	r2, r0
 80109ec:	69fb      	ldr	r3, [r7, #28]
 80109ee:	601a      	str	r2, [r3, #0]
    opts += 1;
 80109f0:	69fb      	ldr	r3, [r7, #28]
 80109f2:	3304      	adds	r3, #4
 80109f4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	da02      	bge.n	8010a06 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010a00:	68bb      	ldr	r3, [r7, #8]
 8010a02:	2200      	movs	r2, #0
 8010a04:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010a06:	68bb      	ldr	r3, [r7, #8]
 8010a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d10c      	bne.n	8010a28 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010a0e:	4b34      	ldr	r3, [pc, #208]	; (8010ae0 <tcp_output_segment+0x1b4>)
 8010a10:	681a      	ldr	r2, [r3, #0]
 8010a12:	68bb      	ldr	r3, [r7, #8]
 8010a14:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	68db      	ldr	r3, [r3, #12]
 8010a1a:	685b      	ldr	r3, [r3, #4]
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	f7f8 fddc 	bl	80095da <lwip_htonl>
 8010a22:	4602      	mov	r2, r0
 8010a24:	68bb      	ldr	r3, [r7, #8]
 8010a26:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	68da      	ldr	r2, [r3, #12]
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	685b      	ldr	r3, [r3, #4]
 8010a30:	685b      	ldr	r3, [r3, #4]
 8010a32:	1ad3      	subs	r3, r2, r3
 8010a34:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	685b      	ldr	r3, [r3, #4]
 8010a3a:	8959      	ldrh	r1, [r3, #10]
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	685b      	ldr	r3, [r3, #4]
 8010a40:	8b3a      	ldrh	r2, [r7, #24]
 8010a42:	1a8a      	subs	r2, r1, r2
 8010a44:	b292      	uxth	r2, r2
 8010a46:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	685b      	ldr	r3, [r3, #4]
 8010a4c:	8919      	ldrh	r1, [r3, #8]
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	685b      	ldr	r3, [r3, #4]
 8010a52:	8b3a      	ldrh	r2, [r7, #24]
 8010a54:	1a8a      	subs	r2, r1, r2
 8010a56:	b292      	uxth	r2, r2
 8010a58:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	685b      	ldr	r3, [r3, #4]
 8010a5e:	68fa      	ldr	r2, [r7, #12]
 8010a60:	68d2      	ldr	r2, [r2, #12]
 8010a62:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	68db      	ldr	r3, [r3, #12]
 8010a68:	2200      	movs	r2, #0
 8010a6a:	741a      	strb	r2, [r3, #16]
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	68db      	ldr	r3, [r3, #12]
 8010a74:	f103 0214 	add.w	r2, r3, #20
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	7a9b      	ldrb	r3, [r3, #10]
 8010a7c:	009b      	lsls	r3, r3, #2
 8010a7e:	f003 0304 	and.w	r3, r3, #4
 8010a82:	4413      	add	r3, r2
 8010a84:	69fa      	ldr	r2, [r7, #28]
 8010a86:	429a      	cmp	r2, r3
 8010a88:	d006      	beq.n	8010a98 <tcp_output_segment+0x16c>
 8010a8a:	4b10      	ldr	r3, [pc, #64]	; (8010acc <tcp_output_segment+0x1a0>)
 8010a8c:	f240 621c 	movw	r2, #1564	; 0x61c
 8010a90:	4914      	ldr	r1, [pc, #80]	; (8010ae4 <tcp_output_segment+0x1b8>)
 8010a92:	4810      	ldr	r0, [pc, #64]	; (8010ad4 <tcp_output_segment+0x1a8>)
 8010a94:	f003 fae6 	bl	8014064 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	6858      	ldr	r0, [r3, #4]
 8010a9c:	68b9      	ldr	r1, [r7, #8]
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	1d1c      	adds	r4, r3, #4
 8010aa2:	68bb      	ldr	r3, [r7, #8]
 8010aa4:	7add      	ldrb	r5, [r3, #11]
 8010aa6:	68bb      	ldr	r3, [r7, #8]
 8010aa8:	7a9b      	ldrb	r3, [r3, #10]
 8010aaa:	687a      	ldr	r2, [r7, #4]
 8010aac:	9202      	str	r2, [sp, #8]
 8010aae:	2206      	movs	r2, #6
 8010ab0:	9201      	str	r2, [sp, #4]
 8010ab2:	9300      	str	r3, [sp, #0]
 8010ab4:	462b      	mov	r3, r5
 8010ab6:	4622      	mov	r2, r4
 8010ab8:	f002 fa5c 	bl	8012f74 <ip4_output_if>
 8010abc:	4603      	mov	r3, r0
 8010abe:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010ac0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	3720      	adds	r7, #32
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bdb0      	pop	{r4, r5, r7, pc}
 8010acc:	08016a34 	.word	0x08016a34
 8010ad0:	08016ff8 	.word	0x08016ff8
 8010ad4:	08016a88 	.word	0x08016a88
 8010ad8:	08017018 	.word	0x08017018
 8010adc:	08017038 	.word	0x08017038
 8010ae0:	240035d8 	.word	0x240035d8
 8010ae4:	0801705c 	.word	0x0801705c

08010ae8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010ae8:	b5b0      	push	{r4, r5, r7, lr}
 8010aea:	b084      	sub	sp, #16
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d106      	bne.n	8010b04 <tcp_rexmit_rto_prepare+0x1c>
 8010af6:	4b31      	ldr	r3, [pc, #196]	; (8010bbc <tcp_rexmit_rto_prepare+0xd4>)
 8010af8:	f240 6263 	movw	r2, #1635	; 0x663
 8010afc:	4930      	ldr	r1, [pc, #192]	; (8010bc0 <tcp_rexmit_rto_prepare+0xd8>)
 8010afe:	4831      	ldr	r0, [pc, #196]	; (8010bc4 <tcp_rexmit_rto_prepare+0xdc>)
 8010b00:	f003 fab0 	bl	8014064 <iprintf>

  if (pcb->unacked == NULL) {
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d102      	bne.n	8010b12 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010b0c:	f06f 0305 	mvn.w	r3, #5
 8010b10:	e050      	b.n	8010bb4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b16:	60fb      	str	r3, [r7, #12]
 8010b18:	e00b      	b.n	8010b32 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010b1a:	68f8      	ldr	r0, [r7, #12]
 8010b1c:	f7ff fee6 	bl	80108ec <tcp_output_segment_busy>
 8010b20:	4603      	mov	r3, r0
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d002      	beq.n	8010b2c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010b26:	f06f 0305 	mvn.w	r3, #5
 8010b2a:	e043      	b.n	8010bb4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	60fb      	str	r3, [r7, #12]
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d1ef      	bne.n	8010b1a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010b3a:	68f8      	ldr	r0, [r7, #12]
 8010b3c:	f7ff fed6 	bl	80108ec <tcp_output_segment_busy>
 8010b40:	4603      	mov	r3, r0
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d002      	beq.n	8010b4c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010b46:	f06f 0305 	mvn.w	r3, #5
 8010b4a:	e033      	b.n	8010bb4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	2200      	movs	r2, #0
 8010b60:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	8b5b      	ldrh	r3, [r3, #26]
 8010b66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010b6a:	b29a      	uxth	r2, r3
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	68db      	ldr	r3, [r3, #12]
 8010b74:	685b      	ldr	r3, [r3, #4]
 8010b76:	4618      	mov	r0, r3
 8010b78:	f7f8 fd2f 	bl	80095da <lwip_htonl>
 8010b7c:	4604      	mov	r4, r0
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	891b      	ldrh	r3, [r3, #8]
 8010b82:	461d      	mov	r5, r3
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	68db      	ldr	r3, [r3, #12]
 8010b88:	899b      	ldrh	r3, [r3, #12]
 8010b8a:	b29b      	uxth	r3, r3
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f7f8 fd0f 	bl	80095b0 <lwip_htons>
 8010b92:	4603      	mov	r3, r0
 8010b94:	b2db      	uxtb	r3, r3
 8010b96:	f003 0303 	and.w	r3, r3, #3
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d001      	beq.n	8010ba2 <tcp_rexmit_rto_prepare+0xba>
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	e000      	b.n	8010ba4 <tcp_rexmit_rto_prepare+0xbc>
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	442b      	add	r3, r5
 8010ba6:	18e2      	adds	r2, r4, r3
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	2200      	movs	r2, #0
 8010bb0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8010bb2:	2300      	movs	r3, #0
}
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	3710      	adds	r7, #16
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	bdb0      	pop	{r4, r5, r7, pc}
 8010bbc:	08016a34 	.word	0x08016a34
 8010bc0:	08017070 	.word	0x08017070
 8010bc4:	08016a88 	.word	0x08016a88

08010bc8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b082      	sub	sp, #8
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d106      	bne.n	8010be4 <tcp_rexmit_rto_commit+0x1c>
 8010bd6:	4b0d      	ldr	r3, [pc, #52]	; (8010c0c <tcp_rexmit_rto_commit+0x44>)
 8010bd8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010bdc:	490c      	ldr	r1, [pc, #48]	; (8010c10 <tcp_rexmit_rto_commit+0x48>)
 8010bde:	480d      	ldr	r0, [pc, #52]	; (8010c14 <tcp_rexmit_rto_commit+0x4c>)
 8010be0:	f003 fa40 	bl	8014064 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010bea:	2bff      	cmp	r3, #255	; 0xff
 8010bec:	d007      	beq.n	8010bfe <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010bf4:	3301      	adds	r3, #1
 8010bf6:	b2da      	uxtb	r2, r3
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010bfe:	6878      	ldr	r0, [r7, #4]
 8010c00:	f7ff fc80 	bl	8010504 <tcp_output>
}
 8010c04:	bf00      	nop
 8010c06:	3708      	adds	r7, #8
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bd80      	pop	{r7, pc}
 8010c0c:	08016a34 	.word	0x08016a34
 8010c10:	08017094 	.word	0x08017094
 8010c14:	08016a88 	.word	0x08016a88

08010c18 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b082      	sub	sp, #8
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d106      	bne.n	8010c34 <tcp_rexmit_rto+0x1c>
 8010c26:	4b0a      	ldr	r3, [pc, #40]	; (8010c50 <tcp_rexmit_rto+0x38>)
 8010c28:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010c2c:	4909      	ldr	r1, [pc, #36]	; (8010c54 <tcp_rexmit_rto+0x3c>)
 8010c2e:	480a      	ldr	r0, [pc, #40]	; (8010c58 <tcp_rexmit_rto+0x40>)
 8010c30:	f003 fa18 	bl	8014064 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f7ff ff57 	bl	8010ae8 <tcp_rexmit_rto_prepare>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d102      	bne.n	8010c46 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f7ff ffc1 	bl	8010bc8 <tcp_rexmit_rto_commit>
  }
}
 8010c46:	bf00      	nop
 8010c48:	3708      	adds	r7, #8
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
 8010c4e:	bf00      	nop
 8010c50:	08016a34 	.word	0x08016a34
 8010c54:	080170b8 	.word	0x080170b8
 8010c58:	08016a88 	.word	0x08016a88

08010c5c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010c5c:	b590      	push	{r4, r7, lr}
 8010c5e:	b085      	sub	sp, #20
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d106      	bne.n	8010c78 <tcp_rexmit+0x1c>
 8010c6a:	4b2f      	ldr	r3, [pc, #188]	; (8010d28 <tcp_rexmit+0xcc>)
 8010c6c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010c70:	492e      	ldr	r1, [pc, #184]	; (8010d2c <tcp_rexmit+0xd0>)
 8010c72:	482f      	ldr	r0, [pc, #188]	; (8010d30 <tcp_rexmit+0xd4>)
 8010c74:	f003 f9f6 	bl	8014064 <iprintf>

  if (pcb->unacked == NULL) {
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d102      	bne.n	8010c86 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010c80:	f06f 0305 	mvn.w	r3, #5
 8010c84:	e04c      	b.n	8010d20 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c8a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010c8c:	68b8      	ldr	r0, [r7, #8]
 8010c8e:	f7ff fe2d 	bl	80108ec <tcp_output_segment_busy>
 8010c92:	4603      	mov	r3, r0
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d002      	beq.n	8010c9e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010c98:	f06f 0305 	mvn.w	r3, #5
 8010c9c:	e040      	b.n	8010d20 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	681a      	ldr	r2, [r3, #0]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	336c      	adds	r3, #108	; 0x6c
 8010caa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010cac:	e002      	b.n	8010cb4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d011      	beq.n	8010ce0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	68db      	ldr	r3, [r3, #12]
 8010cc2:	685b      	ldr	r3, [r3, #4]
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f7f8 fc88 	bl	80095da <lwip_htonl>
 8010cca:	4604      	mov	r4, r0
 8010ccc:	68bb      	ldr	r3, [r7, #8]
 8010cce:	68db      	ldr	r3, [r3, #12]
 8010cd0:	685b      	ldr	r3, [r3, #4]
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7f8 fc81 	bl	80095da <lwip_htonl>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	dbe6      	blt.n	8010cae <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	681a      	ldr	r2, [r3, #0]
 8010ce4:	68bb      	ldr	r3, [r7, #8]
 8010ce6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	68ba      	ldr	r2, [r7, #8]
 8010cec:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010cee:	68bb      	ldr	r3, [r7, #8]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d103      	bne.n	8010cfe <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010d04:	2bff      	cmp	r3, #255	; 0xff
 8010d06:	d007      	beq.n	8010d18 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010d0e:	3301      	adds	r3, #1
 8010d10:	b2da      	uxtb	r2, r3
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010d1e:	2300      	movs	r3, #0
}
 8010d20:	4618      	mov	r0, r3
 8010d22:	3714      	adds	r7, #20
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd90      	pop	{r4, r7, pc}
 8010d28:	08016a34 	.word	0x08016a34
 8010d2c:	080170d4 	.word	0x080170d4
 8010d30:	08016a88 	.word	0x08016a88

08010d34 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b082      	sub	sp, #8
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d106      	bne.n	8010d50 <tcp_rexmit_fast+0x1c>
 8010d42:	4b2a      	ldr	r3, [pc, #168]	; (8010dec <tcp_rexmit_fast+0xb8>)
 8010d44:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010d48:	4929      	ldr	r1, [pc, #164]	; (8010df0 <tcp_rexmit_fast+0xbc>)
 8010d4a:	482a      	ldr	r0, [pc, #168]	; (8010df4 <tcp_rexmit_fast+0xc0>)
 8010d4c:	f003 f98a 	bl	8014064 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d045      	beq.n	8010de4 <tcp_rexmit_fast+0xb0>
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	8b5b      	ldrh	r3, [r3, #26]
 8010d5c:	f003 0304 	and.w	r3, r3, #4
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d13f      	bne.n	8010de4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010d64:	6878      	ldr	r0, [r7, #4]
 8010d66:	f7ff ff79 	bl	8010c5c <tcp_rexmit>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d139      	bne.n	8010de4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010d7c:	4293      	cmp	r3, r2
 8010d7e:	bf28      	it	cs
 8010d80:	4613      	movcs	r3, r2
 8010d82:	b29b      	uxth	r3, r3
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	da00      	bge.n	8010d8a <tcp_rexmit_fast+0x56>
 8010d88:	3301      	adds	r3, #1
 8010d8a:	105b      	asrs	r3, r3, #1
 8010d8c:	b29a      	uxth	r2, r3
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010d9a:	461a      	mov	r2, r3
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010da0:	005b      	lsls	r3, r3, #1
 8010da2:	429a      	cmp	r2, r3
 8010da4:	d206      	bcs.n	8010db4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010daa:	005b      	lsls	r3, r3, #1
 8010dac:	b29a      	uxth	r2, r3
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dbe:	4619      	mov	r1, r3
 8010dc0:	0049      	lsls	r1, r1, #1
 8010dc2:	440b      	add	r3, r1
 8010dc4:	b29b      	uxth	r3, r3
 8010dc6:	4413      	add	r3, r2
 8010dc8:	b29a      	uxth	r2, r3
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	8b5b      	ldrh	r3, [r3, #26]
 8010dd4:	f043 0304 	orr.w	r3, r3, #4
 8010dd8:	b29a      	uxth	r2, r3
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	2200      	movs	r2, #0
 8010de2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010de4:	bf00      	nop
 8010de6:	3708      	adds	r7, #8
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}
 8010dec:	08016a34 	.word	0x08016a34
 8010df0:	080170ec 	.word	0x080170ec
 8010df4:	08016a88 	.word	0x08016a88

08010df8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b086      	sub	sp, #24
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	60f8      	str	r0, [r7, #12]
 8010e00:	607b      	str	r3, [r7, #4]
 8010e02:	460b      	mov	r3, r1
 8010e04:	817b      	strh	r3, [r7, #10]
 8010e06:	4613      	mov	r3, r2
 8010e08:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010e0a:	897a      	ldrh	r2, [r7, #10]
 8010e0c:	893b      	ldrh	r3, [r7, #8]
 8010e0e:	4413      	add	r3, r2
 8010e10:	b29b      	uxth	r3, r3
 8010e12:	3314      	adds	r3, #20
 8010e14:	b29b      	uxth	r3, r3
 8010e16:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010e1a:	4619      	mov	r1, r3
 8010e1c:	2022      	movs	r0, #34	; 0x22
 8010e1e:	f7f9 fd1d 	bl	800a85c <pbuf_alloc>
 8010e22:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010e24:	697b      	ldr	r3, [r7, #20]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d04d      	beq.n	8010ec6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010e2a:	897b      	ldrh	r3, [r7, #10]
 8010e2c:	3313      	adds	r3, #19
 8010e2e:	697a      	ldr	r2, [r7, #20]
 8010e30:	8952      	ldrh	r2, [r2, #10]
 8010e32:	4293      	cmp	r3, r2
 8010e34:	db06      	blt.n	8010e44 <tcp_output_alloc_header_common+0x4c>
 8010e36:	4b26      	ldr	r3, [pc, #152]	; (8010ed0 <tcp_output_alloc_header_common+0xd8>)
 8010e38:	f240 7223 	movw	r2, #1827	; 0x723
 8010e3c:	4925      	ldr	r1, [pc, #148]	; (8010ed4 <tcp_output_alloc_header_common+0xdc>)
 8010e3e:	4826      	ldr	r0, [pc, #152]	; (8010ed8 <tcp_output_alloc_header_common+0xe0>)
 8010e40:	f003 f910 	bl	8014064 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010e44:	697b      	ldr	r3, [r7, #20]
 8010e46:	685b      	ldr	r3, [r3, #4]
 8010e48:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010e4a:	8c3b      	ldrh	r3, [r7, #32]
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f7f8 fbaf 	bl	80095b0 <lwip_htons>
 8010e52:	4603      	mov	r3, r0
 8010e54:	461a      	mov	r2, r3
 8010e56:	693b      	ldr	r3, [r7, #16]
 8010e58:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010e5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	f7f8 fba7 	bl	80095b0 <lwip_htons>
 8010e62:	4603      	mov	r3, r0
 8010e64:	461a      	mov	r2, r3
 8010e66:	693b      	ldr	r3, [r7, #16]
 8010e68:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010e6a:	693b      	ldr	r3, [r7, #16]
 8010e6c:	687a      	ldr	r2, [r7, #4]
 8010e6e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010e70:	68f8      	ldr	r0, [r7, #12]
 8010e72:	f7f8 fbb2 	bl	80095da <lwip_htonl>
 8010e76:	4602      	mov	r2, r0
 8010e78:	693b      	ldr	r3, [r7, #16]
 8010e7a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010e7c:	897b      	ldrh	r3, [r7, #10]
 8010e7e:	089b      	lsrs	r3, r3, #2
 8010e80:	b29b      	uxth	r3, r3
 8010e82:	3305      	adds	r3, #5
 8010e84:	b29b      	uxth	r3, r3
 8010e86:	031b      	lsls	r3, r3, #12
 8010e88:	b29a      	uxth	r2, r3
 8010e8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010e8e:	b29b      	uxth	r3, r3
 8010e90:	4313      	orrs	r3, r2
 8010e92:	b29b      	uxth	r3, r3
 8010e94:	4618      	mov	r0, r3
 8010e96:	f7f8 fb8b 	bl	80095b0 <lwip_htons>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	461a      	mov	r2, r3
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010ea2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7f8 fb83 	bl	80095b0 <lwip_htons>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	461a      	mov	r2, r3
 8010eae:	693b      	ldr	r3, [r7, #16]
 8010eb0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010eb2:	693b      	ldr	r3, [r7, #16]
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	741a      	strb	r2, [r3, #16]
 8010eb8:	2200      	movs	r2, #0
 8010eba:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010ebc:	693b      	ldr	r3, [r7, #16]
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	749a      	strb	r2, [r3, #18]
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010ec6:	697b      	ldr	r3, [r7, #20]
}
 8010ec8:	4618      	mov	r0, r3
 8010eca:	3718      	adds	r7, #24
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	bd80      	pop	{r7, pc}
 8010ed0:	08016a34 	.word	0x08016a34
 8010ed4:	0801710c 	.word	0x0801710c
 8010ed8:	08016a88 	.word	0x08016a88

08010edc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010edc:	b5b0      	push	{r4, r5, r7, lr}
 8010ede:	b08a      	sub	sp, #40	; 0x28
 8010ee0:	af04      	add	r7, sp, #16
 8010ee2:	60f8      	str	r0, [r7, #12]
 8010ee4:	607b      	str	r3, [r7, #4]
 8010ee6:	460b      	mov	r3, r1
 8010ee8:	817b      	strh	r3, [r7, #10]
 8010eea:	4613      	mov	r3, r2
 8010eec:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d106      	bne.n	8010f02 <tcp_output_alloc_header+0x26>
 8010ef4:	4b15      	ldr	r3, [pc, #84]	; (8010f4c <tcp_output_alloc_header+0x70>)
 8010ef6:	f240 7242 	movw	r2, #1858	; 0x742
 8010efa:	4915      	ldr	r1, [pc, #84]	; (8010f50 <tcp_output_alloc_header+0x74>)
 8010efc:	4815      	ldr	r0, [pc, #84]	; (8010f54 <tcp_output_alloc_header+0x78>)
 8010efe:	f003 f8b1 	bl	8014064 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	8adb      	ldrh	r3, [r3, #22]
 8010f0a:	68fa      	ldr	r2, [r7, #12]
 8010f0c:	8b12      	ldrh	r2, [r2, #24]
 8010f0e:	68f9      	ldr	r1, [r7, #12]
 8010f10:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8010f12:	893d      	ldrh	r5, [r7, #8]
 8010f14:	897c      	ldrh	r4, [r7, #10]
 8010f16:	9103      	str	r1, [sp, #12]
 8010f18:	2110      	movs	r1, #16
 8010f1a:	9102      	str	r1, [sp, #8]
 8010f1c:	9201      	str	r2, [sp, #4]
 8010f1e:	9300      	str	r3, [sp, #0]
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	462a      	mov	r2, r5
 8010f24:	4621      	mov	r1, r4
 8010f26:	f7ff ff67 	bl	8010df8 <tcp_output_alloc_header_common>
 8010f2a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010f2c:	697b      	ldr	r3, [r7, #20]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d006      	beq.n	8010f40 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f36:	68fa      	ldr	r2, [r7, #12]
 8010f38:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010f3a:	441a      	add	r2, r3
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010f40:	697b      	ldr	r3, [r7, #20]
}
 8010f42:	4618      	mov	r0, r3
 8010f44:	3718      	adds	r7, #24
 8010f46:	46bd      	mov	sp, r7
 8010f48:	bdb0      	pop	{r4, r5, r7, pc}
 8010f4a:	bf00      	nop
 8010f4c:	08016a34 	.word	0x08016a34
 8010f50:	0801713c 	.word	0x0801713c
 8010f54:	08016a88 	.word	0x08016a88

08010f58 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b088      	sub	sp, #32
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	60f8      	str	r0, [r7, #12]
 8010f60:	60b9      	str	r1, [r7, #8]
 8010f62:	4611      	mov	r1, r2
 8010f64:	461a      	mov	r2, r3
 8010f66:	460b      	mov	r3, r1
 8010f68:	71fb      	strb	r3, [r7, #7]
 8010f6a:	4613      	mov	r3, r2
 8010f6c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d106      	bne.n	8010f86 <tcp_output_fill_options+0x2e>
 8010f78:	4b13      	ldr	r3, [pc, #76]	; (8010fc8 <tcp_output_fill_options+0x70>)
 8010f7a:	f240 7256 	movw	r2, #1878	; 0x756
 8010f7e:	4913      	ldr	r1, [pc, #76]	; (8010fcc <tcp_output_fill_options+0x74>)
 8010f80:	4813      	ldr	r0, [pc, #76]	; (8010fd0 <tcp_output_fill_options+0x78>)
 8010f82:	f003 f86f 	bl	8014064 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	685b      	ldr	r3, [r3, #4]
 8010f8a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010f8c:	69bb      	ldr	r3, [r7, #24]
 8010f8e:	3314      	adds	r3, #20
 8010f90:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010f92:	69bb      	ldr	r3, [r7, #24]
 8010f94:	f103 0214 	add.w	r2, r3, #20
 8010f98:	8bfb      	ldrh	r3, [r7, #30]
 8010f9a:	009b      	lsls	r3, r3, #2
 8010f9c:	4619      	mov	r1, r3
 8010f9e:	79fb      	ldrb	r3, [r7, #7]
 8010fa0:	009b      	lsls	r3, r3, #2
 8010fa2:	f003 0304 	and.w	r3, r3, #4
 8010fa6:	440b      	add	r3, r1
 8010fa8:	4413      	add	r3, r2
 8010faa:	697a      	ldr	r2, [r7, #20]
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d006      	beq.n	8010fbe <tcp_output_fill_options+0x66>
 8010fb0:	4b05      	ldr	r3, [pc, #20]	; (8010fc8 <tcp_output_fill_options+0x70>)
 8010fb2:	f240 7275 	movw	r2, #1909	; 0x775
 8010fb6:	4907      	ldr	r1, [pc, #28]	; (8010fd4 <tcp_output_fill_options+0x7c>)
 8010fb8:	4805      	ldr	r0, [pc, #20]	; (8010fd0 <tcp_output_fill_options+0x78>)
 8010fba:	f003 f853 	bl	8014064 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010fbe:	bf00      	nop
 8010fc0:	3720      	adds	r7, #32
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}
 8010fc6:	bf00      	nop
 8010fc8:	08016a34 	.word	0x08016a34
 8010fcc:	08017164 	.word	0x08017164
 8010fd0:	08016a88 	.word	0x08016a88
 8010fd4:	0801705c 	.word	0x0801705c

08010fd8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b08a      	sub	sp, #40	; 0x28
 8010fdc:	af04      	add	r7, sp, #16
 8010fde:	60f8      	str	r0, [r7, #12]
 8010fe0:	60b9      	str	r1, [r7, #8]
 8010fe2:	607a      	str	r2, [r7, #4]
 8010fe4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010fe6:	68bb      	ldr	r3, [r7, #8]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d106      	bne.n	8010ffa <tcp_output_control_segment+0x22>
 8010fec:	4b1c      	ldr	r3, [pc, #112]	; (8011060 <tcp_output_control_segment+0x88>)
 8010fee:	f240 7287 	movw	r2, #1927	; 0x787
 8010ff2:	491c      	ldr	r1, [pc, #112]	; (8011064 <tcp_output_control_segment+0x8c>)
 8010ff4:	481c      	ldr	r0, [pc, #112]	; (8011068 <tcp_output_control_segment+0x90>)
 8010ff6:	f003 f835 	bl	8014064 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010ffa:	683a      	ldr	r2, [r7, #0]
 8010ffc:	6879      	ldr	r1, [r7, #4]
 8010ffe:	68f8      	ldr	r0, [r7, #12]
 8011000:	f7fe fae8 	bl	800f5d4 <tcp_route>
 8011004:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011006:	693b      	ldr	r3, [r7, #16]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d102      	bne.n	8011012 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801100c:	23fc      	movs	r3, #252	; 0xfc
 801100e:	75fb      	strb	r3, [r7, #23]
 8011010:	e01c      	b.n	801104c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d006      	beq.n	8011026 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	7adb      	ldrb	r3, [r3, #11]
 801101c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	7a9b      	ldrb	r3, [r3, #10]
 8011022:	757b      	strb	r3, [r7, #21]
 8011024:	e003      	b.n	801102e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011026:	23ff      	movs	r3, #255	; 0xff
 8011028:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801102a:	2300      	movs	r3, #0
 801102c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801102e:	7dba      	ldrb	r2, [r7, #22]
 8011030:	693b      	ldr	r3, [r7, #16]
 8011032:	9302      	str	r3, [sp, #8]
 8011034:	2306      	movs	r3, #6
 8011036:	9301      	str	r3, [sp, #4]
 8011038:	7d7b      	ldrb	r3, [r7, #21]
 801103a:	9300      	str	r3, [sp, #0]
 801103c:	4613      	mov	r3, r2
 801103e:	683a      	ldr	r2, [r7, #0]
 8011040:	6879      	ldr	r1, [r7, #4]
 8011042:	68b8      	ldr	r0, [r7, #8]
 8011044:	f001 ff96 	bl	8012f74 <ip4_output_if>
 8011048:	4603      	mov	r3, r0
 801104a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801104c:	68b8      	ldr	r0, [r7, #8]
 801104e:	f7f9 fee7 	bl	800ae20 <pbuf_free>
  return err;
 8011052:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011056:	4618      	mov	r0, r3
 8011058:	3718      	adds	r7, #24
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}
 801105e:	bf00      	nop
 8011060:	08016a34 	.word	0x08016a34
 8011064:	0801718c 	.word	0x0801718c
 8011068:	08016a88 	.word	0x08016a88

0801106c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801106c:	b590      	push	{r4, r7, lr}
 801106e:	b08b      	sub	sp, #44	; 0x2c
 8011070:	af04      	add	r7, sp, #16
 8011072:	60f8      	str	r0, [r7, #12]
 8011074:	60b9      	str	r1, [r7, #8]
 8011076:	607a      	str	r2, [r7, #4]
 8011078:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801107a:	683b      	ldr	r3, [r7, #0]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d106      	bne.n	801108e <tcp_rst+0x22>
 8011080:	4b1f      	ldr	r3, [pc, #124]	; (8011100 <tcp_rst+0x94>)
 8011082:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011086:	491f      	ldr	r1, [pc, #124]	; (8011104 <tcp_rst+0x98>)
 8011088:	481f      	ldr	r0, [pc, #124]	; (8011108 <tcp_rst+0x9c>)
 801108a:	f002 ffeb 	bl	8014064 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801108e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011090:	2b00      	cmp	r3, #0
 8011092:	d106      	bne.n	80110a2 <tcp_rst+0x36>
 8011094:	4b1a      	ldr	r3, [pc, #104]	; (8011100 <tcp_rst+0x94>)
 8011096:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801109a:	491c      	ldr	r1, [pc, #112]	; (801110c <tcp_rst+0xa0>)
 801109c:	481a      	ldr	r0, [pc, #104]	; (8011108 <tcp_rst+0x9c>)
 801109e:	f002 ffe1 	bl	8014064 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80110a2:	2300      	movs	r3, #0
 80110a4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80110a6:	f246 0308 	movw	r3, #24584	; 0x6008
 80110aa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80110ac:	7dfb      	ldrb	r3, [r7, #23]
 80110ae:	b29c      	uxth	r4, r3
 80110b0:	68b8      	ldr	r0, [r7, #8]
 80110b2:	f7f8 fa92 	bl	80095da <lwip_htonl>
 80110b6:	4602      	mov	r2, r0
 80110b8:	8abb      	ldrh	r3, [r7, #20]
 80110ba:	9303      	str	r3, [sp, #12]
 80110bc:	2314      	movs	r3, #20
 80110be:	9302      	str	r3, [sp, #8]
 80110c0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80110c2:	9301      	str	r3, [sp, #4]
 80110c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80110c6:	9300      	str	r3, [sp, #0]
 80110c8:	4613      	mov	r3, r2
 80110ca:	2200      	movs	r2, #0
 80110cc:	4621      	mov	r1, r4
 80110ce:	6878      	ldr	r0, [r7, #4]
 80110d0:	f7ff fe92 	bl	8010df8 <tcp_output_alloc_header_common>
 80110d4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80110d6:	693b      	ldr	r3, [r7, #16]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d00c      	beq.n	80110f6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80110dc:	7dfb      	ldrb	r3, [r7, #23]
 80110de:	2200      	movs	r2, #0
 80110e0:	6939      	ldr	r1, [r7, #16]
 80110e2:	68f8      	ldr	r0, [r7, #12]
 80110e4:	f7ff ff38 	bl	8010f58 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80110e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ea:	683a      	ldr	r2, [r7, #0]
 80110ec:	6939      	ldr	r1, [r7, #16]
 80110ee:	68f8      	ldr	r0, [r7, #12]
 80110f0:	f7ff ff72 	bl	8010fd8 <tcp_output_control_segment>
 80110f4:	e000      	b.n	80110f8 <tcp_rst+0x8c>
    return;
 80110f6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80110f8:	371c      	adds	r7, #28
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd90      	pop	{r4, r7, pc}
 80110fe:	bf00      	nop
 8011100:	08016a34 	.word	0x08016a34
 8011104:	080171b8 	.word	0x080171b8
 8011108:	08016a88 	.word	0x08016a88
 801110c:	080171d4 	.word	0x080171d4

08011110 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011110:	b590      	push	{r4, r7, lr}
 8011112:	b087      	sub	sp, #28
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011118:	2300      	movs	r3, #0
 801111a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801111c:	2300      	movs	r3, #0
 801111e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d106      	bne.n	8011134 <tcp_send_empty_ack+0x24>
 8011126:	4b28      	ldr	r3, [pc, #160]	; (80111c8 <tcp_send_empty_ack+0xb8>)
 8011128:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801112c:	4927      	ldr	r1, [pc, #156]	; (80111cc <tcp_send_empty_ack+0xbc>)
 801112e:	4828      	ldr	r0, [pc, #160]	; (80111d0 <tcp_send_empty_ack+0xc0>)
 8011130:	f002 ff98 	bl	8014064 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011134:	7dfb      	ldrb	r3, [r7, #23]
 8011136:	009b      	lsls	r3, r3, #2
 8011138:	b2db      	uxtb	r3, r3
 801113a:	f003 0304 	and.w	r3, r3, #4
 801113e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011140:	7d7b      	ldrb	r3, [r7, #21]
 8011142:	b29c      	uxth	r4, r3
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011148:	4618      	mov	r0, r3
 801114a:	f7f8 fa46 	bl	80095da <lwip_htonl>
 801114e:	4603      	mov	r3, r0
 8011150:	2200      	movs	r2, #0
 8011152:	4621      	mov	r1, r4
 8011154:	6878      	ldr	r0, [r7, #4]
 8011156:	f7ff fec1 	bl	8010edc <tcp_output_alloc_header>
 801115a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801115c:	693b      	ldr	r3, [r7, #16]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d109      	bne.n	8011176 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	8b5b      	ldrh	r3, [r3, #26]
 8011166:	f043 0303 	orr.w	r3, r3, #3
 801116a:	b29a      	uxth	r2, r3
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011170:	f06f 0301 	mvn.w	r3, #1
 8011174:	e023      	b.n	80111be <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011176:	7dbb      	ldrb	r3, [r7, #22]
 8011178:	7dfa      	ldrb	r2, [r7, #23]
 801117a:	6939      	ldr	r1, [r7, #16]
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	f7ff feeb 	bl	8010f58 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011182:	687a      	ldr	r2, [r7, #4]
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	3304      	adds	r3, #4
 8011188:	6939      	ldr	r1, [r7, #16]
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f7ff ff24 	bl	8010fd8 <tcp_output_control_segment>
 8011190:	4603      	mov	r3, r0
 8011192:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d007      	beq.n	80111ac <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	8b5b      	ldrh	r3, [r3, #26]
 80111a0:	f043 0303 	orr.w	r3, r3, #3
 80111a4:	b29a      	uxth	r2, r3
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	835a      	strh	r2, [r3, #26]
 80111aa:	e006      	b.n	80111ba <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	8b5b      	ldrh	r3, [r3, #26]
 80111b0:	f023 0303 	bic.w	r3, r3, #3
 80111b4:	b29a      	uxth	r2, r3
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80111ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80111be:	4618      	mov	r0, r3
 80111c0:	371c      	adds	r7, #28
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd90      	pop	{r4, r7, pc}
 80111c6:	bf00      	nop
 80111c8:	08016a34 	.word	0x08016a34
 80111cc:	080171f0 	.word	0x080171f0
 80111d0:	08016a88 	.word	0x08016a88

080111d4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80111d4:	b590      	push	{r4, r7, lr}
 80111d6:	b087      	sub	sp, #28
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80111dc:	2300      	movs	r3, #0
 80111de:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d106      	bne.n	80111f4 <tcp_keepalive+0x20>
 80111e6:	4b18      	ldr	r3, [pc, #96]	; (8011248 <tcp_keepalive+0x74>)
 80111e8:	f640 0224 	movw	r2, #2084	; 0x824
 80111ec:	4917      	ldr	r1, [pc, #92]	; (801124c <tcp_keepalive+0x78>)
 80111ee:	4818      	ldr	r0, [pc, #96]	; (8011250 <tcp_keepalive+0x7c>)
 80111f0:	f002 ff38 	bl	8014064 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80111f4:	7dfb      	ldrb	r3, [r7, #23]
 80111f6:	b29c      	uxth	r4, r3
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80111fc:	3b01      	subs	r3, #1
 80111fe:	4618      	mov	r0, r3
 8011200:	f7f8 f9eb 	bl	80095da <lwip_htonl>
 8011204:	4603      	mov	r3, r0
 8011206:	2200      	movs	r2, #0
 8011208:	4621      	mov	r1, r4
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f7ff fe66 	bl	8010edc <tcp_output_alloc_header>
 8011210:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011212:	693b      	ldr	r3, [r7, #16]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d102      	bne.n	801121e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011218:	f04f 33ff 	mov.w	r3, #4294967295
 801121c:	e010      	b.n	8011240 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801121e:	7dfb      	ldrb	r3, [r7, #23]
 8011220:	2200      	movs	r2, #0
 8011222:	6939      	ldr	r1, [r7, #16]
 8011224:	6878      	ldr	r0, [r7, #4]
 8011226:	f7ff fe97 	bl	8010f58 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801122a:	687a      	ldr	r2, [r7, #4]
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	3304      	adds	r3, #4
 8011230:	6939      	ldr	r1, [r7, #16]
 8011232:	6878      	ldr	r0, [r7, #4]
 8011234:	f7ff fed0 	bl	8010fd8 <tcp_output_control_segment>
 8011238:	4603      	mov	r3, r0
 801123a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801123c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011240:	4618      	mov	r0, r3
 8011242:	371c      	adds	r7, #28
 8011244:	46bd      	mov	sp, r7
 8011246:	bd90      	pop	{r4, r7, pc}
 8011248:	08016a34 	.word	0x08016a34
 801124c:	08017210 	.word	0x08017210
 8011250:	08016a88 	.word	0x08016a88

08011254 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011254:	b590      	push	{r4, r7, lr}
 8011256:	b08b      	sub	sp, #44	; 0x2c
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801125c:	2300      	movs	r3, #0
 801125e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d106      	bne.n	8011276 <tcp_zero_window_probe+0x22>
 8011268:	4b4c      	ldr	r3, [pc, #304]	; (801139c <tcp_zero_window_probe+0x148>)
 801126a:	f640 024f 	movw	r2, #2127	; 0x84f
 801126e:	494c      	ldr	r1, [pc, #304]	; (80113a0 <tcp_zero_window_probe+0x14c>)
 8011270:	484c      	ldr	r0, [pc, #304]	; (80113a4 <tcp_zero_window_probe+0x150>)
 8011272:	f002 fef7 	bl	8014064 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801127a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801127c:	6a3b      	ldr	r3, [r7, #32]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d101      	bne.n	8011286 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011282:	2300      	movs	r3, #0
 8011284:	e086      	b.n	8011394 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801128c:	2bff      	cmp	r3, #255	; 0xff
 801128e:	d007      	beq.n	80112a0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011296:	3301      	adds	r3, #1
 8011298:	b2da      	uxtb	r2, r3
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80112a0:	6a3b      	ldr	r3, [r7, #32]
 80112a2:	68db      	ldr	r3, [r3, #12]
 80112a4:	899b      	ldrh	r3, [r3, #12]
 80112a6:	b29b      	uxth	r3, r3
 80112a8:	4618      	mov	r0, r3
 80112aa:	f7f8 f981 	bl	80095b0 <lwip_htons>
 80112ae:	4603      	mov	r3, r0
 80112b0:	b2db      	uxtb	r3, r3
 80112b2:	f003 0301 	and.w	r3, r3, #1
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d005      	beq.n	80112c6 <tcp_zero_window_probe+0x72>
 80112ba:	6a3b      	ldr	r3, [r7, #32]
 80112bc:	891b      	ldrh	r3, [r3, #8]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d101      	bne.n	80112c6 <tcp_zero_window_probe+0x72>
 80112c2:	2301      	movs	r3, #1
 80112c4:	e000      	b.n	80112c8 <tcp_zero_window_probe+0x74>
 80112c6:	2300      	movs	r3, #0
 80112c8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80112ca:	7ffb      	ldrb	r3, [r7, #31]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	bf0c      	ite	eq
 80112d0:	2301      	moveq	r3, #1
 80112d2:	2300      	movne	r3, #0
 80112d4:	b2db      	uxtb	r3, r3
 80112d6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80112d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112dc:	b299      	uxth	r1, r3
 80112de:	6a3b      	ldr	r3, [r7, #32]
 80112e0:	68db      	ldr	r3, [r3, #12]
 80112e2:	685b      	ldr	r3, [r3, #4]
 80112e4:	8bba      	ldrh	r2, [r7, #28]
 80112e6:	6878      	ldr	r0, [r7, #4]
 80112e8:	f7ff fdf8 	bl	8010edc <tcp_output_alloc_header>
 80112ec:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80112ee:	69bb      	ldr	r3, [r7, #24]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d102      	bne.n	80112fa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80112f4:	f04f 33ff 	mov.w	r3, #4294967295
 80112f8:	e04c      	b.n	8011394 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80112fa:	69bb      	ldr	r3, [r7, #24]
 80112fc:	685b      	ldr	r3, [r3, #4]
 80112fe:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011300:	7ffb      	ldrb	r3, [r7, #31]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d011      	beq.n	801132a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011306:	697b      	ldr	r3, [r7, #20]
 8011308:	899b      	ldrh	r3, [r3, #12]
 801130a:	b29b      	uxth	r3, r3
 801130c:	b21b      	sxth	r3, r3
 801130e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011312:	b21c      	sxth	r4, r3
 8011314:	2011      	movs	r0, #17
 8011316:	f7f8 f94b 	bl	80095b0 <lwip_htons>
 801131a:	4603      	mov	r3, r0
 801131c:	b21b      	sxth	r3, r3
 801131e:	4323      	orrs	r3, r4
 8011320:	b21b      	sxth	r3, r3
 8011322:	b29a      	uxth	r2, r3
 8011324:	697b      	ldr	r3, [r7, #20]
 8011326:	819a      	strh	r2, [r3, #12]
 8011328:	e010      	b.n	801134c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801132a:	69bb      	ldr	r3, [r7, #24]
 801132c:	685b      	ldr	r3, [r3, #4]
 801132e:	3314      	adds	r3, #20
 8011330:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011332:	6a3b      	ldr	r3, [r7, #32]
 8011334:	6858      	ldr	r0, [r3, #4]
 8011336:	6a3b      	ldr	r3, [r7, #32]
 8011338:	685b      	ldr	r3, [r3, #4]
 801133a:	891a      	ldrh	r2, [r3, #8]
 801133c:	6a3b      	ldr	r3, [r7, #32]
 801133e:	891b      	ldrh	r3, [r3, #8]
 8011340:	1ad3      	subs	r3, r2, r3
 8011342:	b29b      	uxth	r3, r3
 8011344:	2201      	movs	r2, #1
 8011346:	6939      	ldr	r1, [r7, #16]
 8011348:	f7f9 ff54 	bl	800b1f4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801134c:	6a3b      	ldr	r3, [r7, #32]
 801134e:	68db      	ldr	r3, [r3, #12]
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	4618      	mov	r0, r3
 8011354:	f7f8 f941 	bl	80095da <lwip_htonl>
 8011358:	4603      	mov	r3, r0
 801135a:	3301      	adds	r3, #1
 801135c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	1ad3      	subs	r3, r2, r3
 8011366:	2b00      	cmp	r3, #0
 8011368:	da02      	bge.n	8011370 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	68fa      	ldr	r2, [r7, #12]
 801136e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011374:	2200      	movs	r2, #0
 8011376:	69b9      	ldr	r1, [r7, #24]
 8011378:	6878      	ldr	r0, [r7, #4]
 801137a:	f7ff fded 	bl	8010f58 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801137e:	687a      	ldr	r2, [r7, #4]
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	3304      	adds	r3, #4
 8011384:	69b9      	ldr	r1, [r7, #24]
 8011386:	6878      	ldr	r0, [r7, #4]
 8011388:	f7ff fe26 	bl	8010fd8 <tcp_output_control_segment>
 801138c:	4603      	mov	r3, r0
 801138e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011390:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011394:	4618      	mov	r0, r3
 8011396:	372c      	adds	r7, #44	; 0x2c
 8011398:	46bd      	mov	sp, r7
 801139a:	bd90      	pop	{r4, r7, pc}
 801139c:	08016a34 	.word	0x08016a34
 80113a0:	0801722c 	.word	0x0801722c
 80113a4:	08016a88 	.word	0x08016a88

080113a8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b082      	sub	sp, #8
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80113b0:	f7fa f80e 	bl	800b3d0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80113b4:	4b0a      	ldr	r3, [pc, #40]	; (80113e0 <tcpip_tcp_timer+0x38>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d103      	bne.n	80113c4 <tcpip_tcp_timer+0x1c>
 80113bc:	4b09      	ldr	r3, [pc, #36]	; (80113e4 <tcpip_tcp_timer+0x3c>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d005      	beq.n	80113d0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80113c4:	2200      	movs	r2, #0
 80113c6:	4908      	ldr	r1, [pc, #32]	; (80113e8 <tcpip_tcp_timer+0x40>)
 80113c8:	20fa      	movs	r0, #250	; 0xfa
 80113ca:	f000 f8f3 	bl	80115b4 <sys_timeout>
 80113ce:	e003      	b.n	80113d8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80113d0:	4b06      	ldr	r3, [pc, #24]	; (80113ec <tcpip_tcp_timer+0x44>)
 80113d2:	2200      	movs	r2, #0
 80113d4:	601a      	str	r2, [r3, #0]
  }
}
 80113d6:	bf00      	nop
 80113d8:	bf00      	nop
 80113da:	3708      	adds	r7, #8
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}
 80113e0:	240035e4 	.word	0x240035e4
 80113e4:	240035e8 	.word	0x240035e8
 80113e8:	080113a9 	.word	0x080113a9
 80113ec:	24003630 	.word	0x24003630

080113f0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80113f4:	4b0a      	ldr	r3, [pc, #40]	; (8011420 <tcp_timer_needed+0x30>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d10f      	bne.n	801141c <tcp_timer_needed+0x2c>
 80113fc:	4b09      	ldr	r3, [pc, #36]	; (8011424 <tcp_timer_needed+0x34>)
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d103      	bne.n	801140c <tcp_timer_needed+0x1c>
 8011404:	4b08      	ldr	r3, [pc, #32]	; (8011428 <tcp_timer_needed+0x38>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d007      	beq.n	801141c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801140c:	4b04      	ldr	r3, [pc, #16]	; (8011420 <tcp_timer_needed+0x30>)
 801140e:	2201      	movs	r2, #1
 8011410:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011412:	2200      	movs	r2, #0
 8011414:	4905      	ldr	r1, [pc, #20]	; (801142c <tcp_timer_needed+0x3c>)
 8011416:	20fa      	movs	r0, #250	; 0xfa
 8011418:	f000 f8cc 	bl	80115b4 <sys_timeout>
  }
}
 801141c:	bf00      	nop
 801141e:	bd80      	pop	{r7, pc}
 8011420:	24003630 	.word	0x24003630
 8011424:	240035e4 	.word	0x240035e4
 8011428:	240035e8 	.word	0x240035e8
 801142c:	080113a9 	.word	0x080113a9

08011430 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b086      	sub	sp, #24
 8011434:	af00      	add	r7, sp, #0
 8011436:	60f8      	str	r0, [r7, #12]
 8011438:	60b9      	str	r1, [r7, #8]
 801143a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801143c:	2006      	movs	r0, #6
 801143e:	f7f8 fe0b 	bl	800a058 <memp_malloc>
 8011442:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011444:	693b      	ldr	r3, [r7, #16]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d109      	bne.n	801145e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801144a:	693b      	ldr	r3, [r7, #16]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d151      	bne.n	80114f4 <sys_timeout_abs+0xc4>
 8011450:	4b2a      	ldr	r3, [pc, #168]	; (80114fc <sys_timeout_abs+0xcc>)
 8011452:	22be      	movs	r2, #190	; 0xbe
 8011454:	492a      	ldr	r1, [pc, #168]	; (8011500 <sys_timeout_abs+0xd0>)
 8011456:	482b      	ldr	r0, [pc, #172]	; (8011504 <sys_timeout_abs+0xd4>)
 8011458:	f002 fe04 	bl	8014064 <iprintf>
    return;
 801145c:	e04a      	b.n	80114f4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801145e:	693b      	ldr	r3, [r7, #16]
 8011460:	2200      	movs	r2, #0
 8011462:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	68ba      	ldr	r2, [r7, #8]
 8011468:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801146a:	693b      	ldr	r3, [r7, #16]
 801146c:	687a      	ldr	r2, [r7, #4]
 801146e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011470:	693b      	ldr	r3, [r7, #16]
 8011472:	68fa      	ldr	r2, [r7, #12]
 8011474:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011476:	4b24      	ldr	r3, [pc, #144]	; (8011508 <sys_timeout_abs+0xd8>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d103      	bne.n	8011486 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801147e:	4a22      	ldr	r2, [pc, #136]	; (8011508 <sys_timeout_abs+0xd8>)
 8011480:	693b      	ldr	r3, [r7, #16]
 8011482:	6013      	str	r3, [r2, #0]
    return;
 8011484:	e037      	b.n	80114f6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011486:	693b      	ldr	r3, [r7, #16]
 8011488:	685a      	ldr	r2, [r3, #4]
 801148a:	4b1f      	ldr	r3, [pc, #124]	; (8011508 <sys_timeout_abs+0xd8>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	685b      	ldr	r3, [r3, #4]
 8011490:	1ad3      	subs	r3, r2, r3
 8011492:	0fdb      	lsrs	r3, r3, #31
 8011494:	f003 0301 	and.w	r3, r3, #1
 8011498:	b2db      	uxtb	r3, r3
 801149a:	2b00      	cmp	r3, #0
 801149c:	d007      	beq.n	80114ae <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801149e:	4b1a      	ldr	r3, [pc, #104]	; (8011508 <sys_timeout_abs+0xd8>)
 80114a0:	681a      	ldr	r2, [r3, #0]
 80114a2:	693b      	ldr	r3, [r7, #16]
 80114a4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80114a6:	4a18      	ldr	r2, [pc, #96]	; (8011508 <sys_timeout_abs+0xd8>)
 80114a8:	693b      	ldr	r3, [r7, #16]
 80114aa:	6013      	str	r3, [r2, #0]
 80114ac:	e023      	b.n	80114f6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80114ae:	4b16      	ldr	r3, [pc, #88]	; (8011508 <sys_timeout_abs+0xd8>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	617b      	str	r3, [r7, #20]
 80114b4:	e01a      	b.n	80114ec <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80114b6:	697b      	ldr	r3, [r7, #20]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d00b      	beq.n	80114d6 <sys_timeout_abs+0xa6>
 80114be:	693b      	ldr	r3, [r7, #16]
 80114c0:	685a      	ldr	r2, [r3, #4]
 80114c2:	697b      	ldr	r3, [r7, #20]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	685b      	ldr	r3, [r3, #4]
 80114c8:	1ad3      	subs	r3, r2, r3
 80114ca:	0fdb      	lsrs	r3, r3, #31
 80114cc:	f003 0301 	and.w	r3, r3, #1
 80114d0:	b2db      	uxtb	r3, r3
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d007      	beq.n	80114e6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	681a      	ldr	r2, [r3, #0]
 80114da:	693b      	ldr	r3, [r7, #16]
 80114dc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80114de:	697b      	ldr	r3, [r7, #20]
 80114e0:	693a      	ldr	r2, [r7, #16]
 80114e2:	601a      	str	r2, [r3, #0]
        break;
 80114e4:	e007      	b.n	80114f6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80114e6:	697b      	ldr	r3, [r7, #20]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	617b      	str	r3, [r7, #20]
 80114ec:	697b      	ldr	r3, [r7, #20]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d1e1      	bne.n	80114b6 <sys_timeout_abs+0x86>
 80114f2:	e000      	b.n	80114f6 <sys_timeout_abs+0xc6>
    return;
 80114f4:	bf00      	nop
      }
    }
  }
}
 80114f6:	3718      	adds	r7, #24
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bd80      	pop	{r7, pc}
 80114fc:	08017250 	.word	0x08017250
 8011500:	08017284 	.word	0x08017284
 8011504:	080172c4 	.word	0x080172c4
 8011508:	24003628 	.word	0x24003628

0801150c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b086      	sub	sp, #24
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011518:	697b      	ldr	r3, [r7, #20]
 801151a:	685b      	ldr	r3, [r3, #4]
 801151c:	4798      	blx	r3

  now = sys_now();
 801151e:	f7f6 ff83 	bl	8008428 <sys_now>
 8011522:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011524:	697b      	ldr	r3, [r7, #20]
 8011526:	681a      	ldr	r2, [r3, #0]
 8011528:	4b0f      	ldr	r3, [pc, #60]	; (8011568 <lwip_cyclic_timer+0x5c>)
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	4413      	add	r3, r2
 801152e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011530:	68fa      	ldr	r2, [r7, #12]
 8011532:	693b      	ldr	r3, [r7, #16]
 8011534:	1ad3      	subs	r3, r2, r3
 8011536:	0fdb      	lsrs	r3, r3, #31
 8011538:	f003 0301 	and.w	r3, r3, #1
 801153c:	b2db      	uxtb	r3, r3
 801153e:	2b00      	cmp	r3, #0
 8011540:	d009      	beq.n	8011556 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011542:	697b      	ldr	r3, [r7, #20]
 8011544:	681a      	ldr	r2, [r3, #0]
 8011546:	693b      	ldr	r3, [r7, #16]
 8011548:	4413      	add	r3, r2
 801154a:	687a      	ldr	r2, [r7, #4]
 801154c:	4907      	ldr	r1, [pc, #28]	; (801156c <lwip_cyclic_timer+0x60>)
 801154e:	4618      	mov	r0, r3
 8011550:	f7ff ff6e 	bl	8011430 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011554:	e004      	b.n	8011560 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011556:	687a      	ldr	r2, [r7, #4]
 8011558:	4904      	ldr	r1, [pc, #16]	; (801156c <lwip_cyclic_timer+0x60>)
 801155a:	68f8      	ldr	r0, [r7, #12]
 801155c:	f7ff ff68 	bl	8011430 <sys_timeout_abs>
}
 8011560:	bf00      	nop
 8011562:	3718      	adds	r7, #24
 8011564:	46bd      	mov	sp, r7
 8011566:	bd80      	pop	{r7, pc}
 8011568:	2400362c 	.word	0x2400362c
 801156c:	0801150d 	.word	0x0801150d

08011570 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b082      	sub	sp, #8
 8011574:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011576:	2301      	movs	r3, #1
 8011578:	607b      	str	r3, [r7, #4]
 801157a:	e00e      	b.n	801159a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801157c:	4a0b      	ldr	r2, [pc, #44]	; (80115ac <sys_timeouts_init+0x3c>)
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	00db      	lsls	r3, r3, #3
 8011588:	4a08      	ldr	r2, [pc, #32]	; (80115ac <sys_timeouts_init+0x3c>)
 801158a:	4413      	add	r3, r2
 801158c:	461a      	mov	r2, r3
 801158e:	4908      	ldr	r1, [pc, #32]	; (80115b0 <sys_timeouts_init+0x40>)
 8011590:	f000 f810 	bl	80115b4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	3301      	adds	r3, #1
 8011598:	607b      	str	r3, [r7, #4]
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	2b02      	cmp	r3, #2
 801159e:	d9ed      	bls.n	801157c <sys_timeouts_init+0xc>
  }
}
 80115a0:	bf00      	nop
 80115a2:	bf00      	nop
 80115a4:	3708      	adds	r7, #8
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}
 80115aa:	bf00      	nop
 80115ac:	08018c30 	.word	0x08018c30
 80115b0:	0801150d 	.word	0x0801150d

080115b4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b086      	sub	sp, #24
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	60f8      	str	r0, [r7, #12]
 80115bc:	60b9      	str	r1, [r7, #8]
 80115be:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80115c6:	d306      	bcc.n	80115d6 <sys_timeout+0x22>
 80115c8:	4b0a      	ldr	r3, [pc, #40]	; (80115f4 <sys_timeout+0x40>)
 80115ca:	f240 1229 	movw	r2, #297	; 0x129
 80115ce:	490a      	ldr	r1, [pc, #40]	; (80115f8 <sys_timeout+0x44>)
 80115d0:	480a      	ldr	r0, [pc, #40]	; (80115fc <sys_timeout+0x48>)
 80115d2:	f002 fd47 	bl	8014064 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80115d6:	f7f6 ff27 	bl	8008428 <sys_now>
 80115da:	4602      	mov	r2, r0
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	4413      	add	r3, r2
 80115e0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80115e2:	687a      	ldr	r2, [r7, #4]
 80115e4:	68b9      	ldr	r1, [r7, #8]
 80115e6:	6978      	ldr	r0, [r7, #20]
 80115e8:	f7ff ff22 	bl	8011430 <sys_timeout_abs>
#endif
}
 80115ec:	bf00      	nop
 80115ee:	3718      	adds	r7, #24
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd80      	pop	{r7, pc}
 80115f4:	08017250 	.word	0x08017250
 80115f8:	080172ec 	.word	0x080172ec
 80115fc:	080172c4 	.word	0x080172c4

08011600 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b084      	sub	sp, #16
 8011604:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011606:	f7f6 ff0f 	bl	8008428 <sys_now>
 801160a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 801160c:	4b1a      	ldr	r3, [pc, #104]	; (8011678 <sys_check_timeouts+0x78>)
 801160e:	781b      	ldrb	r3, [r3, #0]
 8011610:	b2db      	uxtb	r3, r3
 8011612:	2b00      	cmp	r3, #0
 8011614:	d001      	beq.n	801161a <sys_check_timeouts+0x1a>
 8011616:	f7f9 f8cb 	bl	800a7b0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801161a:	4b18      	ldr	r3, [pc, #96]	; (801167c <sys_check_timeouts+0x7c>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d022      	beq.n	801166c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011626:	68bb      	ldr	r3, [r7, #8]
 8011628:	685b      	ldr	r3, [r3, #4]
 801162a:	68fa      	ldr	r2, [r7, #12]
 801162c:	1ad3      	subs	r3, r2, r3
 801162e:	0fdb      	lsrs	r3, r3, #31
 8011630:	f003 0301 	and.w	r3, r3, #1
 8011634:	b2db      	uxtb	r3, r3
 8011636:	2b00      	cmp	r3, #0
 8011638:	d11a      	bne.n	8011670 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801163a:	68bb      	ldr	r3, [r7, #8]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	4a0f      	ldr	r2, [pc, #60]	; (801167c <sys_check_timeouts+0x7c>)
 8011640:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011642:	68bb      	ldr	r3, [r7, #8]
 8011644:	689b      	ldr	r3, [r3, #8]
 8011646:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011648:	68bb      	ldr	r3, [r7, #8]
 801164a:	68db      	ldr	r3, [r3, #12]
 801164c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	685b      	ldr	r3, [r3, #4]
 8011652:	4a0b      	ldr	r2, [pc, #44]	; (8011680 <sys_check_timeouts+0x80>)
 8011654:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011656:	68b9      	ldr	r1, [r7, #8]
 8011658:	2006      	movs	r0, #6
 801165a:	f7f8 fd6d 	bl	800a138 <memp_free>
    if (handler != NULL) {
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d0d3      	beq.n	801160c <sys_check_timeouts+0xc>
      handler(arg);
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	6838      	ldr	r0, [r7, #0]
 8011668:	4798      	blx	r3
  do {
 801166a:	e7cf      	b.n	801160c <sys_check_timeouts+0xc>
      return;
 801166c:	bf00      	nop
 801166e:	e000      	b.n	8011672 <sys_check_timeouts+0x72>
      return;
 8011670:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011672:	3710      	adds	r7, #16
 8011674:	46bd      	mov	sp, r7
 8011676:	bd80      	pop	{r7, pc}
 8011678:	240035d5 	.word	0x240035d5
 801167c:	24003628 	.word	0x24003628
 8011680:	2400362c 	.word	0x2400362c

08011684 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011684:	b580      	push	{r7, lr}
 8011686:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011688:	f002 fd04 	bl	8014094 <rand>
 801168c:	4603      	mov	r3, r0
 801168e:	b29b      	uxth	r3, r3
 8011690:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011694:	b29b      	uxth	r3, r3
 8011696:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801169a:	b29a      	uxth	r2, r3
 801169c:	4b01      	ldr	r3, [pc, #4]	; (80116a4 <udp_init+0x20>)
 801169e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80116a0:	bf00      	nop
 80116a2:	bd80      	pop	{r7, pc}
 80116a4:	2400002c 	.word	0x2400002c

080116a8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b084      	sub	sp, #16
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	60f8      	str	r0, [r7, #12]
 80116b0:	60b9      	str	r1, [r7, #8]
 80116b2:	4613      	mov	r3, r2
 80116b4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d105      	bne.n	80116c8 <udp_input_local_match+0x20>
 80116bc:	4b27      	ldr	r3, [pc, #156]	; (801175c <udp_input_local_match+0xb4>)
 80116be:	2287      	movs	r2, #135	; 0x87
 80116c0:	4927      	ldr	r1, [pc, #156]	; (8011760 <udp_input_local_match+0xb8>)
 80116c2:	4828      	ldr	r0, [pc, #160]	; (8011764 <udp_input_local_match+0xbc>)
 80116c4:	f002 fcce 	bl	8014064 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80116c8:	68bb      	ldr	r3, [r7, #8]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d105      	bne.n	80116da <udp_input_local_match+0x32>
 80116ce:	4b23      	ldr	r3, [pc, #140]	; (801175c <udp_input_local_match+0xb4>)
 80116d0:	2288      	movs	r2, #136	; 0x88
 80116d2:	4925      	ldr	r1, [pc, #148]	; (8011768 <udp_input_local_match+0xc0>)
 80116d4:	4823      	ldr	r0, [pc, #140]	; (8011764 <udp_input_local_match+0xbc>)
 80116d6:	f002 fcc5 	bl	8014064 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	7a1b      	ldrb	r3, [r3, #8]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d00b      	beq.n	80116fa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	7a1a      	ldrb	r2, [r3, #8]
 80116e6:	4b21      	ldr	r3, [pc, #132]	; (801176c <udp_input_local_match+0xc4>)
 80116e8:	685b      	ldr	r3, [r3, #4]
 80116ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80116ee:	3301      	adds	r3, #1
 80116f0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80116f2:	429a      	cmp	r2, r3
 80116f4:	d001      	beq.n	80116fa <udp_input_local_match+0x52>
    return 0;
 80116f6:	2300      	movs	r3, #0
 80116f8:	e02b      	b.n	8011752 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80116fa:	79fb      	ldrb	r3, [r7, #7]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d018      	beq.n	8011732 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d013      	beq.n	801172e <udp_input_local_match+0x86>
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d00f      	beq.n	801172e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801170e:	4b17      	ldr	r3, [pc, #92]	; (801176c <udp_input_local_match+0xc4>)
 8011710:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011716:	d00a      	beq.n	801172e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	681a      	ldr	r2, [r3, #0]
 801171c:	4b13      	ldr	r3, [pc, #76]	; (801176c <udp_input_local_match+0xc4>)
 801171e:	695b      	ldr	r3, [r3, #20]
 8011720:	405a      	eors	r2, r3
 8011722:	68bb      	ldr	r3, [r7, #8]
 8011724:	3308      	adds	r3, #8
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801172a:	2b00      	cmp	r3, #0
 801172c:	d110      	bne.n	8011750 <udp_input_local_match+0xa8>
          return 1;
 801172e:	2301      	movs	r3, #1
 8011730:	e00f      	b.n	8011752 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d009      	beq.n	801174c <udp_input_local_match+0xa4>
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d005      	beq.n	801174c <udp_input_local_match+0xa4>
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	681a      	ldr	r2, [r3, #0]
 8011744:	4b09      	ldr	r3, [pc, #36]	; (801176c <udp_input_local_match+0xc4>)
 8011746:	695b      	ldr	r3, [r3, #20]
 8011748:	429a      	cmp	r2, r3
 801174a:	d101      	bne.n	8011750 <udp_input_local_match+0xa8>
        return 1;
 801174c:	2301      	movs	r3, #1
 801174e:	e000      	b.n	8011752 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011750:	2300      	movs	r3, #0
}
 8011752:	4618      	mov	r0, r3
 8011754:	3710      	adds	r7, #16
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}
 801175a:	bf00      	nop
 801175c:	08017338 	.word	0x08017338
 8011760:	08017368 	.word	0x08017368
 8011764:	0801738c 	.word	0x0801738c
 8011768:	080173b4 	.word	0x080173b4
 801176c:	240006bc 	.word	0x240006bc

08011770 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011770:	b590      	push	{r4, r7, lr}
 8011772:	b08d      	sub	sp, #52	; 0x34
 8011774:	af02      	add	r7, sp, #8
 8011776:	6078      	str	r0, [r7, #4]
 8011778:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801177a:	2300      	movs	r3, #0
 801177c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d105      	bne.n	8011790 <udp_input+0x20>
 8011784:	4b7c      	ldr	r3, [pc, #496]	; (8011978 <udp_input+0x208>)
 8011786:	22cf      	movs	r2, #207	; 0xcf
 8011788:	497c      	ldr	r1, [pc, #496]	; (801197c <udp_input+0x20c>)
 801178a:	487d      	ldr	r0, [pc, #500]	; (8011980 <udp_input+0x210>)
 801178c:	f002 fc6a 	bl	8014064 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d105      	bne.n	80117a2 <udp_input+0x32>
 8011796:	4b78      	ldr	r3, [pc, #480]	; (8011978 <udp_input+0x208>)
 8011798:	22d0      	movs	r2, #208	; 0xd0
 801179a:	497a      	ldr	r1, [pc, #488]	; (8011984 <udp_input+0x214>)
 801179c:	4878      	ldr	r0, [pc, #480]	; (8011980 <udp_input+0x210>)
 801179e:	f002 fc61 	bl	8014064 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	895b      	ldrh	r3, [r3, #10]
 80117a6:	2b07      	cmp	r3, #7
 80117a8:	d803      	bhi.n	80117b2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80117aa:	6878      	ldr	r0, [r7, #4]
 80117ac:	f7f9 fb38 	bl	800ae20 <pbuf_free>
    goto end;
 80117b0:	e0de      	b.n	8011970 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	685b      	ldr	r3, [r3, #4]
 80117b6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80117b8:	4b73      	ldr	r3, [pc, #460]	; (8011988 <udp_input+0x218>)
 80117ba:	695b      	ldr	r3, [r3, #20]
 80117bc:	4a72      	ldr	r2, [pc, #456]	; (8011988 <udp_input+0x218>)
 80117be:	6812      	ldr	r2, [r2, #0]
 80117c0:	4611      	mov	r1, r2
 80117c2:	4618      	mov	r0, r3
 80117c4:	f001 fcae 	bl	8013124 <ip4_addr_isbroadcast_u32>
 80117c8:	4603      	mov	r3, r0
 80117ca:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80117cc:	697b      	ldr	r3, [r7, #20]
 80117ce:	881b      	ldrh	r3, [r3, #0]
 80117d0:	b29b      	uxth	r3, r3
 80117d2:	4618      	mov	r0, r3
 80117d4:	f7f7 feec 	bl	80095b0 <lwip_htons>
 80117d8:	4603      	mov	r3, r0
 80117da:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80117dc:	697b      	ldr	r3, [r7, #20]
 80117de:	885b      	ldrh	r3, [r3, #2]
 80117e0:	b29b      	uxth	r3, r3
 80117e2:	4618      	mov	r0, r3
 80117e4:	f7f7 fee4 	bl	80095b0 <lwip_htons>
 80117e8:	4603      	mov	r3, r0
 80117ea:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80117ec:	2300      	movs	r3, #0
 80117ee:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80117f0:	2300      	movs	r3, #0
 80117f2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80117f4:	2300      	movs	r3, #0
 80117f6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80117f8:	4b64      	ldr	r3, [pc, #400]	; (801198c <udp_input+0x21c>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	627b      	str	r3, [r7, #36]	; 0x24
 80117fe:	e054      	b.n	80118aa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011802:	8a5b      	ldrh	r3, [r3, #18]
 8011804:	89fa      	ldrh	r2, [r7, #14]
 8011806:	429a      	cmp	r2, r3
 8011808:	d14a      	bne.n	80118a0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801180a:	7cfb      	ldrb	r3, [r7, #19]
 801180c:	461a      	mov	r2, r3
 801180e:	6839      	ldr	r1, [r7, #0]
 8011810:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011812:	f7ff ff49 	bl	80116a8 <udp_input_local_match>
 8011816:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011818:	2b00      	cmp	r3, #0
 801181a:	d041      	beq.n	80118a0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801181e:	7c1b      	ldrb	r3, [r3, #16]
 8011820:	f003 0304 	and.w	r3, r3, #4
 8011824:	2b00      	cmp	r3, #0
 8011826:	d11d      	bne.n	8011864 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011828:	69fb      	ldr	r3, [r7, #28]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d102      	bne.n	8011834 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011830:	61fb      	str	r3, [r7, #28]
 8011832:	e017      	b.n	8011864 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011834:	7cfb      	ldrb	r3, [r7, #19]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d014      	beq.n	8011864 <udp_input+0xf4>
 801183a:	4b53      	ldr	r3, [pc, #332]	; (8011988 <udp_input+0x218>)
 801183c:	695b      	ldr	r3, [r3, #20]
 801183e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011842:	d10f      	bne.n	8011864 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011844:	69fb      	ldr	r3, [r7, #28]
 8011846:	681a      	ldr	r2, [r3, #0]
 8011848:	683b      	ldr	r3, [r7, #0]
 801184a:	3304      	adds	r3, #4
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	429a      	cmp	r2, r3
 8011850:	d008      	beq.n	8011864 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011854:	681a      	ldr	r2, [r3, #0]
 8011856:	683b      	ldr	r3, [r7, #0]
 8011858:	3304      	adds	r3, #4
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	429a      	cmp	r2, r3
 801185e:	d101      	bne.n	8011864 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011862:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011866:	8a9b      	ldrh	r3, [r3, #20]
 8011868:	8a3a      	ldrh	r2, [r7, #16]
 801186a:	429a      	cmp	r2, r3
 801186c:	d118      	bne.n	80118a0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011870:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011872:	2b00      	cmp	r3, #0
 8011874:	d005      	beq.n	8011882 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011878:	685a      	ldr	r2, [r3, #4]
 801187a:	4b43      	ldr	r3, [pc, #268]	; (8011988 <udp_input+0x218>)
 801187c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801187e:	429a      	cmp	r2, r3
 8011880:	d10e      	bne.n	80118a0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011882:	6a3b      	ldr	r3, [r7, #32]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d014      	beq.n	80118b2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801188a:	68da      	ldr	r2, [r3, #12]
 801188c:	6a3b      	ldr	r3, [r7, #32]
 801188e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011890:	4b3e      	ldr	r3, [pc, #248]	; (801198c <udp_input+0x21c>)
 8011892:	681a      	ldr	r2, [r3, #0]
 8011894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011896:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011898:	4a3c      	ldr	r2, [pc, #240]	; (801198c <udp_input+0x21c>)
 801189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801189c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801189e:	e008      	b.n	80118b2 <udp_input+0x142>
      }
    }

    prev = pcb;
 80118a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118a2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80118a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118a6:	68db      	ldr	r3, [r3, #12]
 80118a8:	627b      	str	r3, [r7, #36]	; 0x24
 80118aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d1a7      	bne.n	8011800 <udp_input+0x90>
 80118b0:	e000      	b.n	80118b4 <udp_input+0x144>
        break;
 80118b2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80118b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d101      	bne.n	80118be <udp_input+0x14e>
    pcb = uncon_pcb;
 80118ba:	69fb      	ldr	r3, [r7, #28]
 80118bc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80118be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d002      	beq.n	80118ca <udp_input+0x15a>
    for_us = 1;
 80118c4:	2301      	movs	r3, #1
 80118c6:	76fb      	strb	r3, [r7, #27]
 80118c8:	e00a      	b.n	80118e0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80118ca:	683b      	ldr	r3, [r7, #0]
 80118cc:	3304      	adds	r3, #4
 80118ce:	681a      	ldr	r2, [r3, #0]
 80118d0:	4b2d      	ldr	r3, [pc, #180]	; (8011988 <udp_input+0x218>)
 80118d2:	695b      	ldr	r3, [r3, #20]
 80118d4:	429a      	cmp	r2, r3
 80118d6:	bf0c      	ite	eq
 80118d8:	2301      	moveq	r3, #1
 80118da:	2300      	movne	r3, #0
 80118dc:	b2db      	uxtb	r3, r3
 80118de:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80118e0:	7efb      	ldrb	r3, [r7, #27]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d041      	beq.n	801196a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80118e6:	2108      	movs	r1, #8
 80118e8:	6878      	ldr	r0, [r7, #4]
 80118ea:	f7f9 fa13 	bl	800ad14 <pbuf_remove_header>
 80118ee:	4603      	mov	r3, r0
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d00a      	beq.n	801190a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80118f4:	4b20      	ldr	r3, [pc, #128]	; (8011978 <udp_input+0x208>)
 80118f6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80118fa:	4925      	ldr	r1, [pc, #148]	; (8011990 <udp_input+0x220>)
 80118fc:	4820      	ldr	r0, [pc, #128]	; (8011980 <udp_input+0x210>)
 80118fe:	f002 fbb1 	bl	8014064 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011902:	6878      	ldr	r0, [r7, #4]
 8011904:	f7f9 fa8c 	bl	800ae20 <pbuf_free>
      goto end;
 8011908:	e032      	b.n	8011970 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801190c:	2b00      	cmp	r3, #0
 801190e:	d012      	beq.n	8011936 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011912:	699b      	ldr	r3, [r3, #24]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d00a      	beq.n	801192e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801191a:	699c      	ldr	r4, [r3, #24]
 801191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801191e:	69d8      	ldr	r0, [r3, #28]
 8011920:	8a3b      	ldrh	r3, [r7, #16]
 8011922:	9300      	str	r3, [sp, #0]
 8011924:	4b1b      	ldr	r3, [pc, #108]	; (8011994 <udp_input+0x224>)
 8011926:	687a      	ldr	r2, [r7, #4]
 8011928:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801192a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801192c:	e021      	b.n	8011972 <udp_input+0x202>
        pbuf_free(p);
 801192e:	6878      	ldr	r0, [r7, #4]
 8011930:	f7f9 fa76 	bl	800ae20 <pbuf_free>
        goto end;
 8011934:	e01c      	b.n	8011970 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011936:	7cfb      	ldrb	r3, [r7, #19]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d112      	bne.n	8011962 <udp_input+0x1f2>
 801193c:	4b12      	ldr	r3, [pc, #72]	; (8011988 <udp_input+0x218>)
 801193e:	695b      	ldr	r3, [r3, #20]
 8011940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011944:	2be0      	cmp	r3, #224	; 0xe0
 8011946:	d00c      	beq.n	8011962 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011948:	4b0f      	ldr	r3, [pc, #60]	; (8011988 <udp_input+0x218>)
 801194a:	899b      	ldrh	r3, [r3, #12]
 801194c:	3308      	adds	r3, #8
 801194e:	b29b      	uxth	r3, r3
 8011950:	b21b      	sxth	r3, r3
 8011952:	4619      	mov	r1, r3
 8011954:	6878      	ldr	r0, [r7, #4]
 8011956:	f7f9 fa50 	bl	800adfa <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801195a:	2103      	movs	r1, #3
 801195c:	6878      	ldr	r0, [r7, #4]
 801195e:	f001 f8b7 	bl	8012ad0 <icmp_dest_unreach>
      pbuf_free(p);
 8011962:	6878      	ldr	r0, [r7, #4]
 8011964:	f7f9 fa5c 	bl	800ae20 <pbuf_free>
  return;
 8011968:	e003      	b.n	8011972 <udp_input+0x202>
    pbuf_free(p);
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f7f9 fa58 	bl	800ae20 <pbuf_free>
  return;
 8011970:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011972:	372c      	adds	r7, #44	; 0x2c
 8011974:	46bd      	mov	sp, r7
 8011976:	bd90      	pop	{r4, r7, pc}
 8011978:	08017338 	.word	0x08017338
 801197c:	080173dc 	.word	0x080173dc
 8011980:	0801738c 	.word	0x0801738c
 8011984:	080173f4 	.word	0x080173f4
 8011988:	240006bc 	.word	0x240006bc
 801198c:	24003634 	.word	0x24003634
 8011990:	08017410 	.word	0x08017410
 8011994:	240006cc 	.word	0x240006cc

08011998 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011998:	b480      	push	{r7}
 801199a:	b085      	sub	sp, #20
 801199c:	af00      	add	r7, sp, #0
 801199e:	6078      	str	r0, [r7, #4]
 80119a0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d01e      	beq.n	80119e6 <udp_netif_ip_addr_changed+0x4e>
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d01a      	beq.n	80119e6 <udp_netif_ip_addr_changed+0x4e>
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d017      	beq.n	80119e6 <udp_netif_ip_addr_changed+0x4e>
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d013      	beq.n	80119e6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80119be:	4b0d      	ldr	r3, [pc, #52]	; (80119f4 <udp_netif_ip_addr_changed+0x5c>)
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	60fb      	str	r3, [r7, #12]
 80119c4:	e00c      	b.n	80119e0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	681a      	ldr	r2, [r3, #0]
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	429a      	cmp	r2, r3
 80119d0:	d103      	bne.n	80119da <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	681a      	ldr	r2, [r3, #0]
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	68db      	ldr	r3, [r3, #12]
 80119de:	60fb      	str	r3, [r7, #12]
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d1ef      	bne.n	80119c6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80119e6:	bf00      	nop
 80119e8:	3714      	adds	r7, #20
 80119ea:	46bd      	mov	sp, r7
 80119ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f0:	4770      	bx	lr
 80119f2:	bf00      	nop
 80119f4:	24003634 	.word	0x24003634

080119f8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b082      	sub	sp, #8
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011a00:	4915      	ldr	r1, [pc, #84]	; (8011a58 <etharp_free_entry+0x60>)
 8011a02:	687a      	ldr	r2, [r7, #4]
 8011a04:	4613      	mov	r3, r2
 8011a06:	005b      	lsls	r3, r3, #1
 8011a08:	4413      	add	r3, r2
 8011a0a:	00db      	lsls	r3, r3, #3
 8011a0c:	440b      	add	r3, r1
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d013      	beq.n	8011a3c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011a14:	4910      	ldr	r1, [pc, #64]	; (8011a58 <etharp_free_entry+0x60>)
 8011a16:	687a      	ldr	r2, [r7, #4]
 8011a18:	4613      	mov	r3, r2
 8011a1a:	005b      	lsls	r3, r3, #1
 8011a1c:	4413      	add	r3, r2
 8011a1e:	00db      	lsls	r3, r3, #3
 8011a20:	440b      	add	r3, r1
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	4618      	mov	r0, r3
 8011a26:	f7f9 f9fb 	bl	800ae20 <pbuf_free>
    arp_table[i].q = NULL;
 8011a2a:	490b      	ldr	r1, [pc, #44]	; (8011a58 <etharp_free_entry+0x60>)
 8011a2c:	687a      	ldr	r2, [r7, #4]
 8011a2e:	4613      	mov	r3, r2
 8011a30:	005b      	lsls	r3, r3, #1
 8011a32:	4413      	add	r3, r2
 8011a34:	00db      	lsls	r3, r3, #3
 8011a36:	440b      	add	r3, r1
 8011a38:	2200      	movs	r2, #0
 8011a3a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011a3c:	4906      	ldr	r1, [pc, #24]	; (8011a58 <etharp_free_entry+0x60>)
 8011a3e:	687a      	ldr	r2, [r7, #4]
 8011a40:	4613      	mov	r3, r2
 8011a42:	005b      	lsls	r3, r3, #1
 8011a44:	4413      	add	r3, r2
 8011a46:	00db      	lsls	r3, r3, #3
 8011a48:	440b      	add	r3, r1
 8011a4a:	3314      	adds	r3, #20
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011a50:	bf00      	nop
 8011a52:	3708      	adds	r7, #8
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bd80      	pop	{r7, pc}
 8011a58:	24003638 	.word	0x24003638

08011a5c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b082      	sub	sp, #8
 8011a60:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011a62:	2300      	movs	r3, #0
 8011a64:	607b      	str	r3, [r7, #4]
 8011a66:	e096      	b.n	8011b96 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011a68:	494f      	ldr	r1, [pc, #316]	; (8011ba8 <etharp_tmr+0x14c>)
 8011a6a:	687a      	ldr	r2, [r7, #4]
 8011a6c:	4613      	mov	r3, r2
 8011a6e:	005b      	lsls	r3, r3, #1
 8011a70:	4413      	add	r3, r2
 8011a72:	00db      	lsls	r3, r3, #3
 8011a74:	440b      	add	r3, r1
 8011a76:	3314      	adds	r3, #20
 8011a78:	781b      	ldrb	r3, [r3, #0]
 8011a7a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011a7c:	78fb      	ldrb	r3, [r7, #3]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	f000 8086 	beq.w	8011b90 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011a84:	4948      	ldr	r1, [pc, #288]	; (8011ba8 <etharp_tmr+0x14c>)
 8011a86:	687a      	ldr	r2, [r7, #4]
 8011a88:	4613      	mov	r3, r2
 8011a8a:	005b      	lsls	r3, r3, #1
 8011a8c:	4413      	add	r3, r2
 8011a8e:	00db      	lsls	r3, r3, #3
 8011a90:	440b      	add	r3, r1
 8011a92:	3312      	adds	r3, #18
 8011a94:	881b      	ldrh	r3, [r3, #0]
 8011a96:	3301      	adds	r3, #1
 8011a98:	b298      	uxth	r0, r3
 8011a9a:	4943      	ldr	r1, [pc, #268]	; (8011ba8 <etharp_tmr+0x14c>)
 8011a9c:	687a      	ldr	r2, [r7, #4]
 8011a9e:	4613      	mov	r3, r2
 8011aa0:	005b      	lsls	r3, r3, #1
 8011aa2:	4413      	add	r3, r2
 8011aa4:	00db      	lsls	r3, r3, #3
 8011aa6:	440b      	add	r3, r1
 8011aa8:	3312      	adds	r3, #18
 8011aaa:	4602      	mov	r2, r0
 8011aac:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011aae:	493e      	ldr	r1, [pc, #248]	; (8011ba8 <etharp_tmr+0x14c>)
 8011ab0:	687a      	ldr	r2, [r7, #4]
 8011ab2:	4613      	mov	r3, r2
 8011ab4:	005b      	lsls	r3, r3, #1
 8011ab6:	4413      	add	r3, r2
 8011ab8:	00db      	lsls	r3, r3, #3
 8011aba:	440b      	add	r3, r1
 8011abc:	3312      	adds	r3, #18
 8011abe:	881b      	ldrh	r3, [r3, #0]
 8011ac0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011ac4:	d215      	bcs.n	8011af2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011ac6:	4938      	ldr	r1, [pc, #224]	; (8011ba8 <etharp_tmr+0x14c>)
 8011ac8:	687a      	ldr	r2, [r7, #4]
 8011aca:	4613      	mov	r3, r2
 8011acc:	005b      	lsls	r3, r3, #1
 8011ace:	4413      	add	r3, r2
 8011ad0:	00db      	lsls	r3, r3, #3
 8011ad2:	440b      	add	r3, r1
 8011ad4:	3314      	adds	r3, #20
 8011ad6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011ad8:	2b01      	cmp	r3, #1
 8011ada:	d10e      	bne.n	8011afa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011adc:	4932      	ldr	r1, [pc, #200]	; (8011ba8 <etharp_tmr+0x14c>)
 8011ade:	687a      	ldr	r2, [r7, #4]
 8011ae0:	4613      	mov	r3, r2
 8011ae2:	005b      	lsls	r3, r3, #1
 8011ae4:	4413      	add	r3, r2
 8011ae6:	00db      	lsls	r3, r3, #3
 8011ae8:	440b      	add	r3, r1
 8011aea:	3312      	adds	r3, #18
 8011aec:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011aee:	2b04      	cmp	r3, #4
 8011af0:	d903      	bls.n	8011afa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011af2:	6878      	ldr	r0, [r7, #4]
 8011af4:	f7ff ff80 	bl	80119f8 <etharp_free_entry>
 8011af8:	e04a      	b.n	8011b90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011afa:	492b      	ldr	r1, [pc, #172]	; (8011ba8 <etharp_tmr+0x14c>)
 8011afc:	687a      	ldr	r2, [r7, #4]
 8011afe:	4613      	mov	r3, r2
 8011b00:	005b      	lsls	r3, r3, #1
 8011b02:	4413      	add	r3, r2
 8011b04:	00db      	lsls	r3, r3, #3
 8011b06:	440b      	add	r3, r1
 8011b08:	3314      	adds	r3, #20
 8011b0a:	781b      	ldrb	r3, [r3, #0]
 8011b0c:	2b03      	cmp	r3, #3
 8011b0e:	d10a      	bne.n	8011b26 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011b10:	4925      	ldr	r1, [pc, #148]	; (8011ba8 <etharp_tmr+0x14c>)
 8011b12:	687a      	ldr	r2, [r7, #4]
 8011b14:	4613      	mov	r3, r2
 8011b16:	005b      	lsls	r3, r3, #1
 8011b18:	4413      	add	r3, r2
 8011b1a:	00db      	lsls	r3, r3, #3
 8011b1c:	440b      	add	r3, r1
 8011b1e:	3314      	adds	r3, #20
 8011b20:	2204      	movs	r2, #4
 8011b22:	701a      	strb	r2, [r3, #0]
 8011b24:	e034      	b.n	8011b90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011b26:	4920      	ldr	r1, [pc, #128]	; (8011ba8 <etharp_tmr+0x14c>)
 8011b28:	687a      	ldr	r2, [r7, #4]
 8011b2a:	4613      	mov	r3, r2
 8011b2c:	005b      	lsls	r3, r3, #1
 8011b2e:	4413      	add	r3, r2
 8011b30:	00db      	lsls	r3, r3, #3
 8011b32:	440b      	add	r3, r1
 8011b34:	3314      	adds	r3, #20
 8011b36:	781b      	ldrb	r3, [r3, #0]
 8011b38:	2b04      	cmp	r3, #4
 8011b3a:	d10a      	bne.n	8011b52 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011b3c:	491a      	ldr	r1, [pc, #104]	; (8011ba8 <etharp_tmr+0x14c>)
 8011b3e:	687a      	ldr	r2, [r7, #4]
 8011b40:	4613      	mov	r3, r2
 8011b42:	005b      	lsls	r3, r3, #1
 8011b44:	4413      	add	r3, r2
 8011b46:	00db      	lsls	r3, r3, #3
 8011b48:	440b      	add	r3, r1
 8011b4a:	3314      	adds	r3, #20
 8011b4c:	2202      	movs	r2, #2
 8011b4e:	701a      	strb	r2, [r3, #0]
 8011b50:	e01e      	b.n	8011b90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011b52:	4915      	ldr	r1, [pc, #84]	; (8011ba8 <etharp_tmr+0x14c>)
 8011b54:	687a      	ldr	r2, [r7, #4]
 8011b56:	4613      	mov	r3, r2
 8011b58:	005b      	lsls	r3, r3, #1
 8011b5a:	4413      	add	r3, r2
 8011b5c:	00db      	lsls	r3, r3, #3
 8011b5e:	440b      	add	r3, r1
 8011b60:	3314      	adds	r3, #20
 8011b62:	781b      	ldrb	r3, [r3, #0]
 8011b64:	2b01      	cmp	r3, #1
 8011b66:	d113      	bne.n	8011b90 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011b68:	490f      	ldr	r1, [pc, #60]	; (8011ba8 <etharp_tmr+0x14c>)
 8011b6a:	687a      	ldr	r2, [r7, #4]
 8011b6c:	4613      	mov	r3, r2
 8011b6e:	005b      	lsls	r3, r3, #1
 8011b70:	4413      	add	r3, r2
 8011b72:	00db      	lsls	r3, r3, #3
 8011b74:	440b      	add	r3, r1
 8011b76:	3308      	adds	r3, #8
 8011b78:	6818      	ldr	r0, [r3, #0]
 8011b7a:	687a      	ldr	r2, [r7, #4]
 8011b7c:	4613      	mov	r3, r2
 8011b7e:	005b      	lsls	r3, r3, #1
 8011b80:	4413      	add	r3, r2
 8011b82:	00db      	lsls	r3, r3, #3
 8011b84:	4a08      	ldr	r2, [pc, #32]	; (8011ba8 <etharp_tmr+0x14c>)
 8011b86:	4413      	add	r3, r2
 8011b88:	3304      	adds	r3, #4
 8011b8a:	4619      	mov	r1, r3
 8011b8c:	f000 fe6e 	bl	801286c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	3301      	adds	r3, #1
 8011b94:	607b      	str	r3, [r7, #4]
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	2b09      	cmp	r3, #9
 8011b9a:	f77f af65 	ble.w	8011a68 <etharp_tmr+0xc>
      }
    }
  }
}
 8011b9e:	bf00      	nop
 8011ba0:	bf00      	nop
 8011ba2:	3708      	adds	r7, #8
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bd80      	pop	{r7, pc}
 8011ba8:	24003638 	.word	0x24003638

08011bac <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b08a      	sub	sp, #40	; 0x28
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	60f8      	str	r0, [r7, #12]
 8011bb4:	460b      	mov	r3, r1
 8011bb6:	607a      	str	r2, [r7, #4]
 8011bb8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011bba:	230a      	movs	r3, #10
 8011bbc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011bbe:	230a      	movs	r3, #10
 8011bc0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8011bc2:	230a      	movs	r3, #10
 8011bc4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011bca:	230a      	movs	r3, #10
 8011bcc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011bce:	2300      	movs	r3, #0
 8011bd0:	83bb      	strh	r3, [r7, #28]
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	837b      	strh	r3, [r7, #26]
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011bda:	2300      	movs	r3, #0
 8011bdc:	843b      	strh	r3, [r7, #32]
 8011bde:	e0ae      	b.n	8011d3e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011be0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011be4:	49a6      	ldr	r1, [pc, #664]	; (8011e80 <etharp_find_entry+0x2d4>)
 8011be6:	4613      	mov	r3, r2
 8011be8:	005b      	lsls	r3, r3, #1
 8011bea:	4413      	add	r3, r2
 8011bec:	00db      	lsls	r3, r3, #3
 8011bee:	440b      	add	r3, r1
 8011bf0:	3314      	adds	r3, #20
 8011bf2:	781b      	ldrb	r3, [r3, #0]
 8011bf4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011bf6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011bfa:	2b0a      	cmp	r3, #10
 8011bfc:	d105      	bne.n	8011c0a <etharp_find_entry+0x5e>
 8011bfe:	7dfb      	ldrb	r3, [r7, #23]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d102      	bne.n	8011c0a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011c04:	8c3b      	ldrh	r3, [r7, #32]
 8011c06:	847b      	strh	r3, [r7, #34]	; 0x22
 8011c08:	e095      	b.n	8011d36 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011c0a:	7dfb      	ldrb	r3, [r7, #23]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	f000 8092 	beq.w	8011d36 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011c12:	7dfb      	ldrb	r3, [r7, #23]
 8011c14:	2b01      	cmp	r3, #1
 8011c16:	d009      	beq.n	8011c2c <etharp_find_entry+0x80>
 8011c18:	7dfb      	ldrb	r3, [r7, #23]
 8011c1a:	2b01      	cmp	r3, #1
 8011c1c:	d806      	bhi.n	8011c2c <etharp_find_entry+0x80>
 8011c1e:	4b99      	ldr	r3, [pc, #612]	; (8011e84 <etharp_find_entry+0x2d8>)
 8011c20:	f240 1223 	movw	r2, #291	; 0x123
 8011c24:	4998      	ldr	r1, [pc, #608]	; (8011e88 <etharp_find_entry+0x2dc>)
 8011c26:	4899      	ldr	r0, [pc, #612]	; (8011e8c <etharp_find_entry+0x2e0>)
 8011c28:	f002 fa1c 	bl	8014064 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d020      	beq.n	8011c74 <etharp_find_entry+0xc8>
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	6819      	ldr	r1, [r3, #0]
 8011c36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c3a:	4891      	ldr	r0, [pc, #580]	; (8011e80 <etharp_find_entry+0x2d4>)
 8011c3c:	4613      	mov	r3, r2
 8011c3e:	005b      	lsls	r3, r3, #1
 8011c40:	4413      	add	r3, r2
 8011c42:	00db      	lsls	r3, r3, #3
 8011c44:	4403      	add	r3, r0
 8011c46:	3304      	adds	r3, #4
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	4299      	cmp	r1, r3
 8011c4c:	d112      	bne.n	8011c74 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d00c      	beq.n	8011c6e <etharp_find_entry+0xc2>
 8011c54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c58:	4989      	ldr	r1, [pc, #548]	; (8011e80 <etharp_find_entry+0x2d4>)
 8011c5a:	4613      	mov	r3, r2
 8011c5c:	005b      	lsls	r3, r3, #1
 8011c5e:	4413      	add	r3, r2
 8011c60:	00db      	lsls	r3, r3, #3
 8011c62:	440b      	add	r3, r1
 8011c64:	3308      	adds	r3, #8
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	687a      	ldr	r2, [r7, #4]
 8011c6a:	429a      	cmp	r2, r3
 8011c6c:	d102      	bne.n	8011c74 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011c6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011c72:	e100      	b.n	8011e76 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011c74:	7dfb      	ldrb	r3, [r7, #23]
 8011c76:	2b01      	cmp	r3, #1
 8011c78:	d140      	bne.n	8011cfc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011c7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c7e:	4980      	ldr	r1, [pc, #512]	; (8011e80 <etharp_find_entry+0x2d4>)
 8011c80:	4613      	mov	r3, r2
 8011c82:	005b      	lsls	r3, r3, #1
 8011c84:	4413      	add	r3, r2
 8011c86:	00db      	lsls	r3, r3, #3
 8011c88:	440b      	add	r3, r1
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d01a      	beq.n	8011cc6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011c90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c94:	497a      	ldr	r1, [pc, #488]	; (8011e80 <etharp_find_entry+0x2d4>)
 8011c96:	4613      	mov	r3, r2
 8011c98:	005b      	lsls	r3, r3, #1
 8011c9a:	4413      	add	r3, r2
 8011c9c:	00db      	lsls	r3, r3, #3
 8011c9e:	440b      	add	r3, r1
 8011ca0:	3312      	adds	r3, #18
 8011ca2:	881b      	ldrh	r3, [r3, #0]
 8011ca4:	8bba      	ldrh	r2, [r7, #28]
 8011ca6:	429a      	cmp	r2, r3
 8011ca8:	d845      	bhi.n	8011d36 <etharp_find_entry+0x18a>
            old_queue = i;
 8011caa:	8c3b      	ldrh	r3, [r7, #32]
 8011cac:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011cae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011cb2:	4973      	ldr	r1, [pc, #460]	; (8011e80 <etharp_find_entry+0x2d4>)
 8011cb4:	4613      	mov	r3, r2
 8011cb6:	005b      	lsls	r3, r3, #1
 8011cb8:	4413      	add	r3, r2
 8011cba:	00db      	lsls	r3, r3, #3
 8011cbc:	440b      	add	r3, r1
 8011cbe:	3312      	adds	r3, #18
 8011cc0:	881b      	ldrh	r3, [r3, #0]
 8011cc2:	83bb      	strh	r3, [r7, #28]
 8011cc4:	e037      	b.n	8011d36 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011cc6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011cca:	496d      	ldr	r1, [pc, #436]	; (8011e80 <etharp_find_entry+0x2d4>)
 8011ccc:	4613      	mov	r3, r2
 8011cce:	005b      	lsls	r3, r3, #1
 8011cd0:	4413      	add	r3, r2
 8011cd2:	00db      	lsls	r3, r3, #3
 8011cd4:	440b      	add	r3, r1
 8011cd6:	3312      	adds	r3, #18
 8011cd8:	881b      	ldrh	r3, [r3, #0]
 8011cda:	8b7a      	ldrh	r2, [r7, #26]
 8011cdc:	429a      	cmp	r2, r3
 8011cde:	d82a      	bhi.n	8011d36 <etharp_find_entry+0x18a>
            old_pending = i;
 8011ce0:	8c3b      	ldrh	r3, [r7, #32]
 8011ce2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011ce4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ce8:	4965      	ldr	r1, [pc, #404]	; (8011e80 <etharp_find_entry+0x2d4>)
 8011cea:	4613      	mov	r3, r2
 8011cec:	005b      	lsls	r3, r3, #1
 8011cee:	4413      	add	r3, r2
 8011cf0:	00db      	lsls	r3, r3, #3
 8011cf2:	440b      	add	r3, r1
 8011cf4:	3312      	adds	r3, #18
 8011cf6:	881b      	ldrh	r3, [r3, #0]
 8011cf8:	837b      	strh	r3, [r7, #26]
 8011cfa:	e01c      	b.n	8011d36 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011cfc:	7dfb      	ldrb	r3, [r7, #23]
 8011cfe:	2b01      	cmp	r3, #1
 8011d00:	d919      	bls.n	8011d36 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011d02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011d06:	495e      	ldr	r1, [pc, #376]	; (8011e80 <etharp_find_entry+0x2d4>)
 8011d08:	4613      	mov	r3, r2
 8011d0a:	005b      	lsls	r3, r3, #1
 8011d0c:	4413      	add	r3, r2
 8011d0e:	00db      	lsls	r3, r3, #3
 8011d10:	440b      	add	r3, r1
 8011d12:	3312      	adds	r3, #18
 8011d14:	881b      	ldrh	r3, [r3, #0]
 8011d16:	8b3a      	ldrh	r2, [r7, #24]
 8011d18:	429a      	cmp	r2, r3
 8011d1a:	d80c      	bhi.n	8011d36 <etharp_find_entry+0x18a>
            old_stable = i;
 8011d1c:	8c3b      	ldrh	r3, [r7, #32]
 8011d1e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8011d20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011d24:	4956      	ldr	r1, [pc, #344]	; (8011e80 <etharp_find_entry+0x2d4>)
 8011d26:	4613      	mov	r3, r2
 8011d28:	005b      	lsls	r3, r3, #1
 8011d2a:	4413      	add	r3, r2
 8011d2c:	00db      	lsls	r3, r3, #3
 8011d2e:	440b      	add	r3, r1
 8011d30:	3312      	adds	r3, #18
 8011d32:	881b      	ldrh	r3, [r3, #0]
 8011d34:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011d36:	8c3b      	ldrh	r3, [r7, #32]
 8011d38:	3301      	adds	r3, #1
 8011d3a:	b29b      	uxth	r3, r3
 8011d3c:	843b      	strh	r3, [r7, #32]
 8011d3e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011d42:	2b09      	cmp	r3, #9
 8011d44:	f77f af4c 	ble.w	8011be0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011d48:	7afb      	ldrb	r3, [r7, #11]
 8011d4a:	f003 0302 	and.w	r3, r3, #2
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d108      	bne.n	8011d64 <etharp_find_entry+0x1b8>
 8011d52:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011d56:	2b0a      	cmp	r3, #10
 8011d58:	d107      	bne.n	8011d6a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011d5a:	7afb      	ldrb	r3, [r7, #11]
 8011d5c:	f003 0301 	and.w	r3, r3, #1
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d102      	bne.n	8011d6a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011d64:	f04f 33ff 	mov.w	r3, #4294967295
 8011d68:	e085      	b.n	8011e76 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011d6a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011d6e:	2b09      	cmp	r3, #9
 8011d70:	dc02      	bgt.n	8011d78 <etharp_find_entry+0x1cc>
    i = empty;
 8011d72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d74:	843b      	strh	r3, [r7, #32]
 8011d76:	e039      	b.n	8011dec <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011d78:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011d7c:	2b09      	cmp	r3, #9
 8011d7e:	dc14      	bgt.n	8011daa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011d80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011d82:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011d84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011d88:	493d      	ldr	r1, [pc, #244]	; (8011e80 <etharp_find_entry+0x2d4>)
 8011d8a:	4613      	mov	r3, r2
 8011d8c:	005b      	lsls	r3, r3, #1
 8011d8e:	4413      	add	r3, r2
 8011d90:	00db      	lsls	r3, r3, #3
 8011d92:	440b      	add	r3, r1
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d018      	beq.n	8011dcc <etharp_find_entry+0x220>
 8011d9a:	4b3a      	ldr	r3, [pc, #232]	; (8011e84 <etharp_find_entry+0x2d8>)
 8011d9c:	f240 126d 	movw	r2, #365	; 0x16d
 8011da0:	493b      	ldr	r1, [pc, #236]	; (8011e90 <etharp_find_entry+0x2e4>)
 8011da2:	483a      	ldr	r0, [pc, #232]	; (8011e8c <etharp_find_entry+0x2e0>)
 8011da4:	f002 f95e 	bl	8014064 <iprintf>
 8011da8:	e010      	b.n	8011dcc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011daa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011dae:	2b09      	cmp	r3, #9
 8011db0:	dc02      	bgt.n	8011db8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011db2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011db4:	843b      	strh	r3, [r7, #32]
 8011db6:	e009      	b.n	8011dcc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011db8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011dbc:	2b09      	cmp	r3, #9
 8011dbe:	dc02      	bgt.n	8011dc6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011dc0:	8bfb      	ldrh	r3, [r7, #30]
 8011dc2:	843b      	strh	r3, [r7, #32]
 8011dc4:	e002      	b.n	8011dcc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8011dca:	e054      	b.n	8011e76 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011dcc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011dd0:	2b09      	cmp	r3, #9
 8011dd2:	dd06      	ble.n	8011de2 <etharp_find_entry+0x236>
 8011dd4:	4b2b      	ldr	r3, [pc, #172]	; (8011e84 <etharp_find_entry+0x2d8>)
 8011dd6:	f240 127f 	movw	r2, #383	; 0x17f
 8011dda:	492e      	ldr	r1, [pc, #184]	; (8011e94 <etharp_find_entry+0x2e8>)
 8011ddc:	482b      	ldr	r0, [pc, #172]	; (8011e8c <etharp_find_entry+0x2e0>)
 8011dde:	f002 f941 	bl	8014064 <iprintf>
    etharp_free_entry(i);
 8011de2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011de6:	4618      	mov	r0, r3
 8011de8:	f7ff fe06 	bl	80119f8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011dec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011df0:	2b09      	cmp	r3, #9
 8011df2:	dd06      	ble.n	8011e02 <etharp_find_entry+0x256>
 8011df4:	4b23      	ldr	r3, [pc, #140]	; (8011e84 <etharp_find_entry+0x2d8>)
 8011df6:	f240 1283 	movw	r2, #387	; 0x183
 8011dfa:	4926      	ldr	r1, [pc, #152]	; (8011e94 <etharp_find_entry+0x2e8>)
 8011dfc:	4823      	ldr	r0, [pc, #140]	; (8011e8c <etharp_find_entry+0x2e0>)
 8011dfe:	f002 f931 	bl	8014064 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011e02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e06:	491e      	ldr	r1, [pc, #120]	; (8011e80 <etharp_find_entry+0x2d4>)
 8011e08:	4613      	mov	r3, r2
 8011e0a:	005b      	lsls	r3, r3, #1
 8011e0c:	4413      	add	r3, r2
 8011e0e:	00db      	lsls	r3, r3, #3
 8011e10:	440b      	add	r3, r1
 8011e12:	3314      	adds	r3, #20
 8011e14:	781b      	ldrb	r3, [r3, #0]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d006      	beq.n	8011e28 <etharp_find_entry+0x27c>
 8011e1a:	4b1a      	ldr	r3, [pc, #104]	; (8011e84 <etharp_find_entry+0x2d8>)
 8011e1c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8011e20:	491d      	ldr	r1, [pc, #116]	; (8011e98 <etharp_find_entry+0x2ec>)
 8011e22:	481a      	ldr	r0, [pc, #104]	; (8011e8c <etharp_find_entry+0x2e0>)
 8011e24:	f002 f91e 	bl	8014064 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d00b      	beq.n	8011e46 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011e2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	6819      	ldr	r1, [r3, #0]
 8011e36:	4812      	ldr	r0, [pc, #72]	; (8011e80 <etharp_find_entry+0x2d4>)
 8011e38:	4613      	mov	r3, r2
 8011e3a:	005b      	lsls	r3, r3, #1
 8011e3c:	4413      	add	r3, r2
 8011e3e:	00db      	lsls	r3, r3, #3
 8011e40:	4403      	add	r3, r0
 8011e42:	3304      	adds	r3, #4
 8011e44:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011e46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e4a:	490d      	ldr	r1, [pc, #52]	; (8011e80 <etharp_find_entry+0x2d4>)
 8011e4c:	4613      	mov	r3, r2
 8011e4e:	005b      	lsls	r3, r3, #1
 8011e50:	4413      	add	r3, r2
 8011e52:	00db      	lsls	r3, r3, #3
 8011e54:	440b      	add	r3, r1
 8011e56:	3312      	adds	r3, #18
 8011e58:	2200      	movs	r2, #0
 8011e5a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011e5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e60:	4907      	ldr	r1, [pc, #28]	; (8011e80 <etharp_find_entry+0x2d4>)
 8011e62:	4613      	mov	r3, r2
 8011e64:	005b      	lsls	r3, r3, #1
 8011e66:	4413      	add	r3, r2
 8011e68:	00db      	lsls	r3, r3, #3
 8011e6a:	440b      	add	r3, r1
 8011e6c:	3308      	adds	r3, #8
 8011e6e:	687a      	ldr	r2, [r7, #4]
 8011e70:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011e72:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011e76:	4618      	mov	r0, r3
 8011e78:	3728      	adds	r7, #40	; 0x28
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	bd80      	pop	{r7, pc}
 8011e7e:	bf00      	nop
 8011e80:	24003638 	.word	0x24003638
 8011e84:	0801769c 	.word	0x0801769c
 8011e88:	080176d4 	.word	0x080176d4
 8011e8c:	08017714 	.word	0x08017714
 8011e90:	0801773c 	.word	0x0801773c
 8011e94:	08017754 	.word	0x08017754
 8011e98:	08017768 	.word	0x08017768

08011e9c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b088      	sub	sp, #32
 8011ea0:	af02      	add	r7, sp, #8
 8011ea2:	60f8      	str	r0, [r7, #12]
 8011ea4:	60b9      	str	r1, [r7, #8]
 8011ea6:	607a      	str	r2, [r7, #4]
 8011ea8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011eb0:	2b06      	cmp	r3, #6
 8011eb2:	d006      	beq.n	8011ec2 <etharp_update_arp_entry+0x26>
 8011eb4:	4b48      	ldr	r3, [pc, #288]	; (8011fd8 <etharp_update_arp_entry+0x13c>)
 8011eb6:	f240 12a9 	movw	r2, #425	; 0x1a9
 8011eba:	4948      	ldr	r1, [pc, #288]	; (8011fdc <etharp_update_arp_entry+0x140>)
 8011ebc:	4848      	ldr	r0, [pc, #288]	; (8011fe0 <etharp_update_arp_entry+0x144>)
 8011ebe:	f002 f8d1 	bl	8014064 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011ec2:	68bb      	ldr	r3, [r7, #8]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d012      	beq.n	8011eee <etharp_update_arp_entry+0x52>
 8011ec8:	68bb      	ldr	r3, [r7, #8]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d00e      	beq.n	8011eee <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011ed0:	68bb      	ldr	r3, [r7, #8]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	68f9      	ldr	r1, [r7, #12]
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f001 f924 	bl	8013124 <ip4_addr_isbroadcast_u32>
 8011edc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d105      	bne.n	8011eee <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011ee2:	68bb      	ldr	r3, [r7, #8]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011eea:	2be0      	cmp	r3, #224	; 0xe0
 8011eec:	d102      	bne.n	8011ef4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011eee:	f06f 030f 	mvn.w	r3, #15
 8011ef2:	e06c      	b.n	8011fce <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011ef4:	78fb      	ldrb	r3, [r7, #3]
 8011ef6:	68fa      	ldr	r2, [r7, #12]
 8011ef8:	4619      	mov	r1, r3
 8011efa:	68b8      	ldr	r0, [r7, #8]
 8011efc:	f7ff fe56 	bl	8011bac <etharp_find_entry>
 8011f00:	4603      	mov	r3, r0
 8011f02:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011f04:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	da02      	bge.n	8011f12 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011f0c:	8afb      	ldrh	r3, [r7, #22]
 8011f0e:	b25b      	sxtb	r3, r3
 8011f10:	e05d      	b.n	8011fce <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011f12:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011f16:	4933      	ldr	r1, [pc, #204]	; (8011fe4 <etharp_update_arp_entry+0x148>)
 8011f18:	4613      	mov	r3, r2
 8011f1a:	005b      	lsls	r3, r3, #1
 8011f1c:	4413      	add	r3, r2
 8011f1e:	00db      	lsls	r3, r3, #3
 8011f20:	440b      	add	r3, r1
 8011f22:	3314      	adds	r3, #20
 8011f24:	2202      	movs	r2, #2
 8011f26:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011f28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011f2c:	492d      	ldr	r1, [pc, #180]	; (8011fe4 <etharp_update_arp_entry+0x148>)
 8011f2e:	4613      	mov	r3, r2
 8011f30:	005b      	lsls	r3, r3, #1
 8011f32:	4413      	add	r3, r2
 8011f34:	00db      	lsls	r3, r3, #3
 8011f36:	440b      	add	r3, r1
 8011f38:	3308      	adds	r3, #8
 8011f3a:	68fa      	ldr	r2, [r7, #12]
 8011f3c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011f3e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011f42:	4613      	mov	r3, r2
 8011f44:	005b      	lsls	r3, r3, #1
 8011f46:	4413      	add	r3, r2
 8011f48:	00db      	lsls	r3, r3, #3
 8011f4a:	3308      	adds	r3, #8
 8011f4c:	4a25      	ldr	r2, [pc, #148]	; (8011fe4 <etharp_update_arp_entry+0x148>)
 8011f4e:	4413      	add	r3, r2
 8011f50:	3304      	adds	r3, #4
 8011f52:	2206      	movs	r2, #6
 8011f54:	6879      	ldr	r1, [r7, #4]
 8011f56:	4618      	mov	r0, r3
 8011f58:	f002 f86e 	bl	8014038 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011f5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011f60:	4920      	ldr	r1, [pc, #128]	; (8011fe4 <etharp_update_arp_entry+0x148>)
 8011f62:	4613      	mov	r3, r2
 8011f64:	005b      	lsls	r3, r3, #1
 8011f66:	4413      	add	r3, r2
 8011f68:	00db      	lsls	r3, r3, #3
 8011f6a:	440b      	add	r3, r1
 8011f6c:	3312      	adds	r3, #18
 8011f6e:	2200      	movs	r2, #0
 8011f70:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011f72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011f76:	491b      	ldr	r1, [pc, #108]	; (8011fe4 <etharp_update_arp_entry+0x148>)
 8011f78:	4613      	mov	r3, r2
 8011f7a:	005b      	lsls	r3, r3, #1
 8011f7c:	4413      	add	r3, r2
 8011f7e:	00db      	lsls	r3, r3, #3
 8011f80:	440b      	add	r3, r1
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d021      	beq.n	8011fcc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011f88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011f8c:	4915      	ldr	r1, [pc, #84]	; (8011fe4 <etharp_update_arp_entry+0x148>)
 8011f8e:	4613      	mov	r3, r2
 8011f90:	005b      	lsls	r3, r3, #1
 8011f92:	4413      	add	r3, r2
 8011f94:	00db      	lsls	r3, r3, #3
 8011f96:	440b      	add	r3, r1
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011f9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011fa0:	4910      	ldr	r1, [pc, #64]	; (8011fe4 <etharp_update_arp_entry+0x148>)
 8011fa2:	4613      	mov	r3, r2
 8011fa4:	005b      	lsls	r3, r3, #1
 8011fa6:	4413      	add	r3, r2
 8011fa8:	00db      	lsls	r3, r3, #3
 8011faa:	440b      	add	r3, r1
 8011fac:	2200      	movs	r2, #0
 8011fae:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011fb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011fba:	9300      	str	r3, [sp, #0]
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	6939      	ldr	r1, [r7, #16]
 8011fc0:	68f8      	ldr	r0, [r7, #12]
 8011fc2:	f001 ffbd 	bl	8013f40 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011fc6:	6938      	ldr	r0, [r7, #16]
 8011fc8:	f7f8 ff2a 	bl	800ae20 <pbuf_free>
  }
  return ERR_OK;
 8011fcc:	2300      	movs	r3, #0
}
 8011fce:	4618      	mov	r0, r3
 8011fd0:	3718      	adds	r7, #24
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	bd80      	pop	{r7, pc}
 8011fd6:	bf00      	nop
 8011fd8:	0801769c 	.word	0x0801769c
 8011fdc:	08017794 	.word	0x08017794
 8011fe0:	08017714 	.word	0x08017714
 8011fe4:	24003638 	.word	0x24003638

08011fe8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b084      	sub	sp, #16
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	60fb      	str	r3, [r7, #12]
 8011ff4:	e01e      	b.n	8012034 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011ff6:	4913      	ldr	r1, [pc, #76]	; (8012044 <etharp_cleanup_netif+0x5c>)
 8011ff8:	68fa      	ldr	r2, [r7, #12]
 8011ffa:	4613      	mov	r3, r2
 8011ffc:	005b      	lsls	r3, r3, #1
 8011ffe:	4413      	add	r3, r2
 8012000:	00db      	lsls	r3, r3, #3
 8012002:	440b      	add	r3, r1
 8012004:	3314      	adds	r3, #20
 8012006:	781b      	ldrb	r3, [r3, #0]
 8012008:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801200a:	7afb      	ldrb	r3, [r7, #11]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d00e      	beq.n	801202e <etharp_cleanup_netif+0x46>
 8012010:	490c      	ldr	r1, [pc, #48]	; (8012044 <etharp_cleanup_netif+0x5c>)
 8012012:	68fa      	ldr	r2, [r7, #12]
 8012014:	4613      	mov	r3, r2
 8012016:	005b      	lsls	r3, r3, #1
 8012018:	4413      	add	r3, r2
 801201a:	00db      	lsls	r3, r3, #3
 801201c:	440b      	add	r3, r1
 801201e:	3308      	adds	r3, #8
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	687a      	ldr	r2, [r7, #4]
 8012024:	429a      	cmp	r2, r3
 8012026:	d102      	bne.n	801202e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012028:	68f8      	ldr	r0, [r7, #12]
 801202a:	f7ff fce5 	bl	80119f8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	3301      	adds	r3, #1
 8012032:	60fb      	str	r3, [r7, #12]
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	2b09      	cmp	r3, #9
 8012038:	dddd      	ble.n	8011ff6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801203a:	bf00      	nop
 801203c:	bf00      	nop
 801203e:	3710      	adds	r7, #16
 8012040:	46bd      	mov	sp, r7
 8012042:	bd80      	pop	{r7, pc}
 8012044:	24003638 	.word	0x24003638

08012048 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012048:	b5b0      	push	{r4, r5, r7, lr}
 801204a:	b08a      	sub	sp, #40	; 0x28
 801204c:	af04      	add	r7, sp, #16
 801204e:	6078      	str	r0, [r7, #4]
 8012050:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d107      	bne.n	8012068 <etharp_input+0x20>
 8012058:	4b3d      	ldr	r3, [pc, #244]	; (8012150 <etharp_input+0x108>)
 801205a:	f240 228a 	movw	r2, #650	; 0x28a
 801205e:	493d      	ldr	r1, [pc, #244]	; (8012154 <etharp_input+0x10c>)
 8012060:	483d      	ldr	r0, [pc, #244]	; (8012158 <etharp_input+0x110>)
 8012062:	f001 ffff 	bl	8014064 <iprintf>
 8012066:	e06f      	b.n	8012148 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	685b      	ldr	r3, [r3, #4]
 801206c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801206e:	693b      	ldr	r3, [r7, #16]
 8012070:	881b      	ldrh	r3, [r3, #0]
 8012072:	b29b      	uxth	r3, r3
 8012074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012078:	d10c      	bne.n	8012094 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801207a:	693b      	ldr	r3, [r7, #16]
 801207c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801207e:	2b06      	cmp	r3, #6
 8012080:	d108      	bne.n	8012094 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012082:	693b      	ldr	r3, [r7, #16]
 8012084:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012086:	2b04      	cmp	r3, #4
 8012088:	d104      	bne.n	8012094 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801208a:	693b      	ldr	r3, [r7, #16]
 801208c:	885b      	ldrh	r3, [r3, #2]
 801208e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012090:	2b08      	cmp	r3, #8
 8012092:	d003      	beq.n	801209c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f7f8 fec3 	bl	800ae20 <pbuf_free>
    return;
 801209a:	e055      	b.n	8012148 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801209c:	693b      	ldr	r3, [r7, #16]
 801209e:	330e      	adds	r3, #14
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80120a4:	693b      	ldr	r3, [r7, #16]
 80120a6:	3318      	adds	r3, #24
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80120ac:	683b      	ldr	r3, [r7, #0]
 80120ae:	3304      	adds	r3, #4
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d102      	bne.n	80120bc <etharp_input+0x74>
    for_us = 0;
 80120b6:	2300      	movs	r3, #0
 80120b8:	75fb      	strb	r3, [r7, #23]
 80120ba:	e009      	b.n	80120d0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80120bc:	68ba      	ldr	r2, [r7, #8]
 80120be:	683b      	ldr	r3, [r7, #0]
 80120c0:	3304      	adds	r3, #4
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	429a      	cmp	r2, r3
 80120c6:	bf0c      	ite	eq
 80120c8:	2301      	moveq	r3, #1
 80120ca:	2300      	movne	r3, #0
 80120cc:	b2db      	uxtb	r3, r3
 80120ce:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80120d0:	693b      	ldr	r3, [r7, #16]
 80120d2:	f103 0208 	add.w	r2, r3, #8
 80120d6:	7dfb      	ldrb	r3, [r7, #23]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d001      	beq.n	80120e0 <etharp_input+0x98>
 80120dc:	2301      	movs	r3, #1
 80120de:	e000      	b.n	80120e2 <etharp_input+0x9a>
 80120e0:	2302      	movs	r3, #2
 80120e2:	f107 010c 	add.w	r1, r7, #12
 80120e6:	6838      	ldr	r0, [r7, #0]
 80120e8:	f7ff fed8 	bl	8011e9c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80120ec:	693b      	ldr	r3, [r7, #16]
 80120ee:	88db      	ldrh	r3, [r3, #6]
 80120f0:	b29b      	uxth	r3, r3
 80120f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80120f6:	d003      	beq.n	8012100 <etharp_input+0xb8>
 80120f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80120fc:	d01e      	beq.n	801213c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80120fe:	e020      	b.n	8012142 <etharp_input+0xfa>
      if (for_us) {
 8012100:	7dfb      	ldrb	r3, [r7, #23]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d01c      	beq.n	8012140 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801210c:	693b      	ldr	r3, [r7, #16]
 801210e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8012118:	683b      	ldr	r3, [r7, #0]
 801211a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801211c:	693a      	ldr	r2, [r7, #16]
 801211e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012120:	2102      	movs	r1, #2
 8012122:	9103      	str	r1, [sp, #12]
 8012124:	f107 010c 	add.w	r1, r7, #12
 8012128:	9102      	str	r1, [sp, #8]
 801212a:	9201      	str	r2, [sp, #4]
 801212c:	9300      	str	r3, [sp, #0]
 801212e:	462b      	mov	r3, r5
 8012130:	4622      	mov	r2, r4
 8012132:	4601      	mov	r1, r0
 8012134:	6838      	ldr	r0, [r7, #0]
 8012136:	f000 faeb 	bl	8012710 <etharp_raw>
      break;
 801213a:	e001      	b.n	8012140 <etharp_input+0xf8>
      break;
 801213c:	bf00      	nop
 801213e:	e000      	b.n	8012142 <etharp_input+0xfa>
      break;
 8012140:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012142:	6878      	ldr	r0, [r7, #4]
 8012144:	f7f8 fe6c 	bl	800ae20 <pbuf_free>
}
 8012148:	3718      	adds	r7, #24
 801214a:	46bd      	mov	sp, r7
 801214c:	bdb0      	pop	{r4, r5, r7, pc}
 801214e:	bf00      	nop
 8012150:	0801769c 	.word	0x0801769c
 8012154:	080177ec 	.word	0x080177ec
 8012158:	08017714 	.word	0x08017714

0801215c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801215c:	b580      	push	{r7, lr}
 801215e:	b086      	sub	sp, #24
 8012160:	af02      	add	r7, sp, #8
 8012162:	60f8      	str	r0, [r7, #12]
 8012164:	60b9      	str	r1, [r7, #8]
 8012166:	4613      	mov	r3, r2
 8012168:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801216a:	79fa      	ldrb	r2, [r7, #7]
 801216c:	4944      	ldr	r1, [pc, #272]	; (8012280 <etharp_output_to_arp_index+0x124>)
 801216e:	4613      	mov	r3, r2
 8012170:	005b      	lsls	r3, r3, #1
 8012172:	4413      	add	r3, r2
 8012174:	00db      	lsls	r3, r3, #3
 8012176:	440b      	add	r3, r1
 8012178:	3314      	adds	r3, #20
 801217a:	781b      	ldrb	r3, [r3, #0]
 801217c:	2b01      	cmp	r3, #1
 801217e:	d806      	bhi.n	801218e <etharp_output_to_arp_index+0x32>
 8012180:	4b40      	ldr	r3, [pc, #256]	; (8012284 <etharp_output_to_arp_index+0x128>)
 8012182:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012186:	4940      	ldr	r1, [pc, #256]	; (8012288 <etharp_output_to_arp_index+0x12c>)
 8012188:	4840      	ldr	r0, [pc, #256]	; (801228c <etharp_output_to_arp_index+0x130>)
 801218a:	f001 ff6b 	bl	8014064 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801218e:	79fa      	ldrb	r2, [r7, #7]
 8012190:	493b      	ldr	r1, [pc, #236]	; (8012280 <etharp_output_to_arp_index+0x124>)
 8012192:	4613      	mov	r3, r2
 8012194:	005b      	lsls	r3, r3, #1
 8012196:	4413      	add	r3, r2
 8012198:	00db      	lsls	r3, r3, #3
 801219a:	440b      	add	r3, r1
 801219c:	3314      	adds	r3, #20
 801219e:	781b      	ldrb	r3, [r3, #0]
 80121a0:	2b02      	cmp	r3, #2
 80121a2:	d153      	bne.n	801224c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80121a4:	79fa      	ldrb	r2, [r7, #7]
 80121a6:	4936      	ldr	r1, [pc, #216]	; (8012280 <etharp_output_to_arp_index+0x124>)
 80121a8:	4613      	mov	r3, r2
 80121aa:	005b      	lsls	r3, r3, #1
 80121ac:	4413      	add	r3, r2
 80121ae:	00db      	lsls	r3, r3, #3
 80121b0:	440b      	add	r3, r1
 80121b2:	3312      	adds	r3, #18
 80121b4:	881b      	ldrh	r3, [r3, #0]
 80121b6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80121ba:	d919      	bls.n	80121f0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80121bc:	79fa      	ldrb	r2, [r7, #7]
 80121be:	4613      	mov	r3, r2
 80121c0:	005b      	lsls	r3, r3, #1
 80121c2:	4413      	add	r3, r2
 80121c4:	00db      	lsls	r3, r3, #3
 80121c6:	4a2e      	ldr	r2, [pc, #184]	; (8012280 <etharp_output_to_arp_index+0x124>)
 80121c8:	4413      	add	r3, r2
 80121ca:	3304      	adds	r3, #4
 80121cc:	4619      	mov	r1, r3
 80121ce:	68f8      	ldr	r0, [r7, #12]
 80121d0:	f000 fb4c 	bl	801286c <etharp_request>
 80121d4:	4603      	mov	r3, r0
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d138      	bne.n	801224c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80121da:	79fa      	ldrb	r2, [r7, #7]
 80121dc:	4928      	ldr	r1, [pc, #160]	; (8012280 <etharp_output_to_arp_index+0x124>)
 80121de:	4613      	mov	r3, r2
 80121e0:	005b      	lsls	r3, r3, #1
 80121e2:	4413      	add	r3, r2
 80121e4:	00db      	lsls	r3, r3, #3
 80121e6:	440b      	add	r3, r1
 80121e8:	3314      	adds	r3, #20
 80121ea:	2203      	movs	r2, #3
 80121ec:	701a      	strb	r2, [r3, #0]
 80121ee:	e02d      	b.n	801224c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80121f0:	79fa      	ldrb	r2, [r7, #7]
 80121f2:	4923      	ldr	r1, [pc, #140]	; (8012280 <etharp_output_to_arp_index+0x124>)
 80121f4:	4613      	mov	r3, r2
 80121f6:	005b      	lsls	r3, r3, #1
 80121f8:	4413      	add	r3, r2
 80121fa:	00db      	lsls	r3, r3, #3
 80121fc:	440b      	add	r3, r1
 80121fe:	3312      	adds	r3, #18
 8012200:	881b      	ldrh	r3, [r3, #0]
 8012202:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012206:	d321      	bcc.n	801224c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012208:	79fa      	ldrb	r2, [r7, #7]
 801220a:	4613      	mov	r3, r2
 801220c:	005b      	lsls	r3, r3, #1
 801220e:	4413      	add	r3, r2
 8012210:	00db      	lsls	r3, r3, #3
 8012212:	4a1b      	ldr	r2, [pc, #108]	; (8012280 <etharp_output_to_arp_index+0x124>)
 8012214:	4413      	add	r3, r2
 8012216:	1d19      	adds	r1, r3, #4
 8012218:	79fa      	ldrb	r2, [r7, #7]
 801221a:	4613      	mov	r3, r2
 801221c:	005b      	lsls	r3, r3, #1
 801221e:	4413      	add	r3, r2
 8012220:	00db      	lsls	r3, r3, #3
 8012222:	3308      	adds	r3, #8
 8012224:	4a16      	ldr	r2, [pc, #88]	; (8012280 <etharp_output_to_arp_index+0x124>)
 8012226:	4413      	add	r3, r2
 8012228:	3304      	adds	r3, #4
 801222a:	461a      	mov	r2, r3
 801222c:	68f8      	ldr	r0, [r7, #12]
 801222e:	f000 fafb 	bl	8012828 <etharp_request_dst>
 8012232:	4603      	mov	r3, r0
 8012234:	2b00      	cmp	r3, #0
 8012236:	d109      	bne.n	801224c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012238:	79fa      	ldrb	r2, [r7, #7]
 801223a:	4911      	ldr	r1, [pc, #68]	; (8012280 <etharp_output_to_arp_index+0x124>)
 801223c:	4613      	mov	r3, r2
 801223e:	005b      	lsls	r3, r3, #1
 8012240:	4413      	add	r3, r2
 8012242:	00db      	lsls	r3, r3, #3
 8012244:	440b      	add	r3, r1
 8012246:	3314      	adds	r3, #20
 8012248:	2203      	movs	r2, #3
 801224a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8012252:	79fa      	ldrb	r2, [r7, #7]
 8012254:	4613      	mov	r3, r2
 8012256:	005b      	lsls	r3, r3, #1
 8012258:	4413      	add	r3, r2
 801225a:	00db      	lsls	r3, r3, #3
 801225c:	3308      	adds	r3, #8
 801225e:	4a08      	ldr	r2, [pc, #32]	; (8012280 <etharp_output_to_arp_index+0x124>)
 8012260:	4413      	add	r3, r2
 8012262:	3304      	adds	r3, #4
 8012264:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012268:	9200      	str	r2, [sp, #0]
 801226a:	460a      	mov	r2, r1
 801226c:	68b9      	ldr	r1, [r7, #8]
 801226e:	68f8      	ldr	r0, [r7, #12]
 8012270:	f001 fe66 	bl	8013f40 <ethernet_output>
 8012274:	4603      	mov	r3, r0
}
 8012276:	4618      	mov	r0, r3
 8012278:	3710      	adds	r7, #16
 801227a:	46bd      	mov	sp, r7
 801227c:	bd80      	pop	{r7, pc}
 801227e:	bf00      	nop
 8012280:	24003638 	.word	0x24003638
 8012284:	0801769c 	.word	0x0801769c
 8012288:	0801780c 	.word	0x0801780c
 801228c:	08017714 	.word	0x08017714

08012290 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b08a      	sub	sp, #40	; 0x28
 8012294:	af02      	add	r7, sp, #8
 8012296:	60f8      	str	r0, [r7, #12]
 8012298:	60b9      	str	r1, [r7, #8]
 801229a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d106      	bne.n	80122b4 <etharp_output+0x24>
 80122a6:	4b73      	ldr	r3, [pc, #460]	; (8012474 <etharp_output+0x1e4>)
 80122a8:	f240 321e 	movw	r2, #798	; 0x31e
 80122ac:	4972      	ldr	r1, [pc, #456]	; (8012478 <etharp_output+0x1e8>)
 80122ae:	4873      	ldr	r0, [pc, #460]	; (801247c <etharp_output+0x1ec>)
 80122b0:	f001 fed8 	bl	8014064 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80122b4:	68bb      	ldr	r3, [r7, #8]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d106      	bne.n	80122c8 <etharp_output+0x38>
 80122ba:	4b6e      	ldr	r3, [pc, #440]	; (8012474 <etharp_output+0x1e4>)
 80122bc:	f240 321f 	movw	r2, #799	; 0x31f
 80122c0:	496f      	ldr	r1, [pc, #444]	; (8012480 <etharp_output+0x1f0>)
 80122c2:	486e      	ldr	r0, [pc, #440]	; (801247c <etharp_output+0x1ec>)
 80122c4:	f001 fece 	bl	8014064 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d106      	bne.n	80122dc <etharp_output+0x4c>
 80122ce:	4b69      	ldr	r3, [pc, #420]	; (8012474 <etharp_output+0x1e4>)
 80122d0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80122d4:	496b      	ldr	r1, [pc, #428]	; (8012484 <etharp_output+0x1f4>)
 80122d6:	4869      	ldr	r0, [pc, #420]	; (801247c <etharp_output+0x1ec>)
 80122d8:	f001 fec4 	bl	8014064 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	68f9      	ldr	r1, [r7, #12]
 80122e2:	4618      	mov	r0, r3
 80122e4:	f000 ff1e 	bl	8013124 <ip4_addr_isbroadcast_u32>
 80122e8:	4603      	mov	r3, r0
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d002      	beq.n	80122f4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80122ee:	4b66      	ldr	r3, [pc, #408]	; (8012488 <etharp_output+0x1f8>)
 80122f0:	61fb      	str	r3, [r7, #28]
 80122f2:	e0af      	b.n	8012454 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80122fc:	2be0      	cmp	r3, #224	; 0xe0
 80122fe:	d118      	bne.n	8012332 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012300:	2301      	movs	r3, #1
 8012302:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012304:	2300      	movs	r3, #0
 8012306:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012308:	235e      	movs	r3, #94	; 0x5e
 801230a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	3301      	adds	r3, #1
 8012310:	781b      	ldrb	r3, [r3, #0]
 8012312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012316:	b2db      	uxtb	r3, r3
 8012318:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	3302      	adds	r3, #2
 801231e:	781b      	ldrb	r3, [r3, #0]
 8012320:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	3303      	adds	r3, #3
 8012326:	781b      	ldrb	r3, [r3, #0]
 8012328:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801232a:	f107 0310 	add.w	r3, r7, #16
 801232e:	61fb      	str	r3, [r7, #28]
 8012330:	e090      	b.n	8012454 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	681a      	ldr	r2, [r3, #0]
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	3304      	adds	r3, #4
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	405a      	eors	r2, r3
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	3308      	adds	r3, #8
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	4013      	ands	r3, r2
 8012346:	2b00      	cmp	r3, #0
 8012348:	d012      	beq.n	8012370 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012350:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012354:	4293      	cmp	r3, r2
 8012356:	d00b      	beq.n	8012370 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	330c      	adds	r3, #12
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d003      	beq.n	801236a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	330c      	adds	r3, #12
 8012366:	61bb      	str	r3, [r7, #24]
 8012368:	e002      	b.n	8012370 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801236a:	f06f 0303 	mvn.w	r3, #3
 801236e:	e07d      	b.n	801246c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012370:	4b46      	ldr	r3, [pc, #280]	; (801248c <etharp_output+0x1fc>)
 8012372:	781b      	ldrb	r3, [r3, #0]
 8012374:	4619      	mov	r1, r3
 8012376:	4a46      	ldr	r2, [pc, #280]	; (8012490 <etharp_output+0x200>)
 8012378:	460b      	mov	r3, r1
 801237a:	005b      	lsls	r3, r3, #1
 801237c:	440b      	add	r3, r1
 801237e:	00db      	lsls	r3, r3, #3
 8012380:	4413      	add	r3, r2
 8012382:	3314      	adds	r3, #20
 8012384:	781b      	ldrb	r3, [r3, #0]
 8012386:	2b01      	cmp	r3, #1
 8012388:	d925      	bls.n	80123d6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801238a:	4b40      	ldr	r3, [pc, #256]	; (801248c <etharp_output+0x1fc>)
 801238c:	781b      	ldrb	r3, [r3, #0]
 801238e:	4619      	mov	r1, r3
 8012390:	4a3f      	ldr	r2, [pc, #252]	; (8012490 <etharp_output+0x200>)
 8012392:	460b      	mov	r3, r1
 8012394:	005b      	lsls	r3, r3, #1
 8012396:	440b      	add	r3, r1
 8012398:	00db      	lsls	r3, r3, #3
 801239a:	4413      	add	r3, r2
 801239c:	3308      	adds	r3, #8
 801239e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80123a0:	68fa      	ldr	r2, [r7, #12]
 80123a2:	429a      	cmp	r2, r3
 80123a4:	d117      	bne.n	80123d6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80123a6:	69bb      	ldr	r3, [r7, #24]
 80123a8:	681a      	ldr	r2, [r3, #0]
 80123aa:	4b38      	ldr	r3, [pc, #224]	; (801248c <etharp_output+0x1fc>)
 80123ac:	781b      	ldrb	r3, [r3, #0]
 80123ae:	4618      	mov	r0, r3
 80123b0:	4937      	ldr	r1, [pc, #220]	; (8012490 <etharp_output+0x200>)
 80123b2:	4603      	mov	r3, r0
 80123b4:	005b      	lsls	r3, r3, #1
 80123b6:	4403      	add	r3, r0
 80123b8:	00db      	lsls	r3, r3, #3
 80123ba:	440b      	add	r3, r1
 80123bc:	3304      	adds	r3, #4
 80123be:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80123c0:	429a      	cmp	r2, r3
 80123c2:	d108      	bne.n	80123d6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80123c4:	4b31      	ldr	r3, [pc, #196]	; (801248c <etharp_output+0x1fc>)
 80123c6:	781b      	ldrb	r3, [r3, #0]
 80123c8:	461a      	mov	r2, r3
 80123ca:	68b9      	ldr	r1, [r7, #8]
 80123cc:	68f8      	ldr	r0, [r7, #12]
 80123ce:	f7ff fec5 	bl	801215c <etharp_output_to_arp_index>
 80123d2:	4603      	mov	r3, r0
 80123d4:	e04a      	b.n	801246c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80123d6:	2300      	movs	r3, #0
 80123d8:	75fb      	strb	r3, [r7, #23]
 80123da:	e031      	b.n	8012440 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80123dc:	7dfa      	ldrb	r2, [r7, #23]
 80123de:	492c      	ldr	r1, [pc, #176]	; (8012490 <etharp_output+0x200>)
 80123e0:	4613      	mov	r3, r2
 80123e2:	005b      	lsls	r3, r3, #1
 80123e4:	4413      	add	r3, r2
 80123e6:	00db      	lsls	r3, r3, #3
 80123e8:	440b      	add	r3, r1
 80123ea:	3314      	adds	r3, #20
 80123ec:	781b      	ldrb	r3, [r3, #0]
 80123ee:	2b01      	cmp	r3, #1
 80123f0:	d923      	bls.n	801243a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80123f2:	7dfa      	ldrb	r2, [r7, #23]
 80123f4:	4926      	ldr	r1, [pc, #152]	; (8012490 <etharp_output+0x200>)
 80123f6:	4613      	mov	r3, r2
 80123f8:	005b      	lsls	r3, r3, #1
 80123fa:	4413      	add	r3, r2
 80123fc:	00db      	lsls	r3, r3, #3
 80123fe:	440b      	add	r3, r1
 8012400:	3308      	adds	r3, #8
 8012402:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012404:	68fa      	ldr	r2, [r7, #12]
 8012406:	429a      	cmp	r2, r3
 8012408:	d117      	bne.n	801243a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801240a:	69bb      	ldr	r3, [r7, #24]
 801240c:	6819      	ldr	r1, [r3, #0]
 801240e:	7dfa      	ldrb	r2, [r7, #23]
 8012410:	481f      	ldr	r0, [pc, #124]	; (8012490 <etharp_output+0x200>)
 8012412:	4613      	mov	r3, r2
 8012414:	005b      	lsls	r3, r3, #1
 8012416:	4413      	add	r3, r2
 8012418:	00db      	lsls	r3, r3, #3
 801241a:	4403      	add	r3, r0
 801241c:	3304      	adds	r3, #4
 801241e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012420:	4299      	cmp	r1, r3
 8012422:	d10a      	bne.n	801243a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012424:	4a19      	ldr	r2, [pc, #100]	; (801248c <etharp_output+0x1fc>)
 8012426:	7dfb      	ldrb	r3, [r7, #23]
 8012428:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801242a:	7dfb      	ldrb	r3, [r7, #23]
 801242c:	461a      	mov	r2, r3
 801242e:	68b9      	ldr	r1, [r7, #8]
 8012430:	68f8      	ldr	r0, [r7, #12]
 8012432:	f7ff fe93 	bl	801215c <etharp_output_to_arp_index>
 8012436:	4603      	mov	r3, r0
 8012438:	e018      	b.n	801246c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801243a:	7dfb      	ldrb	r3, [r7, #23]
 801243c:	3301      	adds	r3, #1
 801243e:	75fb      	strb	r3, [r7, #23]
 8012440:	7dfb      	ldrb	r3, [r7, #23]
 8012442:	2b09      	cmp	r3, #9
 8012444:	d9ca      	bls.n	80123dc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012446:	68ba      	ldr	r2, [r7, #8]
 8012448:	69b9      	ldr	r1, [r7, #24]
 801244a:	68f8      	ldr	r0, [r7, #12]
 801244c:	f000 f822 	bl	8012494 <etharp_query>
 8012450:	4603      	mov	r3, r0
 8012452:	e00b      	b.n	801246c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801245a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801245e:	9300      	str	r3, [sp, #0]
 8012460:	69fb      	ldr	r3, [r7, #28]
 8012462:	68b9      	ldr	r1, [r7, #8]
 8012464:	68f8      	ldr	r0, [r7, #12]
 8012466:	f001 fd6b 	bl	8013f40 <ethernet_output>
 801246a:	4603      	mov	r3, r0
}
 801246c:	4618      	mov	r0, r3
 801246e:	3720      	adds	r7, #32
 8012470:	46bd      	mov	sp, r7
 8012472:	bd80      	pop	{r7, pc}
 8012474:	0801769c 	.word	0x0801769c
 8012478:	080177ec 	.word	0x080177ec
 801247c:	08017714 	.word	0x08017714
 8012480:	0801783c 	.word	0x0801783c
 8012484:	080177dc 	.word	0x080177dc
 8012488:	08018c4c 	.word	0x08018c4c
 801248c:	24003728 	.word	0x24003728
 8012490:	24003638 	.word	0x24003638

08012494 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b08c      	sub	sp, #48	; 0x30
 8012498:	af02      	add	r7, sp, #8
 801249a:	60f8      	str	r0, [r7, #12]
 801249c:	60b9      	str	r1, [r7, #8]
 801249e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	3326      	adds	r3, #38	; 0x26
 80124a4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80124a6:	23ff      	movs	r3, #255	; 0xff
 80124a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80124ac:	2300      	movs	r3, #0
 80124ae:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80124b0:	68bb      	ldr	r3, [r7, #8]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	68f9      	ldr	r1, [r7, #12]
 80124b6:	4618      	mov	r0, r3
 80124b8:	f000 fe34 	bl	8013124 <ip4_addr_isbroadcast_u32>
 80124bc:	4603      	mov	r3, r0
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d10c      	bne.n	80124dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80124c2:	68bb      	ldr	r3, [r7, #8]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80124ca:	2be0      	cmp	r3, #224	; 0xe0
 80124cc:	d006      	beq.n	80124dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80124ce:	68bb      	ldr	r3, [r7, #8]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d003      	beq.n	80124dc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80124d4:	68bb      	ldr	r3, [r7, #8]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d102      	bne.n	80124e2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80124dc:	f06f 030f 	mvn.w	r3, #15
 80124e0:	e101      	b.n	80126e6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80124e2:	68fa      	ldr	r2, [r7, #12]
 80124e4:	2101      	movs	r1, #1
 80124e6:	68b8      	ldr	r0, [r7, #8]
 80124e8:	f7ff fb60 	bl	8011bac <etharp_find_entry>
 80124ec:	4603      	mov	r3, r0
 80124ee:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80124f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	da02      	bge.n	80124fe <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80124f8:	8a7b      	ldrh	r3, [r7, #18]
 80124fa:	b25b      	sxtb	r3, r3
 80124fc:	e0f3      	b.n	80126e6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80124fe:	8a7b      	ldrh	r3, [r7, #18]
 8012500:	2b7e      	cmp	r3, #126	; 0x7e
 8012502:	d906      	bls.n	8012512 <etharp_query+0x7e>
 8012504:	4b7a      	ldr	r3, [pc, #488]	; (80126f0 <etharp_query+0x25c>)
 8012506:	f240 32c1 	movw	r2, #961	; 0x3c1
 801250a:	497a      	ldr	r1, [pc, #488]	; (80126f4 <etharp_query+0x260>)
 801250c:	487a      	ldr	r0, [pc, #488]	; (80126f8 <etharp_query+0x264>)
 801250e:	f001 fda9 	bl	8014064 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012512:	8a7b      	ldrh	r3, [r7, #18]
 8012514:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012516:	7c7a      	ldrb	r2, [r7, #17]
 8012518:	4978      	ldr	r1, [pc, #480]	; (80126fc <etharp_query+0x268>)
 801251a:	4613      	mov	r3, r2
 801251c:	005b      	lsls	r3, r3, #1
 801251e:	4413      	add	r3, r2
 8012520:	00db      	lsls	r3, r3, #3
 8012522:	440b      	add	r3, r1
 8012524:	3314      	adds	r3, #20
 8012526:	781b      	ldrb	r3, [r3, #0]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d115      	bne.n	8012558 <etharp_query+0xc4>
    is_new_entry = 1;
 801252c:	2301      	movs	r3, #1
 801252e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012530:	7c7a      	ldrb	r2, [r7, #17]
 8012532:	4972      	ldr	r1, [pc, #456]	; (80126fc <etharp_query+0x268>)
 8012534:	4613      	mov	r3, r2
 8012536:	005b      	lsls	r3, r3, #1
 8012538:	4413      	add	r3, r2
 801253a:	00db      	lsls	r3, r3, #3
 801253c:	440b      	add	r3, r1
 801253e:	3314      	adds	r3, #20
 8012540:	2201      	movs	r2, #1
 8012542:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012544:	7c7a      	ldrb	r2, [r7, #17]
 8012546:	496d      	ldr	r1, [pc, #436]	; (80126fc <etharp_query+0x268>)
 8012548:	4613      	mov	r3, r2
 801254a:	005b      	lsls	r3, r3, #1
 801254c:	4413      	add	r3, r2
 801254e:	00db      	lsls	r3, r3, #3
 8012550:	440b      	add	r3, r1
 8012552:	3308      	adds	r3, #8
 8012554:	68fa      	ldr	r2, [r7, #12]
 8012556:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012558:	7c7a      	ldrb	r2, [r7, #17]
 801255a:	4968      	ldr	r1, [pc, #416]	; (80126fc <etharp_query+0x268>)
 801255c:	4613      	mov	r3, r2
 801255e:	005b      	lsls	r3, r3, #1
 8012560:	4413      	add	r3, r2
 8012562:	00db      	lsls	r3, r3, #3
 8012564:	440b      	add	r3, r1
 8012566:	3314      	adds	r3, #20
 8012568:	781b      	ldrb	r3, [r3, #0]
 801256a:	2b01      	cmp	r3, #1
 801256c:	d011      	beq.n	8012592 <etharp_query+0xfe>
 801256e:	7c7a      	ldrb	r2, [r7, #17]
 8012570:	4962      	ldr	r1, [pc, #392]	; (80126fc <etharp_query+0x268>)
 8012572:	4613      	mov	r3, r2
 8012574:	005b      	lsls	r3, r3, #1
 8012576:	4413      	add	r3, r2
 8012578:	00db      	lsls	r3, r3, #3
 801257a:	440b      	add	r3, r1
 801257c:	3314      	adds	r3, #20
 801257e:	781b      	ldrb	r3, [r3, #0]
 8012580:	2b01      	cmp	r3, #1
 8012582:	d806      	bhi.n	8012592 <etharp_query+0xfe>
 8012584:	4b5a      	ldr	r3, [pc, #360]	; (80126f0 <etharp_query+0x25c>)
 8012586:	f240 32cd 	movw	r2, #973	; 0x3cd
 801258a:	495d      	ldr	r1, [pc, #372]	; (8012700 <etharp_query+0x26c>)
 801258c:	485a      	ldr	r0, [pc, #360]	; (80126f8 <etharp_query+0x264>)
 801258e:	f001 fd69 	bl	8014064 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012592:	6a3b      	ldr	r3, [r7, #32]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d102      	bne.n	801259e <etharp_query+0x10a>
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d10c      	bne.n	80125b8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801259e:	68b9      	ldr	r1, [r7, #8]
 80125a0:	68f8      	ldr	r0, [r7, #12]
 80125a2:	f000 f963 	bl	801286c <etharp_request>
 80125a6:	4603      	mov	r3, r0
 80125a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d102      	bne.n	80125b8 <etharp_query+0x124>
      return result;
 80125b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80125b6:	e096      	b.n	80126e6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d106      	bne.n	80125cc <etharp_query+0x138>
 80125be:	4b4c      	ldr	r3, [pc, #304]	; (80126f0 <etharp_query+0x25c>)
 80125c0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80125c4:	494f      	ldr	r1, [pc, #316]	; (8012704 <etharp_query+0x270>)
 80125c6:	484c      	ldr	r0, [pc, #304]	; (80126f8 <etharp_query+0x264>)
 80125c8:	f001 fd4c 	bl	8014064 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80125cc:	7c7a      	ldrb	r2, [r7, #17]
 80125ce:	494b      	ldr	r1, [pc, #300]	; (80126fc <etharp_query+0x268>)
 80125d0:	4613      	mov	r3, r2
 80125d2:	005b      	lsls	r3, r3, #1
 80125d4:	4413      	add	r3, r2
 80125d6:	00db      	lsls	r3, r3, #3
 80125d8:	440b      	add	r3, r1
 80125da:	3314      	adds	r3, #20
 80125dc:	781b      	ldrb	r3, [r3, #0]
 80125de:	2b01      	cmp	r3, #1
 80125e0:	d917      	bls.n	8012612 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80125e2:	4a49      	ldr	r2, [pc, #292]	; (8012708 <etharp_query+0x274>)
 80125e4:	7c7b      	ldrb	r3, [r7, #17]
 80125e6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80125e8:	7c7a      	ldrb	r2, [r7, #17]
 80125ea:	4613      	mov	r3, r2
 80125ec:	005b      	lsls	r3, r3, #1
 80125ee:	4413      	add	r3, r2
 80125f0:	00db      	lsls	r3, r3, #3
 80125f2:	3308      	adds	r3, #8
 80125f4:	4a41      	ldr	r2, [pc, #260]	; (80126fc <etharp_query+0x268>)
 80125f6:	4413      	add	r3, r2
 80125f8:	3304      	adds	r3, #4
 80125fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80125fe:	9200      	str	r2, [sp, #0]
 8012600:	697a      	ldr	r2, [r7, #20]
 8012602:	6879      	ldr	r1, [r7, #4]
 8012604:	68f8      	ldr	r0, [r7, #12]
 8012606:	f001 fc9b 	bl	8013f40 <ethernet_output>
 801260a:	4603      	mov	r3, r0
 801260c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012610:	e067      	b.n	80126e2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012612:	7c7a      	ldrb	r2, [r7, #17]
 8012614:	4939      	ldr	r1, [pc, #228]	; (80126fc <etharp_query+0x268>)
 8012616:	4613      	mov	r3, r2
 8012618:	005b      	lsls	r3, r3, #1
 801261a:	4413      	add	r3, r2
 801261c:	00db      	lsls	r3, r3, #3
 801261e:	440b      	add	r3, r1
 8012620:	3314      	adds	r3, #20
 8012622:	781b      	ldrb	r3, [r3, #0]
 8012624:	2b01      	cmp	r3, #1
 8012626:	d15c      	bne.n	80126e2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012628:	2300      	movs	r3, #0
 801262a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012630:	e01c      	b.n	801266c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012632:	69fb      	ldr	r3, [r7, #28]
 8012634:	895a      	ldrh	r2, [r3, #10]
 8012636:	69fb      	ldr	r3, [r7, #28]
 8012638:	891b      	ldrh	r3, [r3, #8]
 801263a:	429a      	cmp	r2, r3
 801263c:	d10a      	bne.n	8012654 <etharp_query+0x1c0>
 801263e:	69fb      	ldr	r3, [r7, #28]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d006      	beq.n	8012654 <etharp_query+0x1c0>
 8012646:	4b2a      	ldr	r3, [pc, #168]	; (80126f0 <etharp_query+0x25c>)
 8012648:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801264c:	492f      	ldr	r1, [pc, #188]	; (801270c <etharp_query+0x278>)
 801264e:	482a      	ldr	r0, [pc, #168]	; (80126f8 <etharp_query+0x264>)
 8012650:	f001 fd08 	bl	8014064 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012654:	69fb      	ldr	r3, [r7, #28]
 8012656:	7b1b      	ldrb	r3, [r3, #12]
 8012658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801265c:	2b00      	cmp	r3, #0
 801265e:	d002      	beq.n	8012666 <etharp_query+0x1d2>
        copy_needed = 1;
 8012660:	2301      	movs	r3, #1
 8012662:	61bb      	str	r3, [r7, #24]
        break;
 8012664:	e005      	b.n	8012672 <etharp_query+0x1de>
      }
      p = p->next;
 8012666:	69fb      	ldr	r3, [r7, #28]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801266c:	69fb      	ldr	r3, [r7, #28]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d1df      	bne.n	8012632 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012672:	69bb      	ldr	r3, [r7, #24]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d007      	beq.n	8012688 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012678:	687a      	ldr	r2, [r7, #4]
 801267a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801267e:	200e      	movs	r0, #14
 8012680:	f7f8 fe2a 	bl	800b2d8 <pbuf_clone>
 8012684:	61f8      	str	r0, [r7, #28]
 8012686:	e004      	b.n	8012692 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801268c:	69f8      	ldr	r0, [r7, #28]
 801268e:	f7f8 fc67 	bl	800af60 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012692:	69fb      	ldr	r3, [r7, #28]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d021      	beq.n	80126dc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012698:	7c7a      	ldrb	r2, [r7, #17]
 801269a:	4918      	ldr	r1, [pc, #96]	; (80126fc <etharp_query+0x268>)
 801269c:	4613      	mov	r3, r2
 801269e:	005b      	lsls	r3, r3, #1
 80126a0:	4413      	add	r3, r2
 80126a2:	00db      	lsls	r3, r3, #3
 80126a4:	440b      	add	r3, r1
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d00a      	beq.n	80126c2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80126ac:	7c7a      	ldrb	r2, [r7, #17]
 80126ae:	4913      	ldr	r1, [pc, #76]	; (80126fc <etharp_query+0x268>)
 80126b0:	4613      	mov	r3, r2
 80126b2:	005b      	lsls	r3, r3, #1
 80126b4:	4413      	add	r3, r2
 80126b6:	00db      	lsls	r3, r3, #3
 80126b8:	440b      	add	r3, r1
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	4618      	mov	r0, r3
 80126be:	f7f8 fbaf 	bl	800ae20 <pbuf_free>
      }
      arp_table[i].q = p;
 80126c2:	7c7a      	ldrb	r2, [r7, #17]
 80126c4:	490d      	ldr	r1, [pc, #52]	; (80126fc <etharp_query+0x268>)
 80126c6:	4613      	mov	r3, r2
 80126c8:	005b      	lsls	r3, r3, #1
 80126ca:	4413      	add	r3, r2
 80126cc:	00db      	lsls	r3, r3, #3
 80126ce:	440b      	add	r3, r1
 80126d0:	69fa      	ldr	r2, [r7, #28]
 80126d2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80126d4:	2300      	movs	r3, #0
 80126d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80126da:	e002      	b.n	80126e2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80126dc:	23ff      	movs	r3, #255	; 0xff
 80126de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80126e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80126e6:	4618      	mov	r0, r3
 80126e8:	3728      	adds	r7, #40	; 0x28
 80126ea:	46bd      	mov	sp, r7
 80126ec:	bd80      	pop	{r7, pc}
 80126ee:	bf00      	nop
 80126f0:	0801769c 	.word	0x0801769c
 80126f4:	08017848 	.word	0x08017848
 80126f8:	08017714 	.word	0x08017714
 80126fc:	24003638 	.word	0x24003638
 8012700:	08017858 	.word	0x08017858
 8012704:	0801783c 	.word	0x0801783c
 8012708:	24003728 	.word	0x24003728
 801270c:	08017880 	.word	0x08017880

08012710 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b08a      	sub	sp, #40	; 0x28
 8012714:	af02      	add	r7, sp, #8
 8012716:	60f8      	str	r0, [r7, #12]
 8012718:	60b9      	str	r1, [r7, #8]
 801271a:	607a      	str	r2, [r7, #4]
 801271c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801271e:	2300      	movs	r3, #0
 8012720:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d106      	bne.n	8012736 <etharp_raw+0x26>
 8012728:	4b3a      	ldr	r3, [pc, #232]	; (8012814 <etharp_raw+0x104>)
 801272a:	f240 4257 	movw	r2, #1111	; 0x457
 801272e:	493a      	ldr	r1, [pc, #232]	; (8012818 <etharp_raw+0x108>)
 8012730:	483a      	ldr	r0, [pc, #232]	; (801281c <etharp_raw+0x10c>)
 8012732:	f001 fc97 	bl	8014064 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012736:	f44f 7220 	mov.w	r2, #640	; 0x280
 801273a:	211c      	movs	r1, #28
 801273c:	200e      	movs	r0, #14
 801273e:	f7f8 f88d 	bl	800a85c <pbuf_alloc>
 8012742:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012744:	69bb      	ldr	r3, [r7, #24]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d102      	bne.n	8012750 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801274a:	f04f 33ff 	mov.w	r3, #4294967295
 801274e:	e05d      	b.n	801280c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012750:	69bb      	ldr	r3, [r7, #24]
 8012752:	895b      	ldrh	r3, [r3, #10]
 8012754:	2b1b      	cmp	r3, #27
 8012756:	d806      	bhi.n	8012766 <etharp_raw+0x56>
 8012758:	4b2e      	ldr	r3, [pc, #184]	; (8012814 <etharp_raw+0x104>)
 801275a:	f240 4262 	movw	r2, #1122	; 0x462
 801275e:	4930      	ldr	r1, [pc, #192]	; (8012820 <etharp_raw+0x110>)
 8012760:	482e      	ldr	r0, [pc, #184]	; (801281c <etharp_raw+0x10c>)
 8012762:	f001 fc7f 	bl	8014064 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012766:	69bb      	ldr	r3, [r7, #24]
 8012768:	685b      	ldr	r3, [r3, #4]
 801276a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801276c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801276e:	4618      	mov	r0, r3
 8012770:	f7f6 ff1e 	bl	80095b0 <lwip_htons>
 8012774:	4603      	mov	r3, r0
 8012776:	461a      	mov	r2, r3
 8012778:	697b      	ldr	r3, [r7, #20]
 801277a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012782:	2b06      	cmp	r3, #6
 8012784:	d006      	beq.n	8012794 <etharp_raw+0x84>
 8012786:	4b23      	ldr	r3, [pc, #140]	; (8012814 <etharp_raw+0x104>)
 8012788:	f240 4269 	movw	r2, #1129	; 0x469
 801278c:	4925      	ldr	r1, [pc, #148]	; (8012824 <etharp_raw+0x114>)
 801278e:	4823      	ldr	r0, [pc, #140]	; (801281c <etharp_raw+0x10c>)
 8012790:	f001 fc68 	bl	8014064 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012794:	697b      	ldr	r3, [r7, #20]
 8012796:	3308      	adds	r3, #8
 8012798:	2206      	movs	r2, #6
 801279a:	6839      	ldr	r1, [r7, #0]
 801279c:	4618      	mov	r0, r3
 801279e:	f001 fc4b 	bl	8014038 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80127a2:	697b      	ldr	r3, [r7, #20]
 80127a4:	3312      	adds	r3, #18
 80127a6:	2206      	movs	r2, #6
 80127a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80127aa:	4618      	mov	r0, r3
 80127ac:	f001 fc44 	bl	8014038 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80127b0:	697b      	ldr	r3, [r7, #20]
 80127b2:	330e      	adds	r3, #14
 80127b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80127b6:	6812      	ldr	r2, [r2, #0]
 80127b8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80127ba:	697b      	ldr	r3, [r7, #20]
 80127bc:	3318      	adds	r3, #24
 80127be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127c0:	6812      	ldr	r2, [r2, #0]
 80127c2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80127c4:	697b      	ldr	r3, [r7, #20]
 80127c6:	2200      	movs	r2, #0
 80127c8:	701a      	strb	r2, [r3, #0]
 80127ca:	2200      	movs	r2, #0
 80127cc:	f042 0201 	orr.w	r2, r2, #1
 80127d0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80127d2:	697b      	ldr	r3, [r7, #20]
 80127d4:	2200      	movs	r2, #0
 80127d6:	f042 0208 	orr.w	r2, r2, #8
 80127da:	709a      	strb	r2, [r3, #2]
 80127dc:	2200      	movs	r2, #0
 80127de:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80127e0:	697b      	ldr	r3, [r7, #20]
 80127e2:	2206      	movs	r2, #6
 80127e4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80127e6:	697b      	ldr	r3, [r7, #20]
 80127e8:	2204      	movs	r2, #4
 80127ea:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80127ec:	f640 0306 	movw	r3, #2054	; 0x806
 80127f0:	9300      	str	r3, [sp, #0]
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	68ba      	ldr	r2, [r7, #8]
 80127f6:	69b9      	ldr	r1, [r7, #24]
 80127f8:	68f8      	ldr	r0, [r7, #12]
 80127fa:	f001 fba1 	bl	8013f40 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80127fe:	69b8      	ldr	r0, [r7, #24]
 8012800:	f7f8 fb0e 	bl	800ae20 <pbuf_free>
  p = NULL;
 8012804:	2300      	movs	r3, #0
 8012806:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012808:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801280c:	4618      	mov	r0, r3
 801280e:	3720      	adds	r7, #32
 8012810:	46bd      	mov	sp, r7
 8012812:	bd80      	pop	{r7, pc}
 8012814:	0801769c 	.word	0x0801769c
 8012818:	080177ec 	.word	0x080177ec
 801281c:	08017714 	.word	0x08017714
 8012820:	0801789c 	.word	0x0801789c
 8012824:	080178d0 	.word	0x080178d0

08012828 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b088      	sub	sp, #32
 801282c:	af04      	add	r7, sp, #16
 801282e:	60f8      	str	r0, [r7, #12]
 8012830:	60b9      	str	r1, [r7, #8]
 8012832:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012844:	2201      	movs	r2, #1
 8012846:	9203      	str	r2, [sp, #12]
 8012848:	68ba      	ldr	r2, [r7, #8]
 801284a:	9202      	str	r2, [sp, #8]
 801284c:	4a06      	ldr	r2, [pc, #24]	; (8012868 <etharp_request_dst+0x40>)
 801284e:	9201      	str	r2, [sp, #4]
 8012850:	9300      	str	r3, [sp, #0]
 8012852:	4603      	mov	r3, r0
 8012854:	687a      	ldr	r2, [r7, #4]
 8012856:	68f8      	ldr	r0, [r7, #12]
 8012858:	f7ff ff5a 	bl	8012710 <etharp_raw>
 801285c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801285e:	4618      	mov	r0, r3
 8012860:	3710      	adds	r7, #16
 8012862:	46bd      	mov	sp, r7
 8012864:	bd80      	pop	{r7, pc}
 8012866:	bf00      	nop
 8012868:	08018c54 	.word	0x08018c54

0801286c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b082      	sub	sp, #8
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
 8012874:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012876:	4a05      	ldr	r2, [pc, #20]	; (801288c <etharp_request+0x20>)
 8012878:	6839      	ldr	r1, [r7, #0]
 801287a:	6878      	ldr	r0, [r7, #4]
 801287c:	f7ff ffd4 	bl	8012828 <etharp_request_dst>
 8012880:	4603      	mov	r3, r0
}
 8012882:	4618      	mov	r0, r3
 8012884:	3708      	adds	r7, #8
 8012886:	46bd      	mov	sp, r7
 8012888:	bd80      	pop	{r7, pc}
 801288a:	bf00      	nop
 801288c:	08018c4c 	.word	0x08018c4c

08012890 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b08e      	sub	sp, #56	; 0x38
 8012894:	af04      	add	r7, sp, #16
 8012896:	6078      	str	r0, [r7, #4]
 8012898:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801289a:	4b87      	ldr	r3, [pc, #540]	; (8012ab8 <icmp_input+0x228>)
 801289c:	689b      	ldr	r3, [r3, #8]
 801289e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80128a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128a2:	781b      	ldrb	r3, [r3, #0]
 80128a4:	f003 030f 	and.w	r3, r3, #15
 80128a8:	b2db      	uxtb	r3, r3
 80128aa:	009b      	lsls	r3, r3, #2
 80128ac:	b2db      	uxtb	r3, r3
 80128ae:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80128b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80128b2:	2b13      	cmp	r3, #19
 80128b4:	f240 80e8 	bls.w	8012a88 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	895b      	ldrh	r3, [r3, #10]
 80128bc:	2b03      	cmp	r3, #3
 80128be:	f240 80e5 	bls.w	8012a8c <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	685b      	ldr	r3, [r3, #4]
 80128c6:	781b      	ldrb	r3, [r3, #0]
 80128c8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80128cc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	f000 80d2 	beq.w	8012a7a <icmp_input+0x1ea>
 80128d6:	2b08      	cmp	r3, #8
 80128d8:	f040 80d2 	bne.w	8012a80 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80128dc:	4b77      	ldr	r3, [pc, #476]	; (8012abc <icmp_input+0x22c>)
 80128de:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80128e0:	4b75      	ldr	r3, [pc, #468]	; (8012ab8 <icmp_input+0x228>)
 80128e2:	695b      	ldr	r3, [r3, #20]
 80128e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80128e8:	2be0      	cmp	r3, #224	; 0xe0
 80128ea:	f000 80d6 	beq.w	8012a9a <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80128ee:	4b72      	ldr	r3, [pc, #456]	; (8012ab8 <icmp_input+0x228>)
 80128f0:	695b      	ldr	r3, [r3, #20]
 80128f2:	4a71      	ldr	r2, [pc, #452]	; (8012ab8 <icmp_input+0x228>)
 80128f4:	6812      	ldr	r2, [r2, #0]
 80128f6:	4611      	mov	r1, r2
 80128f8:	4618      	mov	r0, r3
 80128fa:	f000 fc13 	bl	8013124 <ip4_addr_isbroadcast_u32>
 80128fe:	4603      	mov	r3, r0
 8012900:	2b00      	cmp	r3, #0
 8012902:	f040 80cc 	bne.w	8012a9e <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	891b      	ldrh	r3, [r3, #8]
 801290a:	2b07      	cmp	r3, #7
 801290c:	f240 80c0 	bls.w	8012a90 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8012910:	6878      	ldr	r0, [r7, #4]
 8012912:	f7f6 ff20 	bl	8009756 <inet_chksum_pbuf>
 8012916:	4603      	mov	r3, r0
 8012918:	2b00      	cmp	r3, #0
 801291a:	d003      	beq.n	8012924 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	f7f8 fa7f 	bl	800ae20 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8012922:	e0c5      	b.n	8012ab0 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012924:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012926:	330e      	adds	r3, #14
 8012928:	4619      	mov	r1, r3
 801292a:	6878      	ldr	r0, [r7, #4]
 801292c:	f7f8 f9e2 	bl	800acf4 <pbuf_add_header>
 8012930:	4603      	mov	r3, r0
 8012932:	2b00      	cmp	r3, #0
 8012934:	d04b      	beq.n	80129ce <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	891a      	ldrh	r2, [r3, #8]
 801293a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801293c:	4413      	add	r3, r2
 801293e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	891b      	ldrh	r3, [r3, #8]
 8012944:	8b7a      	ldrh	r2, [r7, #26]
 8012946:	429a      	cmp	r2, r3
 8012948:	f0c0 80ab 	bcc.w	8012aa2 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801294c:	8b7b      	ldrh	r3, [r7, #26]
 801294e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012952:	4619      	mov	r1, r3
 8012954:	200e      	movs	r0, #14
 8012956:	f7f7 ff81 	bl	800a85c <pbuf_alloc>
 801295a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801295c:	697b      	ldr	r3, [r7, #20]
 801295e:	2b00      	cmp	r3, #0
 8012960:	f000 80a1 	beq.w	8012aa6 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012964:	697b      	ldr	r3, [r7, #20]
 8012966:	895b      	ldrh	r3, [r3, #10]
 8012968:	461a      	mov	r2, r3
 801296a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801296c:	3308      	adds	r3, #8
 801296e:	429a      	cmp	r2, r3
 8012970:	d203      	bcs.n	801297a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012972:	6978      	ldr	r0, [r7, #20]
 8012974:	f7f8 fa54 	bl	800ae20 <pbuf_free>
          goto icmperr;
 8012978:	e096      	b.n	8012aa8 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	685b      	ldr	r3, [r3, #4]
 801297e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012980:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012982:	4618      	mov	r0, r3
 8012984:	f001 fb58 	bl	8014038 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012988:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801298a:	4619      	mov	r1, r3
 801298c:	6978      	ldr	r0, [r7, #20]
 801298e:	f7f8 f9c1 	bl	800ad14 <pbuf_remove_header>
 8012992:	4603      	mov	r3, r0
 8012994:	2b00      	cmp	r3, #0
 8012996:	d009      	beq.n	80129ac <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012998:	4b49      	ldr	r3, [pc, #292]	; (8012ac0 <icmp_input+0x230>)
 801299a:	22b6      	movs	r2, #182	; 0xb6
 801299c:	4949      	ldr	r1, [pc, #292]	; (8012ac4 <icmp_input+0x234>)
 801299e:	484a      	ldr	r0, [pc, #296]	; (8012ac8 <icmp_input+0x238>)
 80129a0:	f001 fb60 	bl	8014064 <iprintf>
          pbuf_free(r);
 80129a4:	6978      	ldr	r0, [r7, #20]
 80129a6:	f7f8 fa3b 	bl	800ae20 <pbuf_free>
          goto icmperr;
 80129aa:	e07d      	b.n	8012aa8 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80129ac:	6879      	ldr	r1, [r7, #4]
 80129ae:	6978      	ldr	r0, [r7, #20]
 80129b0:	f7f8 fb4e 	bl	800b050 <pbuf_copy>
 80129b4:	4603      	mov	r3, r0
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d003      	beq.n	80129c2 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80129ba:	6978      	ldr	r0, [r7, #20]
 80129bc:	f7f8 fa30 	bl	800ae20 <pbuf_free>
          goto icmperr;
 80129c0:	e072      	b.n	8012aa8 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80129c2:	6878      	ldr	r0, [r7, #4]
 80129c4:	f7f8 fa2c 	bl	800ae20 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80129c8:	697b      	ldr	r3, [r7, #20]
 80129ca:	607b      	str	r3, [r7, #4]
 80129cc:	e00f      	b.n	80129ee <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80129ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80129d0:	330e      	adds	r3, #14
 80129d2:	4619      	mov	r1, r3
 80129d4:	6878      	ldr	r0, [r7, #4]
 80129d6:	f7f8 f99d 	bl	800ad14 <pbuf_remove_header>
 80129da:	4603      	mov	r3, r0
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d006      	beq.n	80129ee <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80129e0:	4b37      	ldr	r3, [pc, #220]	; (8012ac0 <icmp_input+0x230>)
 80129e2:	22c7      	movs	r2, #199	; 0xc7
 80129e4:	4939      	ldr	r1, [pc, #228]	; (8012acc <icmp_input+0x23c>)
 80129e6:	4838      	ldr	r0, [pc, #224]	; (8012ac8 <icmp_input+0x238>)
 80129e8:	f001 fb3c 	bl	8014064 <iprintf>
          goto icmperr;
 80129ec:	e05c      	b.n	8012aa8 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	685b      	ldr	r3, [r3, #4]
 80129f2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80129f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80129f6:	4619      	mov	r1, r3
 80129f8:	6878      	ldr	r0, [r7, #4]
 80129fa:	f7f8 f97b 	bl	800acf4 <pbuf_add_header>
 80129fe:	4603      	mov	r3, r0
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d13c      	bne.n	8012a7e <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	685b      	ldr	r3, [r3, #4]
 8012a08:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012a0a:	69fb      	ldr	r3, [r7, #28]
 8012a0c:	681a      	ldr	r2, [r3, #0]
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012a12:	4b29      	ldr	r3, [pc, #164]	; (8012ab8 <icmp_input+0x228>)
 8012a14:	691a      	ldr	r2, [r3, #16]
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012a1a:	693b      	ldr	r3, [r7, #16]
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8012a20:	693b      	ldr	r3, [r7, #16]
 8012a22:	885b      	ldrh	r3, [r3, #2]
 8012a24:	b29b      	uxth	r3, r3
 8012a26:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8012a2a:	4293      	cmp	r3, r2
 8012a2c:	d907      	bls.n	8012a3e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8012a2e:	693b      	ldr	r3, [r7, #16]
 8012a30:	885b      	ldrh	r3, [r3, #2]
 8012a32:	b29b      	uxth	r3, r3
 8012a34:	3309      	adds	r3, #9
 8012a36:	b29a      	uxth	r2, r3
 8012a38:	693b      	ldr	r3, [r7, #16]
 8012a3a:	805a      	strh	r2, [r3, #2]
 8012a3c:	e006      	b.n	8012a4c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8012a3e:	693b      	ldr	r3, [r7, #16]
 8012a40:	885b      	ldrh	r3, [r3, #2]
 8012a42:	b29b      	uxth	r3, r3
 8012a44:	3308      	adds	r3, #8
 8012a46:	b29a      	uxth	r2, r3
 8012a48:	693b      	ldr	r3, [r7, #16]
 8012a4a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	22ff      	movs	r2, #255	; 0xff
 8012a50:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	2200      	movs	r2, #0
 8012a56:	729a      	strb	r2, [r3, #10]
 8012a58:	2200      	movs	r2, #0
 8012a5a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012a5c:	683b      	ldr	r3, [r7, #0]
 8012a5e:	9302      	str	r3, [sp, #8]
 8012a60:	2301      	movs	r3, #1
 8012a62:	9301      	str	r3, [sp, #4]
 8012a64:	2300      	movs	r3, #0
 8012a66:	9300      	str	r3, [sp, #0]
 8012a68:	23ff      	movs	r3, #255	; 0xff
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	69f9      	ldr	r1, [r7, #28]
 8012a6e:	6878      	ldr	r0, [r7, #4]
 8012a70:	f000 fa80 	bl	8012f74 <ip4_output_if>
 8012a74:	4603      	mov	r3, r0
 8012a76:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8012a78:	e001      	b.n	8012a7e <icmp_input+0x1ee>
      break;
 8012a7a:	bf00      	nop
 8012a7c:	e000      	b.n	8012a80 <icmp_input+0x1f0>
      break;
 8012a7e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012a80:	6878      	ldr	r0, [r7, #4]
 8012a82:	f7f8 f9cd 	bl	800ae20 <pbuf_free>
  return;
 8012a86:	e013      	b.n	8012ab0 <icmp_input+0x220>
    goto lenerr;
 8012a88:	bf00      	nop
 8012a8a:	e002      	b.n	8012a92 <icmp_input+0x202>
    goto lenerr;
 8012a8c:	bf00      	nop
 8012a8e:	e000      	b.n	8012a92 <icmp_input+0x202>
        goto lenerr;
 8012a90:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012a92:	6878      	ldr	r0, [r7, #4]
 8012a94:	f7f8 f9c4 	bl	800ae20 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012a98:	e00a      	b.n	8012ab0 <icmp_input+0x220>
        goto icmperr;
 8012a9a:	bf00      	nop
 8012a9c:	e004      	b.n	8012aa8 <icmp_input+0x218>
        goto icmperr;
 8012a9e:	bf00      	nop
 8012aa0:	e002      	b.n	8012aa8 <icmp_input+0x218>
          goto icmperr;
 8012aa2:	bf00      	nop
 8012aa4:	e000      	b.n	8012aa8 <icmp_input+0x218>
          goto icmperr;
 8012aa6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012aa8:	6878      	ldr	r0, [r7, #4]
 8012aaa:	f7f8 f9b9 	bl	800ae20 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012aae:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012ab0:	3728      	adds	r7, #40	; 0x28
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	bd80      	pop	{r7, pc}
 8012ab6:	bf00      	nop
 8012ab8:	240006bc 	.word	0x240006bc
 8012abc:	240006d0 	.word	0x240006d0
 8012ac0:	08017914 	.word	0x08017914
 8012ac4:	0801794c 	.word	0x0801794c
 8012ac8:	08017984 	.word	0x08017984
 8012acc:	080179ac 	.word	0x080179ac

08012ad0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b082      	sub	sp, #8
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
 8012ad8:	460b      	mov	r3, r1
 8012ada:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012adc:	78fb      	ldrb	r3, [r7, #3]
 8012ade:	461a      	mov	r2, r3
 8012ae0:	2103      	movs	r1, #3
 8012ae2:	6878      	ldr	r0, [r7, #4]
 8012ae4:	f000 f814 	bl	8012b10 <icmp_send_response>
}
 8012ae8:	bf00      	nop
 8012aea:	3708      	adds	r7, #8
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bd80      	pop	{r7, pc}

08012af0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b082      	sub	sp, #8
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
 8012af8:	460b      	mov	r3, r1
 8012afa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012afc:	78fb      	ldrb	r3, [r7, #3]
 8012afe:	461a      	mov	r2, r3
 8012b00:	210b      	movs	r1, #11
 8012b02:	6878      	ldr	r0, [r7, #4]
 8012b04:	f000 f804 	bl	8012b10 <icmp_send_response>
}
 8012b08:	bf00      	nop
 8012b0a:	3708      	adds	r7, #8
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bd80      	pop	{r7, pc}

08012b10 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b08c      	sub	sp, #48	; 0x30
 8012b14:	af04      	add	r7, sp, #16
 8012b16:	6078      	str	r0, [r7, #4]
 8012b18:	460b      	mov	r3, r1
 8012b1a:	70fb      	strb	r3, [r7, #3]
 8012b1c:	4613      	mov	r3, r2
 8012b1e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012b20:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012b24:	2124      	movs	r1, #36	; 0x24
 8012b26:	2022      	movs	r0, #34	; 0x22
 8012b28:	f7f7 fe98 	bl	800a85c <pbuf_alloc>
 8012b2c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012b2e:	69fb      	ldr	r3, [r7, #28]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d056      	beq.n	8012be2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012b34:	69fb      	ldr	r3, [r7, #28]
 8012b36:	895b      	ldrh	r3, [r3, #10]
 8012b38:	2b23      	cmp	r3, #35	; 0x23
 8012b3a:	d806      	bhi.n	8012b4a <icmp_send_response+0x3a>
 8012b3c:	4b2b      	ldr	r3, [pc, #172]	; (8012bec <icmp_send_response+0xdc>)
 8012b3e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8012b42:	492b      	ldr	r1, [pc, #172]	; (8012bf0 <icmp_send_response+0xe0>)
 8012b44:	482b      	ldr	r0, [pc, #172]	; (8012bf4 <icmp_send_response+0xe4>)
 8012b46:	f001 fa8d 	bl	8014064 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	685b      	ldr	r3, [r3, #4]
 8012b4e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012b50:	69fb      	ldr	r3, [r7, #28]
 8012b52:	685b      	ldr	r3, [r3, #4]
 8012b54:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8012b56:	697b      	ldr	r3, [r7, #20]
 8012b58:	78fa      	ldrb	r2, [r7, #3]
 8012b5a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8012b5c:	697b      	ldr	r3, [r7, #20]
 8012b5e:	78ba      	ldrb	r2, [r7, #2]
 8012b60:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012b62:	697b      	ldr	r3, [r7, #20]
 8012b64:	2200      	movs	r2, #0
 8012b66:	711a      	strb	r2, [r3, #4]
 8012b68:	2200      	movs	r2, #0
 8012b6a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012b6c:	697b      	ldr	r3, [r7, #20]
 8012b6e:	2200      	movs	r2, #0
 8012b70:	719a      	strb	r2, [r3, #6]
 8012b72:	2200      	movs	r2, #0
 8012b74:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012b76:	69fb      	ldr	r3, [r7, #28]
 8012b78:	685b      	ldr	r3, [r3, #4]
 8012b7a:	f103 0008 	add.w	r0, r3, #8
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	685b      	ldr	r3, [r3, #4]
 8012b82:	221c      	movs	r2, #28
 8012b84:	4619      	mov	r1, r3
 8012b86:	f001 fa57 	bl	8014038 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012b8a:	69bb      	ldr	r3, [r7, #24]
 8012b8c:	68db      	ldr	r3, [r3, #12]
 8012b8e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012b90:	f107 030c 	add.w	r3, r7, #12
 8012b94:	4618      	mov	r0, r3
 8012b96:	f000 f82f 	bl	8012bf8 <ip4_route>
 8012b9a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012b9c:	693b      	ldr	r3, [r7, #16]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d01b      	beq.n	8012bda <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012ba2:	697b      	ldr	r3, [r7, #20]
 8012ba4:	2200      	movs	r2, #0
 8012ba6:	709a      	strb	r2, [r3, #2]
 8012ba8:	2200      	movs	r2, #0
 8012baa:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8012bac:	69fb      	ldr	r3, [r7, #28]
 8012bae:	895b      	ldrh	r3, [r3, #10]
 8012bb0:	4619      	mov	r1, r3
 8012bb2:	6978      	ldr	r0, [r7, #20]
 8012bb4:	f7f6 fdbd 	bl	8009732 <inet_chksum>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	461a      	mov	r2, r3
 8012bbc:	697b      	ldr	r3, [r7, #20]
 8012bbe:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012bc0:	f107 020c 	add.w	r2, r7, #12
 8012bc4:	693b      	ldr	r3, [r7, #16]
 8012bc6:	9302      	str	r3, [sp, #8]
 8012bc8:	2301      	movs	r3, #1
 8012bca:	9301      	str	r3, [sp, #4]
 8012bcc:	2300      	movs	r3, #0
 8012bce:	9300      	str	r3, [sp, #0]
 8012bd0:	23ff      	movs	r3, #255	; 0xff
 8012bd2:	2100      	movs	r1, #0
 8012bd4:	69f8      	ldr	r0, [r7, #28]
 8012bd6:	f000 f9cd 	bl	8012f74 <ip4_output_if>
  }
  pbuf_free(q);
 8012bda:	69f8      	ldr	r0, [r7, #28]
 8012bdc:	f7f8 f920 	bl	800ae20 <pbuf_free>
 8012be0:	e000      	b.n	8012be4 <icmp_send_response+0xd4>
    return;
 8012be2:	bf00      	nop
}
 8012be4:	3720      	adds	r7, #32
 8012be6:	46bd      	mov	sp, r7
 8012be8:	bd80      	pop	{r7, pc}
 8012bea:	bf00      	nop
 8012bec:	08017914 	.word	0x08017914
 8012bf0:	080179e0 	.word	0x080179e0
 8012bf4:	08017984 	.word	0x08017984

08012bf8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012bf8:	b480      	push	{r7}
 8012bfa:	b085      	sub	sp, #20
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012c00:	4b33      	ldr	r3, [pc, #204]	; (8012cd0 <ip4_route+0xd8>)
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	60fb      	str	r3, [r7, #12]
 8012c06:	e036      	b.n	8012c76 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c0e:	f003 0301 	and.w	r3, r3, #1
 8012c12:	b2db      	uxtb	r3, r3
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d02b      	beq.n	8012c70 <ip4_route+0x78>
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c1e:	089b      	lsrs	r3, r3, #2
 8012c20:	f003 0301 	and.w	r3, r3, #1
 8012c24:	b2db      	uxtb	r3, r3
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d022      	beq.n	8012c70 <ip4_route+0x78>
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	3304      	adds	r3, #4
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d01d      	beq.n	8012c70 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	681a      	ldr	r2, [r3, #0]
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	3304      	adds	r3, #4
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	405a      	eors	r2, r3
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	3308      	adds	r3, #8
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	4013      	ands	r3, r2
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d101      	bne.n	8012c50 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	e038      	b.n	8012cc2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c56:	f003 0302 	and.w	r3, r3, #2
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d108      	bne.n	8012c70 <ip4_route+0x78>
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	681a      	ldr	r2, [r3, #0]
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	330c      	adds	r3, #12
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	429a      	cmp	r2, r3
 8012c6a:	d101      	bne.n	8012c70 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	e028      	b.n	8012cc2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	60fb      	str	r3, [r7, #12]
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d1c5      	bne.n	8012c08 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012c7c:	4b15      	ldr	r3, [pc, #84]	; (8012cd4 <ip4_route+0xdc>)
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d01a      	beq.n	8012cba <ip4_route+0xc2>
 8012c84:	4b13      	ldr	r3, [pc, #76]	; (8012cd4 <ip4_route+0xdc>)
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c8c:	f003 0301 	and.w	r3, r3, #1
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d012      	beq.n	8012cba <ip4_route+0xc2>
 8012c94:	4b0f      	ldr	r3, [pc, #60]	; (8012cd4 <ip4_route+0xdc>)
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c9c:	f003 0304 	and.w	r3, r3, #4
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d00a      	beq.n	8012cba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012ca4:	4b0b      	ldr	r3, [pc, #44]	; (8012cd4 <ip4_route+0xdc>)
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	3304      	adds	r3, #4
 8012caa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d004      	beq.n	8012cba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	b2db      	uxtb	r3, r3
 8012cb6:	2b7f      	cmp	r3, #127	; 0x7f
 8012cb8:	d101      	bne.n	8012cbe <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012cba:	2300      	movs	r3, #0
 8012cbc:	e001      	b.n	8012cc2 <ip4_route+0xca>
  }

  return netif_default;
 8012cbe:	4b05      	ldr	r3, [pc, #20]	; (8012cd4 <ip4_route+0xdc>)
 8012cc0:	681b      	ldr	r3, [r3, #0]
}
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	3714      	adds	r7, #20
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ccc:	4770      	bx	lr
 8012cce:	bf00      	nop
 8012cd0:	240035cc 	.word	0x240035cc
 8012cd4:	240035d0 	.word	0x240035d0

08012cd8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b082      	sub	sp, #8
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ce6:	f003 0301 	and.w	r3, r3, #1
 8012cea:	b2db      	uxtb	r3, r3
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d016      	beq.n	8012d1e <ip4_input_accept+0x46>
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	3304      	adds	r3, #4
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d011      	beq.n	8012d1e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012cfa:	4b0b      	ldr	r3, [pc, #44]	; (8012d28 <ip4_input_accept+0x50>)
 8012cfc:	695a      	ldr	r2, [r3, #20]
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	3304      	adds	r3, #4
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	429a      	cmp	r2, r3
 8012d06:	d008      	beq.n	8012d1a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012d08:	4b07      	ldr	r3, [pc, #28]	; (8012d28 <ip4_input_accept+0x50>)
 8012d0a:	695b      	ldr	r3, [r3, #20]
 8012d0c:	6879      	ldr	r1, [r7, #4]
 8012d0e:	4618      	mov	r0, r3
 8012d10:	f000 fa08 	bl	8013124 <ip4_addr_isbroadcast_u32>
 8012d14:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d001      	beq.n	8012d1e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012d1a:	2301      	movs	r3, #1
 8012d1c:	e000      	b.n	8012d20 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012d1e:	2300      	movs	r3, #0
}
 8012d20:	4618      	mov	r0, r3
 8012d22:	3708      	adds	r7, #8
 8012d24:	46bd      	mov	sp, r7
 8012d26:	bd80      	pop	{r7, pc}
 8012d28:	240006bc 	.word	0x240006bc

08012d2c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b086      	sub	sp, #24
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
 8012d34:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	685b      	ldr	r3, [r3, #4]
 8012d3a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	781b      	ldrb	r3, [r3, #0]
 8012d40:	091b      	lsrs	r3, r3, #4
 8012d42:	b2db      	uxtb	r3, r3
 8012d44:	2b04      	cmp	r3, #4
 8012d46:	d004      	beq.n	8012d52 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012d48:	6878      	ldr	r0, [r7, #4]
 8012d4a:	f7f8 f869 	bl	800ae20 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012d4e:	2300      	movs	r3, #0
 8012d50:	e107      	b.n	8012f62 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012d52:	697b      	ldr	r3, [r7, #20]
 8012d54:	781b      	ldrb	r3, [r3, #0]
 8012d56:	f003 030f 	and.w	r3, r3, #15
 8012d5a:	b2db      	uxtb	r3, r3
 8012d5c:	009b      	lsls	r3, r3, #2
 8012d5e:	b2db      	uxtb	r3, r3
 8012d60:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012d62:	697b      	ldr	r3, [r7, #20]
 8012d64:	885b      	ldrh	r3, [r3, #2]
 8012d66:	b29b      	uxth	r3, r3
 8012d68:	4618      	mov	r0, r3
 8012d6a:	f7f6 fc21 	bl	80095b0 <lwip_htons>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	891b      	ldrh	r3, [r3, #8]
 8012d76:	89ba      	ldrh	r2, [r7, #12]
 8012d78:	429a      	cmp	r2, r3
 8012d7a:	d204      	bcs.n	8012d86 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8012d7c:	89bb      	ldrh	r3, [r7, #12]
 8012d7e:	4619      	mov	r1, r3
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f7f7 fec9 	bl	800ab18 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	895b      	ldrh	r3, [r3, #10]
 8012d8a:	89fa      	ldrh	r2, [r7, #14]
 8012d8c:	429a      	cmp	r2, r3
 8012d8e:	d807      	bhi.n	8012da0 <ip4_input+0x74>
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	891b      	ldrh	r3, [r3, #8]
 8012d94:	89ba      	ldrh	r2, [r7, #12]
 8012d96:	429a      	cmp	r2, r3
 8012d98:	d802      	bhi.n	8012da0 <ip4_input+0x74>
 8012d9a:	89fb      	ldrh	r3, [r7, #14]
 8012d9c:	2b13      	cmp	r3, #19
 8012d9e:	d804      	bhi.n	8012daa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012da0:	6878      	ldr	r0, [r7, #4]
 8012da2:	f7f8 f83d 	bl	800ae20 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012da6:	2300      	movs	r3, #0
 8012da8:	e0db      	b.n	8012f62 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012daa:	697b      	ldr	r3, [r7, #20]
 8012dac:	691b      	ldr	r3, [r3, #16]
 8012dae:	4a6f      	ldr	r2, [pc, #444]	; (8012f6c <ip4_input+0x240>)
 8012db0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012db2:	697b      	ldr	r3, [r7, #20]
 8012db4:	68db      	ldr	r3, [r3, #12]
 8012db6:	4a6d      	ldr	r2, [pc, #436]	; (8012f6c <ip4_input+0x240>)
 8012db8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012dba:	4b6c      	ldr	r3, [pc, #432]	; (8012f6c <ip4_input+0x240>)
 8012dbc:	695b      	ldr	r3, [r3, #20]
 8012dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012dc2:	2be0      	cmp	r3, #224	; 0xe0
 8012dc4:	d112      	bne.n	8012dec <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012dc6:	683b      	ldr	r3, [r7, #0]
 8012dc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012dcc:	f003 0301 	and.w	r3, r3, #1
 8012dd0:	b2db      	uxtb	r3, r3
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d007      	beq.n	8012de6 <ip4_input+0xba>
 8012dd6:	683b      	ldr	r3, [r7, #0]
 8012dd8:	3304      	adds	r3, #4
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d002      	beq.n	8012de6 <ip4_input+0xba>
      netif = inp;
 8012de0:	683b      	ldr	r3, [r7, #0]
 8012de2:	613b      	str	r3, [r7, #16]
 8012de4:	e02a      	b.n	8012e3c <ip4_input+0x110>
    } else {
      netif = NULL;
 8012de6:	2300      	movs	r3, #0
 8012de8:	613b      	str	r3, [r7, #16]
 8012dea:	e027      	b.n	8012e3c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012dec:	6838      	ldr	r0, [r7, #0]
 8012dee:	f7ff ff73 	bl	8012cd8 <ip4_input_accept>
 8012df2:	4603      	mov	r3, r0
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d002      	beq.n	8012dfe <ip4_input+0xd2>
      netif = inp;
 8012df8:	683b      	ldr	r3, [r7, #0]
 8012dfa:	613b      	str	r3, [r7, #16]
 8012dfc:	e01e      	b.n	8012e3c <ip4_input+0x110>
    } else {
      netif = NULL;
 8012dfe:	2300      	movs	r3, #0
 8012e00:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012e02:	4b5a      	ldr	r3, [pc, #360]	; (8012f6c <ip4_input+0x240>)
 8012e04:	695b      	ldr	r3, [r3, #20]
 8012e06:	b2db      	uxtb	r3, r3
 8012e08:	2b7f      	cmp	r3, #127	; 0x7f
 8012e0a:	d017      	beq.n	8012e3c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012e0c:	4b58      	ldr	r3, [pc, #352]	; (8012f70 <ip4_input+0x244>)
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	613b      	str	r3, [r7, #16]
 8012e12:	e00e      	b.n	8012e32 <ip4_input+0x106>
          if (netif == inp) {
 8012e14:	693a      	ldr	r2, [r7, #16]
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	429a      	cmp	r2, r3
 8012e1a:	d006      	beq.n	8012e2a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012e1c:	6938      	ldr	r0, [r7, #16]
 8012e1e:	f7ff ff5b 	bl	8012cd8 <ip4_input_accept>
 8012e22:	4603      	mov	r3, r0
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d108      	bne.n	8012e3a <ip4_input+0x10e>
 8012e28:	e000      	b.n	8012e2c <ip4_input+0x100>
            continue;
 8012e2a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012e2c:	693b      	ldr	r3, [r7, #16]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	613b      	str	r3, [r7, #16]
 8012e32:	693b      	ldr	r3, [r7, #16]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d1ed      	bne.n	8012e14 <ip4_input+0xe8>
 8012e38:	e000      	b.n	8012e3c <ip4_input+0x110>
            break;
 8012e3a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012e3c:	4b4b      	ldr	r3, [pc, #300]	; (8012f6c <ip4_input+0x240>)
 8012e3e:	691b      	ldr	r3, [r3, #16]
 8012e40:	6839      	ldr	r1, [r7, #0]
 8012e42:	4618      	mov	r0, r3
 8012e44:	f000 f96e 	bl	8013124 <ip4_addr_isbroadcast_u32>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d105      	bne.n	8012e5a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012e4e:	4b47      	ldr	r3, [pc, #284]	; (8012f6c <ip4_input+0x240>)
 8012e50:	691b      	ldr	r3, [r3, #16]
 8012e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012e56:	2be0      	cmp	r3, #224	; 0xe0
 8012e58:	d104      	bne.n	8012e64 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012e5a:	6878      	ldr	r0, [r7, #4]
 8012e5c:	f7f7 ffe0 	bl	800ae20 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012e60:	2300      	movs	r3, #0
 8012e62:	e07e      	b.n	8012f62 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012e64:	693b      	ldr	r3, [r7, #16]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d104      	bne.n	8012e74 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012e6a:	6878      	ldr	r0, [r7, #4]
 8012e6c:	f7f7 ffd8 	bl	800ae20 <pbuf_free>
    return ERR_OK;
 8012e70:	2300      	movs	r3, #0
 8012e72:	e076      	b.n	8012f62 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012e74:	697b      	ldr	r3, [r7, #20]
 8012e76:	88db      	ldrh	r3, [r3, #6]
 8012e78:	b29b      	uxth	r3, r3
 8012e7a:	461a      	mov	r2, r3
 8012e7c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012e80:	4013      	ands	r3, r2
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d00b      	beq.n	8012e9e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012e86:	6878      	ldr	r0, [r7, #4]
 8012e88:	f000 fc92 	bl	80137b0 <ip4_reass>
 8012e8c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d101      	bne.n	8012e98 <ip4_input+0x16c>
      return ERR_OK;
 8012e94:	2300      	movs	r3, #0
 8012e96:	e064      	b.n	8012f62 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	685b      	ldr	r3, [r3, #4]
 8012e9c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012e9e:	4a33      	ldr	r2, [pc, #204]	; (8012f6c <ip4_input+0x240>)
 8012ea0:	693b      	ldr	r3, [r7, #16]
 8012ea2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012ea4:	4a31      	ldr	r2, [pc, #196]	; (8012f6c <ip4_input+0x240>)
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012eaa:	4a30      	ldr	r2, [pc, #192]	; (8012f6c <ip4_input+0x240>)
 8012eac:	697b      	ldr	r3, [r7, #20]
 8012eae:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012eb0:	697b      	ldr	r3, [r7, #20]
 8012eb2:	781b      	ldrb	r3, [r3, #0]
 8012eb4:	f003 030f 	and.w	r3, r3, #15
 8012eb8:	b2db      	uxtb	r3, r3
 8012eba:	009b      	lsls	r3, r3, #2
 8012ebc:	b2db      	uxtb	r3, r3
 8012ebe:	b29a      	uxth	r2, r3
 8012ec0:	4b2a      	ldr	r3, [pc, #168]	; (8012f6c <ip4_input+0x240>)
 8012ec2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012ec4:	89fb      	ldrh	r3, [r7, #14]
 8012ec6:	4619      	mov	r1, r3
 8012ec8:	6878      	ldr	r0, [r7, #4]
 8012eca:	f7f7 ff23 	bl	800ad14 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012ece:	697b      	ldr	r3, [r7, #20]
 8012ed0:	7a5b      	ldrb	r3, [r3, #9]
 8012ed2:	2b11      	cmp	r3, #17
 8012ed4:	d006      	beq.n	8012ee4 <ip4_input+0x1b8>
 8012ed6:	2b11      	cmp	r3, #17
 8012ed8:	dc13      	bgt.n	8012f02 <ip4_input+0x1d6>
 8012eda:	2b01      	cmp	r3, #1
 8012edc:	d00c      	beq.n	8012ef8 <ip4_input+0x1cc>
 8012ede:	2b06      	cmp	r3, #6
 8012ee0:	d005      	beq.n	8012eee <ip4_input+0x1c2>
 8012ee2:	e00e      	b.n	8012f02 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012ee4:	6839      	ldr	r1, [r7, #0]
 8012ee6:	6878      	ldr	r0, [r7, #4]
 8012ee8:	f7fe fc42 	bl	8011770 <udp_input>
        break;
 8012eec:	e026      	b.n	8012f3c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012eee:	6839      	ldr	r1, [r7, #0]
 8012ef0:	6878      	ldr	r0, [r7, #4]
 8012ef2:	f7fa f863 	bl	800cfbc <tcp_input>
        break;
 8012ef6:	e021      	b.n	8012f3c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012ef8:	6839      	ldr	r1, [r7, #0]
 8012efa:	6878      	ldr	r0, [r7, #4]
 8012efc:	f7ff fcc8 	bl	8012890 <icmp_input>
        break;
 8012f00:	e01c      	b.n	8012f3c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012f02:	4b1a      	ldr	r3, [pc, #104]	; (8012f6c <ip4_input+0x240>)
 8012f04:	695b      	ldr	r3, [r3, #20]
 8012f06:	6939      	ldr	r1, [r7, #16]
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f000 f90b 	bl	8013124 <ip4_addr_isbroadcast_u32>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d10f      	bne.n	8012f34 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012f14:	4b15      	ldr	r3, [pc, #84]	; (8012f6c <ip4_input+0x240>)
 8012f16:	695b      	ldr	r3, [r3, #20]
 8012f18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012f1c:	2be0      	cmp	r3, #224	; 0xe0
 8012f1e:	d009      	beq.n	8012f34 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012f20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012f24:	4619      	mov	r1, r3
 8012f26:	6878      	ldr	r0, [r7, #4]
 8012f28:	f7f7 ff67 	bl	800adfa <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012f2c:	2102      	movs	r1, #2
 8012f2e:	6878      	ldr	r0, [r7, #4]
 8012f30:	f7ff fdce 	bl	8012ad0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012f34:	6878      	ldr	r0, [r7, #4]
 8012f36:	f7f7 ff73 	bl	800ae20 <pbuf_free>
        break;
 8012f3a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012f3c:	4b0b      	ldr	r3, [pc, #44]	; (8012f6c <ip4_input+0x240>)
 8012f3e:	2200      	movs	r2, #0
 8012f40:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012f42:	4b0a      	ldr	r3, [pc, #40]	; (8012f6c <ip4_input+0x240>)
 8012f44:	2200      	movs	r2, #0
 8012f46:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012f48:	4b08      	ldr	r3, [pc, #32]	; (8012f6c <ip4_input+0x240>)
 8012f4a:	2200      	movs	r2, #0
 8012f4c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012f4e:	4b07      	ldr	r3, [pc, #28]	; (8012f6c <ip4_input+0x240>)
 8012f50:	2200      	movs	r2, #0
 8012f52:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012f54:	4b05      	ldr	r3, [pc, #20]	; (8012f6c <ip4_input+0x240>)
 8012f56:	2200      	movs	r2, #0
 8012f58:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012f5a:	4b04      	ldr	r3, [pc, #16]	; (8012f6c <ip4_input+0x240>)
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012f60:	2300      	movs	r3, #0
}
 8012f62:	4618      	mov	r0, r3
 8012f64:	3718      	adds	r7, #24
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}
 8012f6a:	bf00      	nop
 8012f6c:	240006bc 	.word	0x240006bc
 8012f70:	240035cc 	.word	0x240035cc

08012f74 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b08a      	sub	sp, #40	; 0x28
 8012f78:	af04      	add	r7, sp, #16
 8012f7a:	60f8      	str	r0, [r7, #12]
 8012f7c:	60b9      	str	r1, [r7, #8]
 8012f7e:	607a      	str	r2, [r7, #4]
 8012f80:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012f82:	68bb      	ldr	r3, [r7, #8]
 8012f84:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d009      	beq.n	8012fa0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012f8c:	68bb      	ldr	r3, [r7, #8]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d003      	beq.n	8012f9a <ip4_output_if+0x26>
 8012f92:	68bb      	ldr	r3, [r7, #8]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d102      	bne.n	8012fa0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f9c:	3304      	adds	r3, #4
 8012f9e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012fa0:	78fa      	ldrb	r2, [r7, #3]
 8012fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fa4:	9302      	str	r3, [sp, #8]
 8012fa6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012faa:	9301      	str	r3, [sp, #4]
 8012fac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012fb0:	9300      	str	r3, [sp, #0]
 8012fb2:	4613      	mov	r3, r2
 8012fb4:	687a      	ldr	r2, [r7, #4]
 8012fb6:	6979      	ldr	r1, [r7, #20]
 8012fb8:	68f8      	ldr	r0, [r7, #12]
 8012fba:	f000 f805 	bl	8012fc8 <ip4_output_if_src>
 8012fbe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	3718      	adds	r7, #24
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	bd80      	pop	{r7, pc}

08012fc8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	b088      	sub	sp, #32
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	60f8      	str	r0, [r7, #12]
 8012fd0:	60b9      	str	r1, [r7, #8]
 8012fd2:	607a      	str	r2, [r7, #4]
 8012fd4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	7b9b      	ldrb	r3, [r3, #14]
 8012fda:	2b01      	cmp	r3, #1
 8012fdc:	d006      	beq.n	8012fec <ip4_output_if_src+0x24>
 8012fde:	4b4b      	ldr	r3, [pc, #300]	; (801310c <ip4_output_if_src+0x144>)
 8012fe0:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012fe4:	494a      	ldr	r1, [pc, #296]	; (8013110 <ip4_output_if_src+0x148>)
 8012fe6:	484b      	ldr	r0, [pc, #300]	; (8013114 <ip4_output_if_src+0x14c>)
 8012fe8:	f001 f83c 	bl	8014064 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d060      	beq.n	80130b4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012ff2:	2314      	movs	r3, #20
 8012ff4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012ff6:	2114      	movs	r1, #20
 8012ff8:	68f8      	ldr	r0, [r7, #12]
 8012ffa:	f7f7 fe7b 	bl	800acf4 <pbuf_add_header>
 8012ffe:	4603      	mov	r3, r0
 8013000:	2b00      	cmp	r3, #0
 8013002:	d002      	beq.n	801300a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013004:	f06f 0301 	mvn.w	r3, #1
 8013008:	e07c      	b.n	8013104 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	685b      	ldr	r3, [r3, #4]
 801300e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	895b      	ldrh	r3, [r3, #10]
 8013014:	2b13      	cmp	r3, #19
 8013016:	d806      	bhi.n	8013026 <ip4_output_if_src+0x5e>
 8013018:	4b3c      	ldr	r3, [pc, #240]	; (801310c <ip4_output_if_src+0x144>)
 801301a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801301e:	493e      	ldr	r1, [pc, #248]	; (8013118 <ip4_output_if_src+0x150>)
 8013020:	483c      	ldr	r0, [pc, #240]	; (8013114 <ip4_output_if_src+0x14c>)
 8013022:	f001 f81f 	bl	8014064 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013026:	69fb      	ldr	r3, [r7, #28]
 8013028:	78fa      	ldrb	r2, [r7, #3]
 801302a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801302c:	69fb      	ldr	r3, [r7, #28]
 801302e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013032:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	681a      	ldr	r2, [r3, #0]
 8013038:	69fb      	ldr	r3, [r7, #28]
 801303a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801303c:	8b7b      	ldrh	r3, [r7, #26]
 801303e:	089b      	lsrs	r3, r3, #2
 8013040:	b29b      	uxth	r3, r3
 8013042:	b2db      	uxtb	r3, r3
 8013044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013048:	b2da      	uxtb	r2, r3
 801304a:	69fb      	ldr	r3, [r7, #28]
 801304c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801304e:	69fb      	ldr	r3, [r7, #28]
 8013050:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013054:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	891b      	ldrh	r3, [r3, #8]
 801305a:	4618      	mov	r0, r3
 801305c:	f7f6 faa8 	bl	80095b0 <lwip_htons>
 8013060:	4603      	mov	r3, r0
 8013062:	461a      	mov	r2, r3
 8013064:	69fb      	ldr	r3, [r7, #28]
 8013066:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013068:	69fb      	ldr	r3, [r7, #28]
 801306a:	2200      	movs	r2, #0
 801306c:	719a      	strb	r2, [r3, #6]
 801306e:	2200      	movs	r2, #0
 8013070:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013072:	4b2a      	ldr	r3, [pc, #168]	; (801311c <ip4_output_if_src+0x154>)
 8013074:	881b      	ldrh	r3, [r3, #0]
 8013076:	4618      	mov	r0, r3
 8013078:	f7f6 fa9a 	bl	80095b0 <lwip_htons>
 801307c:	4603      	mov	r3, r0
 801307e:	461a      	mov	r2, r3
 8013080:	69fb      	ldr	r3, [r7, #28]
 8013082:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013084:	4b25      	ldr	r3, [pc, #148]	; (801311c <ip4_output_if_src+0x154>)
 8013086:	881b      	ldrh	r3, [r3, #0]
 8013088:	3301      	adds	r3, #1
 801308a:	b29a      	uxth	r2, r3
 801308c:	4b23      	ldr	r3, [pc, #140]	; (801311c <ip4_output_if_src+0x154>)
 801308e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013090:	68bb      	ldr	r3, [r7, #8]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d104      	bne.n	80130a0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013096:	4b22      	ldr	r3, [pc, #136]	; (8013120 <ip4_output_if_src+0x158>)
 8013098:	681a      	ldr	r2, [r3, #0]
 801309a:	69fb      	ldr	r3, [r7, #28]
 801309c:	60da      	str	r2, [r3, #12]
 801309e:	e003      	b.n	80130a8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80130a0:	68bb      	ldr	r3, [r7, #8]
 80130a2:	681a      	ldr	r2, [r3, #0]
 80130a4:	69fb      	ldr	r3, [r7, #28]
 80130a6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80130a8:	69fb      	ldr	r3, [r7, #28]
 80130aa:	2200      	movs	r2, #0
 80130ac:	729a      	strb	r2, [r3, #10]
 80130ae:	2200      	movs	r2, #0
 80130b0:	72da      	strb	r2, [r3, #11]
 80130b2:	e00f      	b.n	80130d4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	895b      	ldrh	r3, [r3, #10]
 80130b8:	2b13      	cmp	r3, #19
 80130ba:	d802      	bhi.n	80130c2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80130bc:	f06f 0301 	mvn.w	r3, #1
 80130c0:	e020      	b.n	8013104 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	685b      	ldr	r3, [r3, #4]
 80130c6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80130c8:	69fb      	ldr	r3, [r7, #28]
 80130ca:	691b      	ldr	r3, [r3, #16]
 80130cc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80130ce:	f107 0314 	add.w	r3, r7, #20
 80130d2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80130d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d00c      	beq.n	80130f6 <ip4_output_if_src+0x12e>
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	891a      	ldrh	r2, [r3, #8]
 80130e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80130e4:	429a      	cmp	r2, r3
 80130e6:	d906      	bls.n	80130f6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80130e8:	687a      	ldr	r2, [r7, #4]
 80130ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80130ec:	68f8      	ldr	r0, [r7, #12]
 80130ee:	f000 fd53 	bl	8013b98 <ip4_frag>
 80130f2:	4603      	mov	r3, r0
 80130f4:	e006      	b.n	8013104 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80130f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130f8:	695b      	ldr	r3, [r3, #20]
 80130fa:	687a      	ldr	r2, [r7, #4]
 80130fc:	68f9      	ldr	r1, [r7, #12]
 80130fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013100:	4798      	blx	r3
 8013102:	4603      	mov	r3, r0
}
 8013104:	4618      	mov	r0, r3
 8013106:	3720      	adds	r7, #32
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}
 801310c:	08017a0c 	.word	0x08017a0c
 8013110:	08017a40 	.word	0x08017a40
 8013114:	08017a4c 	.word	0x08017a4c
 8013118:	08017a74 	.word	0x08017a74
 801311c:	2400372a 	.word	0x2400372a
 8013120:	08018c48 	.word	0x08018c48

08013124 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013124:	b480      	push	{r7}
 8013126:	b085      	sub	sp, #20
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
 801312c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013138:	d002      	beq.n	8013140 <ip4_addr_isbroadcast_u32+0x1c>
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d101      	bne.n	8013144 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013140:	2301      	movs	r3, #1
 8013142:	e02a      	b.n	801319a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013144:	683b      	ldr	r3, [r7, #0]
 8013146:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801314a:	f003 0302 	and.w	r3, r3, #2
 801314e:	2b00      	cmp	r3, #0
 8013150:	d101      	bne.n	8013156 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013152:	2300      	movs	r3, #0
 8013154:	e021      	b.n	801319a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013156:	683b      	ldr	r3, [r7, #0]
 8013158:	3304      	adds	r3, #4
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	687a      	ldr	r2, [r7, #4]
 801315e:	429a      	cmp	r2, r3
 8013160:	d101      	bne.n	8013166 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013162:	2300      	movs	r3, #0
 8013164:	e019      	b.n	801319a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013166:	68fa      	ldr	r2, [r7, #12]
 8013168:	683b      	ldr	r3, [r7, #0]
 801316a:	3304      	adds	r3, #4
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	405a      	eors	r2, r3
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	3308      	adds	r3, #8
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	4013      	ands	r3, r2
 8013178:	2b00      	cmp	r3, #0
 801317a:	d10d      	bne.n	8013198 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801317c:	683b      	ldr	r3, [r7, #0]
 801317e:	3308      	adds	r3, #8
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	43da      	mvns	r2, r3
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013188:	683b      	ldr	r3, [r7, #0]
 801318a:	3308      	adds	r3, #8
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013190:	429a      	cmp	r2, r3
 8013192:	d101      	bne.n	8013198 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013194:	2301      	movs	r3, #1
 8013196:	e000      	b.n	801319a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013198:	2300      	movs	r3, #0
  }
}
 801319a:	4618      	mov	r0, r3
 801319c:	3714      	adds	r7, #20
 801319e:	46bd      	mov	sp, r7
 80131a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a4:	4770      	bx	lr
	...

080131a8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b084      	sub	sp, #16
 80131ac:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80131ae:	2300      	movs	r3, #0
 80131b0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80131b2:	4b12      	ldr	r3, [pc, #72]	; (80131fc <ip_reass_tmr+0x54>)
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80131b8:	e018      	b.n	80131ec <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	7fdb      	ldrb	r3, [r3, #31]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d00b      	beq.n	80131da <ip_reass_tmr+0x32>
      r->timer--;
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	7fdb      	ldrb	r3, [r3, #31]
 80131c6:	3b01      	subs	r3, #1
 80131c8:	b2da      	uxtb	r2, r3
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	60fb      	str	r3, [r7, #12]
 80131d8:	e008      	b.n	80131ec <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80131e4:	68b9      	ldr	r1, [r7, #8]
 80131e6:	6878      	ldr	r0, [r7, #4]
 80131e8:	f000 f80a 	bl	8013200 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d1e3      	bne.n	80131ba <ip_reass_tmr+0x12>
    }
  }
}
 80131f2:	bf00      	nop
 80131f4:	bf00      	nop
 80131f6:	3710      	adds	r7, #16
 80131f8:	46bd      	mov	sp, r7
 80131fa:	bd80      	pop	{r7, pc}
 80131fc:	2400372c 	.word	0x2400372c

08013200 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b088      	sub	sp, #32
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]
 8013208:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801320a:	2300      	movs	r3, #0
 801320c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801320e:	683a      	ldr	r2, [r7, #0]
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	429a      	cmp	r2, r3
 8013214:	d105      	bne.n	8013222 <ip_reass_free_complete_datagram+0x22>
 8013216:	4b45      	ldr	r3, [pc, #276]	; (801332c <ip_reass_free_complete_datagram+0x12c>)
 8013218:	22ab      	movs	r2, #171	; 0xab
 801321a:	4945      	ldr	r1, [pc, #276]	; (8013330 <ip_reass_free_complete_datagram+0x130>)
 801321c:	4845      	ldr	r0, [pc, #276]	; (8013334 <ip_reass_free_complete_datagram+0x134>)
 801321e:	f000 ff21 	bl	8014064 <iprintf>
  if (prev != NULL) {
 8013222:	683b      	ldr	r3, [r7, #0]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d00a      	beq.n	801323e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013228:	683b      	ldr	r3, [r7, #0]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	687a      	ldr	r2, [r7, #4]
 801322e:	429a      	cmp	r2, r3
 8013230:	d005      	beq.n	801323e <ip_reass_free_complete_datagram+0x3e>
 8013232:	4b3e      	ldr	r3, [pc, #248]	; (801332c <ip_reass_free_complete_datagram+0x12c>)
 8013234:	22ad      	movs	r2, #173	; 0xad
 8013236:	4940      	ldr	r1, [pc, #256]	; (8013338 <ip_reass_free_complete_datagram+0x138>)
 8013238:	483e      	ldr	r0, [pc, #248]	; (8013334 <ip_reass_free_complete_datagram+0x134>)
 801323a:	f000 ff13 	bl	8014064 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	685b      	ldr	r3, [r3, #4]
 8013242:	685b      	ldr	r3, [r3, #4]
 8013244:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013246:	697b      	ldr	r3, [r7, #20]
 8013248:	889b      	ldrh	r3, [r3, #4]
 801324a:	b29b      	uxth	r3, r3
 801324c:	2b00      	cmp	r3, #0
 801324e:	d12a      	bne.n	80132a6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	685b      	ldr	r3, [r3, #4]
 8013254:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013256:	697b      	ldr	r3, [r7, #20]
 8013258:	681a      	ldr	r2, [r3, #0]
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801325e:	69bb      	ldr	r3, [r7, #24]
 8013260:	6858      	ldr	r0, [r3, #4]
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	3308      	adds	r3, #8
 8013266:	2214      	movs	r2, #20
 8013268:	4619      	mov	r1, r3
 801326a:	f000 fee5 	bl	8014038 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801326e:	2101      	movs	r1, #1
 8013270:	69b8      	ldr	r0, [r7, #24]
 8013272:	f7ff fc3d 	bl	8012af0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013276:	69b8      	ldr	r0, [r7, #24]
 8013278:	f7f7 fe5a 	bl	800af30 <pbuf_clen>
 801327c:	4603      	mov	r3, r0
 801327e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013280:	8bfa      	ldrh	r2, [r7, #30]
 8013282:	8a7b      	ldrh	r3, [r7, #18]
 8013284:	4413      	add	r3, r2
 8013286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801328a:	db05      	blt.n	8013298 <ip_reass_free_complete_datagram+0x98>
 801328c:	4b27      	ldr	r3, [pc, #156]	; (801332c <ip_reass_free_complete_datagram+0x12c>)
 801328e:	22bc      	movs	r2, #188	; 0xbc
 8013290:	492a      	ldr	r1, [pc, #168]	; (801333c <ip_reass_free_complete_datagram+0x13c>)
 8013292:	4828      	ldr	r0, [pc, #160]	; (8013334 <ip_reass_free_complete_datagram+0x134>)
 8013294:	f000 fee6 	bl	8014064 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013298:	8bfa      	ldrh	r2, [r7, #30]
 801329a:	8a7b      	ldrh	r3, [r7, #18]
 801329c:	4413      	add	r3, r2
 801329e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80132a0:	69b8      	ldr	r0, [r7, #24]
 80132a2:	f7f7 fdbd 	bl	800ae20 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	685b      	ldr	r3, [r3, #4]
 80132aa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80132ac:	e01f      	b.n	80132ee <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80132ae:	69bb      	ldr	r3, [r7, #24]
 80132b0:	685b      	ldr	r3, [r3, #4]
 80132b2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80132b4:	69bb      	ldr	r3, [r7, #24]
 80132b6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80132b8:	697b      	ldr	r3, [r7, #20]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80132be:	68f8      	ldr	r0, [r7, #12]
 80132c0:	f7f7 fe36 	bl	800af30 <pbuf_clen>
 80132c4:	4603      	mov	r3, r0
 80132c6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80132c8:	8bfa      	ldrh	r2, [r7, #30]
 80132ca:	8a7b      	ldrh	r3, [r7, #18]
 80132cc:	4413      	add	r3, r2
 80132ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80132d2:	db05      	blt.n	80132e0 <ip_reass_free_complete_datagram+0xe0>
 80132d4:	4b15      	ldr	r3, [pc, #84]	; (801332c <ip_reass_free_complete_datagram+0x12c>)
 80132d6:	22cc      	movs	r2, #204	; 0xcc
 80132d8:	4918      	ldr	r1, [pc, #96]	; (801333c <ip_reass_free_complete_datagram+0x13c>)
 80132da:	4816      	ldr	r0, [pc, #88]	; (8013334 <ip_reass_free_complete_datagram+0x134>)
 80132dc:	f000 fec2 	bl	8014064 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80132e0:	8bfa      	ldrh	r2, [r7, #30]
 80132e2:	8a7b      	ldrh	r3, [r7, #18]
 80132e4:	4413      	add	r3, r2
 80132e6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80132e8:	68f8      	ldr	r0, [r7, #12]
 80132ea:	f7f7 fd99 	bl	800ae20 <pbuf_free>
  while (p != NULL) {
 80132ee:	69bb      	ldr	r3, [r7, #24]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d1dc      	bne.n	80132ae <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80132f4:	6839      	ldr	r1, [r7, #0]
 80132f6:	6878      	ldr	r0, [r7, #4]
 80132f8:	f000 f8c2 	bl	8013480 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80132fc:	4b10      	ldr	r3, [pc, #64]	; (8013340 <ip_reass_free_complete_datagram+0x140>)
 80132fe:	881b      	ldrh	r3, [r3, #0]
 8013300:	8bfa      	ldrh	r2, [r7, #30]
 8013302:	429a      	cmp	r2, r3
 8013304:	d905      	bls.n	8013312 <ip_reass_free_complete_datagram+0x112>
 8013306:	4b09      	ldr	r3, [pc, #36]	; (801332c <ip_reass_free_complete_datagram+0x12c>)
 8013308:	22d2      	movs	r2, #210	; 0xd2
 801330a:	490e      	ldr	r1, [pc, #56]	; (8013344 <ip_reass_free_complete_datagram+0x144>)
 801330c:	4809      	ldr	r0, [pc, #36]	; (8013334 <ip_reass_free_complete_datagram+0x134>)
 801330e:	f000 fea9 	bl	8014064 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013312:	4b0b      	ldr	r3, [pc, #44]	; (8013340 <ip_reass_free_complete_datagram+0x140>)
 8013314:	881a      	ldrh	r2, [r3, #0]
 8013316:	8bfb      	ldrh	r3, [r7, #30]
 8013318:	1ad3      	subs	r3, r2, r3
 801331a:	b29a      	uxth	r2, r3
 801331c:	4b08      	ldr	r3, [pc, #32]	; (8013340 <ip_reass_free_complete_datagram+0x140>)
 801331e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013320:	8bfb      	ldrh	r3, [r7, #30]
}
 8013322:	4618      	mov	r0, r3
 8013324:	3720      	adds	r7, #32
 8013326:	46bd      	mov	sp, r7
 8013328:	bd80      	pop	{r7, pc}
 801332a:	bf00      	nop
 801332c:	08017aa4 	.word	0x08017aa4
 8013330:	08017ae0 	.word	0x08017ae0
 8013334:	08017aec 	.word	0x08017aec
 8013338:	08017b14 	.word	0x08017b14
 801333c:	08017b28 	.word	0x08017b28
 8013340:	24003730 	.word	0x24003730
 8013344:	08017b48 	.word	0x08017b48

08013348 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b08a      	sub	sp, #40	; 0x28
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
 8013350:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013352:	2300      	movs	r3, #0
 8013354:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013356:	2300      	movs	r3, #0
 8013358:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801335a:	2300      	movs	r3, #0
 801335c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801335e:	2300      	movs	r3, #0
 8013360:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013362:	2300      	movs	r3, #0
 8013364:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013366:	4b28      	ldr	r3, [pc, #160]	; (8013408 <ip_reass_remove_oldest_datagram+0xc0>)
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801336c:	e030      	b.n	80133d0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013370:	695a      	ldr	r2, [r3, #20]
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	68db      	ldr	r3, [r3, #12]
 8013376:	429a      	cmp	r2, r3
 8013378:	d10c      	bne.n	8013394 <ip_reass_remove_oldest_datagram+0x4c>
 801337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801337c:	699a      	ldr	r2, [r3, #24]
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	691b      	ldr	r3, [r3, #16]
 8013382:	429a      	cmp	r2, r3
 8013384:	d106      	bne.n	8013394 <ip_reass_remove_oldest_datagram+0x4c>
 8013386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013388:	899a      	ldrh	r2, [r3, #12]
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	889b      	ldrh	r3, [r3, #4]
 801338e:	b29b      	uxth	r3, r3
 8013390:	429a      	cmp	r2, r3
 8013392:	d014      	beq.n	80133be <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013394:	693b      	ldr	r3, [r7, #16]
 8013396:	3301      	adds	r3, #1
 8013398:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801339a:	6a3b      	ldr	r3, [r7, #32]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d104      	bne.n	80133aa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80133a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133a2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80133a4:	69fb      	ldr	r3, [r7, #28]
 80133a6:	61bb      	str	r3, [r7, #24]
 80133a8:	e009      	b.n	80133be <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80133aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ac:	7fda      	ldrb	r2, [r3, #31]
 80133ae:	6a3b      	ldr	r3, [r7, #32]
 80133b0:	7fdb      	ldrb	r3, [r3, #31]
 80133b2:	429a      	cmp	r2, r3
 80133b4:	d803      	bhi.n	80133be <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80133b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133b8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80133ba:	69fb      	ldr	r3, [r7, #28]
 80133bc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80133be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d001      	beq.n	80133ca <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80133c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133c8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80133ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80133d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d1cb      	bne.n	801336e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80133d6:	6a3b      	ldr	r3, [r7, #32]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d008      	beq.n	80133ee <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80133dc:	69b9      	ldr	r1, [r7, #24]
 80133de:	6a38      	ldr	r0, [r7, #32]
 80133e0:	f7ff ff0e 	bl	8013200 <ip_reass_free_complete_datagram>
 80133e4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80133e6:	697a      	ldr	r2, [r7, #20]
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	4413      	add	r3, r2
 80133ec:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80133ee:	697a      	ldr	r2, [r7, #20]
 80133f0:	683b      	ldr	r3, [r7, #0]
 80133f2:	429a      	cmp	r2, r3
 80133f4:	da02      	bge.n	80133fc <ip_reass_remove_oldest_datagram+0xb4>
 80133f6:	693b      	ldr	r3, [r7, #16]
 80133f8:	2b01      	cmp	r3, #1
 80133fa:	dcac      	bgt.n	8013356 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80133fc:	697b      	ldr	r3, [r7, #20]
}
 80133fe:	4618      	mov	r0, r3
 8013400:	3728      	adds	r7, #40	; 0x28
 8013402:	46bd      	mov	sp, r7
 8013404:	bd80      	pop	{r7, pc}
 8013406:	bf00      	nop
 8013408:	2400372c 	.word	0x2400372c

0801340c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801340c:	b580      	push	{r7, lr}
 801340e:	b084      	sub	sp, #16
 8013410:	af00      	add	r7, sp, #0
 8013412:	6078      	str	r0, [r7, #4]
 8013414:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013416:	2004      	movs	r0, #4
 8013418:	f7f6 fe1e 	bl	800a058 <memp_malloc>
 801341c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d110      	bne.n	8013446 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013424:	6839      	ldr	r1, [r7, #0]
 8013426:	6878      	ldr	r0, [r7, #4]
 8013428:	f7ff ff8e 	bl	8013348 <ip_reass_remove_oldest_datagram>
 801342c:	4602      	mov	r2, r0
 801342e:	683b      	ldr	r3, [r7, #0]
 8013430:	4293      	cmp	r3, r2
 8013432:	dc03      	bgt.n	801343c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013434:	2004      	movs	r0, #4
 8013436:	f7f6 fe0f 	bl	800a058 <memp_malloc>
 801343a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d101      	bne.n	8013446 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013442:	2300      	movs	r3, #0
 8013444:	e016      	b.n	8013474 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013446:	2220      	movs	r2, #32
 8013448:	2100      	movs	r1, #0
 801344a:	68f8      	ldr	r0, [r7, #12]
 801344c:	f000 fe02 	bl	8014054 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	220f      	movs	r2, #15
 8013454:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013456:	4b09      	ldr	r3, [pc, #36]	; (801347c <ip_reass_enqueue_new_datagram+0x70>)
 8013458:	681a      	ldr	r2, [r3, #0]
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801345e:	4a07      	ldr	r2, [pc, #28]	; (801347c <ip_reass_enqueue_new_datagram+0x70>)
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	3308      	adds	r3, #8
 8013468:	2214      	movs	r2, #20
 801346a:	6879      	ldr	r1, [r7, #4]
 801346c:	4618      	mov	r0, r3
 801346e:	f000 fde3 	bl	8014038 <memcpy>
  return ipr;
 8013472:	68fb      	ldr	r3, [r7, #12]
}
 8013474:	4618      	mov	r0, r3
 8013476:	3710      	adds	r7, #16
 8013478:	46bd      	mov	sp, r7
 801347a:	bd80      	pop	{r7, pc}
 801347c:	2400372c 	.word	0x2400372c

08013480 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b082      	sub	sp, #8
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
 8013488:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801348a:	4b10      	ldr	r3, [pc, #64]	; (80134cc <ip_reass_dequeue_datagram+0x4c>)
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	687a      	ldr	r2, [r7, #4]
 8013490:	429a      	cmp	r2, r3
 8013492:	d104      	bne.n	801349e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	4a0c      	ldr	r2, [pc, #48]	; (80134cc <ip_reass_dequeue_datagram+0x4c>)
 801349a:	6013      	str	r3, [r2, #0]
 801349c:	e00d      	b.n	80134ba <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801349e:	683b      	ldr	r3, [r7, #0]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d106      	bne.n	80134b2 <ip_reass_dequeue_datagram+0x32>
 80134a4:	4b0a      	ldr	r3, [pc, #40]	; (80134d0 <ip_reass_dequeue_datagram+0x50>)
 80134a6:	f240 1245 	movw	r2, #325	; 0x145
 80134aa:	490a      	ldr	r1, [pc, #40]	; (80134d4 <ip_reass_dequeue_datagram+0x54>)
 80134ac:	480a      	ldr	r0, [pc, #40]	; (80134d8 <ip_reass_dequeue_datagram+0x58>)
 80134ae:	f000 fdd9 	bl	8014064 <iprintf>
    prev->next = ipr->next;
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	681a      	ldr	r2, [r3, #0]
 80134b6:	683b      	ldr	r3, [r7, #0]
 80134b8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80134ba:	6879      	ldr	r1, [r7, #4]
 80134bc:	2004      	movs	r0, #4
 80134be:	f7f6 fe3b 	bl	800a138 <memp_free>
}
 80134c2:	bf00      	nop
 80134c4:	3708      	adds	r7, #8
 80134c6:	46bd      	mov	sp, r7
 80134c8:	bd80      	pop	{r7, pc}
 80134ca:	bf00      	nop
 80134cc:	2400372c 	.word	0x2400372c
 80134d0:	08017aa4 	.word	0x08017aa4
 80134d4:	08017b6c 	.word	0x08017b6c
 80134d8:	08017aec 	.word	0x08017aec

080134dc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b08c      	sub	sp, #48	; 0x30
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	60f8      	str	r0, [r7, #12]
 80134e4:	60b9      	str	r1, [r7, #8]
 80134e6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80134e8:	2300      	movs	r3, #0
 80134ea:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80134ec:	2301      	movs	r3, #1
 80134ee:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80134f0:	68bb      	ldr	r3, [r7, #8]
 80134f2:	685b      	ldr	r3, [r3, #4]
 80134f4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80134f6:	69fb      	ldr	r3, [r7, #28]
 80134f8:	885b      	ldrh	r3, [r3, #2]
 80134fa:	b29b      	uxth	r3, r3
 80134fc:	4618      	mov	r0, r3
 80134fe:	f7f6 f857 	bl	80095b0 <lwip_htons>
 8013502:	4603      	mov	r3, r0
 8013504:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013506:	69fb      	ldr	r3, [r7, #28]
 8013508:	781b      	ldrb	r3, [r3, #0]
 801350a:	f003 030f 	and.w	r3, r3, #15
 801350e:	b2db      	uxtb	r3, r3
 8013510:	009b      	lsls	r3, r3, #2
 8013512:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013514:	7e7b      	ldrb	r3, [r7, #25]
 8013516:	b29b      	uxth	r3, r3
 8013518:	8b7a      	ldrh	r2, [r7, #26]
 801351a:	429a      	cmp	r2, r3
 801351c:	d202      	bcs.n	8013524 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801351e:	f04f 33ff 	mov.w	r3, #4294967295
 8013522:	e135      	b.n	8013790 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013524:	7e7b      	ldrb	r3, [r7, #25]
 8013526:	b29b      	uxth	r3, r3
 8013528:	8b7a      	ldrh	r2, [r7, #26]
 801352a:	1ad3      	subs	r3, r2, r3
 801352c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801352e:	69fb      	ldr	r3, [r7, #28]
 8013530:	88db      	ldrh	r3, [r3, #6]
 8013532:	b29b      	uxth	r3, r3
 8013534:	4618      	mov	r0, r3
 8013536:	f7f6 f83b 	bl	80095b0 <lwip_htons>
 801353a:	4603      	mov	r3, r0
 801353c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013540:	b29b      	uxth	r3, r3
 8013542:	00db      	lsls	r3, r3, #3
 8013544:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013546:	68bb      	ldr	r3, [r7, #8]
 8013548:	685b      	ldr	r3, [r3, #4]
 801354a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801354c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801354e:	2200      	movs	r2, #0
 8013550:	701a      	strb	r2, [r3, #0]
 8013552:	2200      	movs	r2, #0
 8013554:	705a      	strb	r2, [r3, #1]
 8013556:	2200      	movs	r2, #0
 8013558:	709a      	strb	r2, [r3, #2]
 801355a:	2200      	movs	r2, #0
 801355c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013560:	8afa      	ldrh	r2, [r7, #22]
 8013562:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013564:	8afa      	ldrh	r2, [r7, #22]
 8013566:	8b7b      	ldrh	r3, [r7, #26]
 8013568:	4413      	add	r3, r2
 801356a:	b29a      	uxth	r2, r3
 801356c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801356e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013572:	88db      	ldrh	r3, [r3, #6]
 8013574:	b29b      	uxth	r3, r3
 8013576:	8afa      	ldrh	r2, [r7, #22]
 8013578:	429a      	cmp	r2, r3
 801357a:	d902      	bls.n	8013582 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801357c:	f04f 33ff 	mov.w	r3, #4294967295
 8013580:	e106      	b.n	8013790 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	685b      	ldr	r3, [r3, #4]
 8013586:	627b      	str	r3, [r7, #36]	; 0x24
 8013588:	e068      	b.n	801365c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801358c:	685b      	ldr	r3, [r3, #4]
 801358e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013592:	889b      	ldrh	r3, [r3, #4]
 8013594:	b29a      	uxth	r2, r3
 8013596:	693b      	ldr	r3, [r7, #16]
 8013598:	889b      	ldrh	r3, [r3, #4]
 801359a:	b29b      	uxth	r3, r3
 801359c:	429a      	cmp	r2, r3
 801359e:	d235      	bcs.n	801360c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80135a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135a4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80135a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d020      	beq.n	80135ee <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80135ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ae:	889b      	ldrh	r3, [r3, #4]
 80135b0:	b29a      	uxth	r2, r3
 80135b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135b4:	88db      	ldrh	r3, [r3, #6]
 80135b6:	b29b      	uxth	r3, r3
 80135b8:	429a      	cmp	r2, r3
 80135ba:	d307      	bcc.n	80135cc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80135bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135be:	88db      	ldrh	r3, [r3, #6]
 80135c0:	b29a      	uxth	r2, r3
 80135c2:	693b      	ldr	r3, [r7, #16]
 80135c4:	889b      	ldrh	r3, [r3, #4]
 80135c6:	b29b      	uxth	r3, r3
 80135c8:	429a      	cmp	r2, r3
 80135ca:	d902      	bls.n	80135d2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80135cc:	f04f 33ff 	mov.w	r3, #4294967295
 80135d0:	e0de      	b.n	8013790 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80135d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135d4:	68ba      	ldr	r2, [r7, #8]
 80135d6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80135d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135da:	88db      	ldrh	r3, [r3, #6]
 80135dc:	b29a      	uxth	r2, r3
 80135de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135e0:	889b      	ldrh	r3, [r3, #4]
 80135e2:	b29b      	uxth	r3, r3
 80135e4:	429a      	cmp	r2, r3
 80135e6:	d03d      	beq.n	8013664 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80135e8:	2300      	movs	r3, #0
 80135ea:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80135ec:	e03a      	b.n	8013664 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80135ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135f0:	88db      	ldrh	r3, [r3, #6]
 80135f2:	b29a      	uxth	r2, r3
 80135f4:	693b      	ldr	r3, [r7, #16]
 80135f6:	889b      	ldrh	r3, [r3, #4]
 80135f8:	b29b      	uxth	r3, r3
 80135fa:	429a      	cmp	r2, r3
 80135fc:	d902      	bls.n	8013604 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80135fe:	f04f 33ff 	mov.w	r3, #4294967295
 8013602:	e0c5      	b.n	8013790 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	68ba      	ldr	r2, [r7, #8]
 8013608:	605a      	str	r2, [r3, #4]
      break;
 801360a:	e02b      	b.n	8013664 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801360c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801360e:	889b      	ldrh	r3, [r3, #4]
 8013610:	b29a      	uxth	r2, r3
 8013612:	693b      	ldr	r3, [r7, #16]
 8013614:	889b      	ldrh	r3, [r3, #4]
 8013616:	b29b      	uxth	r3, r3
 8013618:	429a      	cmp	r2, r3
 801361a:	d102      	bne.n	8013622 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801361c:	f04f 33ff 	mov.w	r3, #4294967295
 8013620:	e0b6      	b.n	8013790 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013624:	889b      	ldrh	r3, [r3, #4]
 8013626:	b29a      	uxth	r2, r3
 8013628:	693b      	ldr	r3, [r7, #16]
 801362a:	88db      	ldrh	r3, [r3, #6]
 801362c:	b29b      	uxth	r3, r3
 801362e:	429a      	cmp	r2, r3
 8013630:	d202      	bcs.n	8013638 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013632:	f04f 33ff 	mov.w	r3, #4294967295
 8013636:	e0ab      	b.n	8013790 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801363a:	2b00      	cmp	r3, #0
 801363c:	d009      	beq.n	8013652 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801363e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013640:	88db      	ldrh	r3, [r3, #6]
 8013642:	b29a      	uxth	r2, r3
 8013644:	693b      	ldr	r3, [r7, #16]
 8013646:	889b      	ldrh	r3, [r3, #4]
 8013648:	b29b      	uxth	r3, r3
 801364a:	429a      	cmp	r2, r3
 801364c:	d001      	beq.n	8013652 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801364e:	2300      	movs	r3, #0
 8013650:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013652:	693b      	ldr	r3, [r7, #16]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013658:	693b      	ldr	r3, [r7, #16]
 801365a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801365e:	2b00      	cmp	r3, #0
 8013660:	d193      	bne.n	801358a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013662:	e000      	b.n	8013666 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013664:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013668:	2b00      	cmp	r3, #0
 801366a:	d12d      	bne.n	80136c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801366e:	2b00      	cmp	r3, #0
 8013670:	d01c      	beq.n	80136ac <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013674:	88db      	ldrh	r3, [r3, #6]
 8013676:	b29a      	uxth	r2, r3
 8013678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801367a:	889b      	ldrh	r3, [r3, #4]
 801367c:	b29b      	uxth	r3, r3
 801367e:	429a      	cmp	r2, r3
 8013680:	d906      	bls.n	8013690 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013682:	4b45      	ldr	r3, [pc, #276]	; (8013798 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013684:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013688:	4944      	ldr	r1, [pc, #272]	; (801379c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801368a:	4845      	ldr	r0, [pc, #276]	; (80137a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801368c:	f000 fcea 	bl	8014064 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013692:	68ba      	ldr	r2, [r7, #8]
 8013694:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013698:	88db      	ldrh	r3, [r3, #6]
 801369a:	b29a      	uxth	r2, r3
 801369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801369e:	889b      	ldrh	r3, [r3, #4]
 80136a0:	b29b      	uxth	r3, r3
 80136a2:	429a      	cmp	r2, r3
 80136a4:	d010      	beq.n	80136c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80136a6:	2300      	movs	r3, #0
 80136a8:	623b      	str	r3, [r7, #32]
 80136aa:	e00d      	b.n	80136c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	685b      	ldr	r3, [r3, #4]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d006      	beq.n	80136c2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80136b4:	4b38      	ldr	r3, [pc, #224]	; (8013798 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80136b6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80136ba:	493a      	ldr	r1, [pc, #232]	; (80137a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80136bc:	4838      	ldr	r0, [pc, #224]	; (80137a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80136be:	f000 fcd1 	bl	8014064 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	68ba      	ldr	r2, [r7, #8]
 80136c6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d105      	bne.n	80136da <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	7f9b      	ldrb	r3, [r3, #30]
 80136d2:	f003 0301 	and.w	r3, r3, #1
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d059      	beq.n	801378e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80136da:	6a3b      	ldr	r3, [r7, #32]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d04f      	beq.n	8013780 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	685b      	ldr	r3, [r3, #4]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d006      	beq.n	80136f6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	685b      	ldr	r3, [r3, #4]
 80136ec:	685b      	ldr	r3, [r3, #4]
 80136ee:	889b      	ldrh	r3, [r3, #4]
 80136f0:	b29b      	uxth	r3, r3
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d002      	beq.n	80136fc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80136f6:	2300      	movs	r3, #0
 80136f8:	623b      	str	r3, [r7, #32]
 80136fa:	e041      	b.n	8013780 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80136fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136fe:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013706:	e012      	b.n	801372e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801370a:	685b      	ldr	r3, [r3, #4]
 801370c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801370e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013710:	88db      	ldrh	r3, [r3, #6]
 8013712:	b29a      	uxth	r2, r3
 8013714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013716:	889b      	ldrh	r3, [r3, #4]
 8013718:	b29b      	uxth	r3, r3
 801371a:	429a      	cmp	r2, r3
 801371c:	d002      	beq.n	8013724 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801371e:	2300      	movs	r3, #0
 8013720:	623b      	str	r3, [r7, #32]
            break;
 8013722:	e007      	b.n	8013734 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013726:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013730:	2b00      	cmp	r3, #0
 8013732:	d1e9      	bne.n	8013708 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013734:	6a3b      	ldr	r3, [r7, #32]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d022      	beq.n	8013780 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	685b      	ldr	r3, [r3, #4]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d106      	bne.n	8013750 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013742:	4b15      	ldr	r3, [pc, #84]	; (8013798 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013744:	f240 12df 	movw	r2, #479	; 0x1df
 8013748:	4917      	ldr	r1, [pc, #92]	; (80137a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801374a:	4815      	ldr	r0, [pc, #84]	; (80137a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801374c:	f000 fc8a 	bl	8014064 <iprintf>
          LWIP_ASSERT("sanity check",
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	685b      	ldr	r3, [r3, #4]
 8013754:	685b      	ldr	r3, [r3, #4]
 8013756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013758:	429a      	cmp	r2, r3
 801375a:	d106      	bne.n	801376a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801375c:	4b0e      	ldr	r3, [pc, #56]	; (8013798 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801375e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013762:	4911      	ldr	r1, [pc, #68]	; (80137a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013764:	480e      	ldr	r0, [pc, #56]	; (80137a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013766:	f000 fc7d 	bl	8014064 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801376a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d006      	beq.n	8013780 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013772:	4b09      	ldr	r3, [pc, #36]	; (8013798 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013774:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8013778:	490c      	ldr	r1, [pc, #48]	; (80137ac <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801377a:	4809      	ldr	r0, [pc, #36]	; (80137a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801377c:	f000 fc72 	bl	8014064 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013780:	6a3b      	ldr	r3, [r7, #32]
 8013782:	2b00      	cmp	r3, #0
 8013784:	bf14      	ite	ne
 8013786:	2301      	movne	r3, #1
 8013788:	2300      	moveq	r3, #0
 801378a:	b2db      	uxtb	r3, r3
 801378c:	e000      	b.n	8013790 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801378e:	2300      	movs	r3, #0
}
 8013790:	4618      	mov	r0, r3
 8013792:	3730      	adds	r7, #48	; 0x30
 8013794:	46bd      	mov	sp, r7
 8013796:	bd80      	pop	{r7, pc}
 8013798:	08017aa4 	.word	0x08017aa4
 801379c:	08017b88 	.word	0x08017b88
 80137a0:	08017aec 	.word	0x08017aec
 80137a4:	08017ba8 	.word	0x08017ba8
 80137a8:	08017be0 	.word	0x08017be0
 80137ac:	08017bf0 	.word	0x08017bf0

080137b0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b08e      	sub	sp, #56	; 0x38
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	685b      	ldr	r3, [r3, #4]
 80137bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80137be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137c0:	781b      	ldrb	r3, [r3, #0]
 80137c2:	f003 030f 	and.w	r3, r3, #15
 80137c6:	b2db      	uxtb	r3, r3
 80137c8:	009b      	lsls	r3, r3, #2
 80137ca:	b2db      	uxtb	r3, r3
 80137cc:	2b14      	cmp	r3, #20
 80137ce:	f040 8171 	bne.w	8013ab4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80137d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137d4:	88db      	ldrh	r3, [r3, #6]
 80137d6:	b29b      	uxth	r3, r3
 80137d8:	4618      	mov	r0, r3
 80137da:	f7f5 fee9 	bl	80095b0 <lwip_htons>
 80137de:	4603      	mov	r3, r0
 80137e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80137e4:	b29b      	uxth	r3, r3
 80137e6:	00db      	lsls	r3, r3, #3
 80137e8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80137ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ec:	885b      	ldrh	r3, [r3, #2]
 80137ee:	b29b      	uxth	r3, r3
 80137f0:	4618      	mov	r0, r3
 80137f2:	f7f5 fedd 	bl	80095b0 <lwip_htons>
 80137f6:	4603      	mov	r3, r0
 80137f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80137fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137fc:	781b      	ldrb	r3, [r3, #0]
 80137fe:	f003 030f 	and.w	r3, r3, #15
 8013802:	b2db      	uxtb	r3, r3
 8013804:	009b      	lsls	r3, r3, #2
 8013806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801380a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801380e:	b29b      	uxth	r3, r3
 8013810:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013812:	429a      	cmp	r2, r3
 8013814:	f0c0 8150 	bcc.w	8013ab8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013818:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801381c:	b29b      	uxth	r3, r3
 801381e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013820:	1ad3      	subs	r3, r2, r3
 8013822:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013824:	6878      	ldr	r0, [r7, #4]
 8013826:	f7f7 fb83 	bl	800af30 <pbuf_clen>
 801382a:	4603      	mov	r3, r0
 801382c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801382e:	4b8c      	ldr	r3, [pc, #560]	; (8013a60 <ip4_reass+0x2b0>)
 8013830:	881b      	ldrh	r3, [r3, #0]
 8013832:	461a      	mov	r2, r3
 8013834:	8c3b      	ldrh	r3, [r7, #32]
 8013836:	4413      	add	r3, r2
 8013838:	2b0a      	cmp	r3, #10
 801383a:	dd10      	ble.n	801385e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801383c:	8c3b      	ldrh	r3, [r7, #32]
 801383e:	4619      	mov	r1, r3
 8013840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013842:	f7ff fd81 	bl	8013348 <ip_reass_remove_oldest_datagram>
 8013846:	4603      	mov	r3, r0
 8013848:	2b00      	cmp	r3, #0
 801384a:	f000 8137 	beq.w	8013abc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801384e:	4b84      	ldr	r3, [pc, #528]	; (8013a60 <ip4_reass+0x2b0>)
 8013850:	881b      	ldrh	r3, [r3, #0]
 8013852:	461a      	mov	r2, r3
 8013854:	8c3b      	ldrh	r3, [r7, #32]
 8013856:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013858:	2b0a      	cmp	r3, #10
 801385a:	f300 812f 	bgt.w	8013abc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801385e:	4b81      	ldr	r3, [pc, #516]	; (8013a64 <ip4_reass+0x2b4>)
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	633b      	str	r3, [r7, #48]	; 0x30
 8013864:	e015      	b.n	8013892 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013868:	695a      	ldr	r2, [r3, #20]
 801386a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801386c:	68db      	ldr	r3, [r3, #12]
 801386e:	429a      	cmp	r2, r3
 8013870:	d10c      	bne.n	801388c <ip4_reass+0xdc>
 8013872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013874:	699a      	ldr	r2, [r3, #24]
 8013876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013878:	691b      	ldr	r3, [r3, #16]
 801387a:	429a      	cmp	r2, r3
 801387c:	d106      	bne.n	801388c <ip4_reass+0xdc>
 801387e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013880:	899a      	ldrh	r2, [r3, #12]
 8013882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013884:	889b      	ldrh	r3, [r3, #4]
 8013886:	b29b      	uxth	r3, r3
 8013888:	429a      	cmp	r2, r3
 801388a:	d006      	beq.n	801389a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	633b      	str	r3, [r7, #48]	; 0x30
 8013892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013894:	2b00      	cmp	r3, #0
 8013896:	d1e6      	bne.n	8013866 <ip4_reass+0xb6>
 8013898:	e000      	b.n	801389c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801389a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d109      	bne.n	80138b6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80138a2:	8c3b      	ldrh	r3, [r7, #32]
 80138a4:	4619      	mov	r1, r3
 80138a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80138a8:	f7ff fdb0 	bl	801340c <ip_reass_enqueue_new_datagram>
 80138ac:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80138ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d11c      	bne.n	80138ee <ip4_reass+0x13e>
      goto nullreturn;
 80138b4:	e105      	b.n	8013ac2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80138b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138b8:	88db      	ldrh	r3, [r3, #6]
 80138ba:	b29b      	uxth	r3, r3
 80138bc:	4618      	mov	r0, r3
 80138be:	f7f5 fe77 	bl	80095b0 <lwip_htons>
 80138c2:	4603      	mov	r3, r0
 80138c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d110      	bne.n	80138ee <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80138cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138ce:	89db      	ldrh	r3, [r3, #14]
 80138d0:	4618      	mov	r0, r3
 80138d2:	f7f5 fe6d 	bl	80095b0 <lwip_htons>
 80138d6:	4603      	mov	r3, r0
 80138d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d006      	beq.n	80138ee <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80138e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138e2:	3308      	adds	r3, #8
 80138e4:	2214      	movs	r2, #20
 80138e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80138e8:	4618      	mov	r0, r3
 80138ea:	f000 fba5 	bl	8014038 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80138ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138f0:	88db      	ldrh	r3, [r3, #6]
 80138f2:	b29b      	uxth	r3, r3
 80138f4:	f003 0320 	and.w	r3, r3, #32
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	bf0c      	ite	eq
 80138fc:	2301      	moveq	r3, #1
 80138fe:	2300      	movne	r3, #0
 8013900:	b2db      	uxtb	r3, r3
 8013902:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013904:	69fb      	ldr	r3, [r7, #28]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d00e      	beq.n	8013928 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801390a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801390c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801390e:	4413      	add	r3, r2
 8013910:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013912:	8b7a      	ldrh	r2, [r7, #26]
 8013914:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013916:	429a      	cmp	r2, r3
 8013918:	f0c0 80a0 	bcc.w	8013a5c <ip4_reass+0x2ac>
 801391c:	8b7b      	ldrh	r3, [r7, #26]
 801391e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013922:	4293      	cmp	r3, r2
 8013924:	f200 809a 	bhi.w	8013a5c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013928:	69fa      	ldr	r2, [r7, #28]
 801392a:	6879      	ldr	r1, [r7, #4]
 801392c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801392e:	f7ff fdd5 	bl	80134dc <ip_reass_chain_frag_into_datagram_and_validate>
 8013932:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013934:	697b      	ldr	r3, [r7, #20]
 8013936:	f1b3 3fff 	cmp.w	r3, #4294967295
 801393a:	f000 809b 	beq.w	8013a74 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801393e:	4b48      	ldr	r3, [pc, #288]	; (8013a60 <ip4_reass+0x2b0>)
 8013940:	881a      	ldrh	r2, [r3, #0]
 8013942:	8c3b      	ldrh	r3, [r7, #32]
 8013944:	4413      	add	r3, r2
 8013946:	b29a      	uxth	r2, r3
 8013948:	4b45      	ldr	r3, [pc, #276]	; (8013a60 <ip4_reass+0x2b0>)
 801394a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801394c:	69fb      	ldr	r3, [r7, #28]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d00d      	beq.n	801396e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013952:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013954:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013956:	4413      	add	r3, r2
 8013958:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801395c:	8a7a      	ldrh	r2, [r7, #18]
 801395e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013962:	7f9b      	ldrb	r3, [r3, #30]
 8013964:	f043 0301 	orr.w	r3, r3, #1
 8013968:	b2da      	uxtb	r2, r3
 801396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801396c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801396e:	697b      	ldr	r3, [r7, #20]
 8013970:	2b01      	cmp	r3, #1
 8013972:	d171      	bne.n	8013a58 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013976:	8b9b      	ldrh	r3, [r3, #28]
 8013978:	3314      	adds	r3, #20
 801397a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801397c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801397e:	685b      	ldr	r3, [r3, #4]
 8013980:	685b      	ldr	r3, [r3, #4]
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013988:	685b      	ldr	r3, [r3, #4]
 801398a:	685b      	ldr	r3, [r3, #4]
 801398c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013990:	3308      	adds	r3, #8
 8013992:	2214      	movs	r2, #20
 8013994:	4619      	mov	r1, r3
 8013996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013998:	f000 fb4e 	bl	8014038 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801399c:	8a3b      	ldrh	r3, [r7, #16]
 801399e:	4618      	mov	r0, r3
 80139a0:	f7f5 fe06 	bl	80095b0 <lwip_htons>
 80139a4:	4603      	mov	r3, r0
 80139a6:	461a      	mov	r2, r3
 80139a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139aa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80139ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ae:	2200      	movs	r2, #0
 80139b0:	719a      	strb	r2, [r3, #6]
 80139b2:	2200      	movs	r2, #0
 80139b4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80139b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139b8:	2200      	movs	r2, #0
 80139ba:	729a      	strb	r2, [r3, #10]
 80139bc:	2200      	movs	r2, #0
 80139be:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80139c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139c2:	685b      	ldr	r3, [r3, #4]
 80139c4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80139c6:	e00d      	b.n	80139e4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80139c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139ca:	685b      	ldr	r3, [r3, #4]
 80139cc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80139ce:	2114      	movs	r1, #20
 80139d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80139d2:	f7f7 f99f 	bl	800ad14 <pbuf_remove_header>
      pbuf_cat(p, r);
 80139d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80139d8:	6878      	ldr	r0, [r7, #4]
 80139da:	f7f7 fae3 	bl	800afa4 <pbuf_cat>
      r = iprh->next_pbuf;
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80139e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d1ee      	bne.n	80139c8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80139ea:	4b1e      	ldr	r3, [pc, #120]	; (8013a64 <ip4_reass+0x2b4>)
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139f0:	429a      	cmp	r2, r3
 80139f2:	d102      	bne.n	80139fa <ip4_reass+0x24a>
      ipr_prev = NULL;
 80139f4:	2300      	movs	r3, #0
 80139f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80139f8:	e010      	b.n	8013a1c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80139fa:	4b1a      	ldr	r3, [pc, #104]	; (8013a64 <ip4_reass+0x2b4>)
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a00:	e007      	b.n	8013a12 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a08:	429a      	cmp	r2, r3
 8013a0a:	d006      	beq.n	8013a1a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d1f4      	bne.n	8013a02 <ip4_reass+0x252>
 8013a18:	e000      	b.n	8013a1c <ip4_reass+0x26c>
          break;
 8013a1a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013a1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013a1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a20:	f7ff fd2e 	bl	8013480 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013a24:	6878      	ldr	r0, [r7, #4]
 8013a26:	f7f7 fa83 	bl	800af30 <pbuf_clen>
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013a2e:	4b0c      	ldr	r3, [pc, #48]	; (8013a60 <ip4_reass+0x2b0>)
 8013a30:	881b      	ldrh	r3, [r3, #0]
 8013a32:	8c3a      	ldrh	r2, [r7, #32]
 8013a34:	429a      	cmp	r2, r3
 8013a36:	d906      	bls.n	8013a46 <ip4_reass+0x296>
 8013a38:	4b0b      	ldr	r3, [pc, #44]	; (8013a68 <ip4_reass+0x2b8>)
 8013a3a:	f240 229b 	movw	r2, #667	; 0x29b
 8013a3e:	490b      	ldr	r1, [pc, #44]	; (8013a6c <ip4_reass+0x2bc>)
 8013a40:	480b      	ldr	r0, [pc, #44]	; (8013a70 <ip4_reass+0x2c0>)
 8013a42:	f000 fb0f 	bl	8014064 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013a46:	4b06      	ldr	r3, [pc, #24]	; (8013a60 <ip4_reass+0x2b0>)
 8013a48:	881a      	ldrh	r2, [r3, #0]
 8013a4a:	8c3b      	ldrh	r3, [r7, #32]
 8013a4c:	1ad3      	subs	r3, r2, r3
 8013a4e:	b29a      	uxth	r2, r3
 8013a50:	4b03      	ldr	r3, [pc, #12]	; (8013a60 <ip4_reass+0x2b0>)
 8013a52:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	e038      	b.n	8013aca <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013a58:	2300      	movs	r3, #0
 8013a5a:	e036      	b.n	8013aca <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8013a5c:	bf00      	nop
 8013a5e:	e00a      	b.n	8013a76 <ip4_reass+0x2c6>
 8013a60:	24003730 	.word	0x24003730
 8013a64:	2400372c 	.word	0x2400372c
 8013a68:	08017aa4 	.word	0x08017aa4
 8013a6c:	08017c14 	.word	0x08017c14
 8013a70:	08017aec 	.word	0x08017aec
    goto nullreturn_ipr;
 8013a74:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d106      	bne.n	8013a8a <ip4_reass+0x2da>
 8013a7c:	4b15      	ldr	r3, [pc, #84]	; (8013ad4 <ip4_reass+0x324>)
 8013a7e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8013a82:	4915      	ldr	r1, [pc, #84]	; (8013ad8 <ip4_reass+0x328>)
 8013a84:	4815      	ldr	r0, [pc, #84]	; (8013adc <ip4_reass+0x32c>)
 8013a86:	f000 faed 	bl	8014064 <iprintf>
  if (ipr->p == NULL) {
 8013a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a8c:	685b      	ldr	r3, [r3, #4]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d116      	bne.n	8013ac0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013a92:	4b13      	ldr	r3, [pc, #76]	; (8013ae0 <ip4_reass+0x330>)
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a98:	429a      	cmp	r2, r3
 8013a9a:	d006      	beq.n	8013aaa <ip4_reass+0x2fa>
 8013a9c:	4b0d      	ldr	r3, [pc, #52]	; (8013ad4 <ip4_reass+0x324>)
 8013a9e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013aa2:	4910      	ldr	r1, [pc, #64]	; (8013ae4 <ip4_reass+0x334>)
 8013aa4:	480d      	ldr	r0, [pc, #52]	; (8013adc <ip4_reass+0x32c>)
 8013aa6:	f000 fadd 	bl	8014064 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013aaa:	2100      	movs	r1, #0
 8013aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013aae:	f7ff fce7 	bl	8013480 <ip_reass_dequeue_datagram>
 8013ab2:	e006      	b.n	8013ac2 <ip4_reass+0x312>
    goto nullreturn;
 8013ab4:	bf00      	nop
 8013ab6:	e004      	b.n	8013ac2 <ip4_reass+0x312>
    goto nullreturn;
 8013ab8:	bf00      	nop
 8013aba:	e002      	b.n	8013ac2 <ip4_reass+0x312>
      goto nullreturn;
 8013abc:	bf00      	nop
 8013abe:	e000      	b.n	8013ac2 <ip4_reass+0x312>
  }

nullreturn:
 8013ac0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013ac2:	6878      	ldr	r0, [r7, #4]
 8013ac4:	f7f7 f9ac 	bl	800ae20 <pbuf_free>
  return NULL;
 8013ac8:	2300      	movs	r3, #0
}
 8013aca:	4618      	mov	r0, r3
 8013acc:	3738      	adds	r7, #56	; 0x38
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	bd80      	pop	{r7, pc}
 8013ad2:	bf00      	nop
 8013ad4:	08017aa4 	.word	0x08017aa4
 8013ad8:	08017c30 	.word	0x08017c30
 8013adc:	08017aec 	.word	0x08017aec
 8013ae0:	2400372c 	.word	0x2400372c
 8013ae4:	08017c3c 	.word	0x08017c3c

08013ae8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013aec:	2005      	movs	r0, #5
 8013aee:	f7f6 fab3 	bl	800a058 <memp_malloc>
 8013af2:	4603      	mov	r3, r0
}
 8013af4:	4618      	mov	r0, r3
 8013af6:	bd80      	pop	{r7, pc}

08013af8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013af8:	b580      	push	{r7, lr}
 8013afa:	b082      	sub	sp, #8
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d106      	bne.n	8013b14 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013b06:	4b07      	ldr	r3, [pc, #28]	; (8013b24 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013b08:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013b0c:	4906      	ldr	r1, [pc, #24]	; (8013b28 <ip_frag_free_pbuf_custom_ref+0x30>)
 8013b0e:	4807      	ldr	r0, [pc, #28]	; (8013b2c <ip_frag_free_pbuf_custom_ref+0x34>)
 8013b10:	f000 faa8 	bl	8014064 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013b14:	6879      	ldr	r1, [r7, #4]
 8013b16:	2005      	movs	r0, #5
 8013b18:	f7f6 fb0e 	bl	800a138 <memp_free>
}
 8013b1c:	bf00      	nop
 8013b1e:	3708      	adds	r7, #8
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd80      	pop	{r7, pc}
 8013b24:	08017aa4 	.word	0x08017aa4
 8013b28:	08017c5c 	.word	0x08017c5c
 8013b2c:	08017aec 	.word	0x08017aec

08013b30 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b084      	sub	sp, #16
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d106      	bne.n	8013b50 <ipfrag_free_pbuf_custom+0x20>
 8013b42:	4b11      	ldr	r3, [pc, #68]	; (8013b88 <ipfrag_free_pbuf_custom+0x58>)
 8013b44:	f240 22ce 	movw	r2, #718	; 0x2ce
 8013b48:	4910      	ldr	r1, [pc, #64]	; (8013b8c <ipfrag_free_pbuf_custom+0x5c>)
 8013b4a:	4811      	ldr	r0, [pc, #68]	; (8013b90 <ipfrag_free_pbuf_custom+0x60>)
 8013b4c:	f000 fa8a 	bl	8014064 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013b50:	68fa      	ldr	r2, [r7, #12]
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	429a      	cmp	r2, r3
 8013b56:	d006      	beq.n	8013b66 <ipfrag_free_pbuf_custom+0x36>
 8013b58:	4b0b      	ldr	r3, [pc, #44]	; (8013b88 <ipfrag_free_pbuf_custom+0x58>)
 8013b5a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8013b5e:	490d      	ldr	r1, [pc, #52]	; (8013b94 <ipfrag_free_pbuf_custom+0x64>)
 8013b60:	480b      	ldr	r0, [pc, #44]	; (8013b90 <ipfrag_free_pbuf_custom+0x60>)
 8013b62:	f000 fa7f 	bl	8014064 <iprintf>
  if (pcr->original != NULL) {
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	695b      	ldr	r3, [r3, #20]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d004      	beq.n	8013b78 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	695b      	ldr	r3, [r3, #20]
 8013b72:	4618      	mov	r0, r3
 8013b74:	f7f7 f954 	bl	800ae20 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013b78:	68f8      	ldr	r0, [r7, #12]
 8013b7a:	f7ff ffbd 	bl	8013af8 <ip_frag_free_pbuf_custom_ref>
}
 8013b7e:	bf00      	nop
 8013b80:	3710      	adds	r7, #16
 8013b82:	46bd      	mov	sp, r7
 8013b84:	bd80      	pop	{r7, pc}
 8013b86:	bf00      	nop
 8013b88:	08017aa4 	.word	0x08017aa4
 8013b8c:	08017c68 	.word	0x08017c68
 8013b90:	08017aec 	.word	0x08017aec
 8013b94:	08017c74 	.word	0x08017c74

08013b98 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b094      	sub	sp, #80	; 0x50
 8013b9c:	af02      	add	r7, sp, #8
 8013b9e:	60f8      	str	r0, [r7, #12]
 8013ba0:	60b9      	str	r1, [r7, #8]
 8013ba2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013baa:	68bb      	ldr	r3, [r7, #8]
 8013bac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013bae:	3b14      	subs	r3, #20
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	da00      	bge.n	8013bb6 <ip4_frag+0x1e>
 8013bb4:	3307      	adds	r3, #7
 8013bb6:	10db      	asrs	r3, r3, #3
 8013bb8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013bba:	2314      	movs	r3, #20
 8013bbc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	685b      	ldr	r3, [r3, #4]
 8013bc2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8013bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bc6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bca:	781b      	ldrb	r3, [r3, #0]
 8013bcc:	f003 030f 	and.w	r3, r3, #15
 8013bd0:	b2db      	uxtb	r3, r3
 8013bd2:	009b      	lsls	r3, r3, #2
 8013bd4:	b2db      	uxtb	r3, r3
 8013bd6:	2b14      	cmp	r3, #20
 8013bd8:	d002      	beq.n	8013be0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013bda:	f06f 0305 	mvn.w	r3, #5
 8013bde:	e110      	b.n	8013e02 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	895b      	ldrh	r3, [r3, #10]
 8013be4:	2b13      	cmp	r3, #19
 8013be6:	d809      	bhi.n	8013bfc <ip4_frag+0x64>
 8013be8:	4b88      	ldr	r3, [pc, #544]	; (8013e0c <ip4_frag+0x274>)
 8013bea:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8013bee:	4988      	ldr	r1, [pc, #544]	; (8013e10 <ip4_frag+0x278>)
 8013bf0:	4888      	ldr	r0, [pc, #544]	; (8013e14 <ip4_frag+0x27c>)
 8013bf2:	f000 fa37 	bl	8014064 <iprintf>
 8013bf6:	f06f 0305 	mvn.w	r3, #5
 8013bfa:	e102      	b.n	8013e02 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bfe:	88db      	ldrh	r3, [r3, #6]
 8013c00:	b29b      	uxth	r3, r3
 8013c02:	4618      	mov	r0, r3
 8013c04:	f7f5 fcd4 	bl	80095b0 <lwip_htons>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013c0c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013c0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013c12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013c16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013c18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013c1c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	891b      	ldrh	r3, [r3, #8]
 8013c22:	3b14      	subs	r3, #20
 8013c24:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8013c28:	e0e1      	b.n	8013dee <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013c2a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013c2c:	00db      	lsls	r3, r3, #3
 8013c2e:	b29b      	uxth	r3, r3
 8013c30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013c34:	4293      	cmp	r3, r2
 8013c36:	bf28      	it	cs
 8013c38:	4613      	movcs	r3, r2
 8013c3a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013c3c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013c40:	2114      	movs	r1, #20
 8013c42:	200e      	movs	r0, #14
 8013c44:	f7f6 fe0a 	bl	800a85c <pbuf_alloc>
 8013c48:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8013c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	f000 80d5 	beq.w	8013dfc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c54:	895b      	ldrh	r3, [r3, #10]
 8013c56:	2b13      	cmp	r3, #19
 8013c58:	d806      	bhi.n	8013c68 <ip4_frag+0xd0>
 8013c5a:	4b6c      	ldr	r3, [pc, #432]	; (8013e0c <ip4_frag+0x274>)
 8013c5c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8013c60:	496d      	ldr	r1, [pc, #436]	; (8013e18 <ip4_frag+0x280>)
 8013c62:	486c      	ldr	r0, [pc, #432]	; (8013e14 <ip4_frag+0x27c>)
 8013c64:	f000 f9fe 	bl	8014064 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c6a:	685b      	ldr	r3, [r3, #4]
 8013c6c:	2214      	movs	r2, #20
 8013c6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013c70:	4618      	mov	r0, r3
 8013c72:	f000 f9e1 	bl	8014038 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c78:	685b      	ldr	r3, [r3, #4]
 8013c7a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8013c7c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013c7e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8013c82:	e064      	b.n	8013d4e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	895a      	ldrh	r2, [r3, #10]
 8013c88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013c8a:	1ad3      	subs	r3, r2, r3
 8013c8c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	895b      	ldrh	r3, [r3, #10]
 8013c92:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013c94:	429a      	cmp	r2, r3
 8013c96:	d906      	bls.n	8013ca6 <ip4_frag+0x10e>
 8013c98:	4b5c      	ldr	r3, [pc, #368]	; (8013e0c <ip4_frag+0x274>)
 8013c9a:	f240 322d 	movw	r2, #813	; 0x32d
 8013c9e:	495f      	ldr	r1, [pc, #380]	; (8013e1c <ip4_frag+0x284>)
 8013ca0:	485c      	ldr	r0, [pc, #368]	; (8013e14 <ip4_frag+0x27c>)
 8013ca2:	f000 f9df 	bl	8014064 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013ca6:	8bfa      	ldrh	r2, [r7, #30]
 8013ca8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013cac:	4293      	cmp	r3, r2
 8013cae:	bf28      	it	cs
 8013cb0:	4613      	movcs	r3, r2
 8013cb2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013cb6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d105      	bne.n	8013cca <ip4_frag+0x132>
        poff = 0;
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	60fb      	str	r3, [r7, #12]
        continue;
 8013cc8:	e041      	b.n	8013d4e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013cca:	f7ff ff0d 	bl	8013ae8 <ip_frag_alloc_pbuf_custom_ref>
 8013cce:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013cd0:	69bb      	ldr	r3, [r7, #24]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d103      	bne.n	8013cde <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013cd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013cd8:	f7f7 f8a2 	bl	800ae20 <pbuf_free>
        goto memerr;
 8013cdc:	e08f      	b.n	8013dfe <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013cde:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013ce4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013ce6:	4413      	add	r3, r2
 8013ce8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013cec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013cf0:	9201      	str	r2, [sp, #4]
 8013cf2:	9300      	str	r3, [sp, #0]
 8013cf4:	4603      	mov	r3, r0
 8013cf6:	2241      	movs	r2, #65	; 0x41
 8013cf8:	2000      	movs	r0, #0
 8013cfa:	f7f6 fed9 	bl	800aab0 <pbuf_alloced_custom>
 8013cfe:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013d00:	697b      	ldr	r3, [r7, #20]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d106      	bne.n	8013d14 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013d06:	69b8      	ldr	r0, [r7, #24]
 8013d08:	f7ff fef6 	bl	8013af8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013d0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d0e:	f7f7 f887 	bl	800ae20 <pbuf_free>
        goto memerr;
 8013d12:	e074      	b.n	8013dfe <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013d14:	68f8      	ldr	r0, [r7, #12]
 8013d16:	f7f7 f923 	bl	800af60 <pbuf_ref>
      pcr->original = p;
 8013d1a:	69bb      	ldr	r3, [r7, #24]
 8013d1c:	68fa      	ldr	r2, [r7, #12]
 8013d1e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013d20:	69bb      	ldr	r3, [r7, #24]
 8013d22:	4a3f      	ldr	r2, [pc, #252]	; (8013e20 <ip4_frag+0x288>)
 8013d24:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013d26:	6979      	ldr	r1, [r7, #20]
 8013d28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d2a:	f7f7 f93b 	bl	800afa4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013d2e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013d32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013d36:	1ad3      	subs	r3, r2, r3
 8013d38:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013d3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d004      	beq.n	8013d4e <ip4_frag+0x1b6>
        poff = 0;
 8013d44:	2300      	movs	r3, #0
 8013d46:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013d4e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d196      	bne.n	8013c84 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013d56:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013d58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013d5c:	4413      	add	r3, r2
 8013d5e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013d60:	68bb      	ldr	r3, [r7, #8]
 8013d62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013d64:	f1a3 0213 	sub.w	r2, r3, #19
 8013d68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013d6c:	429a      	cmp	r2, r3
 8013d6e:	bfcc      	ite	gt
 8013d70:	2301      	movgt	r3, #1
 8013d72:	2300      	movle	r3, #0
 8013d74:	b2db      	uxtb	r3, r3
 8013d76:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013d78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013d7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013d80:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013d82:	6a3b      	ldr	r3, [r7, #32]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d002      	beq.n	8013d8e <ip4_frag+0x1f6>
 8013d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d003      	beq.n	8013d96 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013d8e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013d90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013d94:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013d96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013d98:	4618      	mov	r0, r3
 8013d9a:	f7f5 fc09 	bl	80095b0 <lwip_htons>
 8013d9e:	4603      	mov	r3, r0
 8013da0:	461a      	mov	r2, r3
 8013da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013da4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013da6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013da8:	3314      	adds	r3, #20
 8013daa:	b29b      	uxth	r3, r3
 8013dac:	4618      	mov	r0, r3
 8013dae:	f7f5 fbff 	bl	80095b0 <lwip_htons>
 8013db2:	4603      	mov	r3, r0
 8013db4:	461a      	mov	r2, r3
 8013db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013db8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dbc:	2200      	movs	r2, #0
 8013dbe:	729a      	strb	r2, [r3, #10]
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013dc4:	68bb      	ldr	r3, [r7, #8]
 8013dc6:	695b      	ldr	r3, [r3, #20]
 8013dc8:	687a      	ldr	r2, [r7, #4]
 8013dca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013dcc:	68b8      	ldr	r0, [r7, #8]
 8013dce:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013dd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013dd2:	f7f7 f825 	bl	800ae20 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013dd6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013dda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013ddc:	1ad3      	subs	r3, r2, r3
 8013dde:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013de2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013de6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013de8:	4413      	add	r3, r2
 8013dea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013dee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	f47f af19 	bne.w	8013c2a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013df8:	2300      	movs	r3, #0
 8013dfa:	e002      	b.n	8013e02 <ip4_frag+0x26a>
      goto memerr;
 8013dfc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013dfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013e02:	4618      	mov	r0, r3
 8013e04:	3748      	adds	r7, #72	; 0x48
 8013e06:	46bd      	mov	sp, r7
 8013e08:	bd80      	pop	{r7, pc}
 8013e0a:	bf00      	nop
 8013e0c:	08017aa4 	.word	0x08017aa4
 8013e10:	08017c80 	.word	0x08017c80
 8013e14:	08017aec 	.word	0x08017aec
 8013e18:	08017c9c 	.word	0x08017c9c
 8013e1c:	08017cbc 	.word	0x08017cbc
 8013e20:	08013b31 	.word	0x08013b31

08013e24 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b086      	sub	sp, #24
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
 8013e2c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013e2e:	230e      	movs	r3, #14
 8013e30:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	895b      	ldrh	r3, [r3, #10]
 8013e36:	2b0e      	cmp	r3, #14
 8013e38:	d96e      	bls.n	8013f18 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	7bdb      	ldrb	r3, [r3, #15]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d106      	bne.n	8013e50 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013e42:	683b      	ldr	r3, [r7, #0]
 8013e44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013e48:	3301      	adds	r3, #1
 8013e4a:	b2da      	uxtb	r2, r3
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	685b      	ldr	r3, [r3, #4]
 8013e54:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013e56:	693b      	ldr	r3, [r7, #16]
 8013e58:	7b1a      	ldrb	r2, [r3, #12]
 8013e5a:	7b5b      	ldrb	r3, [r3, #13]
 8013e5c:	021b      	lsls	r3, r3, #8
 8013e5e:	4313      	orrs	r3, r2
 8013e60:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013e62:	693b      	ldr	r3, [r7, #16]
 8013e64:	781b      	ldrb	r3, [r3, #0]
 8013e66:	f003 0301 	and.w	r3, r3, #1
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d023      	beq.n	8013eb6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013e6e:	693b      	ldr	r3, [r7, #16]
 8013e70:	781b      	ldrb	r3, [r3, #0]
 8013e72:	2b01      	cmp	r3, #1
 8013e74:	d10f      	bne.n	8013e96 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013e76:	693b      	ldr	r3, [r7, #16]
 8013e78:	785b      	ldrb	r3, [r3, #1]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d11b      	bne.n	8013eb6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013e7e:	693b      	ldr	r3, [r7, #16]
 8013e80:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013e82:	2b5e      	cmp	r3, #94	; 0x5e
 8013e84:	d117      	bne.n	8013eb6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	7b5b      	ldrb	r3, [r3, #13]
 8013e8a:	f043 0310 	orr.w	r3, r3, #16
 8013e8e:	b2da      	uxtb	r2, r3
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	735a      	strb	r2, [r3, #13]
 8013e94:	e00f      	b.n	8013eb6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013e96:	693b      	ldr	r3, [r7, #16]
 8013e98:	2206      	movs	r2, #6
 8013e9a:	4928      	ldr	r1, [pc, #160]	; (8013f3c <ethernet_input+0x118>)
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	f000 f8bb 	bl	8014018 <memcmp>
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d106      	bne.n	8013eb6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	7b5b      	ldrb	r3, [r3, #13]
 8013eac:	f043 0308 	orr.w	r3, r3, #8
 8013eb0:	b2da      	uxtb	r2, r3
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013eb6:	89fb      	ldrh	r3, [r7, #14]
 8013eb8:	2b08      	cmp	r3, #8
 8013eba:	d003      	beq.n	8013ec4 <ethernet_input+0xa0>
 8013ebc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013ec0:	d014      	beq.n	8013eec <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013ec2:	e032      	b.n	8013f2a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013ec4:	683b      	ldr	r3, [r7, #0]
 8013ec6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013eca:	f003 0308 	and.w	r3, r3, #8
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d024      	beq.n	8013f1c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013ed2:	8afb      	ldrh	r3, [r7, #22]
 8013ed4:	4619      	mov	r1, r3
 8013ed6:	6878      	ldr	r0, [r7, #4]
 8013ed8:	f7f6 ff1c 	bl	800ad14 <pbuf_remove_header>
 8013edc:	4603      	mov	r3, r0
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d11e      	bne.n	8013f20 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013ee2:	6839      	ldr	r1, [r7, #0]
 8013ee4:	6878      	ldr	r0, [r7, #4]
 8013ee6:	f7fe ff21 	bl	8012d2c <ip4_input>
      break;
 8013eea:	e013      	b.n	8013f14 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013eec:	683b      	ldr	r3, [r7, #0]
 8013eee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013ef2:	f003 0308 	and.w	r3, r3, #8
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d014      	beq.n	8013f24 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013efa:	8afb      	ldrh	r3, [r7, #22]
 8013efc:	4619      	mov	r1, r3
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	f7f6 ff08 	bl	800ad14 <pbuf_remove_header>
 8013f04:	4603      	mov	r3, r0
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d10e      	bne.n	8013f28 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013f0a:	6839      	ldr	r1, [r7, #0]
 8013f0c:	6878      	ldr	r0, [r7, #4]
 8013f0e:	f7fe f89b 	bl	8012048 <etharp_input>
      break;
 8013f12:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013f14:	2300      	movs	r3, #0
 8013f16:	e00c      	b.n	8013f32 <ethernet_input+0x10e>
    goto free_and_return;
 8013f18:	bf00      	nop
 8013f1a:	e006      	b.n	8013f2a <ethernet_input+0x106>
        goto free_and_return;
 8013f1c:	bf00      	nop
 8013f1e:	e004      	b.n	8013f2a <ethernet_input+0x106>
        goto free_and_return;
 8013f20:	bf00      	nop
 8013f22:	e002      	b.n	8013f2a <ethernet_input+0x106>
        goto free_and_return;
 8013f24:	bf00      	nop
 8013f26:	e000      	b.n	8013f2a <ethernet_input+0x106>
        goto free_and_return;
 8013f28:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013f2a:	6878      	ldr	r0, [r7, #4]
 8013f2c:	f7f6 ff78 	bl	800ae20 <pbuf_free>
  return ERR_OK;
 8013f30:	2300      	movs	r3, #0
}
 8013f32:	4618      	mov	r0, r3
 8013f34:	3718      	adds	r7, #24
 8013f36:	46bd      	mov	sp, r7
 8013f38:	bd80      	pop	{r7, pc}
 8013f3a:	bf00      	nop
 8013f3c:	08018c4c 	.word	0x08018c4c

08013f40 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b086      	sub	sp, #24
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	60f8      	str	r0, [r7, #12]
 8013f48:	60b9      	str	r1, [r7, #8]
 8013f4a:	607a      	str	r2, [r7, #4]
 8013f4c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013f4e:	8c3b      	ldrh	r3, [r7, #32]
 8013f50:	4618      	mov	r0, r3
 8013f52:	f7f5 fb2d 	bl	80095b0 <lwip_htons>
 8013f56:	4603      	mov	r3, r0
 8013f58:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013f5a:	210e      	movs	r1, #14
 8013f5c:	68b8      	ldr	r0, [r7, #8]
 8013f5e:	f7f6 fec9 	bl	800acf4 <pbuf_add_header>
 8013f62:	4603      	mov	r3, r0
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d125      	bne.n	8013fb4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013f68:	68bb      	ldr	r3, [r7, #8]
 8013f6a:	685b      	ldr	r3, [r3, #4]
 8013f6c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013f6e:	693b      	ldr	r3, [r7, #16]
 8013f70:	8afa      	ldrh	r2, [r7, #22]
 8013f72:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013f74:	693b      	ldr	r3, [r7, #16]
 8013f76:	2206      	movs	r2, #6
 8013f78:	6839      	ldr	r1, [r7, #0]
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f000 f85c 	bl	8014038 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013f80:	693b      	ldr	r3, [r7, #16]
 8013f82:	3306      	adds	r3, #6
 8013f84:	2206      	movs	r2, #6
 8013f86:	6879      	ldr	r1, [r7, #4]
 8013f88:	4618      	mov	r0, r3
 8013f8a:	f000 f855 	bl	8014038 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013f94:	2b06      	cmp	r3, #6
 8013f96:	d006      	beq.n	8013fa6 <ethernet_output+0x66>
 8013f98:	4b0a      	ldr	r3, [pc, #40]	; (8013fc4 <ethernet_output+0x84>)
 8013f9a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8013f9e:	490a      	ldr	r1, [pc, #40]	; (8013fc8 <ethernet_output+0x88>)
 8013fa0:	480a      	ldr	r0, [pc, #40]	; (8013fcc <ethernet_output+0x8c>)
 8013fa2:	f000 f85f 	bl	8014064 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	699b      	ldr	r3, [r3, #24]
 8013faa:	68b9      	ldr	r1, [r7, #8]
 8013fac:	68f8      	ldr	r0, [r7, #12]
 8013fae:	4798      	blx	r3
 8013fb0:	4603      	mov	r3, r0
 8013fb2:	e002      	b.n	8013fba <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013fb4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013fb6:	f06f 0301 	mvn.w	r3, #1
}
 8013fba:	4618      	mov	r0, r3
 8013fbc:	3718      	adds	r7, #24
 8013fbe:	46bd      	mov	sp, r7
 8013fc0:	bd80      	pop	{r7, pc}
 8013fc2:	bf00      	nop
 8013fc4:	08017ccc 	.word	0x08017ccc
 8013fc8:	08017d04 	.word	0x08017d04
 8013fcc:	08017d38 	.word	0x08017d38

08013fd0 <__libc_init_array>:
 8013fd0:	b570      	push	{r4, r5, r6, lr}
 8013fd2:	4d0d      	ldr	r5, [pc, #52]	; (8014008 <__libc_init_array+0x38>)
 8013fd4:	4c0d      	ldr	r4, [pc, #52]	; (801400c <__libc_init_array+0x3c>)
 8013fd6:	1b64      	subs	r4, r4, r5
 8013fd8:	10a4      	asrs	r4, r4, #2
 8013fda:	2600      	movs	r6, #0
 8013fdc:	42a6      	cmp	r6, r4
 8013fde:	d109      	bne.n	8013ff4 <__libc_init_array+0x24>
 8013fe0:	4d0b      	ldr	r5, [pc, #44]	; (8014010 <__libc_init_array+0x40>)
 8013fe2:	4c0c      	ldr	r4, [pc, #48]	; (8014014 <__libc_init_array+0x44>)
 8013fe4:	f001 f8b0 	bl	8015148 <_init>
 8013fe8:	1b64      	subs	r4, r4, r5
 8013fea:	10a4      	asrs	r4, r4, #2
 8013fec:	2600      	movs	r6, #0
 8013fee:	42a6      	cmp	r6, r4
 8013ff0:	d105      	bne.n	8013ffe <__libc_init_array+0x2e>
 8013ff2:	bd70      	pop	{r4, r5, r6, pc}
 8013ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ff8:	4798      	blx	r3
 8013ffa:	3601      	adds	r6, #1
 8013ffc:	e7ee      	b.n	8013fdc <__libc_init_array+0xc>
 8013ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8014002:	4798      	blx	r3
 8014004:	3601      	adds	r6, #1
 8014006:	e7f2      	b.n	8013fee <__libc_init_array+0x1e>
 8014008:	08018da4 	.word	0x08018da4
 801400c:	08018da4 	.word	0x08018da4
 8014010:	08018da4 	.word	0x08018da4
 8014014:	08018da8 	.word	0x08018da8

08014018 <memcmp>:
 8014018:	b510      	push	{r4, lr}
 801401a:	3901      	subs	r1, #1
 801401c:	4402      	add	r2, r0
 801401e:	4290      	cmp	r0, r2
 8014020:	d101      	bne.n	8014026 <memcmp+0xe>
 8014022:	2000      	movs	r0, #0
 8014024:	e005      	b.n	8014032 <memcmp+0x1a>
 8014026:	7803      	ldrb	r3, [r0, #0]
 8014028:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801402c:	42a3      	cmp	r3, r4
 801402e:	d001      	beq.n	8014034 <memcmp+0x1c>
 8014030:	1b18      	subs	r0, r3, r4
 8014032:	bd10      	pop	{r4, pc}
 8014034:	3001      	adds	r0, #1
 8014036:	e7f2      	b.n	801401e <memcmp+0x6>

08014038 <memcpy>:
 8014038:	440a      	add	r2, r1
 801403a:	4291      	cmp	r1, r2
 801403c:	f100 33ff 	add.w	r3, r0, #4294967295
 8014040:	d100      	bne.n	8014044 <memcpy+0xc>
 8014042:	4770      	bx	lr
 8014044:	b510      	push	{r4, lr}
 8014046:	f811 4b01 	ldrb.w	r4, [r1], #1
 801404a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801404e:	4291      	cmp	r1, r2
 8014050:	d1f9      	bne.n	8014046 <memcpy+0xe>
 8014052:	bd10      	pop	{r4, pc}

08014054 <memset>:
 8014054:	4402      	add	r2, r0
 8014056:	4603      	mov	r3, r0
 8014058:	4293      	cmp	r3, r2
 801405a:	d100      	bne.n	801405e <memset+0xa>
 801405c:	4770      	bx	lr
 801405e:	f803 1b01 	strb.w	r1, [r3], #1
 8014062:	e7f9      	b.n	8014058 <memset+0x4>

08014064 <iprintf>:
 8014064:	b40f      	push	{r0, r1, r2, r3}
 8014066:	4b0a      	ldr	r3, [pc, #40]	; (8014090 <iprintf+0x2c>)
 8014068:	b513      	push	{r0, r1, r4, lr}
 801406a:	681c      	ldr	r4, [r3, #0]
 801406c:	b124      	cbz	r4, 8014078 <iprintf+0x14>
 801406e:	69a3      	ldr	r3, [r4, #24]
 8014070:	b913      	cbnz	r3, 8014078 <iprintf+0x14>
 8014072:	4620      	mov	r0, r4
 8014074:	f000 f8e4 	bl	8014240 <__sinit>
 8014078:	ab05      	add	r3, sp, #20
 801407a:	9a04      	ldr	r2, [sp, #16]
 801407c:	68a1      	ldr	r1, [r4, #8]
 801407e:	9301      	str	r3, [sp, #4]
 8014080:	4620      	mov	r0, r4
 8014082:	f000 faa1 	bl	80145c8 <_vfiprintf_r>
 8014086:	b002      	add	sp, #8
 8014088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801408c:	b004      	add	sp, #16
 801408e:	4770      	bx	lr
 8014090:	24000030 	.word	0x24000030

08014094 <rand>:
 8014094:	4b16      	ldr	r3, [pc, #88]	; (80140f0 <rand+0x5c>)
 8014096:	b510      	push	{r4, lr}
 8014098:	681c      	ldr	r4, [r3, #0]
 801409a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801409c:	b9b3      	cbnz	r3, 80140cc <rand+0x38>
 801409e:	2018      	movs	r0, #24
 80140a0:	f000 f980 	bl	80143a4 <malloc>
 80140a4:	63a0      	str	r0, [r4, #56]	; 0x38
 80140a6:	b928      	cbnz	r0, 80140b4 <rand+0x20>
 80140a8:	4602      	mov	r2, r0
 80140aa:	4b12      	ldr	r3, [pc, #72]	; (80140f4 <rand+0x60>)
 80140ac:	4812      	ldr	r0, [pc, #72]	; (80140f8 <rand+0x64>)
 80140ae:	214e      	movs	r1, #78	; 0x4e
 80140b0:	f000 f850 	bl	8014154 <__assert_func>
 80140b4:	4a11      	ldr	r2, [pc, #68]	; (80140fc <rand+0x68>)
 80140b6:	4b12      	ldr	r3, [pc, #72]	; (8014100 <rand+0x6c>)
 80140b8:	e9c0 2300 	strd	r2, r3, [r0]
 80140bc:	4b11      	ldr	r3, [pc, #68]	; (8014104 <rand+0x70>)
 80140be:	6083      	str	r3, [r0, #8]
 80140c0:	230b      	movs	r3, #11
 80140c2:	8183      	strh	r3, [r0, #12]
 80140c4:	2201      	movs	r2, #1
 80140c6:	2300      	movs	r3, #0
 80140c8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80140cc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80140ce:	4a0e      	ldr	r2, [pc, #56]	; (8014108 <rand+0x74>)
 80140d0:	6920      	ldr	r0, [r4, #16]
 80140d2:	6963      	ldr	r3, [r4, #20]
 80140d4:	490d      	ldr	r1, [pc, #52]	; (801410c <rand+0x78>)
 80140d6:	4342      	muls	r2, r0
 80140d8:	fb01 2203 	mla	r2, r1, r3, r2
 80140dc:	fba0 0101 	umull	r0, r1, r0, r1
 80140e0:	1c43      	adds	r3, r0, #1
 80140e2:	eb42 0001 	adc.w	r0, r2, r1
 80140e6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80140ea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80140ee:	bd10      	pop	{r4, pc}
 80140f0:	24000030 	.word	0x24000030
 80140f4:	08018c60 	.word	0x08018c60
 80140f8:	08018c77 	.word	0x08018c77
 80140fc:	abcd330e 	.word	0xabcd330e
 8014100:	e66d1234 	.word	0xe66d1234
 8014104:	0005deec 	.word	0x0005deec
 8014108:	5851f42d 	.word	0x5851f42d
 801410c:	4c957f2d 	.word	0x4c957f2d

08014110 <strchr>:
 8014110:	b2c9      	uxtb	r1, r1
 8014112:	4603      	mov	r3, r0
 8014114:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014118:	b11a      	cbz	r2, 8014122 <strchr+0x12>
 801411a:	428a      	cmp	r2, r1
 801411c:	d1f9      	bne.n	8014112 <strchr+0x2>
 801411e:	4618      	mov	r0, r3
 8014120:	4770      	bx	lr
 8014122:	2900      	cmp	r1, #0
 8014124:	bf18      	it	ne
 8014126:	2300      	movne	r3, #0
 8014128:	e7f9      	b.n	801411e <strchr+0xe>

0801412a <strncmp>:
 801412a:	b510      	push	{r4, lr}
 801412c:	b17a      	cbz	r2, 801414e <strncmp+0x24>
 801412e:	4603      	mov	r3, r0
 8014130:	3901      	subs	r1, #1
 8014132:	1884      	adds	r4, r0, r2
 8014134:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014138:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801413c:	4290      	cmp	r0, r2
 801413e:	d101      	bne.n	8014144 <strncmp+0x1a>
 8014140:	42a3      	cmp	r3, r4
 8014142:	d101      	bne.n	8014148 <strncmp+0x1e>
 8014144:	1a80      	subs	r0, r0, r2
 8014146:	bd10      	pop	{r4, pc}
 8014148:	2800      	cmp	r0, #0
 801414a:	d1f3      	bne.n	8014134 <strncmp+0xa>
 801414c:	e7fa      	b.n	8014144 <strncmp+0x1a>
 801414e:	4610      	mov	r0, r2
 8014150:	e7f9      	b.n	8014146 <strncmp+0x1c>
	...

08014154 <__assert_func>:
 8014154:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014156:	4614      	mov	r4, r2
 8014158:	461a      	mov	r2, r3
 801415a:	4b09      	ldr	r3, [pc, #36]	; (8014180 <__assert_func+0x2c>)
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	4605      	mov	r5, r0
 8014160:	68d8      	ldr	r0, [r3, #12]
 8014162:	b14c      	cbz	r4, 8014178 <__assert_func+0x24>
 8014164:	4b07      	ldr	r3, [pc, #28]	; (8014184 <__assert_func+0x30>)
 8014166:	9100      	str	r1, [sp, #0]
 8014168:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801416c:	4906      	ldr	r1, [pc, #24]	; (8014188 <__assert_func+0x34>)
 801416e:	462b      	mov	r3, r5
 8014170:	f000 f8e4 	bl	801433c <fiprintf>
 8014174:	f000 fe12 	bl	8014d9c <abort>
 8014178:	4b04      	ldr	r3, [pc, #16]	; (801418c <__assert_func+0x38>)
 801417a:	461c      	mov	r4, r3
 801417c:	e7f3      	b.n	8014166 <__assert_func+0x12>
 801417e:	bf00      	nop
 8014180:	24000030 	.word	0x24000030
 8014184:	08018cd2 	.word	0x08018cd2
 8014188:	08018cdf 	.word	0x08018cdf
 801418c:	08018d0d 	.word	0x08018d0d

08014190 <std>:
 8014190:	2300      	movs	r3, #0
 8014192:	b510      	push	{r4, lr}
 8014194:	4604      	mov	r4, r0
 8014196:	e9c0 3300 	strd	r3, r3, [r0]
 801419a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801419e:	6083      	str	r3, [r0, #8]
 80141a0:	8181      	strh	r1, [r0, #12]
 80141a2:	6643      	str	r3, [r0, #100]	; 0x64
 80141a4:	81c2      	strh	r2, [r0, #14]
 80141a6:	6183      	str	r3, [r0, #24]
 80141a8:	4619      	mov	r1, r3
 80141aa:	2208      	movs	r2, #8
 80141ac:	305c      	adds	r0, #92	; 0x5c
 80141ae:	f7ff ff51 	bl	8014054 <memset>
 80141b2:	4b05      	ldr	r3, [pc, #20]	; (80141c8 <std+0x38>)
 80141b4:	6263      	str	r3, [r4, #36]	; 0x24
 80141b6:	4b05      	ldr	r3, [pc, #20]	; (80141cc <std+0x3c>)
 80141b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80141ba:	4b05      	ldr	r3, [pc, #20]	; (80141d0 <std+0x40>)
 80141bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80141be:	4b05      	ldr	r3, [pc, #20]	; (80141d4 <std+0x44>)
 80141c0:	6224      	str	r4, [r4, #32]
 80141c2:	6323      	str	r3, [r4, #48]	; 0x30
 80141c4:	bd10      	pop	{r4, pc}
 80141c6:	bf00      	nop
 80141c8:	08014b71 	.word	0x08014b71
 80141cc:	08014b93 	.word	0x08014b93
 80141d0:	08014bcb 	.word	0x08014bcb
 80141d4:	08014bef 	.word	0x08014bef

080141d8 <_cleanup_r>:
 80141d8:	4901      	ldr	r1, [pc, #4]	; (80141e0 <_cleanup_r+0x8>)
 80141da:	f000 b8c1 	b.w	8014360 <_fwalk_reent>
 80141de:	bf00      	nop
 80141e0:	08014ed9 	.word	0x08014ed9

080141e4 <__sfmoreglue>:
 80141e4:	b570      	push	{r4, r5, r6, lr}
 80141e6:	2268      	movs	r2, #104	; 0x68
 80141e8:	1e4d      	subs	r5, r1, #1
 80141ea:	4355      	muls	r5, r2
 80141ec:	460e      	mov	r6, r1
 80141ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80141f2:	f000 f94b 	bl	801448c <_malloc_r>
 80141f6:	4604      	mov	r4, r0
 80141f8:	b140      	cbz	r0, 801420c <__sfmoreglue+0x28>
 80141fa:	2100      	movs	r1, #0
 80141fc:	e9c0 1600 	strd	r1, r6, [r0]
 8014200:	300c      	adds	r0, #12
 8014202:	60a0      	str	r0, [r4, #8]
 8014204:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014208:	f7ff ff24 	bl	8014054 <memset>
 801420c:	4620      	mov	r0, r4
 801420e:	bd70      	pop	{r4, r5, r6, pc}

08014210 <__sfp_lock_acquire>:
 8014210:	4801      	ldr	r0, [pc, #4]	; (8014218 <__sfp_lock_acquire+0x8>)
 8014212:	f000 b8c5 	b.w	80143a0 <__retarget_lock_acquire_recursive>
 8014216:	bf00      	nop
 8014218:	24003739 	.word	0x24003739

0801421c <__sfp_lock_release>:
 801421c:	4801      	ldr	r0, [pc, #4]	; (8014224 <__sfp_lock_release+0x8>)
 801421e:	f000 b8c0 	b.w	80143a2 <__retarget_lock_release_recursive>
 8014222:	bf00      	nop
 8014224:	24003739 	.word	0x24003739

08014228 <__sinit_lock_acquire>:
 8014228:	4801      	ldr	r0, [pc, #4]	; (8014230 <__sinit_lock_acquire+0x8>)
 801422a:	f000 b8b9 	b.w	80143a0 <__retarget_lock_acquire_recursive>
 801422e:	bf00      	nop
 8014230:	2400373a 	.word	0x2400373a

08014234 <__sinit_lock_release>:
 8014234:	4801      	ldr	r0, [pc, #4]	; (801423c <__sinit_lock_release+0x8>)
 8014236:	f000 b8b4 	b.w	80143a2 <__retarget_lock_release_recursive>
 801423a:	bf00      	nop
 801423c:	2400373a 	.word	0x2400373a

08014240 <__sinit>:
 8014240:	b510      	push	{r4, lr}
 8014242:	4604      	mov	r4, r0
 8014244:	f7ff fff0 	bl	8014228 <__sinit_lock_acquire>
 8014248:	69a3      	ldr	r3, [r4, #24]
 801424a:	b11b      	cbz	r3, 8014254 <__sinit+0x14>
 801424c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014250:	f7ff bff0 	b.w	8014234 <__sinit_lock_release>
 8014254:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014258:	6523      	str	r3, [r4, #80]	; 0x50
 801425a:	4b13      	ldr	r3, [pc, #76]	; (80142a8 <__sinit+0x68>)
 801425c:	4a13      	ldr	r2, [pc, #76]	; (80142ac <__sinit+0x6c>)
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	62a2      	str	r2, [r4, #40]	; 0x28
 8014262:	42a3      	cmp	r3, r4
 8014264:	bf04      	itt	eq
 8014266:	2301      	moveq	r3, #1
 8014268:	61a3      	streq	r3, [r4, #24]
 801426a:	4620      	mov	r0, r4
 801426c:	f000 f820 	bl	80142b0 <__sfp>
 8014270:	6060      	str	r0, [r4, #4]
 8014272:	4620      	mov	r0, r4
 8014274:	f000 f81c 	bl	80142b0 <__sfp>
 8014278:	60a0      	str	r0, [r4, #8]
 801427a:	4620      	mov	r0, r4
 801427c:	f000 f818 	bl	80142b0 <__sfp>
 8014280:	2200      	movs	r2, #0
 8014282:	60e0      	str	r0, [r4, #12]
 8014284:	2104      	movs	r1, #4
 8014286:	6860      	ldr	r0, [r4, #4]
 8014288:	f7ff ff82 	bl	8014190 <std>
 801428c:	68a0      	ldr	r0, [r4, #8]
 801428e:	2201      	movs	r2, #1
 8014290:	2109      	movs	r1, #9
 8014292:	f7ff ff7d 	bl	8014190 <std>
 8014296:	68e0      	ldr	r0, [r4, #12]
 8014298:	2202      	movs	r2, #2
 801429a:	2112      	movs	r1, #18
 801429c:	f7ff ff78 	bl	8014190 <std>
 80142a0:	2301      	movs	r3, #1
 80142a2:	61a3      	str	r3, [r4, #24]
 80142a4:	e7d2      	b.n	801424c <__sinit+0xc>
 80142a6:	bf00      	nop
 80142a8:	08018c5c 	.word	0x08018c5c
 80142ac:	080141d9 	.word	0x080141d9

080142b0 <__sfp>:
 80142b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142b2:	4607      	mov	r7, r0
 80142b4:	f7ff ffac 	bl	8014210 <__sfp_lock_acquire>
 80142b8:	4b1e      	ldr	r3, [pc, #120]	; (8014334 <__sfp+0x84>)
 80142ba:	681e      	ldr	r6, [r3, #0]
 80142bc:	69b3      	ldr	r3, [r6, #24]
 80142be:	b913      	cbnz	r3, 80142c6 <__sfp+0x16>
 80142c0:	4630      	mov	r0, r6
 80142c2:	f7ff ffbd 	bl	8014240 <__sinit>
 80142c6:	3648      	adds	r6, #72	; 0x48
 80142c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80142cc:	3b01      	subs	r3, #1
 80142ce:	d503      	bpl.n	80142d8 <__sfp+0x28>
 80142d0:	6833      	ldr	r3, [r6, #0]
 80142d2:	b30b      	cbz	r3, 8014318 <__sfp+0x68>
 80142d4:	6836      	ldr	r6, [r6, #0]
 80142d6:	e7f7      	b.n	80142c8 <__sfp+0x18>
 80142d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80142dc:	b9d5      	cbnz	r5, 8014314 <__sfp+0x64>
 80142de:	4b16      	ldr	r3, [pc, #88]	; (8014338 <__sfp+0x88>)
 80142e0:	60e3      	str	r3, [r4, #12]
 80142e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80142e6:	6665      	str	r5, [r4, #100]	; 0x64
 80142e8:	f000 f859 	bl	801439e <__retarget_lock_init_recursive>
 80142ec:	f7ff ff96 	bl	801421c <__sfp_lock_release>
 80142f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80142f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80142f8:	6025      	str	r5, [r4, #0]
 80142fa:	61a5      	str	r5, [r4, #24]
 80142fc:	2208      	movs	r2, #8
 80142fe:	4629      	mov	r1, r5
 8014300:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014304:	f7ff fea6 	bl	8014054 <memset>
 8014308:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801430c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014310:	4620      	mov	r0, r4
 8014312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014314:	3468      	adds	r4, #104	; 0x68
 8014316:	e7d9      	b.n	80142cc <__sfp+0x1c>
 8014318:	2104      	movs	r1, #4
 801431a:	4638      	mov	r0, r7
 801431c:	f7ff ff62 	bl	80141e4 <__sfmoreglue>
 8014320:	4604      	mov	r4, r0
 8014322:	6030      	str	r0, [r6, #0]
 8014324:	2800      	cmp	r0, #0
 8014326:	d1d5      	bne.n	80142d4 <__sfp+0x24>
 8014328:	f7ff ff78 	bl	801421c <__sfp_lock_release>
 801432c:	230c      	movs	r3, #12
 801432e:	603b      	str	r3, [r7, #0]
 8014330:	e7ee      	b.n	8014310 <__sfp+0x60>
 8014332:	bf00      	nop
 8014334:	08018c5c 	.word	0x08018c5c
 8014338:	ffff0001 	.word	0xffff0001

0801433c <fiprintf>:
 801433c:	b40e      	push	{r1, r2, r3}
 801433e:	b503      	push	{r0, r1, lr}
 8014340:	4601      	mov	r1, r0
 8014342:	ab03      	add	r3, sp, #12
 8014344:	4805      	ldr	r0, [pc, #20]	; (801435c <fiprintf+0x20>)
 8014346:	f853 2b04 	ldr.w	r2, [r3], #4
 801434a:	6800      	ldr	r0, [r0, #0]
 801434c:	9301      	str	r3, [sp, #4]
 801434e:	f000 f93b 	bl	80145c8 <_vfiprintf_r>
 8014352:	b002      	add	sp, #8
 8014354:	f85d eb04 	ldr.w	lr, [sp], #4
 8014358:	b003      	add	sp, #12
 801435a:	4770      	bx	lr
 801435c:	24000030 	.word	0x24000030

08014360 <_fwalk_reent>:
 8014360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014364:	4606      	mov	r6, r0
 8014366:	4688      	mov	r8, r1
 8014368:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801436c:	2700      	movs	r7, #0
 801436e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014372:	f1b9 0901 	subs.w	r9, r9, #1
 8014376:	d505      	bpl.n	8014384 <_fwalk_reent+0x24>
 8014378:	6824      	ldr	r4, [r4, #0]
 801437a:	2c00      	cmp	r4, #0
 801437c:	d1f7      	bne.n	801436e <_fwalk_reent+0xe>
 801437e:	4638      	mov	r0, r7
 8014380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014384:	89ab      	ldrh	r3, [r5, #12]
 8014386:	2b01      	cmp	r3, #1
 8014388:	d907      	bls.n	801439a <_fwalk_reent+0x3a>
 801438a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801438e:	3301      	adds	r3, #1
 8014390:	d003      	beq.n	801439a <_fwalk_reent+0x3a>
 8014392:	4629      	mov	r1, r5
 8014394:	4630      	mov	r0, r6
 8014396:	47c0      	blx	r8
 8014398:	4307      	orrs	r7, r0
 801439a:	3568      	adds	r5, #104	; 0x68
 801439c:	e7e9      	b.n	8014372 <_fwalk_reent+0x12>

0801439e <__retarget_lock_init_recursive>:
 801439e:	4770      	bx	lr

080143a0 <__retarget_lock_acquire_recursive>:
 80143a0:	4770      	bx	lr

080143a2 <__retarget_lock_release_recursive>:
 80143a2:	4770      	bx	lr

080143a4 <malloc>:
 80143a4:	4b02      	ldr	r3, [pc, #8]	; (80143b0 <malloc+0xc>)
 80143a6:	4601      	mov	r1, r0
 80143a8:	6818      	ldr	r0, [r3, #0]
 80143aa:	f000 b86f 	b.w	801448c <_malloc_r>
 80143ae:	bf00      	nop
 80143b0:	24000030 	.word	0x24000030

080143b4 <_free_r>:
 80143b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80143b6:	2900      	cmp	r1, #0
 80143b8:	d044      	beq.n	8014444 <_free_r+0x90>
 80143ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80143be:	9001      	str	r0, [sp, #4]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	f1a1 0404 	sub.w	r4, r1, #4
 80143c6:	bfb8      	it	lt
 80143c8:	18e4      	addlt	r4, r4, r3
 80143ca:	f000 fe39 	bl	8015040 <__malloc_lock>
 80143ce:	4a1e      	ldr	r2, [pc, #120]	; (8014448 <_free_r+0x94>)
 80143d0:	9801      	ldr	r0, [sp, #4]
 80143d2:	6813      	ldr	r3, [r2, #0]
 80143d4:	b933      	cbnz	r3, 80143e4 <_free_r+0x30>
 80143d6:	6063      	str	r3, [r4, #4]
 80143d8:	6014      	str	r4, [r2, #0]
 80143da:	b003      	add	sp, #12
 80143dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80143e0:	f000 be34 	b.w	801504c <__malloc_unlock>
 80143e4:	42a3      	cmp	r3, r4
 80143e6:	d908      	bls.n	80143fa <_free_r+0x46>
 80143e8:	6825      	ldr	r5, [r4, #0]
 80143ea:	1961      	adds	r1, r4, r5
 80143ec:	428b      	cmp	r3, r1
 80143ee:	bf01      	itttt	eq
 80143f0:	6819      	ldreq	r1, [r3, #0]
 80143f2:	685b      	ldreq	r3, [r3, #4]
 80143f4:	1949      	addeq	r1, r1, r5
 80143f6:	6021      	streq	r1, [r4, #0]
 80143f8:	e7ed      	b.n	80143d6 <_free_r+0x22>
 80143fa:	461a      	mov	r2, r3
 80143fc:	685b      	ldr	r3, [r3, #4]
 80143fe:	b10b      	cbz	r3, 8014404 <_free_r+0x50>
 8014400:	42a3      	cmp	r3, r4
 8014402:	d9fa      	bls.n	80143fa <_free_r+0x46>
 8014404:	6811      	ldr	r1, [r2, #0]
 8014406:	1855      	adds	r5, r2, r1
 8014408:	42a5      	cmp	r5, r4
 801440a:	d10b      	bne.n	8014424 <_free_r+0x70>
 801440c:	6824      	ldr	r4, [r4, #0]
 801440e:	4421      	add	r1, r4
 8014410:	1854      	adds	r4, r2, r1
 8014412:	42a3      	cmp	r3, r4
 8014414:	6011      	str	r1, [r2, #0]
 8014416:	d1e0      	bne.n	80143da <_free_r+0x26>
 8014418:	681c      	ldr	r4, [r3, #0]
 801441a:	685b      	ldr	r3, [r3, #4]
 801441c:	6053      	str	r3, [r2, #4]
 801441e:	4421      	add	r1, r4
 8014420:	6011      	str	r1, [r2, #0]
 8014422:	e7da      	b.n	80143da <_free_r+0x26>
 8014424:	d902      	bls.n	801442c <_free_r+0x78>
 8014426:	230c      	movs	r3, #12
 8014428:	6003      	str	r3, [r0, #0]
 801442a:	e7d6      	b.n	80143da <_free_r+0x26>
 801442c:	6825      	ldr	r5, [r4, #0]
 801442e:	1961      	adds	r1, r4, r5
 8014430:	428b      	cmp	r3, r1
 8014432:	bf04      	itt	eq
 8014434:	6819      	ldreq	r1, [r3, #0]
 8014436:	685b      	ldreq	r3, [r3, #4]
 8014438:	6063      	str	r3, [r4, #4]
 801443a:	bf04      	itt	eq
 801443c:	1949      	addeq	r1, r1, r5
 801443e:	6021      	streq	r1, [r4, #0]
 8014440:	6054      	str	r4, [r2, #4]
 8014442:	e7ca      	b.n	80143da <_free_r+0x26>
 8014444:	b003      	add	sp, #12
 8014446:	bd30      	pop	{r4, r5, pc}
 8014448:	2400373c 	.word	0x2400373c

0801444c <sbrk_aligned>:
 801444c:	b570      	push	{r4, r5, r6, lr}
 801444e:	4e0e      	ldr	r6, [pc, #56]	; (8014488 <sbrk_aligned+0x3c>)
 8014450:	460c      	mov	r4, r1
 8014452:	6831      	ldr	r1, [r6, #0]
 8014454:	4605      	mov	r5, r0
 8014456:	b911      	cbnz	r1, 801445e <sbrk_aligned+0x12>
 8014458:	f000 fb7a 	bl	8014b50 <_sbrk_r>
 801445c:	6030      	str	r0, [r6, #0]
 801445e:	4621      	mov	r1, r4
 8014460:	4628      	mov	r0, r5
 8014462:	f000 fb75 	bl	8014b50 <_sbrk_r>
 8014466:	1c43      	adds	r3, r0, #1
 8014468:	d00a      	beq.n	8014480 <sbrk_aligned+0x34>
 801446a:	1cc4      	adds	r4, r0, #3
 801446c:	f024 0403 	bic.w	r4, r4, #3
 8014470:	42a0      	cmp	r0, r4
 8014472:	d007      	beq.n	8014484 <sbrk_aligned+0x38>
 8014474:	1a21      	subs	r1, r4, r0
 8014476:	4628      	mov	r0, r5
 8014478:	f000 fb6a 	bl	8014b50 <_sbrk_r>
 801447c:	3001      	adds	r0, #1
 801447e:	d101      	bne.n	8014484 <sbrk_aligned+0x38>
 8014480:	f04f 34ff 	mov.w	r4, #4294967295
 8014484:	4620      	mov	r0, r4
 8014486:	bd70      	pop	{r4, r5, r6, pc}
 8014488:	24003740 	.word	0x24003740

0801448c <_malloc_r>:
 801448c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014490:	1ccd      	adds	r5, r1, #3
 8014492:	f025 0503 	bic.w	r5, r5, #3
 8014496:	3508      	adds	r5, #8
 8014498:	2d0c      	cmp	r5, #12
 801449a:	bf38      	it	cc
 801449c:	250c      	movcc	r5, #12
 801449e:	2d00      	cmp	r5, #0
 80144a0:	4607      	mov	r7, r0
 80144a2:	db01      	blt.n	80144a8 <_malloc_r+0x1c>
 80144a4:	42a9      	cmp	r1, r5
 80144a6:	d905      	bls.n	80144b4 <_malloc_r+0x28>
 80144a8:	230c      	movs	r3, #12
 80144aa:	603b      	str	r3, [r7, #0]
 80144ac:	2600      	movs	r6, #0
 80144ae:	4630      	mov	r0, r6
 80144b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144b4:	4e2e      	ldr	r6, [pc, #184]	; (8014570 <_malloc_r+0xe4>)
 80144b6:	f000 fdc3 	bl	8015040 <__malloc_lock>
 80144ba:	6833      	ldr	r3, [r6, #0]
 80144bc:	461c      	mov	r4, r3
 80144be:	bb34      	cbnz	r4, 801450e <_malloc_r+0x82>
 80144c0:	4629      	mov	r1, r5
 80144c2:	4638      	mov	r0, r7
 80144c4:	f7ff ffc2 	bl	801444c <sbrk_aligned>
 80144c8:	1c43      	adds	r3, r0, #1
 80144ca:	4604      	mov	r4, r0
 80144cc:	d14d      	bne.n	801456a <_malloc_r+0xde>
 80144ce:	6834      	ldr	r4, [r6, #0]
 80144d0:	4626      	mov	r6, r4
 80144d2:	2e00      	cmp	r6, #0
 80144d4:	d140      	bne.n	8014558 <_malloc_r+0xcc>
 80144d6:	6823      	ldr	r3, [r4, #0]
 80144d8:	4631      	mov	r1, r6
 80144da:	4638      	mov	r0, r7
 80144dc:	eb04 0803 	add.w	r8, r4, r3
 80144e0:	f000 fb36 	bl	8014b50 <_sbrk_r>
 80144e4:	4580      	cmp	r8, r0
 80144e6:	d13a      	bne.n	801455e <_malloc_r+0xd2>
 80144e8:	6821      	ldr	r1, [r4, #0]
 80144ea:	3503      	adds	r5, #3
 80144ec:	1a6d      	subs	r5, r5, r1
 80144ee:	f025 0503 	bic.w	r5, r5, #3
 80144f2:	3508      	adds	r5, #8
 80144f4:	2d0c      	cmp	r5, #12
 80144f6:	bf38      	it	cc
 80144f8:	250c      	movcc	r5, #12
 80144fa:	4629      	mov	r1, r5
 80144fc:	4638      	mov	r0, r7
 80144fe:	f7ff ffa5 	bl	801444c <sbrk_aligned>
 8014502:	3001      	adds	r0, #1
 8014504:	d02b      	beq.n	801455e <_malloc_r+0xd2>
 8014506:	6823      	ldr	r3, [r4, #0]
 8014508:	442b      	add	r3, r5
 801450a:	6023      	str	r3, [r4, #0]
 801450c:	e00e      	b.n	801452c <_malloc_r+0xa0>
 801450e:	6822      	ldr	r2, [r4, #0]
 8014510:	1b52      	subs	r2, r2, r5
 8014512:	d41e      	bmi.n	8014552 <_malloc_r+0xc6>
 8014514:	2a0b      	cmp	r2, #11
 8014516:	d916      	bls.n	8014546 <_malloc_r+0xba>
 8014518:	1961      	adds	r1, r4, r5
 801451a:	42a3      	cmp	r3, r4
 801451c:	6025      	str	r5, [r4, #0]
 801451e:	bf18      	it	ne
 8014520:	6059      	strne	r1, [r3, #4]
 8014522:	6863      	ldr	r3, [r4, #4]
 8014524:	bf08      	it	eq
 8014526:	6031      	streq	r1, [r6, #0]
 8014528:	5162      	str	r2, [r4, r5]
 801452a:	604b      	str	r3, [r1, #4]
 801452c:	4638      	mov	r0, r7
 801452e:	f104 060b 	add.w	r6, r4, #11
 8014532:	f000 fd8b 	bl	801504c <__malloc_unlock>
 8014536:	f026 0607 	bic.w	r6, r6, #7
 801453a:	1d23      	adds	r3, r4, #4
 801453c:	1af2      	subs	r2, r6, r3
 801453e:	d0b6      	beq.n	80144ae <_malloc_r+0x22>
 8014540:	1b9b      	subs	r3, r3, r6
 8014542:	50a3      	str	r3, [r4, r2]
 8014544:	e7b3      	b.n	80144ae <_malloc_r+0x22>
 8014546:	6862      	ldr	r2, [r4, #4]
 8014548:	42a3      	cmp	r3, r4
 801454a:	bf0c      	ite	eq
 801454c:	6032      	streq	r2, [r6, #0]
 801454e:	605a      	strne	r2, [r3, #4]
 8014550:	e7ec      	b.n	801452c <_malloc_r+0xa0>
 8014552:	4623      	mov	r3, r4
 8014554:	6864      	ldr	r4, [r4, #4]
 8014556:	e7b2      	b.n	80144be <_malloc_r+0x32>
 8014558:	4634      	mov	r4, r6
 801455a:	6876      	ldr	r6, [r6, #4]
 801455c:	e7b9      	b.n	80144d2 <_malloc_r+0x46>
 801455e:	230c      	movs	r3, #12
 8014560:	603b      	str	r3, [r7, #0]
 8014562:	4638      	mov	r0, r7
 8014564:	f000 fd72 	bl	801504c <__malloc_unlock>
 8014568:	e7a1      	b.n	80144ae <_malloc_r+0x22>
 801456a:	6025      	str	r5, [r4, #0]
 801456c:	e7de      	b.n	801452c <_malloc_r+0xa0>
 801456e:	bf00      	nop
 8014570:	2400373c 	.word	0x2400373c

08014574 <__sfputc_r>:
 8014574:	6893      	ldr	r3, [r2, #8]
 8014576:	3b01      	subs	r3, #1
 8014578:	2b00      	cmp	r3, #0
 801457a:	b410      	push	{r4}
 801457c:	6093      	str	r3, [r2, #8]
 801457e:	da08      	bge.n	8014592 <__sfputc_r+0x1e>
 8014580:	6994      	ldr	r4, [r2, #24]
 8014582:	42a3      	cmp	r3, r4
 8014584:	db01      	blt.n	801458a <__sfputc_r+0x16>
 8014586:	290a      	cmp	r1, #10
 8014588:	d103      	bne.n	8014592 <__sfputc_r+0x1e>
 801458a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801458e:	f000 bb33 	b.w	8014bf8 <__swbuf_r>
 8014592:	6813      	ldr	r3, [r2, #0]
 8014594:	1c58      	adds	r0, r3, #1
 8014596:	6010      	str	r0, [r2, #0]
 8014598:	7019      	strb	r1, [r3, #0]
 801459a:	4608      	mov	r0, r1
 801459c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145a0:	4770      	bx	lr

080145a2 <__sfputs_r>:
 80145a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145a4:	4606      	mov	r6, r0
 80145a6:	460f      	mov	r7, r1
 80145a8:	4614      	mov	r4, r2
 80145aa:	18d5      	adds	r5, r2, r3
 80145ac:	42ac      	cmp	r4, r5
 80145ae:	d101      	bne.n	80145b4 <__sfputs_r+0x12>
 80145b0:	2000      	movs	r0, #0
 80145b2:	e007      	b.n	80145c4 <__sfputs_r+0x22>
 80145b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145b8:	463a      	mov	r2, r7
 80145ba:	4630      	mov	r0, r6
 80145bc:	f7ff ffda 	bl	8014574 <__sfputc_r>
 80145c0:	1c43      	adds	r3, r0, #1
 80145c2:	d1f3      	bne.n	80145ac <__sfputs_r+0xa>
 80145c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080145c8 <_vfiprintf_r>:
 80145c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145cc:	460d      	mov	r5, r1
 80145ce:	b09d      	sub	sp, #116	; 0x74
 80145d0:	4614      	mov	r4, r2
 80145d2:	4698      	mov	r8, r3
 80145d4:	4606      	mov	r6, r0
 80145d6:	b118      	cbz	r0, 80145e0 <_vfiprintf_r+0x18>
 80145d8:	6983      	ldr	r3, [r0, #24]
 80145da:	b90b      	cbnz	r3, 80145e0 <_vfiprintf_r+0x18>
 80145dc:	f7ff fe30 	bl	8014240 <__sinit>
 80145e0:	4b89      	ldr	r3, [pc, #548]	; (8014808 <_vfiprintf_r+0x240>)
 80145e2:	429d      	cmp	r5, r3
 80145e4:	d11b      	bne.n	801461e <_vfiprintf_r+0x56>
 80145e6:	6875      	ldr	r5, [r6, #4]
 80145e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80145ea:	07d9      	lsls	r1, r3, #31
 80145ec:	d405      	bmi.n	80145fa <_vfiprintf_r+0x32>
 80145ee:	89ab      	ldrh	r3, [r5, #12]
 80145f0:	059a      	lsls	r2, r3, #22
 80145f2:	d402      	bmi.n	80145fa <_vfiprintf_r+0x32>
 80145f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80145f6:	f7ff fed3 	bl	80143a0 <__retarget_lock_acquire_recursive>
 80145fa:	89ab      	ldrh	r3, [r5, #12]
 80145fc:	071b      	lsls	r3, r3, #28
 80145fe:	d501      	bpl.n	8014604 <_vfiprintf_r+0x3c>
 8014600:	692b      	ldr	r3, [r5, #16]
 8014602:	b9eb      	cbnz	r3, 8014640 <_vfiprintf_r+0x78>
 8014604:	4629      	mov	r1, r5
 8014606:	4630      	mov	r0, r6
 8014608:	f000 fb5a 	bl	8014cc0 <__swsetup_r>
 801460c:	b1c0      	cbz	r0, 8014640 <_vfiprintf_r+0x78>
 801460e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014610:	07dc      	lsls	r4, r3, #31
 8014612:	d50e      	bpl.n	8014632 <_vfiprintf_r+0x6a>
 8014614:	f04f 30ff 	mov.w	r0, #4294967295
 8014618:	b01d      	add	sp, #116	; 0x74
 801461a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801461e:	4b7b      	ldr	r3, [pc, #492]	; (801480c <_vfiprintf_r+0x244>)
 8014620:	429d      	cmp	r5, r3
 8014622:	d101      	bne.n	8014628 <_vfiprintf_r+0x60>
 8014624:	68b5      	ldr	r5, [r6, #8]
 8014626:	e7df      	b.n	80145e8 <_vfiprintf_r+0x20>
 8014628:	4b79      	ldr	r3, [pc, #484]	; (8014810 <_vfiprintf_r+0x248>)
 801462a:	429d      	cmp	r5, r3
 801462c:	bf08      	it	eq
 801462e:	68f5      	ldreq	r5, [r6, #12]
 8014630:	e7da      	b.n	80145e8 <_vfiprintf_r+0x20>
 8014632:	89ab      	ldrh	r3, [r5, #12]
 8014634:	0598      	lsls	r0, r3, #22
 8014636:	d4ed      	bmi.n	8014614 <_vfiprintf_r+0x4c>
 8014638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801463a:	f7ff feb2 	bl	80143a2 <__retarget_lock_release_recursive>
 801463e:	e7e9      	b.n	8014614 <_vfiprintf_r+0x4c>
 8014640:	2300      	movs	r3, #0
 8014642:	9309      	str	r3, [sp, #36]	; 0x24
 8014644:	2320      	movs	r3, #32
 8014646:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801464a:	f8cd 800c 	str.w	r8, [sp, #12]
 801464e:	2330      	movs	r3, #48	; 0x30
 8014650:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014814 <_vfiprintf_r+0x24c>
 8014654:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014658:	f04f 0901 	mov.w	r9, #1
 801465c:	4623      	mov	r3, r4
 801465e:	469a      	mov	sl, r3
 8014660:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014664:	b10a      	cbz	r2, 801466a <_vfiprintf_r+0xa2>
 8014666:	2a25      	cmp	r2, #37	; 0x25
 8014668:	d1f9      	bne.n	801465e <_vfiprintf_r+0x96>
 801466a:	ebba 0b04 	subs.w	fp, sl, r4
 801466e:	d00b      	beq.n	8014688 <_vfiprintf_r+0xc0>
 8014670:	465b      	mov	r3, fp
 8014672:	4622      	mov	r2, r4
 8014674:	4629      	mov	r1, r5
 8014676:	4630      	mov	r0, r6
 8014678:	f7ff ff93 	bl	80145a2 <__sfputs_r>
 801467c:	3001      	adds	r0, #1
 801467e:	f000 80aa 	beq.w	80147d6 <_vfiprintf_r+0x20e>
 8014682:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014684:	445a      	add	r2, fp
 8014686:	9209      	str	r2, [sp, #36]	; 0x24
 8014688:	f89a 3000 	ldrb.w	r3, [sl]
 801468c:	2b00      	cmp	r3, #0
 801468e:	f000 80a2 	beq.w	80147d6 <_vfiprintf_r+0x20e>
 8014692:	2300      	movs	r3, #0
 8014694:	f04f 32ff 	mov.w	r2, #4294967295
 8014698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801469c:	f10a 0a01 	add.w	sl, sl, #1
 80146a0:	9304      	str	r3, [sp, #16]
 80146a2:	9307      	str	r3, [sp, #28]
 80146a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80146a8:	931a      	str	r3, [sp, #104]	; 0x68
 80146aa:	4654      	mov	r4, sl
 80146ac:	2205      	movs	r2, #5
 80146ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146b2:	4858      	ldr	r0, [pc, #352]	; (8014814 <_vfiprintf_r+0x24c>)
 80146b4:	f7eb fe2c 	bl	8000310 <memchr>
 80146b8:	9a04      	ldr	r2, [sp, #16]
 80146ba:	b9d8      	cbnz	r0, 80146f4 <_vfiprintf_r+0x12c>
 80146bc:	06d1      	lsls	r1, r2, #27
 80146be:	bf44      	itt	mi
 80146c0:	2320      	movmi	r3, #32
 80146c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80146c6:	0713      	lsls	r3, r2, #28
 80146c8:	bf44      	itt	mi
 80146ca:	232b      	movmi	r3, #43	; 0x2b
 80146cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80146d0:	f89a 3000 	ldrb.w	r3, [sl]
 80146d4:	2b2a      	cmp	r3, #42	; 0x2a
 80146d6:	d015      	beq.n	8014704 <_vfiprintf_r+0x13c>
 80146d8:	9a07      	ldr	r2, [sp, #28]
 80146da:	4654      	mov	r4, sl
 80146dc:	2000      	movs	r0, #0
 80146de:	f04f 0c0a 	mov.w	ip, #10
 80146e2:	4621      	mov	r1, r4
 80146e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80146e8:	3b30      	subs	r3, #48	; 0x30
 80146ea:	2b09      	cmp	r3, #9
 80146ec:	d94e      	bls.n	801478c <_vfiprintf_r+0x1c4>
 80146ee:	b1b0      	cbz	r0, 801471e <_vfiprintf_r+0x156>
 80146f0:	9207      	str	r2, [sp, #28]
 80146f2:	e014      	b.n	801471e <_vfiprintf_r+0x156>
 80146f4:	eba0 0308 	sub.w	r3, r0, r8
 80146f8:	fa09 f303 	lsl.w	r3, r9, r3
 80146fc:	4313      	orrs	r3, r2
 80146fe:	9304      	str	r3, [sp, #16]
 8014700:	46a2      	mov	sl, r4
 8014702:	e7d2      	b.n	80146aa <_vfiprintf_r+0xe2>
 8014704:	9b03      	ldr	r3, [sp, #12]
 8014706:	1d19      	adds	r1, r3, #4
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	9103      	str	r1, [sp, #12]
 801470c:	2b00      	cmp	r3, #0
 801470e:	bfbb      	ittet	lt
 8014710:	425b      	neglt	r3, r3
 8014712:	f042 0202 	orrlt.w	r2, r2, #2
 8014716:	9307      	strge	r3, [sp, #28]
 8014718:	9307      	strlt	r3, [sp, #28]
 801471a:	bfb8      	it	lt
 801471c:	9204      	strlt	r2, [sp, #16]
 801471e:	7823      	ldrb	r3, [r4, #0]
 8014720:	2b2e      	cmp	r3, #46	; 0x2e
 8014722:	d10c      	bne.n	801473e <_vfiprintf_r+0x176>
 8014724:	7863      	ldrb	r3, [r4, #1]
 8014726:	2b2a      	cmp	r3, #42	; 0x2a
 8014728:	d135      	bne.n	8014796 <_vfiprintf_r+0x1ce>
 801472a:	9b03      	ldr	r3, [sp, #12]
 801472c:	1d1a      	adds	r2, r3, #4
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	9203      	str	r2, [sp, #12]
 8014732:	2b00      	cmp	r3, #0
 8014734:	bfb8      	it	lt
 8014736:	f04f 33ff 	movlt.w	r3, #4294967295
 801473a:	3402      	adds	r4, #2
 801473c:	9305      	str	r3, [sp, #20]
 801473e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014824 <_vfiprintf_r+0x25c>
 8014742:	7821      	ldrb	r1, [r4, #0]
 8014744:	2203      	movs	r2, #3
 8014746:	4650      	mov	r0, sl
 8014748:	f7eb fde2 	bl	8000310 <memchr>
 801474c:	b140      	cbz	r0, 8014760 <_vfiprintf_r+0x198>
 801474e:	2340      	movs	r3, #64	; 0x40
 8014750:	eba0 000a 	sub.w	r0, r0, sl
 8014754:	fa03 f000 	lsl.w	r0, r3, r0
 8014758:	9b04      	ldr	r3, [sp, #16]
 801475a:	4303      	orrs	r3, r0
 801475c:	3401      	adds	r4, #1
 801475e:	9304      	str	r3, [sp, #16]
 8014760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014764:	482c      	ldr	r0, [pc, #176]	; (8014818 <_vfiprintf_r+0x250>)
 8014766:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801476a:	2206      	movs	r2, #6
 801476c:	f7eb fdd0 	bl	8000310 <memchr>
 8014770:	2800      	cmp	r0, #0
 8014772:	d03f      	beq.n	80147f4 <_vfiprintf_r+0x22c>
 8014774:	4b29      	ldr	r3, [pc, #164]	; (801481c <_vfiprintf_r+0x254>)
 8014776:	bb1b      	cbnz	r3, 80147c0 <_vfiprintf_r+0x1f8>
 8014778:	9b03      	ldr	r3, [sp, #12]
 801477a:	3307      	adds	r3, #7
 801477c:	f023 0307 	bic.w	r3, r3, #7
 8014780:	3308      	adds	r3, #8
 8014782:	9303      	str	r3, [sp, #12]
 8014784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014786:	443b      	add	r3, r7
 8014788:	9309      	str	r3, [sp, #36]	; 0x24
 801478a:	e767      	b.n	801465c <_vfiprintf_r+0x94>
 801478c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014790:	460c      	mov	r4, r1
 8014792:	2001      	movs	r0, #1
 8014794:	e7a5      	b.n	80146e2 <_vfiprintf_r+0x11a>
 8014796:	2300      	movs	r3, #0
 8014798:	3401      	adds	r4, #1
 801479a:	9305      	str	r3, [sp, #20]
 801479c:	4619      	mov	r1, r3
 801479e:	f04f 0c0a 	mov.w	ip, #10
 80147a2:	4620      	mov	r0, r4
 80147a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80147a8:	3a30      	subs	r2, #48	; 0x30
 80147aa:	2a09      	cmp	r2, #9
 80147ac:	d903      	bls.n	80147b6 <_vfiprintf_r+0x1ee>
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d0c5      	beq.n	801473e <_vfiprintf_r+0x176>
 80147b2:	9105      	str	r1, [sp, #20]
 80147b4:	e7c3      	b.n	801473e <_vfiprintf_r+0x176>
 80147b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80147ba:	4604      	mov	r4, r0
 80147bc:	2301      	movs	r3, #1
 80147be:	e7f0      	b.n	80147a2 <_vfiprintf_r+0x1da>
 80147c0:	ab03      	add	r3, sp, #12
 80147c2:	9300      	str	r3, [sp, #0]
 80147c4:	462a      	mov	r2, r5
 80147c6:	4b16      	ldr	r3, [pc, #88]	; (8014820 <_vfiprintf_r+0x258>)
 80147c8:	a904      	add	r1, sp, #16
 80147ca:	4630      	mov	r0, r6
 80147cc:	f3af 8000 	nop.w
 80147d0:	4607      	mov	r7, r0
 80147d2:	1c78      	adds	r0, r7, #1
 80147d4:	d1d6      	bne.n	8014784 <_vfiprintf_r+0x1bc>
 80147d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80147d8:	07d9      	lsls	r1, r3, #31
 80147da:	d405      	bmi.n	80147e8 <_vfiprintf_r+0x220>
 80147dc:	89ab      	ldrh	r3, [r5, #12]
 80147de:	059a      	lsls	r2, r3, #22
 80147e0:	d402      	bmi.n	80147e8 <_vfiprintf_r+0x220>
 80147e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80147e4:	f7ff fddd 	bl	80143a2 <__retarget_lock_release_recursive>
 80147e8:	89ab      	ldrh	r3, [r5, #12]
 80147ea:	065b      	lsls	r3, r3, #25
 80147ec:	f53f af12 	bmi.w	8014614 <_vfiprintf_r+0x4c>
 80147f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80147f2:	e711      	b.n	8014618 <_vfiprintf_r+0x50>
 80147f4:	ab03      	add	r3, sp, #12
 80147f6:	9300      	str	r3, [sp, #0]
 80147f8:	462a      	mov	r2, r5
 80147fa:	4b09      	ldr	r3, [pc, #36]	; (8014820 <_vfiprintf_r+0x258>)
 80147fc:	a904      	add	r1, sp, #16
 80147fe:	4630      	mov	r0, r6
 8014800:	f000 f880 	bl	8014904 <_printf_i>
 8014804:	e7e4      	b.n	80147d0 <_vfiprintf_r+0x208>
 8014806:	bf00      	nop
 8014808:	08018d30 	.word	0x08018d30
 801480c:	08018d50 	.word	0x08018d50
 8014810:	08018d10 	.word	0x08018d10
 8014814:	08018d70 	.word	0x08018d70
 8014818:	08018d7a 	.word	0x08018d7a
 801481c:	00000000 	.word	0x00000000
 8014820:	080145a3 	.word	0x080145a3
 8014824:	08018d76 	.word	0x08018d76

08014828 <_printf_common>:
 8014828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801482c:	4616      	mov	r6, r2
 801482e:	4699      	mov	r9, r3
 8014830:	688a      	ldr	r2, [r1, #8]
 8014832:	690b      	ldr	r3, [r1, #16]
 8014834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014838:	4293      	cmp	r3, r2
 801483a:	bfb8      	it	lt
 801483c:	4613      	movlt	r3, r2
 801483e:	6033      	str	r3, [r6, #0]
 8014840:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014844:	4607      	mov	r7, r0
 8014846:	460c      	mov	r4, r1
 8014848:	b10a      	cbz	r2, 801484e <_printf_common+0x26>
 801484a:	3301      	adds	r3, #1
 801484c:	6033      	str	r3, [r6, #0]
 801484e:	6823      	ldr	r3, [r4, #0]
 8014850:	0699      	lsls	r1, r3, #26
 8014852:	bf42      	ittt	mi
 8014854:	6833      	ldrmi	r3, [r6, #0]
 8014856:	3302      	addmi	r3, #2
 8014858:	6033      	strmi	r3, [r6, #0]
 801485a:	6825      	ldr	r5, [r4, #0]
 801485c:	f015 0506 	ands.w	r5, r5, #6
 8014860:	d106      	bne.n	8014870 <_printf_common+0x48>
 8014862:	f104 0a19 	add.w	sl, r4, #25
 8014866:	68e3      	ldr	r3, [r4, #12]
 8014868:	6832      	ldr	r2, [r6, #0]
 801486a:	1a9b      	subs	r3, r3, r2
 801486c:	42ab      	cmp	r3, r5
 801486e:	dc26      	bgt.n	80148be <_printf_common+0x96>
 8014870:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014874:	1e13      	subs	r3, r2, #0
 8014876:	6822      	ldr	r2, [r4, #0]
 8014878:	bf18      	it	ne
 801487a:	2301      	movne	r3, #1
 801487c:	0692      	lsls	r2, r2, #26
 801487e:	d42b      	bmi.n	80148d8 <_printf_common+0xb0>
 8014880:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014884:	4649      	mov	r1, r9
 8014886:	4638      	mov	r0, r7
 8014888:	47c0      	blx	r8
 801488a:	3001      	adds	r0, #1
 801488c:	d01e      	beq.n	80148cc <_printf_common+0xa4>
 801488e:	6823      	ldr	r3, [r4, #0]
 8014890:	68e5      	ldr	r5, [r4, #12]
 8014892:	6832      	ldr	r2, [r6, #0]
 8014894:	f003 0306 	and.w	r3, r3, #6
 8014898:	2b04      	cmp	r3, #4
 801489a:	bf08      	it	eq
 801489c:	1aad      	subeq	r5, r5, r2
 801489e:	68a3      	ldr	r3, [r4, #8]
 80148a0:	6922      	ldr	r2, [r4, #16]
 80148a2:	bf0c      	ite	eq
 80148a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80148a8:	2500      	movne	r5, #0
 80148aa:	4293      	cmp	r3, r2
 80148ac:	bfc4      	itt	gt
 80148ae:	1a9b      	subgt	r3, r3, r2
 80148b0:	18ed      	addgt	r5, r5, r3
 80148b2:	2600      	movs	r6, #0
 80148b4:	341a      	adds	r4, #26
 80148b6:	42b5      	cmp	r5, r6
 80148b8:	d11a      	bne.n	80148f0 <_printf_common+0xc8>
 80148ba:	2000      	movs	r0, #0
 80148bc:	e008      	b.n	80148d0 <_printf_common+0xa8>
 80148be:	2301      	movs	r3, #1
 80148c0:	4652      	mov	r2, sl
 80148c2:	4649      	mov	r1, r9
 80148c4:	4638      	mov	r0, r7
 80148c6:	47c0      	blx	r8
 80148c8:	3001      	adds	r0, #1
 80148ca:	d103      	bne.n	80148d4 <_printf_common+0xac>
 80148cc:	f04f 30ff 	mov.w	r0, #4294967295
 80148d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148d4:	3501      	adds	r5, #1
 80148d6:	e7c6      	b.n	8014866 <_printf_common+0x3e>
 80148d8:	18e1      	adds	r1, r4, r3
 80148da:	1c5a      	adds	r2, r3, #1
 80148dc:	2030      	movs	r0, #48	; 0x30
 80148de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80148e2:	4422      	add	r2, r4
 80148e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80148e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80148ec:	3302      	adds	r3, #2
 80148ee:	e7c7      	b.n	8014880 <_printf_common+0x58>
 80148f0:	2301      	movs	r3, #1
 80148f2:	4622      	mov	r2, r4
 80148f4:	4649      	mov	r1, r9
 80148f6:	4638      	mov	r0, r7
 80148f8:	47c0      	blx	r8
 80148fa:	3001      	adds	r0, #1
 80148fc:	d0e6      	beq.n	80148cc <_printf_common+0xa4>
 80148fe:	3601      	adds	r6, #1
 8014900:	e7d9      	b.n	80148b6 <_printf_common+0x8e>
	...

08014904 <_printf_i>:
 8014904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014908:	7e0f      	ldrb	r7, [r1, #24]
 801490a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801490c:	2f78      	cmp	r7, #120	; 0x78
 801490e:	4691      	mov	r9, r2
 8014910:	4680      	mov	r8, r0
 8014912:	460c      	mov	r4, r1
 8014914:	469a      	mov	sl, r3
 8014916:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801491a:	d807      	bhi.n	801492c <_printf_i+0x28>
 801491c:	2f62      	cmp	r7, #98	; 0x62
 801491e:	d80a      	bhi.n	8014936 <_printf_i+0x32>
 8014920:	2f00      	cmp	r7, #0
 8014922:	f000 80d8 	beq.w	8014ad6 <_printf_i+0x1d2>
 8014926:	2f58      	cmp	r7, #88	; 0x58
 8014928:	f000 80a3 	beq.w	8014a72 <_printf_i+0x16e>
 801492c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014930:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014934:	e03a      	b.n	80149ac <_printf_i+0xa8>
 8014936:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801493a:	2b15      	cmp	r3, #21
 801493c:	d8f6      	bhi.n	801492c <_printf_i+0x28>
 801493e:	a101      	add	r1, pc, #4	; (adr r1, 8014944 <_printf_i+0x40>)
 8014940:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014944:	0801499d 	.word	0x0801499d
 8014948:	080149b1 	.word	0x080149b1
 801494c:	0801492d 	.word	0x0801492d
 8014950:	0801492d 	.word	0x0801492d
 8014954:	0801492d 	.word	0x0801492d
 8014958:	0801492d 	.word	0x0801492d
 801495c:	080149b1 	.word	0x080149b1
 8014960:	0801492d 	.word	0x0801492d
 8014964:	0801492d 	.word	0x0801492d
 8014968:	0801492d 	.word	0x0801492d
 801496c:	0801492d 	.word	0x0801492d
 8014970:	08014abd 	.word	0x08014abd
 8014974:	080149e1 	.word	0x080149e1
 8014978:	08014a9f 	.word	0x08014a9f
 801497c:	0801492d 	.word	0x0801492d
 8014980:	0801492d 	.word	0x0801492d
 8014984:	08014adf 	.word	0x08014adf
 8014988:	0801492d 	.word	0x0801492d
 801498c:	080149e1 	.word	0x080149e1
 8014990:	0801492d 	.word	0x0801492d
 8014994:	0801492d 	.word	0x0801492d
 8014998:	08014aa7 	.word	0x08014aa7
 801499c:	682b      	ldr	r3, [r5, #0]
 801499e:	1d1a      	adds	r2, r3, #4
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	602a      	str	r2, [r5, #0]
 80149a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80149a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80149ac:	2301      	movs	r3, #1
 80149ae:	e0a3      	b.n	8014af8 <_printf_i+0x1f4>
 80149b0:	6820      	ldr	r0, [r4, #0]
 80149b2:	6829      	ldr	r1, [r5, #0]
 80149b4:	0606      	lsls	r6, r0, #24
 80149b6:	f101 0304 	add.w	r3, r1, #4
 80149ba:	d50a      	bpl.n	80149d2 <_printf_i+0xce>
 80149bc:	680e      	ldr	r6, [r1, #0]
 80149be:	602b      	str	r3, [r5, #0]
 80149c0:	2e00      	cmp	r6, #0
 80149c2:	da03      	bge.n	80149cc <_printf_i+0xc8>
 80149c4:	232d      	movs	r3, #45	; 0x2d
 80149c6:	4276      	negs	r6, r6
 80149c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80149cc:	485e      	ldr	r0, [pc, #376]	; (8014b48 <_printf_i+0x244>)
 80149ce:	230a      	movs	r3, #10
 80149d0:	e019      	b.n	8014a06 <_printf_i+0x102>
 80149d2:	680e      	ldr	r6, [r1, #0]
 80149d4:	602b      	str	r3, [r5, #0]
 80149d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80149da:	bf18      	it	ne
 80149dc:	b236      	sxthne	r6, r6
 80149de:	e7ef      	b.n	80149c0 <_printf_i+0xbc>
 80149e0:	682b      	ldr	r3, [r5, #0]
 80149e2:	6820      	ldr	r0, [r4, #0]
 80149e4:	1d19      	adds	r1, r3, #4
 80149e6:	6029      	str	r1, [r5, #0]
 80149e8:	0601      	lsls	r1, r0, #24
 80149ea:	d501      	bpl.n	80149f0 <_printf_i+0xec>
 80149ec:	681e      	ldr	r6, [r3, #0]
 80149ee:	e002      	b.n	80149f6 <_printf_i+0xf2>
 80149f0:	0646      	lsls	r6, r0, #25
 80149f2:	d5fb      	bpl.n	80149ec <_printf_i+0xe8>
 80149f4:	881e      	ldrh	r6, [r3, #0]
 80149f6:	4854      	ldr	r0, [pc, #336]	; (8014b48 <_printf_i+0x244>)
 80149f8:	2f6f      	cmp	r7, #111	; 0x6f
 80149fa:	bf0c      	ite	eq
 80149fc:	2308      	moveq	r3, #8
 80149fe:	230a      	movne	r3, #10
 8014a00:	2100      	movs	r1, #0
 8014a02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014a06:	6865      	ldr	r5, [r4, #4]
 8014a08:	60a5      	str	r5, [r4, #8]
 8014a0a:	2d00      	cmp	r5, #0
 8014a0c:	bfa2      	ittt	ge
 8014a0e:	6821      	ldrge	r1, [r4, #0]
 8014a10:	f021 0104 	bicge.w	r1, r1, #4
 8014a14:	6021      	strge	r1, [r4, #0]
 8014a16:	b90e      	cbnz	r6, 8014a1c <_printf_i+0x118>
 8014a18:	2d00      	cmp	r5, #0
 8014a1a:	d04d      	beq.n	8014ab8 <_printf_i+0x1b4>
 8014a1c:	4615      	mov	r5, r2
 8014a1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8014a22:	fb03 6711 	mls	r7, r3, r1, r6
 8014a26:	5dc7      	ldrb	r7, [r0, r7]
 8014a28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014a2c:	4637      	mov	r7, r6
 8014a2e:	42bb      	cmp	r3, r7
 8014a30:	460e      	mov	r6, r1
 8014a32:	d9f4      	bls.n	8014a1e <_printf_i+0x11a>
 8014a34:	2b08      	cmp	r3, #8
 8014a36:	d10b      	bne.n	8014a50 <_printf_i+0x14c>
 8014a38:	6823      	ldr	r3, [r4, #0]
 8014a3a:	07de      	lsls	r6, r3, #31
 8014a3c:	d508      	bpl.n	8014a50 <_printf_i+0x14c>
 8014a3e:	6923      	ldr	r3, [r4, #16]
 8014a40:	6861      	ldr	r1, [r4, #4]
 8014a42:	4299      	cmp	r1, r3
 8014a44:	bfde      	ittt	le
 8014a46:	2330      	movle	r3, #48	; 0x30
 8014a48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014a4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014a50:	1b52      	subs	r2, r2, r5
 8014a52:	6122      	str	r2, [r4, #16]
 8014a54:	f8cd a000 	str.w	sl, [sp]
 8014a58:	464b      	mov	r3, r9
 8014a5a:	aa03      	add	r2, sp, #12
 8014a5c:	4621      	mov	r1, r4
 8014a5e:	4640      	mov	r0, r8
 8014a60:	f7ff fee2 	bl	8014828 <_printf_common>
 8014a64:	3001      	adds	r0, #1
 8014a66:	d14c      	bne.n	8014b02 <_printf_i+0x1fe>
 8014a68:	f04f 30ff 	mov.w	r0, #4294967295
 8014a6c:	b004      	add	sp, #16
 8014a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a72:	4835      	ldr	r0, [pc, #212]	; (8014b48 <_printf_i+0x244>)
 8014a74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014a78:	6829      	ldr	r1, [r5, #0]
 8014a7a:	6823      	ldr	r3, [r4, #0]
 8014a7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8014a80:	6029      	str	r1, [r5, #0]
 8014a82:	061d      	lsls	r5, r3, #24
 8014a84:	d514      	bpl.n	8014ab0 <_printf_i+0x1ac>
 8014a86:	07df      	lsls	r7, r3, #31
 8014a88:	bf44      	itt	mi
 8014a8a:	f043 0320 	orrmi.w	r3, r3, #32
 8014a8e:	6023      	strmi	r3, [r4, #0]
 8014a90:	b91e      	cbnz	r6, 8014a9a <_printf_i+0x196>
 8014a92:	6823      	ldr	r3, [r4, #0]
 8014a94:	f023 0320 	bic.w	r3, r3, #32
 8014a98:	6023      	str	r3, [r4, #0]
 8014a9a:	2310      	movs	r3, #16
 8014a9c:	e7b0      	b.n	8014a00 <_printf_i+0xfc>
 8014a9e:	6823      	ldr	r3, [r4, #0]
 8014aa0:	f043 0320 	orr.w	r3, r3, #32
 8014aa4:	6023      	str	r3, [r4, #0]
 8014aa6:	2378      	movs	r3, #120	; 0x78
 8014aa8:	4828      	ldr	r0, [pc, #160]	; (8014b4c <_printf_i+0x248>)
 8014aaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014aae:	e7e3      	b.n	8014a78 <_printf_i+0x174>
 8014ab0:	0659      	lsls	r1, r3, #25
 8014ab2:	bf48      	it	mi
 8014ab4:	b2b6      	uxthmi	r6, r6
 8014ab6:	e7e6      	b.n	8014a86 <_printf_i+0x182>
 8014ab8:	4615      	mov	r5, r2
 8014aba:	e7bb      	b.n	8014a34 <_printf_i+0x130>
 8014abc:	682b      	ldr	r3, [r5, #0]
 8014abe:	6826      	ldr	r6, [r4, #0]
 8014ac0:	6961      	ldr	r1, [r4, #20]
 8014ac2:	1d18      	adds	r0, r3, #4
 8014ac4:	6028      	str	r0, [r5, #0]
 8014ac6:	0635      	lsls	r5, r6, #24
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	d501      	bpl.n	8014ad0 <_printf_i+0x1cc>
 8014acc:	6019      	str	r1, [r3, #0]
 8014ace:	e002      	b.n	8014ad6 <_printf_i+0x1d2>
 8014ad0:	0670      	lsls	r0, r6, #25
 8014ad2:	d5fb      	bpl.n	8014acc <_printf_i+0x1c8>
 8014ad4:	8019      	strh	r1, [r3, #0]
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	6123      	str	r3, [r4, #16]
 8014ada:	4615      	mov	r5, r2
 8014adc:	e7ba      	b.n	8014a54 <_printf_i+0x150>
 8014ade:	682b      	ldr	r3, [r5, #0]
 8014ae0:	1d1a      	adds	r2, r3, #4
 8014ae2:	602a      	str	r2, [r5, #0]
 8014ae4:	681d      	ldr	r5, [r3, #0]
 8014ae6:	6862      	ldr	r2, [r4, #4]
 8014ae8:	2100      	movs	r1, #0
 8014aea:	4628      	mov	r0, r5
 8014aec:	f7eb fc10 	bl	8000310 <memchr>
 8014af0:	b108      	cbz	r0, 8014af6 <_printf_i+0x1f2>
 8014af2:	1b40      	subs	r0, r0, r5
 8014af4:	6060      	str	r0, [r4, #4]
 8014af6:	6863      	ldr	r3, [r4, #4]
 8014af8:	6123      	str	r3, [r4, #16]
 8014afa:	2300      	movs	r3, #0
 8014afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b00:	e7a8      	b.n	8014a54 <_printf_i+0x150>
 8014b02:	6923      	ldr	r3, [r4, #16]
 8014b04:	462a      	mov	r2, r5
 8014b06:	4649      	mov	r1, r9
 8014b08:	4640      	mov	r0, r8
 8014b0a:	47d0      	blx	sl
 8014b0c:	3001      	adds	r0, #1
 8014b0e:	d0ab      	beq.n	8014a68 <_printf_i+0x164>
 8014b10:	6823      	ldr	r3, [r4, #0]
 8014b12:	079b      	lsls	r3, r3, #30
 8014b14:	d413      	bmi.n	8014b3e <_printf_i+0x23a>
 8014b16:	68e0      	ldr	r0, [r4, #12]
 8014b18:	9b03      	ldr	r3, [sp, #12]
 8014b1a:	4298      	cmp	r0, r3
 8014b1c:	bfb8      	it	lt
 8014b1e:	4618      	movlt	r0, r3
 8014b20:	e7a4      	b.n	8014a6c <_printf_i+0x168>
 8014b22:	2301      	movs	r3, #1
 8014b24:	4632      	mov	r2, r6
 8014b26:	4649      	mov	r1, r9
 8014b28:	4640      	mov	r0, r8
 8014b2a:	47d0      	blx	sl
 8014b2c:	3001      	adds	r0, #1
 8014b2e:	d09b      	beq.n	8014a68 <_printf_i+0x164>
 8014b30:	3501      	adds	r5, #1
 8014b32:	68e3      	ldr	r3, [r4, #12]
 8014b34:	9903      	ldr	r1, [sp, #12]
 8014b36:	1a5b      	subs	r3, r3, r1
 8014b38:	42ab      	cmp	r3, r5
 8014b3a:	dcf2      	bgt.n	8014b22 <_printf_i+0x21e>
 8014b3c:	e7eb      	b.n	8014b16 <_printf_i+0x212>
 8014b3e:	2500      	movs	r5, #0
 8014b40:	f104 0619 	add.w	r6, r4, #25
 8014b44:	e7f5      	b.n	8014b32 <_printf_i+0x22e>
 8014b46:	bf00      	nop
 8014b48:	08018d81 	.word	0x08018d81
 8014b4c:	08018d92 	.word	0x08018d92

08014b50 <_sbrk_r>:
 8014b50:	b538      	push	{r3, r4, r5, lr}
 8014b52:	4d06      	ldr	r5, [pc, #24]	; (8014b6c <_sbrk_r+0x1c>)
 8014b54:	2300      	movs	r3, #0
 8014b56:	4604      	mov	r4, r0
 8014b58:	4608      	mov	r0, r1
 8014b5a:	602b      	str	r3, [r5, #0]
 8014b5c:	f7ec fad8 	bl	8001110 <_sbrk>
 8014b60:	1c43      	adds	r3, r0, #1
 8014b62:	d102      	bne.n	8014b6a <_sbrk_r+0x1a>
 8014b64:	682b      	ldr	r3, [r5, #0]
 8014b66:	b103      	cbz	r3, 8014b6a <_sbrk_r+0x1a>
 8014b68:	6023      	str	r3, [r4, #0]
 8014b6a:	bd38      	pop	{r3, r4, r5, pc}
 8014b6c:	24003734 	.word	0x24003734

08014b70 <__sread>:
 8014b70:	b510      	push	{r4, lr}
 8014b72:	460c      	mov	r4, r1
 8014b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b78:	f000 fa6e 	bl	8015058 <_read_r>
 8014b7c:	2800      	cmp	r0, #0
 8014b7e:	bfab      	itete	ge
 8014b80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014b82:	89a3      	ldrhlt	r3, [r4, #12]
 8014b84:	181b      	addge	r3, r3, r0
 8014b86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014b8a:	bfac      	ite	ge
 8014b8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8014b8e:	81a3      	strhlt	r3, [r4, #12]
 8014b90:	bd10      	pop	{r4, pc}

08014b92 <__swrite>:
 8014b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b96:	461f      	mov	r7, r3
 8014b98:	898b      	ldrh	r3, [r1, #12]
 8014b9a:	05db      	lsls	r3, r3, #23
 8014b9c:	4605      	mov	r5, r0
 8014b9e:	460c      	mov	r4, r1
 8014ba0:	4616      	mov	r6, r2
 8014ba2:	d505      	bpl.n	8014bb0 <__swrite+0x1e>
 8014ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ba8:	2302      	movs	r3, #2
 8014baa:	2200      	movs	r2, #0
 8014bac:	f000 f9d0 	bl	8014f50 <_lseek_r>
 8014bb0:	89a3      	ldrh	r3, [r4, #12]
 8014bb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014bb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014bba:	81a3      	strh	r3, [r4, #12]
 8014bbc:	4632      	mov	r2, r6
 8014bbe:	463b      	mov	r3, r7
 8014bc0:	4628      	mov	r0, r5
 8014bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014bc6:	f000 b869 	b.w	8014c9c <_write_r>

08014bca <__sseek>:
 8014bca:	b510      	push	{r4, lr}
 8014bcc:	460c      	mov	r4, r1
 8014bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bd2:	f000 f9bd 	bl	8014f50 <_lseek_r>
 8014bd6:	1c43      	adds	r3, r0, #1
 8014bd8:	89a3      	ldrh	r3, [r4, #12]
 8014bda:	bf15      	itete	ne
 8014bdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8014bde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014be2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014be6:	81a3      	strheq	r3, [r4, #12]
 8014be8:	bf18      	it	ne
 8014bea:	81a3      	strhne	r3, [r4, #12]
 8014bec:	bd10      	pop	{r4, pc}

08014bee <__sclose>:
 8014bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bf2:	f000 b8db 	b.w	8014dac <_close_r>
	...

08014bf8 <__swbuf_r>:
 8014bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bfa:	460e      	mov	r6, r1
 8014bfc:	4614      	mov	r4, r2
 8014bfe:	4605      	mov	r5, r0
 8014c00:	b118      	cbz	r0, 8014c0a <__swbuf_r+0x12>
 8014c02:	6983      	ldr	r3, [r0, #24]
 8014c04:	b90b      	cbnz	r3, 8014c0a <__swbuf_r+0x12>
 8014c06:	f7ff fb1b 	bl	8014240 <__sinit>
 8014c0a:	4b21      	ldr	r3, [pc, #132]	; (8014c90 <__swbuf_r+0x98>)
 8014c0c:	429c      	cmp	r4, r3
 8014c0e:	d12b      	bne.n	8014c68 <__swbuf_r+0x70>
 8014c10:	686c      	ldr	r4, [r5, #4]
 8014c12:	69a3      	ldr	r3, [r4, #24]
 8014c14:	60a3      	str	r3, [r4, #8]
 8014c16:	89a3      	ldrh	r3, [r4, #12]
 8014c18:	071a      	lsls	r2, r3, #28
 8014c1a:	d52f      	bpl.n	8014c7c <__swbuf_r+0x84>
 8014c1c:	6923      	ldr	r3, [r4, #16]
 8014c1e:	b36b      	cbz	r3, 8014c7c <__swbuf_r+0x84>
 8014c20:	6923      	ldr	r3, [r4, #16]
 8014c22:	6820      	ldr	r0, [r4, #0]
 8014c24:	1ac0      	subs	r0, r0, r3
 8014c26:	6963      	ldr	r3, [r4, #20]
 8014c28:	b2f6      	uxtb	r6, r6
 8014c2a:	4283      	cmp	r3, r0
 8014c2c:	4637      	mov	r7, r6
 8014c2e:	dc04      	bgt.n	8014c3a <__swbuf_r+0x42>
 8014c30:	4621      	mov	r1, r4
 8014c32:	4628      	mov	r0, r5
 8014c34:	f000 f950 	bl	8014ed8 <_fflush_r>
 8014c38:	bb30      	cbnz	r0, 8014c88 <__swbuf_r+0x90>
 8014c3a:	68a3      	ldr	r3, [r4, #8]
 8014c3c:	3b01      	subs	r3, #1
 8014c3e:	60a3      	str	r3, [r4, #8]
 8014c40:	6823      	ldr	r3, [r4, #0]
 8014c42:	1c5a      	adds	r2, r3, #1
 8014c44:	6022      	str	r2, [r4, #0]
 8014c46:	701e      	strb	r6, [r3, #0]
 8014c48:	6963      	ldr	r3, [r4, #20]
 8014c4a:	3001      	adds	r0, #1
 8014c4c:	4283      	cmp	r3, r0
 8014c4e:	d004      	beq.n	8014c5a <__swbuf_r+0x62>
 8014c50:	89a3      	ldrh	r3, [r4, #12]
 8014c52:	07db      	lsls	r3, r3, #31
 8014c54:	d506      	bpl.n	8014c64 <__swbuf_r+0x6c>
 8014c56:	2e0a      	cmp	r6, #10
 8014c58:	d104      	bne.n	8014c64 <__swbuf_r+0x6c>
 8014c5a:	4621      	mov	r1, r4
 8014c5c:	4628      	mov	r0, r5
 8014c5e:	f000 f93b 	bl	8014ed8 <_fflush_r>
 8014c62:	b988      	cbnz	r0, 8014c88 <__swbuf_r+0x90>
 8014c64:	4638      	mov	r0, r7
 8014c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c68:	4b0a      	ldr	r3, [pc, #40]	; (8014c94 <__swbuf_r+0x9c>)
 8014c6a:	429c      	cmp	r4, r3
 8014c6c:	d101      	bne.n	8014c72 <__swbuf_r+0x7a>
 8014c6e:	68ac      	ldr	r4, [r5, #8]
 8014c70:	e7cf      	b.n	8014c12 <__swbuf_r+0x1a>
 8014c72:	4b09      	ldr	r3, [pc, #36]	; (8014c98 <__swbuf_r+0xa0>)
 8014c74:	429c      	cmp	r4, r3
 8014c76:	bf08      	it	eq
 8014c78:	68ec      	ldreq	r4, [r5, #12]
 8014c7a:	e7ca      	b.n	8014c12 <__swbuf_r+0x1a>
 8014c7c:	4621      	mov	r1, r4
 8014c7e:	4628      	mov	r0, r5
 8014c80:	f000 f81e 	bl	8014cc0 <__swsetup_r>
 8014c84:	2800      	cmp	r0, #0
 8014c86:	d0cb      	beq.n	8014c20 <__swbuf_r+0x28>
 8014c88:	f04f 37ff 	mov.w	r7, #4294967295
 8014c8c:	e7ea      	b.n	8014c64 <__swbuf_r+0x6c>
 8014c8e:	bf00      	nop
 8014c90:	08018d30 	.word	0x08018d30
 8014c94:	08018d50 	.word	0x08018d50
 8014c98:	08018d10 	.word	0x08018d10

08014c9c <_write_r>:
 8014c9c:	b538      	push	{r3, r4, r5, lr}
 8014c9e:	4d07      	ldr	r5, [pc, #28]	; (8014cbc <_write_r+0x20>)
 8014ca0:	4604      	mov	r4, r0
 8014ca2:	4608      	mov	r0, r1
 8014ca4:	4611      	mov	r1, r2
 8014ca6:	2200      	movs	r2, #0
 8014ca8:	602a      	str	r2, [r5, #0]
 8014caa:	461a      	mov	r2, r3
 8014cac:	f7ec f9df 	bl	800106e <_write>
 8014cb0:	1c43      	adds	r3, r0, #1
 8014cb2:	d102      	bne.n	8014cba <_write_r+0x1e>
 8014cb4:	682b      	ldr	r3, [r5, #0]
 8014cb6:	b103      	cbz	r3, 8014cba <_write_r+0x1e>
 8014cb8:	6023      	str	r3, [r4, #0]
 8014cba:	bd38      	pop	{r3, r4, r5, pc}
 8014cbc:	24003734 	.word	0x24003734

08014cc0 <__swsetup_r>:
 8014cc0:	4b32      	ldr	r3, [pc, #200]	; (8014d8c <__swsetup_r+0xcc>)
 8014cc2:	b570      	push	{r4, r5, r6, lr}
 8014cc4:	681d      	ldr	r5, [r3, #0]
 8014cc6:	4606      	mov	r6, r0
 8014cc8:	460c      	mov	r4, r1
 8014cca:	b125      	cbz	r5, 8014cd6 <__swsetup_r+0x16>
 8014ccc:	69ab      	ldr	r3, [r5, #24]
 8014cce:	b913      	cbnz	r3, 8014cd6 <__swsetup_r+0x16>
 8014cd0:	4628      	mov	r0, r5
 8014cd2:	f7ff fab5 	bl	8014240 <__sinit>
 8014cd6:	4b2e      	ldr	r3, [pc, #184]	; (8014d90 <__swsetup_r+0xd0>)
 8014cd8:	429c      	cmp	r4, r3
 8014cda:	d10f      	bne.n	8014cfc <__swsetup_r+0x3c>
 8014cdc:	686c      	ldr	r4, [r5, #4]
 8014cde:	89a3      	ldrh	r3, [r4, #12]
 8014ce0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014ce4:	0719      	lsls	r1, r3, #28
 8014ce6:	d42c      	bmi.n	8014d42 <__swsetup_r+0x82>
 8014ce8:	06dd      	lsls	r5, r3, #27
 8014cea:	d411      	bmi.n	8014d10 <__swsetup_r+0x50>
 8014cec:	2309      	movs	r3, #9
 8014cee:	6033      	str	r3, [r6, #0]
 8014cf0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014cf4:	81a3      	strh	r3, [r4, #12]
 8014cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8014cfa:	e03e      	b.n	8014d7a <__swsetup_r+0xba>
 8014cfc:	4b25      	ldr	r3, [pc, #148]	; (8014d94 <__swsetup_r+0xd4>)
 8014cfe:	429c      	cmp	r4, r3
 8014d00:	d101      	bne.n	8014d06 <__swsetup_r+0x46>
 8014d02:	68ac      	ldr	r4, [r5, #8]
 8014d04:	e7eb      	b.n	8014cde <__swsetup_r+0x1e>
 8014d06:	4b24      	ldr	r3, [pc, #144]	; (8014d98 <__swsetup_r+0xd8>)
 8014d08:	429c      	cmp	r4, r3
 8014d0a:	bf08      	it	eq
 8014d0c:	68ec      	ldreq	r4, [r5, #12]
 8014d0e:	e7e6      	b.n	8014cde <__swsetup_r+0x1e>
 8014d10:	0758      	lsls	r0, r3, #29
 8014d12:	d512      	bpl.n	8014d3a <__swsetup_r+0x7a>
 8014d14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014d16:	b141      	cbz	r1, 8014d2a <__swsetup_r+0x6a>
 8014d18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014d1c:	4299      	cmp	r1, r3
 8014d1e:	d002      	beq.n	8014d26 <__swsetup_r+0x66>
 8014d20:	4630      	mov	r0, r6
 8014d22:	f7ff fb47 	bl	80143b4 <_free_r>
 8014d26:	2300      	movs	r3, #0
 8014d28:	6363      	str	r3, [r4, #52]	; 0x34
 8014d2a:	89a3      	ldrh	r3, [r4, #12]
 8014d2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014d30:	81a3      	strh	r3, [r4, #12]
 8014d32:	2300      	movs	r3, #0
 8014d34:	6063      	str	r3, [r4, #4]
 8014d36:	6923      	ldr	r3, [r4, #16]
 8014d38:	6023      	str	r3, [r4, #0]
 8014d3a:	89a3      	ldrh	r3, [r4, #12]
 8014d3c:	f043 0308 	orr.w	r3, r3, #8
 8014d40:	81a3      	strh	r3, [r4, #12]
 8014d42:	6923      	ldr	r3, [r4, #16]
 8014d44:	b94b      	cbnz	r3, 8014d5a <__swsetup_r+0x9a>
 8014d46:	89a3      	ldrh	r3, [r4, #12]
 8014d48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014d50:	d003      	beq.n	8014d5a <__swsetup_r+0x9a>
 8014d52:	4621      	mov	r1, r4
 8014d54:	4630      	mov	r0, r6
 8014d56:	f000 f933 	bl	8014fc0 <__smakebuf_r>
 8014d5a:	89a0      	ldrh	r0, [r4, #12]
 8014d5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014d60:	f010 0301 	ands.w	r3, r0, #1
 8014d64:	d00a      	beq.n	8014d7c <__swsetup_r+0xbc>
 8014d66:	2300      	movs	r3, #0
 8014d68:	60a3      	str	r3, [r4, #8]
 8014d6a:	6963      	ldr	r3, [r4, #20]
 8014d6c:	425b      	negs	r3, r3
 8014d6e:	61a3      	str	r3, [r4, #24]
 8014d70:	6923      	ldr	r3, [r4, #16]
 8014d72:	b943      	cbnz	r3, 8014d86 <__swsetup_r+0xc6>
 8014d74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014d78:	d1ba      	bne.n	8014cf0 <__swsetup_r+0x30>
 8014d7a:	bd70      	pop	{r4, r5, r6, pc}
 8014d7c:	0781      	lsls	r1, r0, #30
 8014d7e:	bf58      	it	pl
 8014d80:	6963      	ldrpl	r3, [r4, #20]
 8014d82:	60a3      	str	r3, [r4, #8]
 8014d84:	e7f4      	b.n	8014d70 <__swsetup_r+0xb0>
 8014d86:	2000      	movs	r0, #0
 8014d88:	e7f7      	b.n	8014d7a <__swsetup_r+0xba>
 8014d8a:	bf00      	nop
 8014d8c:	24000030 	.word	0x24000030
 8014d90:	08018d30 	.word	0x08018d30
 8014d94:	08018d50 	.word	0x08018d50
 8014d98:	08018d10 	.word	0x08018d10

08014d9c <abort>:
 8014d9c:	b508      	push	{r3, lr}
 8014d9e:	2006      	movs	r0, #6
 8014da0:	f000 f994 	bl	80150cc <raise>
 8014da4:	2001      	movs	r0, #1
 8014da6:	f7ec f93b 	bl	8001020 <_exit>
	...

08014dac <_close_r>:
 8014dac:	b538      	push	{r3, r4, r5, lr}
 8014dae:	4d06      	ldr	r5, [pc, #24]	; (8014dc8 <_close_r+0x1c>)
 8014db0:	2300      	movs	r3, #0
 8014db2:	4604      	mov	r4, r0
 8014db4:	4608      	mov	r0, r1
 8014db6:	602b      	str	r3, [r5, #0]
 8014db8:	f7ec f975 	bl	80010a6 <_close>
 8014dbc:	1c43      	adds	r3, r0, #1
 8014dbe:	d102      	bne.n	8014dc6 <_close_r+0x1a>
 8014dc0:	682b      	ldr	r3, [r5, #0]
 8014dc2:	b103      	cbz	r3, 8014dc6 <_close_r+0x1a>
 8014dc4:	6023      	str	r3, [r4, #0]
 8014dc6:	bd38      	pop	{r3, r4, r5, pc}
 8014dc8:	24003734 	.word	0x24003734

08014dcc <__sflush_r>:
 8014dcc:	898a      	ldrh	r2, [r1, #12]
 8014dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dd2:	4605      	mov	r5, r0
 8014dd4:	0710      	lsls	r0, r2, #28
 8014dd6:	460c      	mov	r4, r1
 8014dd8:	d458      	bmi.n	8014e8c <__sflush_r+0xc0>
 8014dda:	684b      	ldr	r3, [r1, #4]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	dc05      	bgt.n	8014dec <__sflush_r+0x20>
 8014de0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	dc02      	bgt.n	8014dec <__sflush_r+0x20>
 8014de6:	2000      	movs	r0, #0
 8014de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014dee:	2e00      	cmp	r6, #0
 8014df0:	d0f9      	beq.n	8014de6 <__sflush_r+0x1a>
 8014df2:	2300      	movs	r3, #0
 8014df4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014df8:	682f      	ldr	r7, [r5, #0]
 8014dfa:	602b      	str	r3, [r5, #0]
 8014dfc:	d032      	beq.n	8014e64 <__sflush_r+0x98>
 8014dfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014e00:	89a3      	ldrh	r3, [r4, #12]
 8014e02:	075a      	lsls	r2, r3, #29
 8014e04:	d505      	bpl.n	8014e12 <__sflush_r+0x46>
 8014e06:	6863      	ldr	r3, [r4, #4]
 8014e08:	1ac0      	subs	r0, r0, r3
 8014e0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014e0c:	b10b      	cbz	r3, 8014e12 <__sflush_r+0x46>
 8014e0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014e10:	1ac0      	subs	r0, r0, r3
 8014e12:	2300      	movs	r3, #0
 8014e14:	4602      	mov	r2, r0
 8014e16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014e18:	6a21      	ldr	r1, [r4, #32]
 8014e1a:	4628      	mov	r0, r5
 8014e1c:	47b0      	blx	r6
 8014e1e:	1c43      	adds	r3, r0, #1
 8014e20:	89a3      	ldrh	r3, [r4, #12]
 8014e22:	d106      	bne.n	8014e32 <__sflush_r+0x66>
 8014e24:	6829      	ldr	r1, [r5, #0]
 8014e26:	291d      	cmp	r1, #29
 8014e28:	d82c      	bhi.n	8014e84 <__sflush_r+0xb8>
 8014e2a:	4a2a      	ldr	r2, [pc, #168]	; (8014ed4 <__sflush_r+0x108>)
 8014e2c:	40ca      	lsrs	r2, r1
 8014e2e:	07d6      	lsls	r6, r2, #31
 8014e30:	d528      	bpl.n	8014e84 <__sflush_r+0xb8>
 8014e32:	2200      	movs	r2, #0
 8014e34:	6062      	str	r2, [r4, #4]
 8014e36:	04d9      	lsls	r1, r3, #19
 8014e38:	6922      	ldr	r2, [r4, #16]
 8014e3a:	6022      	str	r2, [r4, #0]
 8014e3c:	d504      	bpl.n	8014e48 <__sflush_r+0x7c>
 8014e3e:	1c42      	adds	r2, r0, #1
 8014e40:	d101      	bne.n	8014e46 <__sflush_r+0x7a>
 8014e42:	682b      	ldr	r3, [r5, #0]
 8014e44:	b903      	cbnz	r3, 8014e48 <__sflush_r+0x7c>
 8014e46:	6560      	str	r0, [r4, #84]	; 0x54
 8014e48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014e4a:	602f      	str	r7, [r5, #0]
 8014e4c:	2900      	cmp	r1, #0
 8014e4e:	d0ca      	beq.n	8014de6 <__sflush_r+0x1a>
 8014e50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014e54:	4299      	cmp	r1, r3
 8014e56:	d002      	beq.n	8014e5e <__sflush_r+0x92>
 8014e58:	4628      	mov	r0, r5
 8014e5a:	f7ff faab 	bl	80143b4 <_free_r>
 8014e5e:	2000      	movs	r0, #0
 8014e60:	6360      	str	r0, [r4, #52]	; 0x34
 8014e62:	e7c1      	b.n	8014de8 <__sflush_r+0x1c>
 8014e64:	6a21      	ldr	r1, [r4, #32]
 8014e66:	2301      	movs	r3, #1
 8014e68:	4628      	mov	r0, r5
 8014e6a:	47b0      	blx	r6
 8014e6c:	1c41      	adds	r1, r0, #1
 8014e6e:	d1c7      	bne.n	8014e00 <__sflush_r+0x34>
 8014e70:	682b      	ldr	r3, [r5, #0]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d0c4      	beq.n	8014e00 <__sflush_r+0x34>
 8014e76:	2b1d      	cmp	r3, #29
 8014e78:	d001      	beq.n	8014e7e <__sflush_r+0xb2>
 8014e7a:	2b16      	cmp	r3, #22
 8014e7c:	d101      	bne.n	8014e82 <__sflush_r+0xb6>
 8014e7e:	602f      	str	r7, [r5, #0]
 8014e80:	e7b1      	b.n	8014de6 <__sflush_r+0x1a>
 8014e82:	89a3      	ldrh	r3, [r4, #12]
 8014e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e88:	81a3      	strh	r3, [r4, #12]
 8014e8a:	e7ad      	b.n	8014de8 <__sflush_r+0x1c>
 8014e8c:	690f      	ldr	r7, [r1, #16]
 8014e8e:	2f00      	cmp	r7, #0
 8014e90:	d0a9      	beq.n	8014de6 <__sflush_r+0x1a>
 8014e92:	0793      	lsls	r3, r2, #30
 8014e94:	680e      	ldr	r6, [r1, #0]
 8014e96:	bf08      	it	eq
 8014e98:	694b      	ldreq	r3, [r1, #20]
 8014e9a:	600f      	str	r7, [r1, #0]
 8014e9c:	bf18      	it	ne
 8014e9e:	2300      	movne	r3, #0
 8014ea0:	eba6 0807 	sub.w	r8, r6, r7
 8014ea4:	608b      	str	r3, [r1, #8]
 8014ea6:	f1b8 0f00 	cmp.w	r8, #0
 8014eaa:	dd9c      	ble.n	8014de6 <__sflush_r+0x1a>
 8014eac:	6a21      	ldr	r1, [r4, #32]
 8014eae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014eb0:	4643      	mov	r3, r8
 8014eb2:	463a      	mov	r2, r7
 8014eb4:	4628      	mov	r0, r5
 8014eb6:	47b0      	blx	r6
 8014eb8:	2800      	cmp	r0, #0
 8014eba:	dc06      	bgt.n	8014eca <__sflush_r+0xfe>
 8014ebc:	89a3      	ldrh	r3, [r4, #12]
 8014ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ec2:	81a3      	strh	r3, [r4, #12]
 8014ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8014ec8:	e78e      	b.n	8014de8 <__sflush_r+0x1c>
 8014eca:	4407      	add	r7, r0
 8014ecc:	eba8 0800 	sub.w	r8, r8, r0
 8014ed0:	e7e9      	b.n	8014ea6 <__sflush_r+0xda>
 8014ed2:	bf00      	nop
 8014ed4:	20400001 	.word	0x20400001

08014ed8 <_fflush_r>:
 8014ed8:	b538      	push	{r3, r4, r5, lr}
 8014eda:	690b      	ldr	r3, [r1, #16]
 8014edc:	4605      	mov	r5, r0
 8014ede:	460c      	mov	r4, r1
 8014ee0:	b913      	cbnz	r3, 8014ee8 <_fflush_r+0x10>
 8014ee2:	2500      	movs	r5, #0
 8014ee4:	4628      	mov	r0, r5
 8014ee6:	bd38      	pop	{r3, r4, r5, pc}
 8014ee8:	b118      	cbz	r0, 8014ef2 <_fflush_r+0x1a>
 8014eea:	6983      	ldr	r3, [r0, #24]
 8014eec:	b90b      	cbnz	r3, 8014ef2 <_fflush_r+0x1a>
 8014eee:	f7ff f9a7 	bl	8014240 <__sinit>
 8014ef2:	4b14      	ldr	r3, [pc, #80]	; (8014f44 <_fflush_r+0x6c>)
 8014ef4:	429c      	cmp	r4, r3
 8014ef6:	d11b      	bne.n	8014f30 <_fflush_r+0x58>
 8014ef8:	686c      	ldr	r4, [r5, #4]
 8014efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d0ef      	beq.n	8014ee2 <_fflush_r+0xa>
 8014f02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014f04:	07d0      	lsls	r0, r2, #31
 8014f06:	d404      	bmi.n	8014f12 <_fflush_r+0x3a>
 8014f08:	0599      	lsls	r1, r3, #22
 8014f0a:	d402      	bmi.n	8014f12 <_fflush_r+0x3a>
 8014f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f0e:	f7ff fa47 	bl	80143a0 <__retarget_lock_acquire_recursive>
 8014f12:	4628      	mov	r0, r5
 8014f14:	4621      	mov	r1, r4
 8014f16:	f7ff ff59 	bl	8014dcc <__sflush_r>
 8014f1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014f1c:	07da      	lsls	r2, r3, #31
 8014f1e:	4605      	mov	r5, r0
 8014f20:	d4e0      	bmi.n	8014ee4 <_fflush_r+0xc>
 8014f22:	89a3      	ldrh	r3, [r4, #12]
 8014f24:	059b      	lsls	r3, r3, #22
 8014f26:	d4dd      	bmi.n	8014ee4 <_fflush_r+0xc>
 8014f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f2a:	f7ff fa3a 	bl	80143a2 <__retarget_lock_release_recursive>
 8014f2e:	e7d9      	b.n	8014ee4 <_fflush_r+0xc>
 8014f30:	4b05      	ldr	r3, [pc, #20]	; (8014f48 <_fflush_r+0x70>)
 8014f32:	429c      	cmp	r4, r3
 8014f34:	d101      	bne.n	8014f3a <_fflush_r+0x62>
 8014f36:	68ac      	ldr	r4, [r5, #8]
 8014f38:	e7df      	b.n	8014efa <_fflush_r+0x22>
 8014f3a:	4b04      	ldr	r3, [pc, #16]	; (8014f4c <_fflush_r+0x74>)
 8014f3c:	429c      	cmp	r4, r3
 8014f3e:	bf08      	it	eq
 8014f40:	68ec      	ldreq	r4, [r5, #12]
 8014f42:	e7da      	b.n	8014efa <_fflush_r+0x22>
 8014f44:	08018d30 	.word	0x08018d30
 8014f48:	08018d50 	.word	0x08018d50
 8014f4c:	08018d10 	.word	0x08018d10

08014f50 <_lseek_r>:
 8014f50:	b538      	push	{r3, r4, r5, lr}
 8014f52:	4d07      	ldr	r5, [pc, #28]	; (8014f70 <_lseek_r+0x20>)
 8014f54:	4604      	mov	r4, r0
 8014f56:	4608      	mov	r0, r1
 8014f58:	4611      	mov	r1, r2
 8014f5a:	2200      	movs	r2, #0
 8014f5c:	602a      	str	r2, [r5, #0]
 8014f5e:	461a      	mov	r2, r3
 8014f60:	f7ec f8c8 	bl	80010f4 <_lseek>
 8014f64:	1c43      	adds	r3, r0, #1
 8014f66:	d102      	bne.n	8014f6e <_lseek_r+0x1e>
 8014f68:	682b      	ldr	r3, [r5, #0]
 8014f6a:	b103      	cbz	r3, 8014f6e <_lseek_r+0x1e>
 8014f6c:	6023      	str	r3, [r4, #0]
 8014f6e:	bd38      	pop	{r3, r4, r5, pc}
 8014f70:	24003734 	.word	0x24003734

08014f74 <__swhatbuf_r>:
 8014f74:	b570      	push	{r4, r5, r6, lr}
 8014f76:	460e      	mov	r6, r1
 8014f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f7c:	2900      	cmp	r1, #0
 8014f7e:	b096      	sub	sp, #88	; 0x58
 8014f80:	4614      	mov	r4, r2
 8014f82:	461d      	mov	r5, r3
 8014f84:	da08      	bge.n	8014f98 <__swhatbuf_r+0x24>
 8014f86:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014f8a:	2200      	movs	r2, #0
 8014f8c:	602a      	str	r2, [r5, #0]
 8014f8e:	061a      	lsls	r2, r3, #24
 8014f90:	d410      	bmi.n	8014fb4 <__swhatbuf_r+0x40>
 8014f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014f96:	e00e      	b.n	8014fb6 <__swhatbuf_r+0x42>
 8014f98:	466a      	mov	r2, sp
 8014f9a:	f000 f8b3 	bl	8015104 <_fstat_r>
 8014f9e:	2800      	cmp	r0, #0
 8014fa0:	dbf1      	blt.n	8014f86 <__swhatbuf_r+0x12>
 8014fa2:	9a01      	ldr	r2, [sp, #4]
 8014fa4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014fa8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014fac:	425a      	negs	r2, r3
 8014fae:	415a      	adcs	r2, r3
 8014fb0:	602a      	str	r2, [r5, #0]
 8014fb2:	e7ee      	b.n	8014f92 <__swhatbuf_r+0x1e>
 8014fb4:	2340      	movs	r3, #64	; 0x40
 8014fb6:	2000      	movs	r0, #0
 8014fb8:	6023      	str	r3, [r4, #0]
 8014fba:	b016      	add	sp, #88	; 0x58
 8014fbc:	bd70      	pop	{r4, r5, r6, pc}
	...

08014fc0 <__smakebuf_r>:
 8014fc0:	898b      	ldrh	r3, [r1, #12]
 8014fc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014fc4:	079d      	lsls	r5, r3, #30
 8014fc6:	4606      	mov	r6, r0
 8014fc8:	460c      	mov	r4, r1
 8014fca:	d507      	bpl.n	8014fdc <__smakebuf_r+0x1c>
 8014fcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014fd0:	6023      	str	r3, [r4, #0]
 8014fd2:	6123      	str	r3, [r4, #16]
 8014fd4:	2301      	movs	r3, #1
 8014fd6:	6163      	str	r3, [r4, #20]
 8014fd8:	b002      	add	sp, #8
 8014fda:	bd70      	pop	{r4, r5, r6, pc}
 8014fdc:	ab01      	add	r3, sp, #4
 8014fde:	466a      	mov	r2, sp
 8014fe0:	f7ff ffc8 	bl	8014f74 <__swhatbuf_r>
 8014fe4:	9900      	ldr	r1, [sp, #0]
 8014fe6:	4605      	mov	r5, r0
 8014fe8:	4630      	mov	r0, r6
 8014fea:	f7ff fa4f 	bl	801448c <_malloc_r>
 8014fee:	b948      	cbnz	r0, 8015004 <__smakebuf_r+0x44>
 8014ff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ff4:	059a      	lsls	r2, r3, #22
 8014ff6:	d4ef      	bmi.n	8014fd8 <__smakebuf_r+0x18>
 8014ff8:	f023 0303 	bic.w	r3, r3, #3
 8014ffc:	f043 0302 	orr.w	r3, r3, #2
 8015000:	81a3      	strh	r3, [r4, #12]
 8015002:	e7e3      	b.n	8014fcc <__smakebuf_r+0xc>
 8015004:	4b0d      	ldr	r3, [pc, #52]	; (801503c <__smakebuf_r+0x7c>)
 8015006:	62b3      	str	r3, [r6, #40]	; 0x28
 8015008:	89a3      	ldrh	r3, [r4, #12]
 801500a:	6020      	str	r0, [r4, #0]
 801500c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015010:	81a3      	strh	r3, [r4, #12]
 8015012:	9b00      	ldr	r3, [sp, #0]
 8015014:	6163      	str	r3, [r4, #20]
 8015016:	9b01      	ldr	r3, [sp, #4]
 8015018:	6120      	str	r0, [r4, #16]
 801501a:	b15b      	cbz	r3, 8015034 <__smakebuf_r+0x74>
 801501c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015020:	4630      	mov	r0, r6
 8015022:	f000 f881 	bl	8015128 <_isatty_r>
 8015026:	b128      	cbz	r0, 8015034 <__smakebuf_r+0x74>
 8015028:	89a3      	ldrh	r3, [r4, #12]
 801502a:	f023 0303 	bic.w	r3, r3, #3
 801502e:	f043 0301 	orr.w	r3, r3, #1
 8015032:	81a3      	strh	r3, [r4, #12]
 8015034:	89a0      	ldrh	r0, [r4, #12]
 8015036:	4305      	orrs	r5, r0
 8015038:	81a5      	strh	r5, [r4, #12]
 801503a:	e7cd      	b.n	8014fd8 <__smakebuf_r+0x18>
 801503c:	080141d9 	.word	0x080141d9

08015040 <__malloc_lock>:
 8015040:	4801      	ldr	r0, [pc, #4]	; (8015048 <__malloc_lock+0x8>)
 8015042:	f7ff b9ad 	b.w	80143a0 <__retarget_lock_acquire_recursive>
 8015046:	bf00      	nop
 8015048:	24003738 	.word	0x24003738

0801504c <__malloc_unlock>:
 801504c:	4801      	ldr	r0, [pc, #4]	; (8015054 <__malloc_unlock+0x8>)
 801504e:	f7ff b9a8 	b.w	80143a2 <__retarget_lock_release_recursive>
 8015052:	bf00      	nop
 8015054:	24003738 	.word	0x24003738

08015058 <_read_r>:
 8015058:	b538      	push	{r3, r4, r5, lr}
 801505a:	4d07      	ldr	r5, [pc, #28]	; (8015078 <_read_r+0x20>)
 801505c:	4604      	mov	r4, r0
 801505e:	4608      	mov	r0, r1
 8015060:	4611      	mov	r1, r2
 8015062:	2200      	movs	r2, #0
 8015064:	602a      	str	r2, [r5, #0]
 8015066:	461a      	mov	r2, r3
 8015068:	f7eb ffe4 	bl	8001034 <_read>
 801506c:	1c43      	adds	r3, r0, #1
 801506e:	d102      	bne.n	8015076 <_read_r+0x1e>
 8015070:	682b      	ldr	r3, [r5, #0]
 8015072:	b103      	cbz	r3, 8015076 <_read_r+0x1e>
 8015074:	6023      	str	r3, [r4, #0]
 8015076:	bd38      	pop	{r3, r4, r5, pc}
 8015078:	24003734 	.word	0x24003734

0801507c <_raise_r>:
 801507c:	291f      	cmp	r1, #31
 801507e:	b538      	push	{r3, r4, r5, lr}
 8015080:	4604      	mov	r4, r0
 8015082:	460d      	mov	r5, r1
 8015084:	d904      	bls.n	8015090 <_raise_r+0x14>
 8015086:	2316      	movs	r3, #22
 8015088:	6003      	str	r3, [r0, #0]
 801508a:	f04f 30ff 	mov.w	r0, #4294967295
 801508e:	bd38      	pop	{r3, r4, r5, pc}
 8015090:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015092:	b112      	cbz	r2, 801509a <_raise_r+0x1e>
 8015094:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015098:	b94b      	cbnz	r3, 80150ae <_raise_r+0x32>
 801509a:	4620      	mov	r0, r4
 801509c:	f000 f830 	bl	8015100 <_getpid_r>
 80150a0:	462a      	mov	r2, r5
 80150a2:	4601      	mov	r1, r0
 80150a4:	4620      	mov	r0, r4
 80150a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80150aa:	f000 b817 	b.w	80150dc <_kill_r>
 80150ae:	2b01      	cmp	r3, #1
 80150b0:	d00a      	beq.n	80150c8 <_raise_r+0x4c>
 80150b2:	1c59      	adds	r1, r3, #1
 80150b4:	d103      	bne.n	80150be <_raise_r+0x42>
 80150b6:	2316      	movs	r3, #22
 80150b8:	6003      	str	r3, [r0, #0]
 80150ba:	2001      	movs	r0, #1
 80150bc:	e7e7      	b.n	801508e <_raise_r+0x12>
 80150be:	2400      	movs	r4, #0
 80150c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80150c4:	4628      	mov	r0, r5
 80150c6:	4798      	blx	r3
 80150c8:	2000      	movs	r0, #0
 80150ca:	e7e0      	b.n	801508e <_raise_r+0x12>

080150cc <raise>:
 80150cc:	4b02      	ldr	r3, [pc, #8]	; (80150d8 <raise+0xc>)
 80150ce:	4601      	mov	r1, r0
 80150d0:	6818      	ldr	r0, [r3, #0]
 80150d2:	f7ff bfd3 	b.w	801507c <_raise_r>
 80150d6:	bf00      	nop
 80150d8:	24000030 	.word	0x24000030

080150dc <_kill_r>:
 80150dc:	b538      	push	{r3, r4, r5, lr}
 80150de:	4d07      	ldr	r5, [pc, #28]	; (80150fc <_kill_r+0x20>)
 80150e0:	2300      	movs	r3, #0
 80150e2:	4604      	mov	r4, r0
 80150e4:	4608      	mov	r0, r1
 80150e6:	4611      	mov	r1, r2
 80150e8:	602b      	str	r3, [r5, #0]
 80150ea:	f7eb ff87 	bl	8000ffc <_kill>
 80150ee:	1c43      	adds	r3, r0, #1
 80150f0:	d102      	bne.n	80150f8 <_kill_r+0x1c>
 80150f2:	682b      	ldr	r3, [r5, #0]
 80150f4:	b103      	cbz	r3, 80150f8 <_kill_r+0x1c>
 80150f6:	6023      	str	r3, [r4, #0]
 80150f8:	bd38      	pop	{r3, r4, r5, pc}
 80150fa:	bf00      	nop
 80150fc:	24003734 	.word	0x24003734

08015100 <_getpid_r>:
 8015100:	f7eb bf74 	b.w	8000fec <_getpid>

08015104 <_fstat_r>:
 8015104:	b538      	push	{r3, r4, r5, lr}
 8015106:	4d07      	ldr	r5, [pc, #28]	; (8015124 <_fstat_r+0x20>)
 8015108:	2300      	movs	r3, #0
 801510a:	4604      	mov	r4, r0
 801510c:	4608      	mov	r0, r1
 801510e:	4611      	mov	r1, r2
 8015110:	602b      	str	r3, [r5, #0]
 8015112:	f7eb ffd4 	bl	80010be <_fstat>
 8015116:	1c43      	adds	r3, r0, #1
 8015118:	d102      	bne.n	8015120 <_fstat_r+0x1c>
 801511a:	682b      	ldr	r3, [r5, #0]
 801511c:	b103      	cbz	r3, 8015120 <_fstat_r+0x1c>
 801511e:	6023      	str	r3, [r4, #0]
 8015120:	bd38      	pop	{r3, r4, r5, pc}
 8015122:	bf00      	nop
 8015124:	24003734 	.word	0x24003734

08015128 <_isatty_r>:
 8015128:	b538      	push	{r3, r4, r5, lr}
 801512a:	4d06      	ldr	r5, [pc, #24]	; (8015144 <_isatty_r+0x1c>)
 801512c:	2300      	movs	r3, #0
 801512e:	4604      	mov	r4, r0
 8015130:	4608      	mov	r0, r1
 8015132:	602b      	str	r3, [r5, #0]
 8015134:	f7eb ffd3 	bl	80010de <_isatty>
 8015138:	1c43      	adds	r3, r0, #1
 801513a:	d102      	bne.n	8015142 <_isatty_r+0x1a>
 801513c:	682b      	ldr	r3, [r5, #0]
 801513e:	b103      	cbz	r3, 8015142 <_isatty_r+0x1a>
 8015140:	6023      	str	r3, [r4, #0]
 8015142:	bd38      	pop	{r3, r4, r5, pc}
 8015144:	24003734 	.word	0x24003734

08015148 <_init>:
 8015148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801514a:	bf00      	nop
 801514c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801514e:	bc08      	pop	{r3}
 8015150:	469e      	mov	lr, r3
 8015152:	4770      	bx	lr

08015154 <_fini>:
 8015154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015156:	bf00      	nop
 8015158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801515a:	bc08      	pop	{r3}
 801515c:	469e      	mov	lr, r3
 801515e:	4770      	bx	lr
